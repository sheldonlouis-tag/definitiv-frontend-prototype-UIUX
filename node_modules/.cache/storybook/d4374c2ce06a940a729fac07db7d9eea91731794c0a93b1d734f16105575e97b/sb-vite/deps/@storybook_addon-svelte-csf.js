import {
  storyNameToExportName,
  useStoriesExtractor,
  useStoryRenderer
} from "./chunk-MKD7OK4R.js";
import "./chunk-UTM3QVDF.js";
import "./chunk-6LD3WD6G.js";
import {
  add_locations,
  check_target,
  component,
  hmr,
  if_block,
  legacy_api,
  prop,
  rest_props,
  slot,
  snippet,
  spread_props
} from "./chunk-FRZCO2ZW.js";
import "./chunk-ZYTAZ2LT.js";
import {
  append,
  comment,
  from_html
} from "./chunk-OIZRCF3F.js";
import {
  FILENAME,
  HMR,
  add_svelte_meta,
  first_child,
  get,
  pop,
  push,
  set,
  sibling,
  strict_equals,
  tag,
  user_derived,
  user_effect
} from "./chunk-ITKELFPS.js";
import "./chunk-HXIGQYEZ.js";
import "./chunk-E62QTSXI.js";
import "./chunk-P6TGDP3C.js";
import "./chunk-PR4QN5HX.js";

// node_modules/@storybook/addon-svelte-csf/dist/constants.js
var SVELTE_CSF_TAG_PREFIX = "svelte-csf";
var SVELTE_CSF_V4_TAG = `${SVELTE_CSF_TAG_PREFIX}-v4`;
var SVELTE_CSF_V5_TAG = `${SVELTE_CSF_TAG_PREFIX}-v5`;
var STORYBOOK_INTERNAL_PREFIX = "$__";
var STORYBOOK_META_IDENTIFIER = `${STORYBOOK_INTERNAL_PREFIX}meta`;
var RUNTIME_STORIES_IDENTIFIER = `${STORYBOOK_INTERNAL_PREFIX}stories`;

// node_modules/@storybook/addon-svelte-csf/dist/runtime/Story.svelte
Story[FILENAME] = "node_modules/@storybook/addon-svelte-csf/dist/runtime/Story.svelte";
var root_7 = add_locations(from_html(` <!>`, 1), Story[FILENAME], []);
var root_12 = add_locations(from_html(` <!>`, 1), Story[FILENAME], []);
var root_13 = add_locations(from_html(`<p>No story rendered. See <a href="https://github.com/storybookjs/addon-svelte-csf#defining-stories" target="_blank">the docs</a> on how to define stories.</p>`), Story[FILENAME], [[158, 4, [[160, 6]]]]);
function Story($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Story);
  let asChild = prop($$props, "asChild", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "name",
      "exportName",
      "play",
      "template",
      "asChild"
    ],
    "restProps"
  );
  const exportName = $$props.exportName ?? storyNameToExportName($$props.name);
  let extractor = useStoriesExtractor();
  let renderer = useStoryRenderer();
  let isCurrentlyViewed = tag(user_derived(() => !extractor.isExtracting && strict_equals(renderer.currentStoryExportName, exportName)), "isCurrentlyViewed");
  if (extractor.isExtracting) {
    extractor.register({
      children: $$props.children,
      name: $$props.name,
      exportName,
      play: $$props.play,
      ...restProps
    });
  }
  function injectIntoPlayFunction(storyContext, playToInject) {
    if (playToInject && storyContext.playFunction) {
      storyContext.playFunction.__play = playToInject;
    }
  }
  function isSnippet(value) {
    return strict_equals(typeof value, "function");
  }
  user_effect(() => {
    if (get(isCurrentlyViewed)) {
      injectIntoPlayFunction(renderer.storyContext, $$props.play);
    }
  });
  const isLegacyStory = tag(user_derived(() => renderer.storyContext.tags?.some((tag2) => strict_equals(tag2, SVELTE_CSF_V4_TAG)) ?? false), "isLegacyStory");
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_6 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      {
        var consequent = ($$anchor3) => {
          var fragment_2 = comment();
          var node_2 = first_child(fragment_2);
          add_svelte_meta(() => snippet(node_2, () => $$props.template, () => renderer.args, () => renderer.storyContext), "render", Story, 142, 4);
          append($$anchor3, fragment_2);
        };
        var alternate_5 = ($$anchor3) => {
          var fragment_3 = comment();
          var node_3 = first_child(fragment_3);
          {
            var consequent_3 = ($$anchor4) => {
              var fragment_4 = comment();
              var node_4 = first_child(fragment_4);
              {
                var consequent_1 = ($$anchor5) => {
                  var fragment_5 = comment();
                  var node_5 = first_child(fragment_5);
                  add_svelte_meta(() => snippet(node_5, () => $$props.children), "render", Story, 145, 6);
                  append($$anchor5, fragment_5);
                };
                var alternate_1 = ($$anchor5) => {
                  var fragment_6 = comment();
                  var node_6 = first_child(fragment_6);
                  {
                    var consequent_2 = ($$anchor6) => {
                      var fragment_7 = root_7();
                      var text = first_child(fragment_7);
                      text.nodeValue = " ";
                      var node_7 = sibling(text);
                      add_svelte_meta(
                        () => component(node_7, () => renderer.storyContext.component, ($$anchor7, renderer_storyContext_component) => {
                          renderer_storyContext_component($$anchor7, spread_props(() => renderer.args, {
                            get children() {
                              return $$props.children;
                            }
                          }));
                        }),
                        "component",
                        Story,
                        148,
                        6,
                        { componentTag: "renderer.storyContext.component" }
                      );
                      append($$anchor6, fragment_7);
                    };
                    var alternate = ($$anchor6) => {
                      var fragment_8 = comment();
                      var node_8 = first_child(fragment_8);
                      add_svelte_meta(() => snippet(node_8, () => $$props.children), "render", Story, 150, 6);
                      append($$anchor6, fragment_8);
                    };
                    add_svelte_meta(
                      () => if_block(
                        node_6,
                        ($$render) => {
                          if (renderer.storyContext.component) $$render(consequent_2);
                          else $$render(alternate, false);
                        },
                        true
                      ),
                      "if",
                      Story,
                      146,
                      4
                    );
                  }
                  append($$anchor5, fragment_6);
                };
                add_svelte_meta(
                  () => if_block(node_4, ($$render) => {
                    if (asChild() || get(isLegacyStory)) $$render(consequent_1);
                    else $$render(alternate_1, false);
                  }),
                  "if",
                  Story,
                  144,
                  4
                );
              }
              append($$anchor4, fragment_4);
            };
            var alternate_4 = ($$anchor4) => {
              var fragment_9 = comment();
              var node_9 = first_child(fragment_9);
              {
                var consequent_4 = ($$anchor5) => {
                  var fragment_10 = comment();
                  var node_10 = first_child(fragment_10);
                  add_svelte_meta(() => snippet(node_10, () => renderer.metaRenderSnippet, () => renderer.args, () => renderer.storyContext), "render", Story, 153, 4);
                  append($$anchor5, fragment_10);
                };
                var alternate_3 = ($$anchor5) => {
                  var fragment_11 = comment();
                  var node_11 = first_child(fragment_11);
                  {
                    var consequent_5 = ($$anchor6) => {
                      var fragment_12 = root_12();
                      var text_1 = first_child(fragment_12);
                      text_1.nodeValue = " ";
                      var node_12 = sibling(text_1);
                      add_svelte_meta(
                        () => component(node_12, () => renderer.storyContext.component, ($$anchor7, renderer_storyContext_component_1) => {
                          renderer_storyContext_component_1($$anchor7, spread_props(() => renderer.args));
                        }),
                        "component",
                        Story,
                        156,
                        4,
                        { componentTag: "renderer.storyContext.component" }
                      );
                      append($$anchor6, fragment_12);
                    };
                    var alternate_2 = ($$anchor6) => {
                      var p = root_13();
                      append($$anchor6, p);
                    };
                    add_svelte_meta(
                      () => if_block(
                        node_11,
                        ($$render) => {
                          if (renderer.storyContext.component) $$render(consequent_5);
                          else $$render(alternate_2, false);
                        },
                        true
                      ),
                      "if",
                      Story,
                      154,
                      2
                    );
                  }
                  append($$anchor5, fragment_11);
                };
                add_svelte_meta(
                  () => if_block(
                    node_9,
                    ($$render) => {
                      if (renderer.metaRenderSnippet) $$render(consequent_4);
                      else $$render(alternate_3, false);
                    },
                    true
                  ),
                  "if",
                  Story,
                  152,
                  2
                );
              }
              append($$anchor4, fragment_9);
            };
            add_svelte_meta(
              () => if_block(
                node_3,
                ($$render) => {
                  if (isSnippet($$props.children)) $$render(consequent_3);
                  else $$render(alternate_4, false);
                },
                true
              ),
              "if",
              Story,
              143,
              2
            );
          }
          append($$anchor3, fragment_3);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if (isSnippet($$props.template)) $$render(consequent);
            else $$render(alternate_5, false);
          }),
          "if",
          Story,
          141,
          2
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (get(isCurrentlyViewed)) $$render(consequent_6);
      }),
      "if",
      Story,
      140,
      0
    );
  }
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Story = hmr(Story, () => Story[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Story[HMR].source;
    set(Story[HMR].source, module.default[HMR].original);
  });
}
var Story_default = Story;

// node_modules/@storybook/addon-svelte-csf/dist/runtime/LegacyMeta.svelte
LegacyMeta[FILENAME] = "node_modules/@storybook/addon-svelte-csf/dist/runtime/LegacyMeta.svelte";
function LegacyMeta($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, LegacyMeta);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LegacyMeta = hmr(LegacyMeta, () => LegacyMeta[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LegacyMeta[HMR].source;
    set(LegacyMeta[HMR].source, module.default[HMR].original);
  });
}
var LegacyMeta_default = LegacyMeta;

// node_modules/@storybook/addon-svelte-csf/dist/runtime/LegacyStory.svelte
LegacyStory[FILENAME] = "node_modules/@storybook/addon-svelte-csf/dist/runtime/LegacyStory.svelte";
function LegacyStory($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, LegacyStory);
  let args;
  let context;
  var fragment = comment();
  var node = first_child(fragment);
  slot(
    node,
    $$props,
    "default",
    {
      get context() {
        return context;
      },
      get args() {
        return args;
      }
    },
    null
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LegacyStory = hmr(LegacyStory, () => LegacyStory[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LegacyStory[HMR].source;
    set(LegacyStory[HMR].source, module.default[HMR].original);
  });
}
var LegacyStory_default = LegacyStory;

// node_modules/@storybook/addon-svelte-csf/dist/runtime/LegacyTemplate.svelte
LegacyTemplate[FILENAME] = "node_modules/@storybook/addon-svelte-csf/dist/runtime/LegacyTemplate.svelte";
function LegacyTemplate($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, LegacyTemplate);
  let id = prop($$props, "id", 8, "default");
  const silentWarningAboutId = id();
  let args;
  let context;
  var fragment = comment();
  var node = first_child(fragment);
  slot(
    node,
    $$props,
    "default",
    {
      get context() {
        return context;
      },
      get args() {
        return args;
      }
    },
    null
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LegacyTemplate = hmr(LegacyTemplate, () => LegacyTemplate[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = LegacyTemplate[HMR].source;
    set(LegacyTemplate[HMR].source, module.default[HMR].original);
  });
}
var LegacyTemplate_default = LegacyTemplate;

// node_modules/@storybook/addon-svelte-csf/dist/index.js
function defineMeta(_meta) {
  return {
    Story: Story_default
  };
}
export {
  LegacyMeta_default as Meta,
  LegacyStory_default as Story,
  LegacyTemplate_default as Template,
  defineMeta
};
//# sourceMappingURL=@storybook_addon-svelte-csf.js.map
