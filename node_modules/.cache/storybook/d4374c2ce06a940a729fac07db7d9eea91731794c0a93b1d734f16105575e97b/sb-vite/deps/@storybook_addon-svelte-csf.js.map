{
  "version": 3,
  "sources": ["../../../../../@storybook/addon-svelte-csf/dist/constants.js", "../../../../../@storybook/addon-svelte-csf/dist/runtime/Story.svelte", "../../../../../@storybook/addon-svelte-csf/dist/runtime/LegacyMeta.svelte", "../../../../../@storybook/addon-svelte-csf/dist/runtime/LegacyStory.svelte", "../../../../../@storybook/addon-svelte-csf/dist/runtime/LegacyTemplate.svelte", "../../../../../@storybook/addon-svelte-csf/dist/index.js"],
  "sourcesContent": ["export const SVELTE_CSF_TAG_PREFIX = 'svelte-csf';\nexport const SVELTE_CSF_V4_TAG = `${SVELTE_CSF_TAG_PREFIX}-v4`;\nexport const SVELTE_CSF_V5_TAG = `${SVELTE_CSF_TAG_PREFIX}-v5`;\nexport const STORYBOOK_INTERNAL_PREFIX = '$__';\nexport const STORYBOOK_META_IDENTIFIER = `${STORYBOOK_INTERNAL_PREFIX}meta`;\nexport const RUNTIME_STORIES_IDENTIFIER = `${STORYBOOK_INTERNAL_PREFIX}stories`;\n", "<script\n  lang=\"ts\"\n  generics=\"TArgs extends Record<string, any>, TCmp extends Cmp, TChildren extends Snippet = Snippet\"\n>\n  import type { Snippet } from 'svelte';\n\n  import { useStoriesExtractor } from './contexts/extractor.svelte.js';\n  import { useStoryRenderer } from './contexts/renderer.svelte.js';\n\n  import { storyNameToExportName } from '../utils/identifier-utils.js';\n  import type { Cmp, StoryAnnotations, StoryContext } from '../types.js';\n  import { SVELTE_CSF_V4_TAG } from '../constants.js';\n\n  type Props = Partial<StoryAnnotations<TArgs, TCmp>> & {\n    /**\n     * @deprecated\n     * Use `exportName` instead.\n     */\n    id?: never;\n    /**\n     * Name of the story. Can be omitted if `exportName` is provided.\n     */\n    name?: string;\n    /**\n     * exportName of the story.\n     * If not provided, it will be generated from the 'name', by converting it to a valid, PascalCased JS variable name.\n     * eg. 'My story!' -> 'MyStory'\n     *\n     * Use this prop to explicitly set the export name of the story. This is useful if you have multiple stories with the names\n     * that result in duplicate export names like \"My story\" and \"My story!\".\n     * It's also useful for explicitly defining the export that can be imported in MDX docs.\n     */\n    exportName?: string;\n    /**\n     * @deprecrated\n     * Use `tags={['autodocs']}` instead.\n     * @see {@link https://github.com/storybookjs/addon-svelte-csf/blob/main/MIGRATION.md#story-prop-autodocs-has-been-removed}\n     */\n    autodocs?: never;\n    /**\n     * @deprecated\n     * Use `parameters={{ docs: { source: { code: \"...\" } } }}` instead.\n     * @see {@link https://github.com/storybookjs/addon-svelte-csf/blob/next/MIGRATION.md#story-prop-source-has-been-removed}\n     */\n    source?: never;\n  } & (\n      | {\n          /**\n           * exportName of the story.\n           * If not provided, it will be generated from the 'name', by converting it to a valid, PascalCased JS variable name.\n           * eg. 'My story!' -> 'MyStory'\n           *\n           * Use this prop to explicitly set the export name of the story. This is useful if you have multiple stories with the names\n           * that result in duplicate export names like \"My story\" and \"My story!\".\n           * It's also useful for explicitly defining the export that can be imported in MDX docs.\n           */\n          exportName: string;\n        }\n      | {\n          /**\n           * Name of the story. Can be omitted if `exportName` is provided.\n           */\n          name: string;\n        }\n    ) &\n    (\n      | {\n          /**\n           * Children to pass to the story's component\n           * Or if `asChild` is true, the content to render in the story as **static** markup.\n           */\n          children?: TChildren;\n          /**\n           * Make the children the actual story content. This is useful when you want to create a **static story**.\n           */\n          asChild?: boolean;\n          template?: never;\n        }\n      | {\n          children?: never;\n          asChild?: never;\n          /**\n           * The content to render in the story with a snippet taking `args` and `storyContext` as parameters\n           *\n           * NOTE: Can be omitted if a default template is set with [`render`](https://github.com/storybookjs/addon-svelte-csf/blob/main/README.md#default-snippet)\n           */\n          template?: Snippet<[TArgs, StoryContext<TArgs>]>;\n        }\n    );\n  let {\n    children,\n    name,\n    exportName: exportNameProp,\n    play,\n    template,\n    asChild = false,\n    ...restProps\n  }: Props = $props();\n  const exportName = exportNameProp ?? storyNameToExportName(name!);\n\n  let extractor = useStoriesExtractor<TCmp>();\n  let renderer = useStoryRenderer<TCmp>();\n\n  let isCurrentlyViewed = $derived(\n    !extractor.isExtracting && renderer.currentStoryExportName === exportName\n  );\n\n  if (extractor.isExtracting) {\n    extractor.register({ children, name, exportName, play, ...restProps } as Parameters<\n      (typeof extractor)['register']\n    >[0]);\n  }\n\n  function injectIntoPlayFunction(\n    storyContext: typeof renderer.storyContext,\n    playToInject: typeof play\n  ) {\n    if (playToInject && storyContext.playFunction) {\n      storyContext.playFunction.__play = playToInject;\n    }\n  }\n\n  // TODO: Svelte maintainers is still discussing internally if they want to implement official typeguard function.\n  // Keep a pulse on this case and then this can be replaced.\n  function isSnippet<T extends unknown[]>(value: unknown): value is Snippet<T> {\n    return typeof value === 'function';\n  }\n\n  $effect(() => {\n    if (isCurrentlyViewed) {\n      injectIntoPlayFunction(renderer.storyContext, play);\n    }\n  });\n\n  const isLegacyStory = $derived(\n    renderer.storyContext.tags?.some((tag) => tag === SVELTE_CSF_V4_TAG) ?? false\n  );\n</script>\n\n{#if isCurrentlyViewed}\n  {#if isSnippet(template)}\n    {@render template(renderer.args as TArgs, renderer.storyContext as any)}\n  {:else if isSnippet(children)}\n    {#if asChild || isLegacyStory}\n      {@render children()}\n    {:else if renderer.storyContext.component}\n      {/* @ts-ignore */ null}\n      <renderer.storyContext.component {...renderer.args} {children} />\n    {:else}\n      {@render children()}\n    {/if}\n  {:else if renderer.metaRenderSnippet}\n    {@render renderer.metaRenderSnippet(renderer.args, renderer.storyContext)}\n  {:else if renderer.storyContext.component}\n    {/* @ts-ignore */ null}\n    <renderer.storyContext.component {...renderer.args} />\n  {:else}\n    <p>\n      No story rendered. See\n      <a href=\"https://github.com/storybookjs/addon-svelte-csf#defining-stories\" target=\"_blank\"\n        >the docs</a\n      > on how to define stories.\n    </p>\n  {/if}\n{/if}\n", "<!--\n@component\nThis component is to support deprecated legacy component - `Meta`,\nand this component functionality is just a \"mock\".\ne.g. to allow user still have typing experience.\nVite pre-transform hook does codemod where this component gets transformed into `defineMeta` and inserted into script module tag.\n\n@deprecated\n@see {@link https://github.com/storybookjs/addon-svelte-csf/blob/main/MIGRATION.md#meta-component-removed-in-favor-of-definemeta}\n-->\n<script lang=\"ts\">\n  import type { MetaProps, Slots } from '../legacy-types.d.ts';\n\n  type $$Props = MetaProps;\n</script>\n", "<!--\n@component\nThis component is to support deprecated legacy component - `Story`,\nand this component functionality is just a \"mock\".\nE.g. to allow user still have typing experience.\nVite pre-transform hook does codemod where this component gets transformed into new `Story` component destrucutred from `defineMeta`.\n\n@deprecated\n@see {@link https://github.com/storybookjs/addon-svelte-csf/blob/main/MIGRATION.md#export-meta-removed-in-favor-of-definemeta}\n-->\n\n<script lang=\"ts\">\n  import type { Slots, StoryProps } from '../legacy-types.d.ts';\n\n  type $$Props = StoryProps;\n  type $$Slots = Slots;\n\n  let args: $$Slots['default']['args'];\n  let context: $$Slots['default']['context'];\n</script>\n\n<slot {context} {args} />\n", "<!--\n@component\nThis component is to support deprecated legacy component - `Template`,\nand this component functionality is just a \"mock\".\nE.g. to allow user still have typing experience.\nVite pre-transform hook does codemod where this component gets transformed into Svelte v5 snippet block.\n\n@deprecated\n@see {@link https://github.com/storybookjs/addon-svelte-csf/blob/main/MIGRATION.md#template-component-removed}\n-->\n<script lang=\"ts\">\n  import type { Slots, TemplateProps } from '../legacy-types.d.ts';\n\n  export let id: string = 'default';\n  // silents the Svelte warning about 'id' being unused. It's only here for typing purposes.\n  const silentWarningAboutId = id;\n\n  type $$Props = TemplateProps;\n  type $$Slots = Slots;\n\n  let args: $$Slots['default']['args'];\n  let context: $$Slots['default']['context'];\n</script>\n\n<slot {context} {args} />\n", "/* eslint-disable @typescript-eslint/no-explicit-any */\nimport StoryComponent from './runtime/Story.svelte';\n// TODO: Remove in next major release\nimport LegacyMetaComponent from './runtime/LegacyMeta.svelte';\n// TODO: Remove in next major release\nimport LegacyStoryComponent from './runtime/LegacyStory.svelte';\n// TODO: Remove in next major release\nimport LegacyTemplateComponent from './runtime/LegacyTemplate.svelte';\nexport function defineMeta(_meta) {\n    return {\n        Story: StoryComponent,\n    };\n}\n// TODO: Remove in next major release\nexport { \n/**\n * @deprecated Use `defineMeta` instead\n * @see {@link https://github.com/storybookjs/addon-svelte-csf/blob/main/MIGRATION.md#meta-component-removed-in-favor-of-definemeta}\n */\nLegacyMetaComponent as Meta, \n/**\n * @deprecated Use `Story` component returned from `defineMeta` instead\n * @see {@link https://github.com/storybookjs/addon-svelte-csf/blob/main/MIGRATION.md#export-meta-removed-in-favor-of-definemeta}\n */\nLegacyStoryComponent as Story, \n/**\n * @deprecated Use snippets instead\n * @see {@link https://github.com/storybookjs/addon-svelte-csf/blob/main/MIGRATION.md#template-component-removed}\n */\nLegacyTemplateComponent as Template, };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAO,IAAM,wBAAwB;AAC9B,IAAM,oBAAoB,GAAG,qBAAqB;AAClD,IAAM,oBAAoB,GAAG,qBAAqB;AAClD,IAAM,4BAA4B;AAClC,IAAM,4BAA4B,GAAG,yBAAyB;AAC9D,IAAM,6BAA6B,GAAG,yBAAyB;;;;;;;kCCLtE;;;MA+FI,UAAO,KAAA,SAAA,WAAA,GAAG,KAAK,GACZ,YAAA;;;;;;;;;;;;;;;QAEC,aAAU,QAAA,cAAqB,sBAAqB,QAAA,IAAA;MAEtD,YAAY,oBAAmB;MAC/B,WAAW,iBAAgB;MAE3B,oBAAiB,IAAA,aAAA,MAAA,CAClB,UAAU,gBAAY,cAAI,SAAS,wBAA2B,UAAA,CAAA,GAAA,mBAAA;MAG7D,UAAU,cAAc;AAC1B,cAAU,SAAQ;MAAG,UAAQ,QAAA;MAAE,MAAI,QAAA;MAAE;MAAY,MAAI,QAAA;SAAK;;EAG5D;WAES,uBACP,cACA,cACA;QACI,gBAAgB,aAAa,cAAc;AAC7C,mBAAa,aAAa,SAAS;IACrC;EACF;WAIS,UAA+B,OAAqC;gCAC7D,OAAU,UAAU;EACpC;AAEA,EAAA,YAAO,MAAO;YACR,iBAAiB,GAAE;AACrB,6BAAuB,SAAS,cAAY,QAAA,IAAA;IAC9C;EACF,CAAC;QAEK,gBAAa,IAAA,aAAA,MACjB,SAAS,aAAa,MAAM,KAAI,CAAEA,SAAG,cAAKA,MAAQ,iBAAiB,CAAA,KAAK,KAAA,GAAA,eAAA;;;;;;;;;;;8EAMtD,SAAS,MAAI,MAAW,SAAS,YAAY,GAAA,UAAA,OAAA,KAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;wFAMxB,SAAS,MAAI;;;;;;;;;;;;;;;;;;;;;;;;8BAF1C,SAAS,aAAa,UAAS,UAAA,YAAA;8BAAA,UAAA,WAAA,KAAA;;;;;;;;;;;;;;wBAFpC,QAAO,KAAA,IAAI,aAAa,EAAA,UAAA,YAAA;wBAAA,UAAA,aAAA,KAAA;;;;;;;;;;;;;;;;;+DASpB,SAAS,mBAAiB,MAAC,SAAS,MAAI,MAAE,SAAS,YAAY,GAAA,UAAA,OAAA,KAAA,CAAA;;;;;;;;;;;;;;0FAGnC,SAAS,IAAI,CAAA;;;;;;;;;;;;;;;;;;8BAF1C,SAAS,aAAa,UAAS,UAAA,YAAA;8BAAA,UAAA,aAAA,KAAA;;;;;;;;;;;;;;;;0BAF/B,SAAS,kBAAiB,UAAA,YAAA;0BAAA,UAAA,aAAA,KAAA;;;;;;;;;;;;;;;;sBAT1B,UAAS,QAAA,QAAA,EAAA,UAAA,YAAA;sBAAA,UAAA,aAAA,KAAA;;;;;;;;;;;;;;gBAFd,UAAS,QAAA,QAAA,EAAA,UAAA,UAAA;gBAAA,UAAA,aAAA,KAAA;;;;;;;;;;;;gBADX,iBAAiB,EAAA,UAAA,YAAA;;;;;;;;;;;;;;;;;;;;;;uCC3ItB;;;;;;;;;;;;;;;;wCCAA;;;MAiBM;MACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2CClBN;;;MAaa,KAAU,KAAA,SAAA,MAAA,GAAG,SAAS;QAE3B,uBAAuB,GAAE;MAK3B;MACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACbC,SAAS,WAAW,OAAO;AAC9B,SAAO;AAAA,IACH,OAAO;AAAA,EACX;AACJ;",
  "names": ["tag"]
}
