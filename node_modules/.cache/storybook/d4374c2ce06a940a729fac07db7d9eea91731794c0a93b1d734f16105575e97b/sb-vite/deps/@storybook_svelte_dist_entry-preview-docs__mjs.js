import "./chunk-GEPAX6R6.js";
import {
  Tn
} from "./chunk-OSCUPILM.js";
import {
  require_client_logger
} from "./chunk-LJWBQW54.js";
import "./chunk-LGCSI5EO.js";
import {
  require_preview_api
} from "./chunk-EA2IITB3.js";
import {
  __toESM
} from "./chunk-PR4QN5HX.js";

// node_modules/@storybook/svelte/dist/entry-preview-docs.mjs
var import_client_logger = __toESM(require_client_logger(), 1);
var import_preview_api = __toESM(require_preview_api(), 1);
var skipSourceRender = (context) => {
  let sourceParams = context?.parameters.docs?.source, isArgsStory = context?.parameters.__isArgsStory;
  return (context?.tags ?? []).some((tag) => tag.startsWith("svelte-csf")) ? true : sourceParams?.type === Tn.DYNAMIC ? false : !isArgsStory || sourceParams?.code || sourceParams?.type === Tn.CODE;
};
function toSvelteProperty(key, value, argTypes) {
  if (value == null) return null;
  let argType = argTypes[key];
  return argType && argType.defaultValue === value || argType && argType.action ? null : value === true ? key : typeof value == "string" ? `${key}=${JSON.stringify(value)}` : typeof value == "function" ? `${key}={<handler>}` : `${key}={${JSON.stringify(value)}}`;
}
function getComponentName(component) {
  if (component == null) return null;
  let { __docgen = {} } = component, { name } = __docgen;
  return name ? (name.endsWith(".svelte") && (name = name.substring(0, name.length - 7)), name) : component.name;
}
function generateSvelteSource(component, args, argTypes, slotProperty) {
  let name = getComponentName(component);
  if (!name) return null;
  let propsArray = Object.entries(args).filter(([k]) => k !== slotProperty).map(([k, v]) => toSvelteProperty(k, v, argTypes)).filter((p) => p), props = propsArray.join(" "), multiline = props.length > 50, slotValue = slotProperty ? args[slotProperty] : null, srcStart = multiline ? `<${name}
  ${propsArray.join(`
  `)}` : `<${name} ${props}`;
  return slotValue ? `${srcStart}>
    ${slotValue}
</${name}>` : `${srcStart}/>`;
}
function getWrapperProperties(component) {
  let { __docgen } = component || {};
  return __docgen ? __docgen.keywords?.find((kw) => kw.name === "wrapper") ? { wrapper: true, slotProperty: __docgen.data?.find((prop) => prop.keywords.find((kw) => kw.name === "slot"))?.name } : { wrapper: false } : { wrapper: false };
}
var sourceDecorator = (storyFn, context) => {
  let skip = skipSourceRender(context), story = storyFn(), source = (0, import_preview_api.useRef)(void 0);
  return (0, import_preview_api.useEffect)(() => {
    if (skip) return;
    let { parameters = {}, args = {}, component: ctxComponent } = context || {}, { Component: component } = context.originalStoryFn(args, context), { wrapper, slotProperty } = getWrapperProperties(component);
    wrapper && (parameters.component && (0, import_client_logger.deprecate)("parameters.component is deprecated. Using context.component instead."), component = ctxComponent);
    let generated = generateSvelteSource(component, args, context?.argTypes, slotProperty);
    generated && source.current !== generated && ((0, import_preview_api.emitTransformCode)(generated, context), source.current = generated);
  }), story;
};
var decorators = [sourceDecorator];
export {
  decorators
};
//# sourceMappingURL=@storybook_svelte_dist_entry-preview-docs__mjs.js.map
