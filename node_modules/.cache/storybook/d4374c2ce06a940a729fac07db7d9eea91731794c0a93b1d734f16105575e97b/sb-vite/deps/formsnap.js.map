{
  "version": 3,
  "sources": ["../../../../../formsnap/node_modules/svelte-toolbelt/dist/utils/is.js", "../../../../../formsnap/node_modules/svelte-toolbelt/dist/box/box.svelte.js", "../../../../../formsnap/node_modules/svelte-toolbelt/dist/utils/compose-handlers.js", "../../../../../formsnap/node_modules/svelte-toolbelt/dist/utils/strings.js", "../../../../../formsnap/node_modules/svelte-toolbelt/dist/utils/css-to-style-obj.js", "../../../../../formsnap/node_modules/svelte-toolbelt/dist/utils/execute-callbacks.js", "../../../../../formsnap/node_modules/svelte-toolbelt/dist/utils/style-to-css.js", "../../../../../formsnap/node_modules/svelte-toolbelt/dist/utils/style.js", "../../../../../formsnap/node_modules/svelte-toolbelt/dist/utils/merge-props.js", "../../../../../formsnap/node_modules/svelte-toolbelt/dist/utils/use-ref-by-id.svelte.js", "../../../../../formsnap/node_modules/svelte-toolbelt/dist/utils/use-on-change.svelte.js", "../../../../../formsnap/dist/internal/utils/errors.js", "../../../../../formsnap/dist/internal/utils/path.js", "../../../../../formsnap/dist/internal/utils/attributes.js", "../../../../../formsnap/dist/internal/utils/id.js", "../../../../../formsnap/dist/formsnap.svelte.js", "../../../../../formsnap/dist/components/description.svelte", "../../../../../formsnap/dist/components/field.svelte", "../../../../../formsnap/dist/components/control.svelte", "../../../../../formsnap/dist/components/label.svelte", "../../../../../formsnap/dist/components/field-errors.svelte", "../../../../../formsnap/dist/components/fieldset.svelte", "../../../../../formsnap/dist/components/legend.svelte", "../../../../../formsnap/dist/components/element-field.svelte"],
  "sourcesContent": ["export function isFunction(value) {\n    return typeof value === \"function\";\n}\nexport function isObject(value) {\n    return value !== null && typeof value === \"object\";\n}\nconst CLASS_VALUE_PRIMITIVE_TYPES = [\"string\", \"number\", \"bigint\", \"boolean\"];\nexport function isClassValue(value) {\n    // handle primitive types\n    if (value === null || value === undefined)\n        return true;\n    if (CLASS_VALUE_PRIMITIVE_TYPES.includes(typeof value))\n        return true;\n    // handle arrays (ClassArray)\n    if (Array.isArray(value))\n        return value.every((item) => isClassValue(item));\n    // handle objects (ClassDictionary)\n    if (typeof value === \"object\") {\n        // ensure it's a plain object and not some other object type\n        if (Object.getPrototypeOf(value) !== Object.prototype)\n            return false;\n        return true;\n    }\n    return false;\n}\n", "import { isFunction, isObject } from \"../utils/is.js\";\nconst BoxSymbol = Symbol(\"box\");\nconst isWritableSymbol = Symbol(\"is-writable\");\n/**\n * @returns Whether the value is a Box\n *\n * @see {@link https://runed.dev/docs/functions/box}\n */\nfunction isBox(value) {\n    return isObject(value) && BoxSymbol in value;\n}\n/**\n * @returns Whether the value is a WritableBox\n *\n * @see {@link https://runed.dev/docs/functions/box}\n */\nfunction isWritableBox(value) {\n    return box.isBox(value) && isWritableSymbol in value;\n}\nexport function box(initialValue) {\n    let current = $state(initialValue);\n    return {\n        [BoxSymbol]: true,\n        [isWritableSymbol]: true,\n        get current() {\n            return current;\n        },\n        set current(v) {\n            current = v;\n        }\n    };\n}\nfunction boxWith(getter, setter) {\n    const derived = $derived.by(getter);\n    if (setter) {\n        return {\n            [BoxSymbol]: true,\n            [isWritableSymbol]: true,\n            get current() {\n                return derived;\n            },\n            set current(v) {\n                setter(v);\n            }\n        };\n    }\n    return {\n        [BoxSymbol]: true,\n        get current() {\n            return getter();\n        }\n    };\n}\nfunction boxFrom(value) {\n    if (box.isBox(value))\n        return value;\n    if (isFunction(value))\n        return box.with(value);\n    return box(value);\n}\n/**\n * Function that gets an object of boxes, and returns an object of reactive values\n *\n * @example\n * const count = box(0)\n * const flat = box.flatten({ count, double: box.with(() => count.current) })\n * // type of flat is { count: number, readonly double: number }\n *\n * @see {@link https://runed.dev/docs/functions/box}\n */\nfunction boxFlatten(boxes) {\n    return Object.entries(boxes).reduce((acc, [key, b]) => {\n        if (!box.isBox(b)) {\n            return Object.assign(acc, { [key]: b });\n        }\n        if (box.isWritableBox(b)) {\n            Object.defineProperty(acc, key, {\n                get() {\n                    return b.current;\n                },\n                // eslint-disable-next-line ts/no-explicit-any\n                set(v) {\n                    b.current = v;\n                }\n            });\n        }\n        else {\n            Object.defineProperty(acc, key, {\n                get() {\n                    return b.current;\n                }\n            });\n        }\n        return acc;\n    }, {});\n}\n/**\n * Function that converts a box to a readonly box.\n *\n * @example\n * const count = box(0) // WritableBox<number>\n * const countReadonly = box.readonly(count) // ReadableBox<number>\n *\n * @see {@link https://runed.dev/docs/functions/box}\n */\nfunction toReadonlyBox(b) {\n    if (!box.isWritableBox(b))\n        return b;\n    return {\n        [BoxSymbol]: true,\n        get current() {\n            return b.current;\n        }\n    };\n}\nbox.from = boxFrom;\nbox.with = boxWith;\nbox.flatten = boxFlatten;\nbox.readonly = toReadonlyBox;\nbox.isBox = isBox;\nbox.isWritableBox = isWritableBox;\n", "/**\n * Composes event handlers into a single function that can be called with an event.\n * If the previous handler cancels the event using `event.preventDefault()`, the handlers\n * that follow will not be called.\n */\nexport function composeHandlers(...handlers) {\n    return function (e) {\n        for (const handler of handlers) {\n            if (!handler)\n                continue;\n            if (e.defaultPrevented)\n                return;\n            if (typeof handler === \"function\") {\n                handler.call(this, e);\n            }\n            else {\n                handler.current?.call(this, e);\n            }\n        }\n    };\n}\n", "const NUMBER_CHAR_RE = /\\d/;\nconst STR_SPLITTERS = [\"-\", \"_\", \"/\", \".\"];\nfunction isUppercase(char = \"\") {\n    if (NUMBER_CHAR_RE.test(char))\n        return undefined;\n    return char !== char.toLowerCase();\n}\nfunction splitByCase(str) {\n    const parts = [];\n    let buff = \"\";\n    let previousUpper;\n    let previousSplitter;\n    for (const char of str) {\n        // Splitter\n        const isSplitter = STR_SPLITTERS.includes(char);\n        if (isSplitter === true) {\n            parts.push(buff);\n            buff = \"\";\n            previousUpper = undefined;\n            continue;\n        }\n        const isUpper = isUppercase(char);\n        if (previousSplitter === false) {\n            // Case rising edge\n            if (previousUpper === false && isUpper === true) {\n                parts.push(buff);\n                buff = char;\n                previousUpper = isUpper;\n                continue;\n            }\n            // Case falling edge\n            if (previousUpper === true && isUpper === false && buff.length > 1) {\n                const lastChar = buff.at(-1);\n                parts.push(buff.slice(0, Math.max(0, buff.length - 1)));\n                buff = lastChar + char;\n                previousUpper = isUpper;\n                continue;\n            }\n        }\n        // Normal char\n        buff += char;\n        previousUpper = isUpper;\n        previousSplitter = isSplitter;\n    }\n    parts.push(buff);\n    return parts;\n}\nexport function pascalCase(str) {\n    if (!str)\n        return \"\";\n    return splitByCase(str)\n        .map((p) => upperFirst(p))\n        .join(\"\");\n}\nexport function camelCase(str) {\n    return lowerFirst(pascalCase(str || \"\"));\n}\nexport function kebabCase(str) {\n    return str\n        ? splitByCase(str)\n            .map((p) => p.toLowerCase())\n            .join(\"-\")\n        : \"\";\n}\nfunction upperFirst(str) {\n    return str ? str[0].toUpperCase() + str.slice(1) : \"\";\n}\nfunction lowerFirst(str) {\n    return str ? str[0].toLowerCase() + str.slice(1) : \"\";\n}\n", "import parse from \"style-to-object\";\nimport { camelCase, pascalCase } from \"./strings.js\";\nexport function cssToStyleObj(css) {\n    if (!css)\n        return {};\n    const styleObj = {};\n    function iterator(name, value) {\n        if (name.startsWith(\"-moz-\") ||\n            name.startsWith(\"-webkit-\") ||\n            name.startsWith(\"-ms-\") ||\n            name.startsWith(\"-o-\")) {\n            styleObj[pascalCase(name)] = value;\n            return;\n        }\n        if (name.startsWith(\"--\")) {\n            styleObj[name] = value;\n            return;\n        }\n        styleObj[camelCase(name)] = value;\n    }\n    parse(css, iterator);\n    return styleObj;\n}\n", "/**\n * Executes an array of callback functions with the same arguments.\n * @template T The types of the arguments that the callback functions take.\n * @param callbacks array of callback functions to execute.\n * @returns A new function that executes all of the original callback functions with the same arguments.\n */\nexport function executeCallbacks(...callbacks) {\n    return (...args) => {\n        for (const callback of callbacks) {\n            if (typeof callback === \"function\") {\n                callback(...args);\n            }\n        }\n    };\n}\n", "function createParser(matcher, replacer) {\n    const regex = RegExp(matcher, \"g\");\n    return (str) => {\n        // throw an error if not a string\n        if (typeof str !== \"string\") {\n            throw new TypeError(`expected an argument of type string, but got ${typeof str}`);\n        }\n        // if no match between string and matcher\n        if (!str.match(regex))\n            return str;\n        // executes the replacer function for each match\n        return str.replace(regex, replacer);\n    };\n}\nconst camelToKebab = createParser(/[A-Z]/, (match) => `-${match.toLowerCase()}`);\nexport function styleToCSS(styleObj) {\n    if (!styleObj || typeof styleObj !== \"object\" || Array.isArray(styleObj)) {\n        throw new TypeError(`expected an argument of type object, but got ${typeof styleObj}`);\n    }\n    return Object.keys(styleObj)\n        .map((property) => `${camelToKebab(property)}: ${styleObj[property]};`)\n        .join(\"\\n\");\n}\n", "import { styleToCSS } from \"./style-to-css.js\";\nexport function styleToString(style = {}) {\n    return styleToCSS(style).replace(\"\\n\", \" \");\n}\nexport const srOnlyStyles = {\n    position: \"absolute\",\n    width: \"1px\",\n    height: \"1px\",\n    padding: \"0\",\n    margin: \"-1px\",\n    overflow: \"hidden\",\n    clip: \"rect(0, 0, 0, 0)\",\n    whiteSpace: \"nowrap\",\n    borderWidth: \"0\",\n    transform: \"translateX(-100%)\"\n};\nexport const srOnlyStylesString = styleToString(srOnlyStyles);\n", "/**\n * Modified from https://github.com/adobe/react-spectrum/blob/main/packages/%40react-aria/utils/src/mergeProps.ts (see NOTICE.txt for source)\n */\nimport { clsx } from \"clsx\";\nimport { composeHandlers } from \"./compose-handlers.js\";\nimport { cssToStyleObj } from \"./css-to-style-obj.js\";\nimport { isClassValue } from \"./is.js\";\nimport { executeCallbacks } from \"./execute-callbacks.js\";\nimport { styleToString } from \"./style.js\";\nfunction isEventHandler(key) {\n    // we check if the 3rd character is uppercase to avoid merging our own\n    // custom callbacks like `onValueChange` and strictly merge native event handlers\n    return key.length > 2 && key.startsWith(\"on\") && key[2] === key[2]?.toLowerCase();\n}\n/**\n * Given a list of prop objects, merges them into a single object.\n * - Automatically composes event handlers (e.g. `onclick`, `oninput`, etc.)\n * - Chains regular functions with the same name so they are called in order\n * - Merges class strings with `clsx`\n * - Merges style objects and converts them to strings\n * - Handles a bug with Svelte where setting the `hidden` attribute to `false` doesn't remove it\n * - Overrides other values with the last one\n */\nexport function mergeProps(...args) {\n    const result = { ...args[0] };\n    for (let i = 1; i < args.length; i++) {\n        const props = args[i];\n        for (const key in props) {\n            const a = result[key];\n            const b = props[key];\n            const aIsFunction = typeof a === \"function\";\n            const bIsFunction = typeof b === \"function\";\n            // compose event handlers\n            if (aIsFunction && typeof bIsFunction && isEventHandler(key)) {\n                // handle merging of event handlers\n                const aHandler = a;\n                const bHandler = b;\n                result[key] = composeHandlers(aHandler, bHandler);\n            }\n            else if (aIsFunction && bIsFunction) {\n                // chain non-event handler functions\n                result[key] = executeCallbacks(a, b);\n            }\n            else if (key === \"class\") {\n                // handle merging acceptable class values from clsx\n                const aIsClassValue = isClassValue(a);\n                const bIsClassValue = isClassValue(b);\n                if (aIsClassValue && bIsClassValue) {\n                    result[key] = clsx(a, b);\n                }\n                else if (aIsClassValue) {\n                    result[key] = clsx(a);\n                }\n                else if (bIsClassValue) {\n                    result[key] = clsx(b);\n                }\n            }\n            else if (key === \"style\") {\n                const aIsObject = typeof a === \"object\";\n                const bIsObject = typeof b === \"object\";\n                const aIsString = typeof a === \"string\";\n                const bIsString = typeof b === \"string\";\n                if (aIsObject && bIsObject) {\n                    // both are style objects, merge them\n                    result[key] = { ...a, ...b };\n                }\n                else if (aIsObject && bIsString) {\n                    // a is style object, b is string, convert b to style object and merge\n                    const parsedStyle = cssToStyleObj(b);\n                    result[key] = { ...a, ...parsedStyle };\n                }\n                else if (aIsString && bIsObject) {\n                    // a is string, b is style object, convert a to style object and merge\n                    const parsedStyle = cssToStyleObj(a);\n                    result[key] = { ...parsedStyle, ...b };\n                }\n                else if (aIsString && bIsString) {\n                    // both are strings, convert both to objects and merge\n                    const parsedStyleA = cssToStyleObj(a);\n                    const parsedStyleB = cssToStyleObj(b);\n                    result[key] = { ...parsedStyleA, ...parsedStyleB };\n                }\n                else if (aIsObject) {\n                    result[key] = a;\n                }\n                else if (bIsObject) {\n                    result[key] = b;\n                }\n                else if (aIsString) {\n                    result[key] = a;\n                }\n                else if (bIsString) {\n                    result[key] = b;\n                }\n            }\n            else {\n                // override other values\n                result[key] = b !== undefined ? b : a;\n            }\n        }\n    }\n    // convert style object to string\n    if (typeof result.style === \"object\") {\n        result.style = styleToString(result.style).replaceAll(\"\\n\", \" \");\n    }\n    // handle weird svelte bug where `hidden` is not removed when set to `false`\n    if (result.hidden !== true) {\n        result.hidden = undefined;\n        delete result.hidden;\n    }\n    // handle weird svelte bug where `disabled` is not removed when set to `false`\n    if (result.disabled !== true) {\n        result.disabled = undefined;\n        delete result.disabled;\n    }\n    return result;\n}\n", "import { untrack } from \"svelte\";\n/**\n * Finds the node with that ID and sets it to the boxed node.\n * Reactive using `$effect` to ensure when the ID or condition changes,\n * an update is triggered and new node is found.\n */\nexport function useRefById({ id, ref, deps = () => true, onRefChange = () => { }, getRootNode = () => (typeof document !== \"undefined\" ? document : undefined) }) {\n    const dependencies = $derived.by(() => deps());\n    const rootNode = $derived.by(() => getRootNode());\n    $effect(() => {\n        // re-run when the ID changes.\n        id.current;\n        // re-run when the deps changes.\n        dependencies;\n        rootNode;\n        return untrack(() => {\n            const node = rootNode?.getElementById(id.current);\n            if (node) {\n                ref.current = node;\n            }\n            else {\n                ref.current = null;\n            }\n            onRefChange(ref.current);\n        });\n    });\n    $effect(() => {\n        return () => {\n            ref.current = null;\n            onRefChange(null);\n        };\n    });\n}\n", "import { untrack } from \"svelte\";\n/**\n * Simple helper function to sync a read-only dependency with writable state. This only syncs\n * in one direction, from the dependency to the state. If you need to sync both directions, you\n * should use the `box.with(() => dep, (v) => (dep = v))` pattern.\n *\n * @param getDep - A getter that returns the value that may change and whose new value will be\n * passed to the `onChange` function passed as the second argument.\n * @param onChange - A function that accepts a new value to react to or keep other state in sync\n * with the dependency.\n */\nexport function useOnChange(getDep, onChange) {\n    const dep = $derived(getDep());\n    $effect(() => {\n        dep;\n        untrack(() => onChange(dep));\n    });\n}\n", "/**\n * Extracts the error array from a `ValidationErrors` object.\n */\nexport function extractErrorArray(errors) {\n    if (Array.isArray(errors))\n        return [...errors];\n    if (typeof errors === \"object\" && \"_errors\" in errors) {\n        if (errors._errors !== undefined)\n            return [...errors._errors];\n    }\n    return [];\n}\n", "export function getValueAtPath(path, obj) {\n    const keys = path.split(/[[\\].]/).filter(Boolean);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let value = obj;\n    for (const key of keys) {\n        if (typeof value !== \"object\" || value === null) {\n            return undefined; // Handle cases where the path doesn't exist in the object\n        }\n        value = value[key];\n    }\n    return value;\n}\n", "/**\n * Retrieves the appropriate `aria-describedby` value for a form control\n * given the existence of a description and/or validation message.\n */\nexport function getAriaDescribedBy({ fieldErrorsId = undefined, descriptionId = undefined, errors, }) {\n    let describedBy = \"\";\n    if (descriptionId) {\n        describedBy += `${descriptionId} `;\n    }\n    if (errors.length && fieldErrorsId) {\n        describedBy += fieldErrorsId;\n    }\n    return describedBy ? describedBy.trim() : undefined;\n}\n/**\n * Retrieves the appropriate `aria-required` attribute value for a form\n * control given the constraints for the field.\n */\nexport function getAriaRequired(constraints) {\n    if (!(\"required\" in constraints))\n        return undefined;\n    return constraints.required ? \"true\" : undefined;\n}\n/**\n * Retrieves the appropriate `aria-invalid` attribute value for a form\n * control given the current validation errors.\n */\nexport function getAriaInvalid(errors) {\n    return errors && errors.length ? \"true\" : undefined;\n}\n/**\n * Retrieves the appropriate `data-fs-error` value for an element\n * given the current validation errors.\n */\nexport function getDataFsError(errors) {\n    return errors && errors.length ? \"\" : undefined;\n}\n", "let count = 0;\n/**\n * Generates a unique ID based on a global counter.\n */\nexport function useId(prefix = \"formsnap\") {\n    count++;\n    return `${prefix}-${count}`;\n}\n", "import { box, useOnChange, useRefById, } from \"svelte-toolbelt\";\nimport { fromStore } from \"svelte/store\";\nimport { getContext, setContext } from \"svelte\";\nimport { extractErrorArray } from \"./internal/utils/errors.js\";\nimport { getValueAtPath } from \"./internal/utils/path.js\";\nimport { getAriaDescribedBy, getAriaInvalid, getAriaRequired, getDataFsError, } from \"./internal/utils/attributes.js\";\nimport { useId } from \"./internal/utils/id.js\";\nclass FormFieldState {\n    #name;\n    #formErrors;\n    #formConstraints;\n    #formTainted;\n    #formData;\n    form;\n    name = $derived.by(() => this.#name.current);\n    errors = $derived.by(() => extractErrorArray(getValueAtPath(this.#name.current, structuredClone(this.#formErrors.current))));\n    constraints = $derived.by(() => getValueAtPath(this.#name.current, structuredClone(this.#formConstraints.current)) ?? {});\n    tainted = $derived.by(() => this.#formTainted.current\n        ? getValueAtPath(this.#name.current, structuredClone(this.#formTainted.current)) ===\n            true\n        : false);\n    errorNode = $state(null);\n    descriptionNode = $state(null);\n    errorId = $state();\n    descriptionId = $state();\n    constructor(props) {\n        this.#name = props.name;\n        this.form = props.form.current;\n        this.#formErrors = fromStore(props.form.current.errors);\n        this.#formConstraints = fromStore(props.form.current.constraints);\n        this.#formTainted = fromStore(props.form.current.tainted);\n        this.#formData = fromStore(props.form.current.form);\n        $effect(() => {\n            if (this.errorNode && this.errorNode.id) {\n                this.errorId = this.errorNode.id;\n            }\n        });\n        $effect(() => {\n            if (this.descriptionNode && this.descriptionNode.id) {\n                this.descriptionId = this.descriptionNode.id;\n            }\n        });\n    }\n    snippetProps = $derived.by(() => ({\n        value: this.#formData.current[this.#name.current],\n        errors: this.errors,\n        tainted: this.tainted,\n        constraints: this.constraints,\n    }));\n}\nclass ElementFieldState {\n    #name;\n    #formErrors;\n    #formConstraints;\n    #formTainted;\n    #formData;\n    #field;\n    form;\n    name = $derived.by(() => {\n        const [path] = splitArrayPath(this.#name.current);\n        return path;\n    });\n    errors = $derived.by(() => extractErrorArray(getValueAtPath(this.#name.current, this.#formErrors.current)));\n    constraints = $derived.by(() => getValueAtPath(this.#name.current, this.#formConstraints.current) ?? {});\n    tainted = $derived.by(() => this.#formTainted.current\n        ? getValueAtPath(this.#name.current, this.#formTainted.current) === true\n        : false);\n    errorNode = $state(null);\n    descriptionNode = $state(null);\n    // fall back to the parent field's description node if one for\n    // this specific element doesn't exist.\n    derivedDescriptionNode = $derived.by(() => {\n        if (this.descriptionNode)\n            return this.descriptionNode;\n        if (this.#field.descriptionNode)\n            return this.#field.descriptionNode;\n        return null;\n    });\n    value = $derived.by(() => {\n        return getValueAtPath(this.#name.current, this.#formData.current);\n    });\n    errorId = $state();\n    descriptionId = $state();\n    constructor(props, field) {\n        this.#name = props.name;\n        this.form = props.form.current;\n        this.#formErrors = fromStore(props.form.current.errors);\n        this.#formConstraints = fromStore(props.form.current.constraints);\n        this.#formTainted = fromStore(props.form.current.tainted);\n        this.#formData = fromStore(props.form.current.form);\n        this.#field = field;\n        useOnChange(() => this.errorNode, (v) => {\n            if (v && v.id) {\n                this.errorId = v.id;\n            }\n        });\n        useOnChange(() => this.descriptionNode, (v) => {\n            if (v && v.id) {\n                this.descriptionId = v.id;\n            }\n        });\n    }\n    snippetProps = $derived.by(() => ({\n        value: this.#formData.current[this.#name.current],\n        errors: this.errors,\n        tainted: this.tainted,\n        constraints: \n        // @ts-expect-error - this type is wonky\n        this.#formConstraints.current[this.#name.current] ?? {},\n    }));\n}\nclass FieldErrorsState {\n    #ref;\n    #id;\n    field;\n    #errorAttr = $derived.by(() => getDataFsError(this.field.errors));\n    constructor(props, field) {\n        this.#ref = props.ref;\n        this.#id = props.id;\n        this.field = field;\n        useRefById({\n            id: this.#id,\n            ref: this.#ref,\n            onRefChange: (node) => {\n                this.field.errorNode = node;\n            },\n        });\n    }\n    snippetProps = $derived.by(() => ({\n        errors: this.field.errors,\n        errorProps: this.errorProps,\n    }));\n    fieldErrorsProps = $derived.by(() => ({\n        id: this.#id.current,\n        \"data-fs-error\": this.#errorAttr,\n        \"data-fs-field-errors\": \"\",\n        \"aria-live\": \"assertive\",\n    }));\n    errorProps = $derived.by(() => ({\n        \"data-fs-field-error\": \"\",\n        \"data-fs-error\": this.#errorAttr,\n    }));\n}\nclass DescriptionState {\n    #ref;\n    #id;\n    field;\n    constructor(props, field) {\n        this.#ref = props.ref;\n        this.#id = props.id;\n        this.field = field;\n        useRefById({\n            id: this.#id,\n            ref: this.#ref,\n            onRefChange: (node) => {\n                this.field.descriptionNode = node;\n            },\n        });\n    }\n    props = $derived.by(() => ({\n        id: this.#id.current,\n        \"data-fs-error\": getDataFsError(this.field.errors),\n        \"data-fs-description\": \"\",\n    }));\n}\nclass ControlState {\n    #id;\n    field;\n    labelId = box(useId());\n    id = $state(useId());\n    constructor(props, field) {\n        this.#id = props.id;\n        this.field = field;\n        useOnChange(() => this.#id.current, (v) => {\n            this.id = v;\n        });\n    }\n    props = $derived.by(() => ({\n        id: this.id,\n        name: this.field.name,\n        \"data-fs-error\": getDataFsError(this.field.errors),\n        \"aria-describedby\": getAriaDescribedBy({\n            fieldErrorsId: this.field.errorId,\n            descriptionId: this.field.descriptionId,\n            errors: this.field.errors,\n        }),\n        \"aria-invalid\": getAriaInvalid(this.field.errors),\n        \"aria-required\": getAriaRequired(this.field.constraints),\n        \"data-fs-control\": \"\",\n    }));\n    labelProps = $derived.by(() => ({\n        id: this.labelId.current,\n        \"data-fs-label\": \"\",\n        \"data-fs-error\": getDataFsError(this.field.errors),\n        for: this.id,\n    }));\n}\nclass LabelState {\n    #ref;\n    #id;\n    control;\n    constructor(props, control) {\n        this.#ref = props.ref;\n        this.#id = props.id;\n        this.control = control;\n        this.control.labelId = this.#id;\n        useRefById({\n            id: this.#id,\n            ref: this.#ref,\n        });\n    }\n    get props() {\n        return this.control.labelProps;\n    }\n}\nclass LegendState {\n    #ref;\n    #id;\n    field;\n    constructor(props, field) {\n        this.#ref = props.ref;\n        this.#id = props.id;\n        this.field = field;\n        useRefById({\n            id: this.#id,\n            ref: this.#ref,\n        });\n    }\n    props = $derived.by(() => ({\n        id: this.#id.current,\n        \"data-fs-error\": getDataFsError(this.field.errors),\n        \"data-fs-legend\": \"\",\n    }));\n}\nconst FORM_FIELD_CTX = Symbol.for(\"formsnap.form-field\");\nconst FORM_CONTROL_CTX = Symbol.for(\"formsnap.form-control\");\nexport function useField(props) {\n    return setContext(FORM_FIELD_CTX, new FormFieldState(props));\n}\nexport function useElementField(props) {\n    const formField = getField();\n    return setContext(FORM_FIELD_CTX, new ElementFieldState(props, formField));\n}\nexport function getField() {\n    return getContext(FORM_FIELD_CTX);\n}\nexport function useFieldErrors(props) {\n    return new FieldErrorsState(props, getField());\n}\nexport function useDescription(props) {\n    return new DescriptionState(props, getField());\n}\nexport function useControl(props) {\n    return setContext(FORM_CONTROL_CTX, new ControlState(props, getField()));\n}\nexport function _getFormControl() {\n    return getContext(FORM_CONTROL_CTX);\n}\nexport function useLabel(props) {\n    return new LabelState(props, _getFormControl());\n}\nexport function useLegend(props) {\n    return new LegendState(props, getField());\n}\n// takes a string like \"urls[0]\" and returns [\"urls\", \"0\"]\n// so we can access the specific array index properties\n// since datatype: json is not supported with regular form\n// submission, this should be fine\nfunction splitArrayPath(name) {\n    const [path, index] = name.split(/[[\\]]/);\n    return [path, index];\n}\nexport function useFormField(props) {\n    const fieldState = getContext(FORM_FIELD_CTX);\n    const form = fieldState.form;\n    const errorsId = $derived(props.errorsId ? props.errorsId() : undefined);\n    const descriptionId = $derived(props.descriptionId ? props.descriptionId() : undefined);\n    useOnChange(() => errorsId, (v) => {\n        if (v) {\n            fieldState.errorId = v;\n        }\n    });\n    useOnChange(() => descriptionId, (v) => {\n        if (v) {\n            fieldState.descriptionId = v;\n        }\n    });\n    return {\n        form,\n        get name() {\n            return fieldState.name;\n        },\n        get errors() {\n            return fieldState.errors;\n        },\n        get constraints() {\n            return fieldState.constraints;\n        },\n        get tainted() {\n            return fieldState.tainted;\n        },\n        get errorsId() {\n            return fieldState.errorId;\n        },\n        get descriptionId() {\n            return fieldState.descriptionId;\n        },\n    };\n}\nexport function useFormControl(props) {\n    const controlState = getContext(FORM_CONTROL_CTX);\n    const id = $derived(props.id ? props.id() : undefined);\n    useOnChange(() => id, (v) => {\n        if (v) {\n            controlState.id = v;\n        }\n    });\n    return {\n        get id() {\n            return controlState.id;\n        },\n        get labelProps() {\n            return controlState.labelProps;\n        },\n        get props() {\n            return controlState.props;\n        },\n    };\n}\n/**\n * Use `useFormControl` instead.\n * @deprecated\n */\nexport const getFormControl = useFormControl;\n/**\n * Use `useFormField` instead.\n * @deprecated\n */\nexport const getFormField = useFormField;\n", "<script lang=\"ts\">\n\timport { box, mergeProps } from \"svelte-toolbelt\";\n\timport type { DescriptionProps } from \"./types.js\";\n\timport { useId } from \"../internal/utils/index.js\";\n\timport { useDescription } from \"../formsnap.svelte.js\";\n\n\tlet {\n\t\tid = useId(),\n\t\tref = $bindable(null),\n\t\tchildren,\n\t\tchild,\n\t\t...restProps\n\t}: DescriptionProps = $props();\n\n\tconst descriptionState = useDescription({\n\t\tid: box.with(() => id),\n\t\tref: box.with(\n\t\t\t() => ref,\n\t\t\t(v) => (ref = v)\n\t\t),\n\t});\n\n\tconst mergedProps = $derived(mergeProps(restProps, descriptionState.props));\n</script>\n\n<!--\n@component\n## Description\nA component that provides additional context for a field and is associated with the control using the `aria-describedby` attribute.\n\n- [Description Documentation](https://formsnap.dev/docs/components/description)\n-->\n\n{#if child}\n\t{@render child({ props: mergedProps })}\n{:else}\n\t<div {...mergedProps}>\n\t\t{@render children?.()}\n\t</div>\n{/if}\n", "<script lang=\"ts\" module>\n\timport type { FormPath as _FormPath } from \"sveltekit-superforms\";\n\ttype T = unknown;\n\ttype U = unknown;\n</script>\n\n<script lang=\"ts\" generics=\"T extends Record<string, unknown>, U extends _FormPath<T>\">\n\timport { box } from \"svelte-toolbelt\";\n\timport type { FieldProps } from \"./types.js\";\n\timport { useField } from \"../formsnap.svelte.js\";\n\n\tlet { form, name, children }: FieldProps<T, U> = $props();\n\n\tconst fieldState = useField({\n\t\tform: box.with(() => form),\n\t\tname: box.with(() => name),\n\t});\n</script>\n\n<!--\n@component\n## Field\nA component that provides the necessary context for a form field.\n\n- [Field Documentation](https://formsnap.dev/docs/components/field)\n\n### Snippet Props\n- `value` - The value of the field.\n- `errors` - The errors of the field.\n- `tainted` - The tainted state of the field.\n- `constraints` - The constraints of the field.\n\n@param {SuperForm} form - The form object.\n@param {FormPath<T>} name - The name of the field.\n-->\n\n{@render children?.(fieldState.snippetProps)}\n", "<script lang=\"ts\">\n\timport { box } from \"svelte-toolbelt\";\n\timport type { ControlProps } from \"./types.js\";\n\timport { useId } from \"../internal/utils/index.js\";\n\timport { useControl } from \"../formsnap.svelte.js\";\n\n\tlet { id = useId(), children }: ControlProps = $props();\n\n\tconst controlState = useControl({\n\t\tid: box.with(() => id),\n\t});\n</script>\n\n<!--\n@component\n## Control\nAssociates a [Label](https://formsnap.dev/docs/components/label) with and provides necessary attributes for a form control.\n\n- [Control Documentation](https://formsnap.dev/docs/components/label)\n\n@example\n```svelte\n<Control>\n  {#snippet children({ props })}\n\t<Label>Name</Label>\n\t<input type=\"text\" {...props} bind:value={$formData.name} />\n   {/snippet}\n</Control>\n```\n\n### Snippet Props\n- `props` - A spreadable object of attributes that must be applied to the form control element.\n-->\n{@render children?.({ props: controlState.props })}\n", "<script lang=\"ts\">\n\timport { box, mergeProps } from \"svelte-toolbelt\";\n\timport type { LabelProps } from \"./types.js\";\n\timport { useId } from \"../internal/utils/id.js\";\n\timport { useLabel } from \"../formsnap.svelte.js\";\n\n\tlet {\n\t\tid = useId(),\n\t\tref = $bindable(null),\n\t\tchildren,\n\t\tchild,\n\t\t...restProps\n\t}: LabelProps = $props();\n\n\tconst labelState = useLabel({\n\t\tid: box.with(() => id),\n\t\tref: box.with(\n\t\t\t() => ref,\n\t\t\t(v) => (ref = v)\n\t\t),\n\t});\n\n\tconst mergedProps = $derived(mergeProps(restProps, labelState.props));\n</script>\n\n<!--\n@component\n## Label\nA component that renders a label element associated with a form control, and must be used within a [Control](https://formsnap.dev/docs/components/control) component.\n\n- [Label Documentation](https://formsnap.dev/docs/components/label)\n\n@example\n```svelte\n<Control>\n\t{#snippet children({ props })}\n\t\t<Label>First Name</Label>\n\t\t<input type=\"text\" name=\"first_name\" {...props} bind:value={$formData.first_name} />\n\t{/snippet}\n</Control>\n```\n\n### `child` Snippet Props\n- `props` - A spreadable object of attributes for the label element\n\n@param {boolean} [asChild=false] - Whether to opt out of rendering the label element. [[asChild Docs](https://formsnap.dev/docs/composition/aschild)]\n-->\n{#if child}\n\t{@render child({ props: mergedProps })}\n{:else}\n\t<label {...mergedProps}>\n\t\t{@render children?.()}\n\t</label>\n{/if}\n", "<script lang=\"ts\">\n\timport { box, mergeProps } from \"svelte-toolbelt\";\n\timport type { FieldErrorsProps } from \"./types.js\";\n\timport { useId } from \"../internal/utils/index.js\";\n\timport { useFieldErrors } from \"../formsnap.svelte.js\";\n\n\tlet {\n\t\tid = useId(),\n\t\tref = $bindable(null),\n\t\tchildren,\n\t\tchild,\n\t\t...restProps\n\t}: FieldErrorsProps = $props();\n\n\tconst fieldErrorsState = useFieldErrors({\n\t\tid: box.with(() => id),\n\t\tref: box.with(\n\t\t\t() => ref,\n\t\t\t(v) => (ref = v)\n\t\t),\n\t});\n\n\tconst mergedProps = $derived(mergeProps(restProps, fieldErrorsState.fieldErrorsProps));\n</script>\n\n<!--\n@component\n## FieldErrors\nA component that renders the container for validation errors for a [Field](https://formsnap.dev/docs/components/field), [Fieldset](https://formsnap.dev/docs/components/fieldset), or [ElementField](https://formsnap.dev/docs/components/element-field).\n\n- [FieldErrors Documentation](https://formsnap.dev/docs/components/field-errors)\n\n### Snippet Props\n- `errors` - An array of errors for the associated field.\n- `fieldErrorsAttrs` - A spreadable object of attributes for the container element if `child` snippet is used.\n- `errorAttrs` - A spreadable object of attributes for the individual error elements if `child` snippet is used.\n\n@param {string} [id] - The id of the field errors container.\n-->\n{#if child}\n\t{@render child({\n\t\tprops: mergedProps,\n\t\t...fieldErrorsState.snippetProps,\n\t})}\n{:else}\n\t<div {...mergedProps}>\n\t\t{#if children}\n\t\t\t{@render children(fieldErrorsState.snippetProps)}\n\t\t{:else}\n\t\t\t{#each fieldErrorsState.field.errors as error}\n\t\t\t\t<div {...fieldErrorsState.errorProps}>{error}</div>\n\t\t\t{/each}\n\t\t{/if}\n\t</div>\n{/if}\n", "<script lang=\"ts\" module>\n\timport type { FormPath as _FormPath } from \"sveltekit-superforms\";\n\ttype T = unknown;\n\ttype U = unknown;\n</script>\n\n<script lang=\"ts\" generics=\"T extends Record<string, unknown>, U extends _FormPath<T>\">\n\timport { box, mergeProps, useRefById } from \"svelte-toolbelt\";\n\timport type { FieldsetProps } from \"./types.js\";\n\timport Field from \"./field.svelte\";\n\timport { getDataFsError } from \"../internal/utils/attributes.js\";\n\timport { useId } from \"../internal/utils/id.js\";\n\n\tlet {\n\t\tid = useId(),\n\t\tref = $bindable(null),\n\t\tform,\n\t\tname,\n\t\tchild: childProp,\n\t\tchildren: childrenProp,\n\t\t...restProps\n\t}: FieldsetProps<T, U> = $props();\n\n\tuseRefById({\n\t\tid: box.with(() => id),\n\t\tref: box.with(\n\t\t\t() => ref,\n\t\t\t(v) => (ref = v)\n\t\t),\n\t});\n\n\tconst mergedProps = $derived(\n\t\tmergeProps(restProps, {\n\t\t\tid,\n\t\t\t\"data-fs-fieldset\": \"\",\n\t\t})\n\t);\n</script>\n\n<!--\n@component\n## Fieldset\nA component that groups related form controls or fields and extends the [Field](https://formsnap.dev/docs/components/field) component.\n\n- [Fieldset Documentation](https://formsnap.dev/docs/components/fieldset)\n- [Field Documentation](https://formsnap.dev/docs/components/field)\n\n### Snippet Props\n- `value` - The value of the field.\n- `errors` - The errors of the field.\n- `tainted` - The tainted state of the field.\n- `constraints` - The constraints of the field.\n- `props` - A spreadable object of attributes for the fieldset element if using the `child` snippet.\n\n@param {SuperForm} form - The form object.\n@param {FormPath<T>} name - The name of the field.\n-->\n<Field {form} {name}>\n\t{#snippet children({ value, errors, tainted, constraints })}\n\t\t{#if childProp}\n\t\t\t{@render childProp({\n\t\t\t\tprops: mergedProps,\n\t\t\t\tvalue: value as T[U],\n\t\t\t\terrors,\n\t\t\t\ttainted,\n\t\t\t\tconstraints,\n\t\t\t})}\n\t\t{:else}\n\t\t\t<fieldset {...mergedProps} data-fs-error={getDataFsError(errors)}>\n\t\t\t\t{@render childrenProp?.({\n\t\t\t\t\tvalue: value as T[U],\n\t\t\t\t\terrors,\n\t\t\t\t\ttainted,\n\t\t\t\t\tconstraints,\n\t\t\t\t})}\n\t\t\t</fieldset>\n\t\t{/if}\n\t{/snippet}\n</Field>\n", "<script lang=\"ts\">\n\timport { box, mergeProps } from \"svelte-toolbelt\";\n\timport type { LegendProps } from \"./types.js\";\n\timport { useId } from \"../internal/utils/id.js\";\n\timport { useLegend } from \"../formsnap.svelte.js\";\n\n\tlet {\n\t\tid = useId(),\n\t\tref = $bindable(null),\n\t\tchildren,\n\t\tchild,\n\t\t...restProps\n\t}: LegendProps = $props();\n\n\tconst legendState = useLegend({\n\t\tid: box.with(() => id),\n\t\tref: box.with(\n\t\t\t() => ref,\n\t\t\t(v) => (ref = v)\n\t\t),\n\t});\n\n\tconst mergedProps = $derived(mergeProps(restProps, legendState.props));\n</script>\n\n<!--\n@component\n## Legend\nA component that provides a title for a group of related form controls and should be used within a [Fieldset](https://formsnap.dev/docs/components/fieldset) component.\n\n- [Legend Documentation](https://formsnap.dev/docs/components/legend)\n\n### `child` Snippet Props\n- `props` - A spreadable object of attributes for the legend element if `child` snippet is used.\n-->\n\n{#if child}\n\t{@render child({ props: mergedProps })}\n{:else}\n\t<legend {...mergedProps}>\n\t\t{@render children?.()}\n\t</legend>\n{/if}\n", "<script lang=\"ts\" module>\n\timport type { FormPathLeaves as _FormPathLeaves } from \"sveltekit-superforms\";\n\ttype T = unknown;\n\ttype U = unknown;\n</script>\n\n<script lang=\"ts\" generics=\"T extends Record<string, unknown>, U extends _FormPathLeaves<T>\">\n\timport { box } from \"svelte-toolbelt\";\n\timport type { ElementFieldProps } from \"./types.js\";\n\timport { useElementField } from \"../formsnap.svelte.js\";\n\n\tlet { form, name, children }: ElementFieldProps<T, U> = $props();\n\n\tconst elementFieldState = useElementField({\n\t\tform: box.with(() => form),\n\t\tname: box.with(() => name),\n\t});\n</script>\n\n<!--\n@component\n## ElementField\nA component that provides the necessary context for a form field that represents a single element in an array.\n\n- [ElementField Documentation](https://formsnap.dev/docs/components/element-field)\n\n### Snippet Props\n- `value` - The value of the field.\n- `errors` - The errors of the field.\n- `tainted` - The tainted state of the field.\n- `constraints` - The constraints of the field.\n\n@param {SuperForm} form - The form object.\n@param {FormPathLeaves<T>} name - The name and index of the field. For example, `urls[0]`.\n-->\n\n{@render children?.(elementFieldState.snippetProps)}\n"],
  "mappings": "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",
  "names": ["index", "$$anchor"]
}
