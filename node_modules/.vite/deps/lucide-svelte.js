import "./chunk-3DUZOBIL.js";
import {
  add_locations,
  attribute_effect,
  check_target,
  each,
  element,
  hmr,
  index,
  init,
  legacy_api,
  legacy_rest_props,
  prop,
  slot,
  spread_props,
  validate_dynamic_element_tag,
  wrap_snippet
} from "./chunk-RHLFTDAA.js";
import "./chunk-U7P2NEEE.js";
import {
  append,
  comment,
  from_svg
} from "./chunk-BI5MB7XM.js";
import {
  FILENAME,
  HMR,
  add_svelte_meta,
  child,
  deep_read_state,
  first_child,
  get,
  pop,
  push,
  reset,
  set,
  sibling,
  strict_equals,
  to_array,
  untrack,
  user_derived
} from "./chunk-4X7LLZWG.js";
import "./chunk-L3IDHH4W.js";
import "./chunk-ELKJSBLM.js";
import "./chunk-K63UQA3V.js";
import {
  __export
} from "./chunk-G3PMV62Z.js";

// node_modules/lucide-svelte/dist/icons/index.js
var icons_exports = {};
__export(icons_exports, {
  AArrowDown: () => a_arrow_down_default,
  AArrowUp: () => a_arrow_up_default,
  ALargeSmall: () => a_large_small_default,
  Accessibility: () => accessibility_default,
  Activity: () => activity_default,
  AirVent: () => air_vent_default,
  Airplay: () => airplay_default,
  AlarmClock: () => alarm_clock_default,
  AlarmClockCheck: () => alarm_clock_check_default,
  AlarmClockMinus: () => alarm_clock_minus_default,
  AlarmClockOff: () => alarm_clock_off_default,
  AlarmClockPlus: () => alarm_clock_plus_default,
  AlarmSmoke: () => alarm_smoke_default,
  Album: () => album_default,
  AlignCenter: () => align_center_default,
  AlignCenterHorizontal: () => align_center_horizontal_default,
  AlignCenterVertical: () => align_center_vertical_default,
  AlignEndHorizontal: () => align_end_horizontal_default,
  AlignEndVertical: () => align_end_vertical_default,
  AlignHorizontalDistributeCenter: () => align_horizontal_distribute_center_default,
  AlignHorizontalDistributeEnd: () => align_horizontal_distribute_end_default,
  AlignHorizontalDistributeStart: () => align_horizontal_distribute_start_default,
  AlignHorizontalJustifyCenter: () => align_horizontal_justify_center_default,
  AlignHorizontalJustifyEnd: () => align_horizontal_justify_end_default,
  AlignHorizontalJustifyStart: () => align_horizontal_justify_start_default,
  AlignHorizontalSpaceAround: () => align_horizontal_space_around_default,
  AlignHorizontalSpaceBetween: () => align_horizontal_space_between_default,
  AlignJustify: () => align_justify_default,
  AlignLeft: () => align_left_default,
  AlignRight: () => align_right_default,
  AlignStartHorizontal: () => align_start_horizontal_default,
  AlignStartVertical: () => align_start_vertical_default,
  AlignVerticalDistributeCenter: () => align_vertical_distribute_center_default,
  AlignVerticalDistributeEnd: () => align_vertical_distribute_end_default,
  AlignVerticalDistributeStart: () => align_vertical_distribute_start_default,
  AlignVerticalJustifyCenter: () => align_vertical_justify_center_default,
  AlignVerticalJustifyEnd: () => align_vertical_justify_end_default,
  AlignVerticalJustifyStart: () => align_vertical_justify_start_default,
  AlignVerticalSpaceAround: () => align_vertical_space_around_default,
  AlignVerticalSpaceBetween: () => align_vertical_space_between_default,
  Ambulance: () => ambulance_default,
  Ampersand: () => ampersand_default,
  Ampersands: () => ampersands_default,
  Amphora: () => amphora_default,
  Anchor: () => anchor_default,
  Angry: () => angry_default,
  Annoyed: () => annoyed_default,
  Antenna: () => antenna_default,
  Anvil: () => anvil_default,
  Aperture: () => aperture_default,
  AppWindow: () => app_window_default,
  AppWindowMac: () => app_window_mac_default,
  Apple: () => apple_default,
  Archive: () => archive_default,
  ArchiveRestore: () => archive_restore_default,
  ArchiveX: () => archive_x_default,
  Armchair: () => armchair_default,
  ArrowBigDown: () => arrow_big_down_default,
  ArrowBigDownDash: () => arrow_big_down_dash_default,
  ArrowBigLeft: () => arrow_big_left_default,
  ArrowBigLeftDash: () => arrow_big_left_dash_default,
  ArrowBigRight: () => arrow_big_right_default,
  ArrowBigRightDash: () => arrow_big_right_dash_default,
  ArrowBigUp: () => arrow_big_up_default,
  ArrowBigUpDash: () => arrow_big_up_dash_default,
  ArrowDown: () => arrow_down_default,
  ArrowDown01: () => arrow_down_0_1_default,
  ArrowDown10: () => arrow_down_1_0_default,
  ArrowDownAZ: () => arrow_down_a_z_default,
  ArrowDownFromLine: () => arrow_down_from_line_default,
  ArrowDownLeft: () => arrow_down_left_default,
  ArrowDownNarrowWide: () => arrow_down_narrow_wide_default,
  ArrowDownRight: () => arrow_down_right_default,
  ArrowDownToDot: () => arrow_down_to_dot_default,
  ArrowDownToLine: () => arrow_down_to_line_default,
  ArrowDownUp: () => arrow_down_up_default,
  ArrowDownWideNarrow: () => arrow_down_wide_narrow_default,
  ArrowDownZA: () => arrow_down_z_a_default,
  ArrowLeft: () => arrow_left_default,
  ArrowLeftFromLine: () => arrow_left_from_line_default,
  ArrowLeftRight: () => arrow_left_right_default,
  ArrowLeftToLine: () => arrow_left_to_line_default,
  ArrowRight: () => arrow_right_default,
  ArrowRightFromLine: () => arrow_right_from_line_default,
  ArrowRightLeft: () => arrow_right_left_default,
  ArrowRightToLine: () => arrow_right_to_line_default,
  ArrowUp: () => arrow_up_default,
  ArrowUp01: () => arrow_up_0_1_default,
  ArrowUp10: () => arrow_up_1_0_default,
  ArrowUpAZ: () => arrow_up_a_z_default,
  ArrowUpDown: () => arrow_up_down_default,
  ArrowUpFromDot: () => arrow_up_from_dot_default,
  ArrowUpFromLine: () => arrow_up_from_line_default,
  ArrowUpLeft: () => arrow_up_left_default,
  ArrowUpNarrowWide: () => arrow_up_narrow_wide_default,
  ArrowUpRight: () => arrow_up_right_default,
  ArrowUpToLine: () => arrow_up_to_line_default,
  ArrowUpWideNarrow: () => arrow_up_wide_narrow_default,
  ArrowUpZA: () => arrow_up_z_a_default,
  ArrowsUpFromLine: () => arrows_up_from_line_default,
  Asterisk: () => asterisk_default,
  AtSign: () => at_sign_default,
  Atom: () => atom_default,
  AudioLines: () => audio_lines_default,
  AudioWaveform: () => audio_waveform_default,
  Award: () => award_default,
  Axe: () => axe_default,
  Axis3d: () => axis_3d_default,
  Baby: () => baby_default,
  Backpack: () => backpack_default,
  Badge: () => badge_default,
  BadgeAlert: () => badge_alert_default,
  BadgeCent: () => badge_cent_default,
  BadgeCheck: () => badge_check_default,
  BadgeDollarSign: () => badge_dollar_sign_default,
  BadgeEuro: () => badge_euro_default,
  BadgeIndianRupee: () => badge_indian_rupee_default,
  BadgeInfo: () => badge_info_default,
  BadgeJapaneseYen: () => badge_japanese_yen_default,
  BadgeMinus: () => badge_minus_default,
  BadgePercent: () => badge_percent_default,
  BadgePlus: () => badge_plus_default,
  BadgePoundSterling: () => badge_pound_sterling_default,
  BadgeQuestionMark: () => badge_question_mark_default,
  BadgeRussianRuble: () => badge_russian_ruble_default,
  BadgeSwissFranc: () => badge_swiss_franc_default,
  BadgeTurkishLira: () => badge_turkish_lira_default,
  BadgeX: () => badge_x_default,
  BaggageClaim: () => baggage_claim_default,
  Ban: () => ban_default,
  Banana: () => banana_default,
  Bandage: () => bandage_default,
  Banknote: () => banknote_default,
  BanknoteArrowDown: () => banknote_arrow_down_default,
  BanknoteArrowUp: () => banknote_arrow_up_default,
  BanknoteX: () => banknote_x_default,
  Barcode: () => barcode_default,
  Barrel: () => barrel_default,
  Baseline: () => baseline_default,
  Bath: () => bath_default,
  Battery: () => battery_default,
  BatteryCharging: () => battery_charging_default,
  BatteryFull: () => battery_full_default,
  BatteryLow: () => battery_low_default,
  BatteryMedium: () => battery_medium_default,
  BatteryPlus: () => battery_plus_default,
  BatteryWarning: () => battery_warning_default,
  Beaker: () => beaker_default,
  Bean: () => bean_default,
  BeanOff: () => bean_off_default,
  Bed: () => bed_default,
  BedDouble: () => bed_double_default,
  BedSingle: () => bed_single_default,
  Beef: () => beef_default,
  Beer: () => beer_default,
  BeerOff: () => beer_off_default,
  Bell: () => bell_default,
  BellDot: () => bell_dot_default,
  BellElectric: () => bell_electric_default,
  BellMinus: () => bell_minus_default,
  BellOff: () => bell_off_default,
  BellPlus: () => bell_plus_default,
  BellRing: () => bell_ring_default,
  BetweenHorizontalEnd: () => between_horizontal_end_default,
  BetweenHorizontalStart: () => between_horizontal_start_default,
  BetweenVerticalEnd: () => between_vertical_end_default,
  BetweenVerticalStart: () => between_vertical_start_default,
  BicepsFlexed: () => biceps_flexed_default,
  Bike: () => bike_default,
  Binary: () => binary_default,
  Binoculars: () => binoculars_default,
  Biohazard: () => biohazard_default,
  Bird: () => bird_default,
  Bitcoin: () => bitcoin_default,
  Blend: () => blend_default,
  Blinds: () => blinds_default,
  Blocks: () => blocks_default,
  Bluetooth: () => bluetooth_default,
  BluetoothConnected: () => bluetooth_connected_default,
  BluetoothOff: () => bluetooth_off_default,
  BluetoothSearching: () => bluetooth_searching_default,
  Bold: () => bold_default,
  Bolt: () => bolt_default,
  Bomb: () => bomb_default,
  Bone: () => bone_default,
  Book: () => book_default,
  BookA: () => book_a_default,
  BookAlert: () => book_alert_default,
  BookAudio: () => book_audio_default,
  BookCheck: () => book_check_default,
  BookCopy: () => book_copy_default,
  BookDashed: () => book_dashed_default,
  BookDown: () => book_down_default,
  BookHeadphones: () => book_headphones_default,
  BookHeart: () => book_heart_default,
  BookImage: () => book_image_default,
  BookKey: () => book_key_default,
  BookLock: () => book_lock_default,
  BookMarked: () => book_marked_default,
  BookMinus: () => book_minus_default,
  BookOpen: () => book_open_default,
  BookOpenCheck: () => book_open_check_default,
  BookOpenText: () => book_open_text_default,
  BookPlus: () => book_plus_default,
  BookText: () => book_text_default,
  BookType: () => book_type_default,
  BookUp: () => book_up_default,
  BookUp2: () => book_up_2_default,
  BookUser: () => book_user_default,
  BookX: () => book_x_default,
  Bookmark: () => bookmark_default,
  BookmarkCheck: () => bookmark_check_default,
  BookmarkMinus: () => bookmark_minus_default,
  BookmarkPlus: () => bookmark_plus_default,
  BookmarkX: () => bookmark_x_default,
  BoomBox: () => boom_box_default,
  Bot: () => bot_default,
  BotMessageSquare: () => bot_message_square_default,
  BotOff: () => bot_off_default,
  BottleWine: () => bottle_wine_default,
  BowArrow: () => bow_arrow_default,
  Box: () => box_default,
  Boxes: () => boxes_default,
  Braces: () => braces_default,
  Brackets: () => brackets_default,
  Brain: () => brain_default,
  BrainCircuit: () => brain_circuit_default,
  BrainCog: () => brain_cog_default,
  BrickWall: () => brick_wall_default,
  BrickWallFire: () => brick_wall_fire_default,
  Briefcase: () => briefcase_default,
  BriefcaseBusiness: () => briefcase_business_default,
  BriefcaseConveyorBelt: () => briefcase_conveyor_belt_default,
  BriefcaseMedical: () => briefcase_medical_default,
  BringToFront: () => bring_to_front_default,
  Brush: () => brush_default,
  BrushCleaning: () => brush_cleaning_default,
  Bubbles: () => bubbles_default,
  Bug: () => bug_default,
  BugOff: () => bug_off_default,
  BugPlay: () => bug_play_default,
  Building: () => building_default,
  Building2: () => building_2_default,
  Bus: () => bus_default,
  BusFront: () => bus_front_default,
  Cable: () => cable_default,
  CableCar: () => cable_car_default,
  Cake: () => cake_default,
  CakeSlice: () => cake_slice_default,
  Calculator: () => calculator_default,
  Calendar: () => calendar_default,
  Calendar1: () => calendar_1_default,
  CalendarArrowDown: () => calendar_arrow_down_default,
  CalendarArrowUp: () => calendar_arrow_up_default,
  CalendarCheck: () => calendar_check_default,
  CalendarCheck2: () => calendar_check_2_default,
  CalendarClock: () => calendar_clock_default,
  CalendarCog: () => calendar_cog_default,
  CalendarDays: () => calendar_days_default,
  CalendarFold: () => calendar_fold_default,
  CalendarHeart: () => calendar_heart_default,
  CalendarMinus: () => calendar_minus_default,
  CalendarMinus2: () => calendar_minus_2_default,
  CalendarOff: () => calendar_off_default,
  CalendarPlus: () => calendar_plus_default,
  CalendarPlus2: () => calendar_plus_2_default,
  CalendarRange: () => calendar_range_default,
  CalendarSearch: () => calendar_search_default,
  CalendarSync: () => calendar_sync_default,
  CalendarX: () => calendar_x_default,
  CalendarX2: () => calendar_x_2_default,
  Camera: () => camera_default,
  CameraOff: () => camera_off_default,
  Candy: () => candy_default,
  CandyCane: () => candy_cane_default,
  CandyOff: () => candy_off_default,
  Cannabis: () => cannabis_default,
  Captions: () => captions_default,
  CaptionsOff: () => captions_off_default,
  Car: () => car_default,
  CarFront: () => car_front_default,
  CarTaxiFront: () => car_taxi_front_default,
  Caravan: () => caravan_default,
  CardSim: () => card_sim_default,
  Carrot: () => carrot_default,
  CaseLower: () => case_lower_default,
  CaseSensitive: () => case_sensitive_default,
  CaseUpper: () => case_upper_default,
  CassetteTape: () => cassette_tape_default,
  Cast: () => cast_default,
  Castle: () => castle_default,
  Cat: () => cat_default,
  Cctv: () => cctv_default,
  ChartArea: () => chart_area_default,
  ChartBar: () => chart_bar_default,
  ChartBarBig: () => chart_bar_big_default,
  ChartBarDecreasing: () => chart_bar_decreasing_default,
  ChartBarIncreasing: () => chart_bar_increasing_default,
  ChartBarStacked: () => chart_bar_stacked_default,
  ChartCandlestick: () => chart_candlestick_default,
  ChartColumn: () => chart_column_default,
  ChartColumnBig: () => chart_column_big_default,
  ChartColumnDecreasing: () => chart_column_decreasing_default,
  ChartColumnIncreasing: () => chart_column_increasing_default,
  ChartColumnStacked: () => chart_column_stacked_default,
  ChartGantt: () => chart_gantt_default,
  ChartLine: () => chart_line_default,
  ChartNetwork: () => chart_network_default,
  ChartNoAxesColumn: () => chart_no_axes_column_default,
  ChartNoAxesColumnDecreasing: () => chart_no_axes_column_decreasing_default,
  ChartNoAxesColumnIncreasing: () => chart_no_axes_column_increasing_default,
  ChartNoAxesCombined: () => chart_no_axes_combined_default,
  ChartNoAxesGantt: () => chart_no_axes_gantt_default,
  ChartPie: () => chart_pie_default,
  ChartScatter: () => chart_scatter_default,
  ChartSpline: () => chart_spline_default,
  Check: () => check_default,
  CheckCheck: () => check_check_default,
  CheckLine: () => check_line_default,
  ChefHat: () => chef_hat_default,
  Cherry: () => cherry_default,
  ChevronDown: () => chevron_down_default,
  ChevronFirst: () => chevron_first_default,
  ChevronLast: () => chevron_last_default,
  ChevronLeft: () => chevron_left_default,
  ChevronRight: () => chevron_right_default,
  ChevronUp: () => chevron_up_default,
  ChevronsDown: () => chevrons_down_default,
  ChevronsDownUp: () => chevrons_down_up_default,
  ChevronsLeft: () => chevrons_left_default,
  ChevronsLeftRight: () => chevrons_left_right_default,
  ChevronsLeftRightEllipsis: () => chevrons_left_right_ellipsis_default,
  ChevronsRight: () => chevrons_right_default,
  ChevronsRightLeft: () => chevrons_right_left_default,
  ChevronsUp: () => chevrons_up_default,
  ChevronsUpDown: () => chevrons_up_down_default,
  Chrome: () => chrome_default,
  Church: () => church_default,
  Cigarette: () => cigarette_default,
  CigaretteOff: () => cigarette_off_default,
  Circle: () => circle_default,
  CircleAlert: () => circle_alert_default,
  CircleArrowDown: () => circle_arrow_down_default,
  CircleArrowLeft: () => circle_arrow_left_default,
  CircleArrowOutDownLeft: () => circle_arrow_out_down_left_default,
  CircleArrowOutDownRight: () => circle_arrow_out_down_right_default,
  CircleArrowOutUpLeft: () => circle_arrow_out_up_left_default,
  CircleArrowOutUpRight: () => circle_arrow_out_up_right_default,
  CircleArrowRight: () => circle_arrow_right_default,
  CircleArrowUp: () => circle_arrow_up_default,
  CircleCheck: () => circle_check_default,
  CircleCheckBig: () => circle_check_big_default,
  CircleChevronDown: () => circle_chevron_down_default,
  CircleChevronLeft: () => circle_chevron_left_default,
  CircleChevronRight: () => circle_chevron_right_default,
  CircleChevronUp: () => circle_chevron_up_default,
  CircleDashed: () => circle_dashed_default,
  CircleDivide: () => circle_divide_default,
  CircleDollarSign: () => circle_dollar_sign_default,
  CircleDot: () => circle_dot_default,
  CircleDotDashed: () => circle_dot_dashed_default,
  CircleEllipsis: () => circle_ellipsis_default,
  CircleEqual: () => circle_equal_default,
  CircleFadingArrowUp: () => circle_fading_arrow_up_default,
  CircleFadingPlus: () => circle_fading_plus_default,
  CircleGauge: () => circle_gauge_default,
  CircleMinus: () => circle_minus_default,
  CircleOff: () => circle_off_default,
  CircleParking: () => circle_parking_default,
  CircleParkingOff: () => circle_parking_off_default,
  CirclePause: () => circle_pause_default,
  CirclePercent: () => circle_percent_default,
  CirclePlay: () => circle_play_default,
  CirclePlus: () => circle_plus_default,
  CirclePoundSterling: () => circle_pound_sterling_default,
  CirclePower: () => circle_power_default,
  CircleQuestionMark: () => circle_question_mark_default,
  CircleSlash: () => circle_slash_default,
  CircleSlash2: () => circle_slash_2_default,
  CircleSmall: () => circle_small_default,
  CircleStop: () => circle_stop_default,
  CircleUser: () => circle_user_default,
  CircleUserRound: () => circle_user_round_default,
  CircleX: () => circle_x_default,
  CircuitBoard: () => circuit_board_default,
  Citrus: () => citrus_default,
  Clapperboard: () => clapperboard_default,
  Clipboard: () => clipboard_default,
  ClipboardCheck: () => clipboard_check_default,
  ClipboardClock: () => clipboard_clock_default,
  ClipboardCopy: () => clipboard_copy_default,
  ClipboardList: () => clipboard_list_default,
  ClipboardMinus: () => clipboard_minus_default,
  ClipboardPaste: () => clipboard_paste_default,
  ClipboardPen: () => clipboard_pen_default,
  ClipboardPenLine: () => clipboard_pen_line_default,
  ClipboardPlus: () => clipboard_plus_default,
  ClipboardType: () => clipboard_type_default,
  ClipboardX: () => clipboard_x_default,
  Clock: () => clock_default,
  Clock1: () => clock_1_default,
  Clock10: () => clock_10_default,
  Clock11: () => clock_11_default,
  Clock12: () => clock_12_default,
  Clock2: () => clock_2_default,
  Clock3: () => clock_3_default,
  Clock4: () => clock_4_default,
  Clock5: () => clock_5_default,
  Clock6: () => clock_6_default,
  Clock7: () => clock_7_default,
  Clock8: () => clock_8_default,
  Clock9: () => clock_9_default,
  ClockAlert: () => clock_alert_default,
  ClockArrowDown: () => clock_arrow_down_default,
  ClockArrowUp: () => clock_arrow_up_default,
  ClockFading: () => clock_fading_default,
  ClockPlus: () => clock_plus_default,
  ClosedCaption: () => closed_caption_default,
  Cloud: () => cloud_default,
  CloudAlert: () => cloud_alert_default,
  CloudCheck: () => cloud_check_default,
  CloudCog: () => cloud_cog_default,
  CloudDownload: () => cloud_download_default,
  CloudDrizzle: () => cloud_drizzle_default,
  CloudFog: () => cloud_fog_default,
  CloudHail: () => cloud_hail_default,
  CloudLightning: () => cloud_lightning_default,
  CloudMoon: () => cloud_moon_default,
  CloudMoonRain: () => cloud_moon_rain_default,
  CloudOff: () => cloud_off_default,
  CloudRain: () => cloud_rain_default,
  CloudRainWind: () => cloud_rain_wind_default,
  CloudSnow: () => cloud_snow_default,
  CloudSun: () => cloud_sun_default,
  CloudSunRain: () => cloud_sun_rain_default,
  CloudUpload: () => cloud_upload_default,
  Cloudy: () => cloudy_default,
  Clover: () => clover_default,
  Club: () => club_default,
  Code: () => code_default,
  CodeXml: () => code_xml_default,
  Codepen: () => codepen_default,
  Codesandbox: () => codesandbox_default,
  Coffee: () => coffee_default,
  Cog: () => cog_default,
  Coins: () => coins_default,
  Columns2: () => columns_2_default,
  Columns3: () => columns_3_default,
  Columns3Cog: () => columns_3_cog_default,
  Columns4: () => columns_4_default,
  Combine: () => combine_default,
  Command: () => command_default,
  Compass: () => compass_default,
  Component: () => component_default,
  Computer: () => computer_default,
  ConciergeBell: () => concierge_bell_default,
  Cone: () => cone_default,
  Construction: () => construction_default,
  Contact: () => contact_default,
  ContactRound: () => contact_round_default,
  Container: () => container_default,
  Contrast: () => contrast_default,
  Cookie: () => cookie_default,
  CookingPot: () => cooking_pot_default,
  Copy: () => copy_default,
  CopyCheck: () => copy_check_default,
  CopyMinus: () => copy_minus_default,
  CopyPlus: () => copy_plus_default,
  CopySlash: () => copy_slash_default,
  CopyX: () => copy_x_default,
  Copyleft: () => copyleft_default,
  Copyright: () => copyright_default,
  CornerDownLeft: () => corner_down_left_default,
  CornerDownRight: () => corner_down_right_default,
  CornerLeftDown: () => corner_left_down_default,
  CornerLeftUp: () => corner_left_up_default,
  CornerRightDown: () => corner_right_down_default,
  CornerRightUp: () => corner_right_up_default,
  CornerUpLeft: () => corner_up_left_default,
  CornerUpRight: () => corner_up_right_default,
  Cpu: () => cpu_default,
  CreativeCommons: () => creative_commons_default,
  CreditCard: () => credit_card_default,
  Croissant: () => croissant_default,
  Crop: () => crop_default,
  Cross: () => cross_default,
  Crosshair: () => crosshair_default,
  Crown: () => crown_default,
  Cuboid: () => cuboid_default,
  CupSoda: () => cup_soda_default,
  Currency: () => currency_default,
  Cylinder: () => cylinder_default,
  Dam: () => dam_default,
  Database: () => database_default,
  DatabaseBackup: () => database_backup_default,
  DatabaseZap: () => database_zap_default,
  DecimalsArrowLeft: () => decimals_arrow_left_default,
  DecimalsArrowRight: () => decimals_arrow_right_default,
  Delete: () => delete_default,
  Dessert: () => dessert_default,
  Diameter: () => diameter_default,
  Diamond: () => diamond_default,
  DiamondMinus: () => diamond_minus_default,
  DiamondPercent: () => diamond_percent_default,
  DiamondPlus: () => diamond_plus_default,
  Dice1: () => dice_1_default,
  Dice2: () => dice_2_default,
  Dice3: () => dice_3_default,
  Dice4: () => dice_4_default,
  Dice5: () => dice_5_default,
  Dice6: () => dice_6_default,
  Dices: () => dices_default,
  Diff: () => diff_default,
  Disc: () => disc_default,
  Disc2: () => disc_2_default,
  Disc3: () => disc_3_default,
  DiscAlbum: () => disc_album_default,
  Divide: () => divide_default,
  Dna: () => dna_default,
  DnaOff: () => dna_off_default,
  Dock: () => dock_default,
  Dog: () => dog_default,
  DollarSign: () => dollar_sign_default,
  Donut: () => donut_default,
  DoorClosed: () => door_closed_default,
  DoorClosedLocked: () => door_closed_locked_default,
  DoorOpen: () => door_open_default,
  Dot: () => dot_default,
  Download: () => download_default,
  DraftingCompass: () => drafting_compass_default,
  Drama: () => drama_default,
  Dribbble: () => dribbble_default,
  Drill: () => drill_default,
  Drone: () => drone_default,
  Droplet: () => droplet_default,
  DropletOff: () => droplet_off_default,
  Droplets: () => droplets_default,
  Drum: () => drum_default,
  Drumstick: () => drumstick_default,
  Dumbbell: () => dumbbell_default,
  Ear: () => ear_default,
  EarOff: () => ear_off_default,
  Earth: () => earth_default,
  EarthLock: () => earth_lock_default,
  Eclipse: () => eclipse_default,
  Egg: () => egg_default,
  EggFried: () => egg_fried_default,
  EggOff: () => egg_off_default,
  Ellipsis: () => ellipsis_default,
  EllipsisVertical: () => ellipsis_vertical_default,
  Equal: () => equal_default,
  EqualApproximately: () => equal_approximately_default,
  EqualNot: () => equal_not_default,
  Eraser: () => eraser_default,
  EthernetPort: () => ethernet_port_default,
  Euro: () => euro_default,
  Expand: () => expand_default,
  ExternalLink: () => external_link_default,
  Eye: () => eye_default,
  EyeClosed: () => eye_closed_default,
  EyeOff: () => eye_off_default,
  Facebook: () => facebook_default,
  Factory: () => factory_default,
  Fan: () => fan_default,
  FastForward: () => fast_forward_default,
  Feather: () => feather_default,
  Fence: () => fence_default,
  FerrisWheel: () => ferris_wheel_default,
  Figma: () => figma_default,
  File: () => file_default,
  FileArchive: () => file_archive_default,
  FileAudio: () => file_audio_default,
  FileAudio2: () => file_audio_2_default,
  FileAxis3d: () => file_axis_3d_default,
  FileBadge: () => file_badge_default,
  FileBadge2: () => file_badge_2_default,
  FileBox: () => file_box_default,
  FileChartColumn: () => file_chart_column_default,
  FileChartColumnIncreasing: () => file_chart_column_increasing_default,
  FileChartLine: () => file_chart_line_default,
  FileChartPie: () => file_chart_pie_default,
  FileCheck: () => file_check_default,
  FileCheck2: () => file_check_2_default,
  FileClock: () => file_clock_default,
  FileCode: () => file_code_default,
  FileCode2: () => file_code_2_default,
  FileCog: () => file_cog_default,
  FileDiff: () => file_diff_default,
  FileDigit: () => file_digit_default,
  FileDown: () => file_down_default,
  FileHeart: () => file_heart_default,
  FileImage: () => file_image_default,
  FileInput: () => file_input_default,
  FileJson: () => file_json_default,
  FileJson2: () => file_json_2_default,
  FileKey: () => file_key_default,
  FileKey2: () => file_key_2_default,
  FileLock: () => file_lock_default,
  FileLock2: () => file_lock_2_default,
  FileMinus: () => file_minus_default,
  FileMinus2: () => file_minus_2_default,
  FileMusic: () => file_music_default,
  FileOutput: () => file_output_default,
  FilePen: () => file_pen_default,
  FilePenLine: () => file_pen_line_default,
  FilePlay: () => file_play_default,
  FilePlus: () => file_plus_default,
  FilePlus2: () => file_plus_2_default,
  FileQuestionMark: () => file_question_mark_default,
  FileScan: () => file_scan_default,
  FileSearch: () => file_search_default,
  FileSearch2: () => file_search_2_default,
  FileSliders: () => file_sliders_default,
  FileSpreadsheet: () => file_spreadsheet_default,
  FileStack: () => file_stack_default,
  FileSymlink: () => file_symlink_default,
  FileTerminal: () => file_terminal_default,
  FileText: () => file_text_default,
  FileType: () => file_type_default,
  FileType2: () => file_type_2_default,
  FileUp: () => file_up_default,
  FileUser: () => file_user_default,
  FileVideoCamera: () => file_video_camera_default,
  FileVolume: () => file_volume_default,
  FileVolume2: () => file_volume_2_default,
  FileWarning: () => file_warning_default,
  FileX: () => file_x_default,
  FileX2: () => file_x_2_default,
  Files: () => files_default,
  Film: () => film_default,
  Fingerprint: () => fingerprint_default,
  FireExtinguisher: () => fire_extinguisher_default,
  Fish: () => fish_default,
  FishOff: () => fish_off_default,
  FishSymbol: () => fish_symbol_default,
  Flag: () => flag_default,
  FlagOff: () => flag_off_default,
  FlagTriangleLeft: () => flag_triangle_left_default,
  FlagTriangleRight: () => flag_triangle_right_default,
  Flame: () => flame_default,
  FlameKindling: () => flame_kindling_default,
  Flashlight: () => flashlight_default,
  FlashlightOff: () => flashlight_off_default,
  FlaskConical: () => flask_conical_default,
  FlaskConicalOff: () => flask_conical_off_default,
  FlaskRound: () => flask_round_default,
  FlipHorizontal: () => flip_horizontal_default,
  FlipHorizontal2: () => flip_horizontal_2_default,
  FlipVertical: () => flip_vertical_default,
  FlipVertical2: () => flip_vertical_2_default,
  Flower: () => flower_default,
  Flower2: () => flower_2_default,
  Focus: () => focus_default,
  FoldHorizontal: () => fold_horizontal_default,
  FoldVertical: () => fold_vertical_default,
  Folder: () => folder_default,
  FolderArchive: () => folder_archive_default,
  FolderCheck: () => folder_check_default,
  FolderClock: () => folder_clock_default,
  FolderClosed: () => folder_closed_default,
  FolderCode: () => folder_code_default,
  FolderCog: () => folder_cog_default,
  FolderDot: () => folder_dot_default,
  FolderDown: () => folder_down_default,
  FolderGit: () => folder_git_default,
  FolderGit2: () => folder_git_2_default,
  FolderHeart: () => folder_heart_default,
  FolderInput: () => folder_input_default,
  FolderKanban: () => folder_kanban_default,
  FolderKey: () => folder_key_default,
  FolderLock: () => folder_lock_default,
  FolderMinus: () => folder_minus_default,
  FolderOpen: () => folder_open_default,
  FolderOpenDot: () => folder_open_dot_default,
  FolderOutput: () => folder_output_default,
  FolderPen: () => folder_pen_default,
  FolderPlus: () => folder_plus_default,
  FolderRoot: () => folder_root_default,
  FolderSearch: () => folder_search_default,
  FolderSearch2: () => folder_search_2_default,
  FolderSymlink: () => folder_symlink_default,
  FolderSync: () => folder_sync_default,
  FolderTree: () => folder_tree_default,
  FolderUp: () => folder_up_default,
  FolderX: () => folder_x_default,
  Folders: () => folders_default,
  Footprints: () => footprints_default,
  Forklift: () => forklift_default,
  Forward: () => forward_default,
  Frame: () => frame_default,
  Framer: () => framer_default,
  Frown: () => frown_default,
  Fuel: () => fuel_default,
  Fullscreen: () => fullscreen_default,
  Funnel: () => funnel_default,
  FunnelPlus: () => funnel_plus_default,
  FunnelX: () => funnel_x_default,
  GalleryHorizontal: () => gallery_horizontal_default,
  GalleryHorizontalEnd: () => gallery_horizontal_end_default,
  GalleryThumbnails: () => gallery_thumbnails_default,
  GalleryVertical: () => gallery_vertical_default,
  GalleryVerticalEnd: () => gallery_vertical_end_default,
  Gamepad: () => gamepad_default,
  Gamepad2: () => gamepad_2_default,
  Gauge: () => gauge_default,
  Gavel: () => gavel_default,
  Gem: () => gem_default,
  GeorgianLari: () => georgian_lari_default,
  Ghost: () => ghost_default,
  Gift: () => gift_default,
  GitBranch: () => git_branch_default,
  GitBranchPlus: () => git_branch_plus_default,
  GitCommitHorizontal: () => git_commit_horizontal_default,
  GitCommitVertical: () => git_commit_vertical_default,
  GitCompare: () => git_compare_default,
  GitCompareArrows: () => git_compare_arrows_default,
  GitFork: () => git_fork_default,
  GitGraph: () => git_graph_default,
  GitMerge: () => git_merge_default,
  GitPullRequest: () => git_pull_request_default,
  GitPullRequestArrow: () => git_pull_request_arrow_default,
  GitPullRequestClosed: () => git_pull_request_closed_default,
  GitPullRequestCreate: () => git_pull_request_create_default,
  GitPullRequestCreateArrow: () => git_pull_request_create_arrow_default,
  GitPullRequestDraft: () => git_pull_request_draft_default,
  Github: () => github_default,
  Gitlab: () => gitlab_default,
  GlassWater: () => glass_water_default,
  Glasses: () => glasses_default,
  Globe: () => globe_default,
  GlobeLock: () => globe_lock_default,
  Goal: () => goal_default,
  Gpu: () => gpu_default,
  GraduationCap: () => graduation_cap_default,
  Grape: () => grape_default,
  Grid2x2: () => grid_2x2_default,
  Grid2x2Check: () => grid_2x2_check_default,
  Grid2x2Plus: () => grid_2x2_plus_default,
  Grid2x2X: () => grid_2x2_x_default,
  Grid3x2: () => grid_3x2_default,
  Grid3x3: () => grid_3x3_default,
  Grip: () => grip_default,
  GripHorizontal: () => grip_horizontal_default,
  GripVertical: () => grip_vertical_default,
  Group: () => group_default,
  Guitar: () => guitar_default,
  Ham: () => ham_default,
  Hamburger: () => hamburger_default,
  Hammer: () => hammer_default,
  Hand: () => hand_default,
  HandCoins: () => hand_coins_default,
  HandFist: () => hand_fist_default,
  HandGrab: () => hand_grab_default,
  HandHeart: () => hand_heart_default,
  HandHelping: () => hand_helping_default,
  HandMetal: () => hand_metal_default,
  HandPlatter: () => hand_platter_default,
  Handbag: () => handbag_default,
  Handshake: () => handshake_default,
  HardDrive: () => hard_drive_default,
  HardDriveDownload: () => hard_drive_download_default,
  HardDriveUpload: () => hard_drive_upload_default,
  HardHat: () => hard_hat_default,
  Hash: () => hash_default,
  HatGlasses: () => hat_glasses_default,
  Haze: () => haze_default,
  HdmiPort: () => hdmi_port_default,
  Heading: () => heading_default,
  Heading1: () => heading_1_default,
  Heading2: () => heading_2_default,
  Heading3: () => heading_3_default,
  Heading4: () => heading_4_default,
  Heading5: () => heading_5_default,
  Heading6: () => heading_6_default,
  HeadphoneOff: () => headphone_off_default,
  Headphones: () => headphones_default,
  Headset: () => headset_default,
  Heart: () => heart_default,
  HeartCrack: () => heart_crack_default,
  HeartHandshake: () => heart_handshake_default,
  HeartMinus: () => heart_minus_default,
  HeartOff: () => heart_off_default,
  HeartPlus: () => heart_plus_default,
  HeartPulse: () => heart_pulse_default,
  Heater: () => heater_default,
  Hexagon: () => hexagon_default,
  Highlighter: () => highlighter_default,
  History: () => history_default,
  Hop: () => hop_default,
  HopOff: () => hop_off_default,
  Hospital: () => hospital_default,
  Hotel: () => hotel_default,
  Hourglass: () => hourglass_default,
  House: () => house_default,
  HousePlug: () => house_plug_default,
  HousePlus: () => house_plus_default,
  HouseWifi: () => house_wifi_default,
  IceCreamBowl: () => ice_cream_bowl_default,
  IceCreamCone: () => ice_cream_cone_default,
  IdCard: () => id_card_default,
  IdCardLanyard: () => id_card_lanyard_default,
  Image: () => image_default,
  ImageDown: () => image_down_default,
  ImageMinus: () => image_minus_default,
  ImageOff: () => image_off_default,
  ImagePlay: () => image_play_default,
  ImagePlus: () => image_plus_default,
  ImageUp: () => image_up_default,
  ImageUpscale: () => image_upscale_default,
  Images: () => images_default,
  Import: () => import_default,
  Inbox: () => inbox_default,
  IndentDecrease: () => indent_decrease_default,
  IndentIncrease: () => indent_increase_default,
  IndianRupee: () => indian_rupee_default,
  Infinity: () => infinity_default,
  Info: () => info_default,
  InspectionPanel: () => inspection_panel_default,
  Instagram: () => instagram_default,
  Italic: () => italic_default,
  IterationCcw: () => iteration_ccw_default,
  IterationCw: () => iteration_cw_default,
  JapaneseYen: () => japanese_yen_default,
  Joystick: () => joystick_default,
  Kanban: () => kanban_default,
  Key: () => key_default,
  KeyRound: () => key_round_default,
  KeySquare: () => key_square_default,
  Keyboard: () => keyboard_default,
  KeyboardMusic: () => keyboard_music_default,
  KeyboardOff: () => keyboard_off_default,
  Lamp: () => lamp_default,
  LampCeiling: () => lamp_ceiling_default,
  LampDesk: () => lamp_desk_default,
  LampFloor: () => lamp_floor_default,
  LampWallDown: () => lamp_wall_down_default,
  LampWallUp: () => lamp_wall_up_default,
  LandPlot: () => land_plot_default,
  Landmark: () => landmark_default,
  Languages: () => languages_default,
  Laptop: () => laptop_default,
  LaptopMinimal: () => laptop_minimal_default,
  LaptopMinimalCheck: () => laptop_minimal_check_default,
  Lasso: () => lasso_default,
  LassoSelect: () => lasso_select_default,
  Laugh: () => laugh_default,
  Layers: () => layers_default,
  Layers2: () => layers_2_default,
  LayoutDashboard: () => layout_dashboard_default,
  LayoutGrid: () => layout_grid_default,
  LayoutList: () => layout_list_default,
  LayoutPanelLeft: () => layout_panel_left_default,
  LayoutPanelTop: () => layout_panel_top_default,
  LayoutTemplate: () => layout_template_default,
  Leaf: () => leaf_default,
  LeafyGreen: () => leafy_green_default,
  Lectern: () => lectern_default,
  LetterText: () => letter_text_default,
  Library: () => library_default,
  LibraryBig: () => library_big_default,
  LifeBuoy: () => life_buoy_default,
  Ligature: () => ligature_default,
  Lightbulb: () => lightbulb_default,
  LightbulbOff: () => lightbulb_off_default,
  LineSquiggle: () => line_squiggle_default,
  Link: () => link_default,
  Link2: () => link_2_default,
  Link2Off: () => link_2_off_default,
  Linkedin: () => linkedin_default,
  List: () => list_default,
  ListCheck: () => list_check_default,
  ListChecks: () => list_checks_default,
  ListCollapse: () => list_collapse_default,
  ListEnd: () => list_end_default,
  ListFilter: () => list_filter_default,
  ListFilterPlus: () => list_filter_plus_default,
  ListMinus: () => list_minus_default,
  ListMusic: () => list_music_default,
  ListOrdered: () => list_ordered_default,
  ListPlus: () => list_plus_default,
  ListRestart: () => list_restart_default,
  ListStart: () => list_start_default,
  ListTodo: () => list_todo_default,
  ListTree: () => list_tree_default,
  ListVideo: () => list_video_default,
  ListX: () => list_x_default,
  Loader: () => loader_default,
  LoaderCircle: () => loader_circle_default,
  LoaderPinwheel: () => loader_pinwheel_default,
  Locate: () => locate_default,
  LocateFixed: () => locate_fixed_default,
  LocateOff: () => locate_off_default,
  Lock: () => lock_default,
  LockKeyhole: () => lock_keyhole_default,
  LockKeyholeOpen: () => lock_keyhole_open_default,
  LockOpen: () => lock_open_default,
  LogIn: () => log_in_default,
  LogOut: () => log_out_default,
  Logs: () => logs_default,
  Lollipop: () => lollipop_default,
  Luggage: () => luggage_default,
  Magnet: () => magnet_default,
  Mail: () => mail_default,
  MailCheck: () => mail_check_default,
  MailMinus: () => mail_minus_default,
  MailOpen: () => mail_open_default,
  MailPlus: () => mail_plus_default,
  MailQuestionMark: () => mail_question_mark_default,
  MailSearch: () => mail_search_default,
  MailWarning: () => mail_warning_default,
  MailX: () => mail_x_default,
  Mailbox: () => mailbox_default,
  Mails: () => mails_default,
  Map: () => map_default,
  MapMinus: () => map_minus_default,
  MapPin: () => map_pin_default,
  MapPinCheck: () => map_pin_check_default,
  MapPinCheckInside: () => map_pin_check_inside_default,
  MapPinHouse: () => map_pin_house_default,
  MapPinMinus: () => map_pin_minus_default,
  MapPinMinusInside: () => map_pin_minus_inside_default,
  MapPinOff: () => map_pin_off_default,
  MapPinPen: () => map_pin_pen_default,
  MapPinPlus: () => map_pin_plus_default,
  MapPinPlusInside: () => map_pin_plus_inside_default,
  MapPinX: () => map_pin_x_default,
  MapPinXInside: () => map_pin_x_inside_default,
  MapPinned: () => map_pinned_default,
  MapPlus: () => map_plus_default,
  Mars: () => mars_default,
  MarsStroke: () => mars_stroke_default,
  Martini: () => martini_default,
  Maximize: () => maximize_default,
  Maximize2: () => maximize_2_default,
  Medal: () => medal_default,
  Megaphone: () => megaphone_default,
  MegaphoneOff: () => megaphone_off_default,
  Meh: () => meh_default,
  MemoryStick: () => memory_stick_default,
  Menu: () => menu_default,
  Merge: () => merge_default,
  MessageCircle: () => message_circle_default,
  MessageCircleCode: () => message_circle_code_default,
  MessageCircleDashed: () => message_circle_dashed_default,
  MessageCircleHeart: () => message_circle_heart_default,
  MessageCircleMore: () => message_circle_more_default,
  MessageCircleOff: () => message_circle_off_default,
  MessageCirclePlus: () => message_circle_plus_default,
  MessageCircleQuestionMark: () => message_circle_question_mark_default,
  MessageCircleReply: () => message_circle_reply_default,
  MessageCircleWarning: () => message_circle_warning_default,
  MessageCircleX: () => message_circle_x_default,
  MessageSquare: () => message_square_default,
  MessageSquareCode: () => message_square_code_default,
  MessageSquareDashed: () => message_square_dashed_default,
  MessageSquareDiff: () => message_square_diff_default,
  MessageSquareDot: () => message_square_dot_default,
  MessageSquareHeart: () => message_square_heart_default,
  MessageSquareLock: () => message_square_lock_default,
  MessageSquareMore: () => message_square_more_default,
  MessageSquareOff: () => message_square_off_default,
  MessageSquarePlus: () => message_square_plus_default,
  MessageSquareQuote: () => message_square_quote_default,
  MessageSquareReply: () => message_square_reply_default,
  MessageSquareShare: () => message_square_share_default,
  MessageSquareText: () => message_square_text_default,
  MessageSquareWarning: () => message_square_warning_default,
  MessageSquareX: () => message_square_x_default,
  MessagesSquare: () => messages_square_default,
  Mic: () => mic_default,
  MicOff: () => mic_off_default,
  MicVocal: () => mic_vocal_default,
  Microchip: () => microchip_default,
  Microscope: () => microscope_default,
  Microwave: () => microwave_default,
  Milestone: () => milestone_default,
  Milk: () => milk_default,
  MilkOff: () => milk_off_default,
  Minimize: () => minimize_default,
  Minimize2: () => minimize_2_default,
  Minus: () => minus_default,
  Monitor: () => monitor_default,
  MonitorCheck: () => monitor_check_default,
  MonitorCog: () => monitor_cog_default,
  MonitorDot: () => monitor_dot_default,
  MonitorDown: () => monitor_down_default,
  MonitorOff: () => monitor_off_default,
  MonitorPause: () => monitor_pause_default,
  MonitorPlay: () => monitor_play_default,
  MonitorSmartphone: () => monitor_smartphone_default,
  MonitorSpeaker: () => monitor_speaker_default,
  MonitorStop: () => monitor_stop_default,
  MonitorUp: () => monitor_up_default,
  MonitorX: () => monitor_x_default,
  Moon: () => moon_default,
  MoonStar: () => moon_star_default,
  Mountain: () => mountain_default,
  MountainSnow: () => mountain_snow_default,
  Mouse: () => mouse_default,
  MouseOff: () => mouse_off_default,
  MousePointer: () => mouse_pointer_default,
  MousePointer2: () => mouse_pointer_2_default,
  MousePointerBan: () => mouse_pointer_ban_default,
  MousePointerClick: () => mouse_pointer_click_default,
  Move: () => move_default,
  Move3d: () => move_3d_default,
  MoveDiagonal: () => move_diagonal_default,
  MoveDiagonal2: () => move_diagonal_2_default,
  MoveDown: () => move_down_default,
  MoveDownLeft: () => move_down_left_default,
  MoveDownRight: () => move_down_right_default,
  MoveHorizontal: () => move_horizontal_default,
  MoveLeft: () => move_left_default,
  MoveRight: () => move_right_default,
  MoveUp: () => move_up_default,
  MoveUpLeft: () => move_up_left_default,
  MoveUpRight: () => move_up_right_default,
  MoveVertical: () => move_vertical_default,
  Music: () => music_default,
  Music2: () => music_2_default,
  Music3: () => music_3_default,
  Music4: () => music_4_default,
  Navigation: () => navigation_default,
  Navigation2: () => navigation_2_default,
  Navigation2Off: () => navigation_2_off_default,
  NavigationOff: () => navigation_off_default,
  Network: () => network_default,
  Newspaper: () => newspaper_default,
  Nfc: () => nfc_default,
  NonBinary: () => non_binary_default,
  Notebook: () => notebook_default,
  NotebookPen: () => notebook_pen_default,
  NotebookTabs: () => notebook_tabs_default,
  NotebookText: () => notebook_text_default,
  NotepadText: () => notepad_text_default,
  NotepadTextDashed: () => notepad_text_dashed_default,
  Nut: () => nut_default,
  NutOff: () => nut_off_default,
  Octagon: () => octagon_default,
  OctagonAlert: () => octagon_alert_default,
  OctagonMinus: () => octagon_minus_default,
  OctagonPause: () => octagon_pause_default,
  OctagonX: () => octagon_x_default,
  Omega: () => omega_default,
  Option: () => option_default,
  Orbit: () => orbit_default,
  Origami: () => origami_default,
  Package: () => package_default,
  Package2: () => package_2_default,
  PackageCheck: () => package_check_default,
  PackageMinus: () => package_minus_default,
  PackageOpen: () => package_open_default,
  PackagePlus: () => package_plus_default,
  PackageSearch: () => package_search_default,
  PackageX: () => package_x_default,
  PaintBucket: () => paint_bucket_default,
  PaintRoller: () => paint_roller_default,
  Paintbrush: () => paintbrush_default,
  PaintbrushVertical: () => paintbrush_vertical_default,
  Palette: () => palette_default,
  Panda: () => panda_default,
  PanelBottom: () => panel_bottom_default,
  PanelBottomClose: () => panel_bottom_close_default,
  PanelBottomDashed: () => panel_bottom_dashed_default,
  PanelBottomOpen: () => panel_bottom_open_default,
  PanelLeft: () => panel_left_default,
  PanelLeftClose: () => panel_left_close_default,
  PanelLeftDashed: () => panel_left_dashed_default,
  PanelLeftOpen: () => panel_left_open_default,
  PanelRight: () => panel_right_default,
  PanelRightClose: () => panel_right_close_default,
  PanelRightDashed: () => panel_right_dashed_default,
  PanelRightOpen: () => panel_right_open_default,
  PanelTop: () => panel_top_default,
  PanelTopClose: () => panel_top_close_default,
  PanelTopDashed: () => panel_top_dashed_default,
  PanelTopOpen: () => panel_top_open_default,
  PanelsLeftBottom: () => panels_left_bottom_default,
  PanelsRightBottom: () => panels_right_bottom_default,
  PanelsTopLeft: () => panels_top_left_default,
  Paperclip: () => paperclip_default,
  Parentheses: () => parentheses_default,
  ParkingMeter: () => parking_meter_default,
  PartyPopper: () => party_popper_default,
  Pause: () => pause_default,
  PawPrint: () => paw_print_default,
  PcCase: () => pc_case_default,
  Pen: () => pen_default,
  PenLine: () => pen_line_default,
  PenOff: () => pen_off_default,
  PenTool: () => pen_tool_default,
  Pencil: () => pencil_default,
  PencilLine: () => pencil_line_default,
  PencilOff: () => pencil_off_default,
  PencilRuler: () => pencil_ruler_default,
  Pentagon: () => pentagon_default,
  Percent: () => percent_default,
  PersonStanding: () => person_standing_default,
  PhilippinePeso: () => philippine_peso_default,
  Phone: () => phone_default,
  PhoneCall: () => phone_call_default,
  PhoneForwarded: () => phone_forwarded_default,
  PhoneIncoming: () => phone_incoming_default,
  PhoneMissed: () => phone_missed_default,
  PhoneOff: () => phone_off_default,
  PhoneOutgoing: () => phone_outgoing_default,
  Pi: () => pi_default,
  Piano: () => piano_default,
  Pickaxe: () => pickaxe_default,
  PictureInPicture: () => picture_in_picture_default,
  PictureInPicture2: () => picture_in_picture_2_default,
  PiggyBank: () => piggy_bank_default,
  Pilcrow: () => pilcrow_default,
  PilcrowLeft: () => pilcrow_left_default,
  PilcrowRight: () => pilcrow_right_default,
  Pill: () => pill_default,
  PillBottle: () => pill_bottle_default,
  Pin: () => pin_default,
  PinOff: () => pin_off_default,
  Pipette: () => pipette_default,
  Pizza: () => pizza_default,
  Plane: () => plane_default,
  PlaneLanding: () => plane_landing_default,
  PlaneTakeoff: () => plane_takeoff_default,
  Play: () => play_default,
  Plug: () => plug_default,
  Plug2: () => plug_2_default,
  PlugZap: () => plug_zap_default,
  Plus: () => plus_default,
  Pocket: () => pocket_default,
  PocketKnife: () => pocket_knife_default,
  Podcast: () => podcast_default,
  Pointer: () => pointer_default,
  PointerOff: () => pointer_off_default,
  Popcorn: () => popcorn_default,
  Popsicle: () => popsicle_default,
  PoundSterling: () => pound_sterling_default,
  Power: () => power_default,
  PowerOff: () => power_off_default,
  Presentation: () => presentation_default,
  Printer: () => printer_default,
  PrinterCheck: () => printer_check_default,
  Projector: () => projector_default,
  Proportions: () => proportions_default,
  Puzzle: () => puzzle_default,
  Pyramid: () => pyramid_default,
  QrCode: () => qr_code_default,
  Quote: () => quote_default,
  Rabbit: () => rabbit_default,
  Radar: () => radar_default,
  Radiation: () => radiation_default,
  Radical: () => radical_default,
  Radio: () => radio_default,
  RadioReceiver: () => radio_receiver_default,
  RadioTower: () => radio_tower_default,
  Radius: () => radius_default,
  RailSymbol: () => rail_symbol_default,
  Rainbow: () => rainbow_default,
  Rat: () => rat_default,
  Ratio: () => ratio_default,
  Receipt: () => receipt_default,
  ReceiptCent: () => receipt_cent_default,
  ReceiptEuro: () => receipt_euro_default,
  ReceiptIndianRupee: () => receipt_indian_rupee_default,
  ReceiptJapaneseYen: () => receipt_japanese_yen_default,
  ReceiptPoundSterling: () => receipt_pound_sterling_default,
  ReceiptRussianRuble: () => receipt_russian_ruble_default,
  ReceiptSwissFranc: () => receipt_swiss_franc_default,
  ReceiptText: () => receipt_text_default,
  ReceiptTurkishLira: () => receipt_turkish_lira_default,
  RectangleCircle: () => rectangle_circle_default,
  RectangleEllipsis: () => rectangle_ellipsis_default,
  RectangleGoggles: () => rectangle_goggles_default,
  RectangleHorizontal: () => rectangle_horizontal_default,
  RectangleVertical: () => rectangle_vertical_default,
  Recycle: () => recycle_default,
  Redo: () => redo_default,
  Redo2: () => redo_2_default,
  RedoDot: () => redo_dot_default,
  RefreshCcw: () => refresh_ccw_default,
  RefreshCcwDot: () => refresh_ccw_dot_default,
  RefreshCw: () => refresh_cw_default,
  RefreshCwOff: () => refresh_cw_off_default,
  Refrigerator: () => refrigerator_default,
  Regex: () => regex_default,
  RemoveFormatting: () => remove_formatting_default,
  Repeat: () => repeat_default,
  Repeat1: () => repeat_1_default,
  Repeat2: () => repeat_2_default,
  Replace: () => replace_default,
  ReplaceAll: () => replace_all_default,
  Reply: () => reply_default,
  ReplyAll: () => reply_all_default,
  Rewind: () => rewind_default,
  Ribbon: () => ribbon_default,
  Rocket: () => rocket_default,
  RockingChair: () => rocking_chair_default,
  RollerCoaster: () => roller_coaster_default,
  Rotate3d: () => rotate_3d_default,
  RotateCcw: () => rotate_ccw_default,
  RotateCcwKey: () => rotate_ccw_key_default,
  RotateCcwSquare: () => rotate_ccw_square_default,
  RotateCw: () => rotate_cw_default,
  RotateCwSquare: () => rotate_cw_square_default,
  Route: () => route_default,
  RouteOff: () => route_off_default,
  Router: () => router_default,
  Rows2: () => rows_2_default,
  Rows3: () => rows_3_default,
  Rows4: () => rows_4_default,
  Rss: () => rss_default,
  Ruler: () => ruler_default,
  RulerDimensionLine: () => ruler_dimension_line_default,
  RussianRuble: () => russian_ruble_default,
  Sailboat: () => sailboat_default,
  Salad: () => salad_default,
  Sandwich: () => sandwich_default,
  Satellite: () => satellite_default,
  SatelliteDish: () => satellite_dish_default,
  SaudiRiyal: () => saudi_riyal_default,
  Save: () => save_default,
  SaveAll: () => save_all_default,
  SaveOff: () => save_off_default,
  Scale: () => scale_default,
  Scale3d: () => scale_3d_default,
  Scaling: () => scaling_default,
  Scan: () => scan_default,
  ScanBarcode: () => scan_barcode_default,
  ScanEye: () => scan_eye_default,
  ScanFace: () => scan_face_default,
  ScanHeart: () => scan_heart_default,
  ScanLine: () => scan_line_default,
  ScanQrCode: () => scan_qr_code_default,
  ScanSearch: () => scan_search_default,
  ScanText: () => scan_text_default,
  School: () => school_default,
  Scissors: () => scissors_default,
  ScissorsLineDashed: () => scissors_line_dashed_default,
  ScreenShare: () => screen_share_default,
  ScreenShareOff: () => screen_share_off_default,
  Scroll: () => scroll_default,
  ScrollText: () => scroll_text_default,
  Search: () => search_default,
  SearchCheck: () => search_check_default,
  SearchCode: () => search_code_default,
  SearchSlash: () => search_slash_default,
  SearchX: () => search_x_default,
  Section: () => section_default,
  Send: () => send_default,
  SendHorizontal: () => send_horizontal_default,
  SendToBack: () => send_to_back_default,
  SeparatorHorizontal: () => separator_horizontal_default,
  SeparatorVertical: () => separator_vertical_default,
  Server: () => server_default,
  ServerCog: () => server_cog_default,
  ServerCrash: () => server_crash_default,
  ServerOff: () => server_off_default,
  Settings: () => settings_default,
  Settings2: () => settings_2_default,
  Shapes: () => shapes_default,
  Share: () => share_default,
  Share2: () => share_2_default,
  Sheet: () => sheet_default,
  Shell: () => shell_default,
  Shield: () => shield_default,
  ShieldAlert: () => shield_alert_default,
  ShieldBan: () => shield_ban_default,
  ShieldCheck: () => shield_check_default,
  ShieldEllipsis: () => shield_ellipsis_default,
  ShieldHalf: () => shield_half_default,
  ShieldMinus: () => shield_minus_default,
  ShieldOff: () => shield_off_default,
  ShieldPlus: () => shield_plus_default,
  ShieldQuestionMark: () => shield_question_mark_default,
  ShieldUser: () => shield_user_default,
  ShieldX: () => shield_x_default,
  Ship: () => ship_default,
  ShipWheel: () => ship_wheel_default,
  Shirt: () => shirt_default,
  ShoppingBag: () => shopping_bag_default,
  ShoppingBasket: () => shopping_basket_default,
  ShoppingCart: () => shopping_cart_default,
  Shovel: () => shovel_default,
  ShowerHead: () => shower_head_default,
  Shredder: () => shredder_default,
  Shrimp: () => shrimp_default,
  Shrink: () => shrink_default,
  Shrub: () => shrub_default,
  Shuffle: () => shuffle_default,
  Sigma: () => sigma_default,
  Signal: () => signal_default,
  SignalHigh: () => signal_high_default,
  SignalLow: () => signal_low_default,
  SignalMedium: () => signal_medium_default,
  SignalZero: () => signal_zero_default,
  Signature: () => signature_default,
  Signpost: () => signpost_default,
  SignpostBig: () => signpost_big_default,
  Siren: () => siren_default,
  SkipBack: () => skip_back_default,
  SkipForward: () => skip_forward_default,
  Skull: () => skull_default,
  Slack: () => slack_default,
  Slash: () => slash_default,
  Slice: () => slice_default,
  SlidersHorizontal: () => sliders_horizontal_default,
  SlidersVertical: () => sliders_vertical_default,
  Smartphone: () => smartphone_default,
  SmartphoneCharging: () => smartphone_charging_default,
  SmartphoneNfc: () => smartphone_nfc_default,
  Smile: () => smile_default,
  SmilePlus: () => smile_plus_default,
  Snail: () => snail_default,
  Snowflake: () => snowflake_default,
  SoapDispenserDroplet: () => soap_dispenser_droplet_default,
  Sofa: () => sofa_default,
  Soup: () => soup_default,
  Space: () => space_default,
  Spade: () => spade_default,
  Sparkle: () => sparkle_default,
  Sparkles: () => sparkles_default,
  Speaker: () => speaker_default,
  Speech: () => speech_default,
  SpellCheck: () => spell_check_default,
  SpellCheck2: () => spell_check_2_default,
  Spline: () => spline_default,
  SplinePointer: () => spline_pointer_default,
  Split: () => split_default,
  Spool: () => spool_default,
  Spotlight: () => spotlight_default,
  SprayCan: () => spray_can_default,
  Sprout: () => sprout_default,
  Square: () => square_default,
  SquareActivity: () => square_activity_default,
  SquareArrowDown: () => square_arrow_down_default,
  SquareArrowDownLeft: () => square_arrow_down_left_default,
  SquareArrowDownRight: () => square_arrow_down_right_default,
  SquareArrowLeft: () => square_arrow_left_default,
  SquareArrowOutDownLeft: () => square_arrow_out_down_left_default,
  SquareArrowOutDownRight: () => square_arrow_out_down_right_default,
  SquareArrowOutUpLeft: () => square_arrow_out_up_left_default,
  SquareArrowOutUpRight: () => square_arrow_out_up_right_default,
  SquareArrowRight: () => square_arrow_right_default,
  SquareArrowUp: () => square_arrow_up_default,
  SquareArrowUpLeft: () => square_arrow_up_left_default,
  SquareArrowUpRight: () => square_arrow_up_right_default,
  SquareAsterisk: () => square_asterisk_default,
  SquareBottomDashedScissors: () => square_bottom_dashed_scissors_default,
  SquareChartGantt: () => square_chart_gantt_default,
  SquareCheck: () => square_check_default,
  SquareCheckBig: () => square_check_big_default,
  SquareChevronDown: () => square_chevron_down_default,
  SquareChevronLeft: () => square_chevron_left_default,
  SquareChevronRight: () => square_chevron_right_default,
  SquareChevronUp: () => square_chevron_up_default,
  SquareCode: () => square_code_default,
  SquareDashed: () => square_dashed_default,
  SquareDashedBottom: () => square_dashed_bottom_default,
  SquareDashedBottomCode: () => square_dashed_bottom_code_default,
  SquareDashedKanban: () => square_dashed_kanban_default,
  SquareDashedMousePointer: () => square_dashed_mouse_pointer_default,
  SquareDashedTopSolid: () => square_dashed_top_solid_default,
  SquareDivide: () => square_divide_default,
  SquareDot: () => square_dot_default,
  SquareEqual: () => square_equal_default,
  SquareFunction: () => square_function_default,
  SquareKanban: () => square_kanban_default,
  SquareLibrary: () => square_library_default,
  SquareM: () => square_m_default,
  SquareMenu: () => square_menu_default,
  SquareMinus: () => square_minus_default,
  SquareMousePointer: () => square_mouse_pointer_default,
  SquareParking: () => square_parking_default,
  SquareParkingOff: () => square_parking_off_default,
  SquarePause: () => square_pause_default,
  SquarePen: () => square_pen_default,
  SquarePercent: () => square_percent_default,
  SquarePi: () => square_pi_default,
  SquarePilcrow: () => square_pilcrow_default,
  SquarePlay: () => square_play_default,
  SquarePlus: () => square_plus_default,
  SquarePower: () => square_power_default,
  SquareRadical: () => square_radical_default,
  SquareRoundCorner: () => square_round_corner_default,
  SquareScissors: () => square_scissors_default,
  SquareSigma: () => square_sigma_default,
  SquareSlash: () => square_slash_default,
  SquareSplitHorizontal: () => square_split_horizontal_default,
  SquareSplitVertical: () => square_split_vertical_default,
  SquareSquare: () => square_square_default,
  SquareStack: () => square_stack_default,
  SquareStop: () => square_stop_default,
  SquareTerminal: () => square_terminal_default,
  SquareUser: () => square_user_default,
  SquareUserRound: () => square_user_round_default,
  SquareX: () => square_x_default,
  SquaresExclude: () => squares_exclude_default,
  SquaresIntersect: () => squares_intersect_default,
  SquaresSubtract: () => squares_subtract_default,
  SquaresUnite: () => squares_unite_default,
  Squircle: () => squircle_default,
  SquircleDashed: () => squircle_dashed_default,
  Squirrel: () => squirrel_default,
  Stamp: () => stamp_default,
  Star: () => star_default,
  StarHalf: () => star_half_default,
  StarOff: () => star_off_default,
  StepBack: () => step_back_default,
  StepForward: () => step_forward_default,
  Stethoscope: () => stethoscope_default,
  Sticker: () => sticker_default,
  StickyNote: () => sticky_note_default,
  Store: () => store_default,
  StretchHorizontal: () => stretch_horizontal_default,
  StretchVertical: () => stretch_vertical_default,
  Strikethrough: () => strikethrough_default,
  Subscript: () => subscript_default,
  Sun: () => sun_default,
  SunDim: () => sun_dim_default,
  SunMedium: () => sun_medium_default,
  SunMoon: () => sun_moon_default,
  SunSnow: () => sun_snow_default,
  Sunrise: () => sunrise_default,
  Sunset: () => sunset_default,
  Superscript: () => superscript_default,
  SwatchBook: () => swatch_book_default,
  SwissFranc: () => swiss_franc_default,
  SwitchCamera: () => switch_camera_default,
  Sword: () => sword_default,
  Swords: () => swords_default,
  Syringe: () => syringe_default,
  Table: () => table_default,
  Table2: () => table_2_default,
  TableCellsMerge: () => table_cells_merge_default,
  TableCellsSplit: () => table_cells_split_default,
  TableColumnsSplit: () => table_columns_split_default,
  TableOfContents: () => table_of_contents_default,
  TableProperties: () => table_properties_default,
  TableRowsSplit: () => table_rows_split_default,
  Tablet: () => tablet_default,
  TabletSmartphone: () => tablet_smartphone_default,
  Tablets: () => tablets_default,
  Tag: () => tag_default,
  Tags: () => tags_default,
  Tally1: () => tally_1_default,
  Tally2: () => tally_2_default,
  Tally3: () => tally_3_default,
  Tally4: () => tally_4_default,
  Tally5: () => tally_5_default,
  Tangent: () => tangent_default,
  Target: () => target_default,
  Telescope: () => telescope_default,
  Tent: () => tent_default,
  TentTree: () => tent_tree_default,
  Terminal: () => terminal_default,
  TestTube: () => test_tube_default,
  TestTubeDiagonal: () => test_tube_diagonal_default,
  TestTubes: () => test_tubes_default,
  Text: () => text_default,
  TextCursor: () => text_cursor_default,
  TextCursorInput: () => text_cursor_input_default,
  TextQuote: () => text_quote_default,
  TextSearch: () => text_search_default,
  TextSelect: () => text_select_default,
  Theater: () => theater_default,
  Thermometer: () => thermometer_default,
  ThermometerSnowflake: () => thermometer_snowflake_default,
  ThermometerSun: () => thermometer_sun_default,
  ThumbsDown: () => thumbs_down_default,
  ThumbsUp: () => thumbs_up_default,
  Ticket: () => ticket_default,
  TicketCheck: () => ticket_check_default,
  TicketMinus: () => ticket_minus_default,
  TicketPercent: () => ticket_percent_default,
  TicketPlus: () => ticket_plus_default,
  TicketSlash: () => ticket_slash_default,
  TicketX: () => ticket_x_default,
  Tickets: () => tickets_default,
  TicketsPlane: () => tickets_plane_default,
  Timer: () => timer_default,
  TimerOff: () => timer_off_default,
  TimerReset: () => timer_reset_default,
  ToggleLeft: () => toggle_left_default,
  ToggleRight: () => toggle_right_default,
  Toilet: () => toilet_default,
  ToolCase: () => tool_case_default,
  Tornado: () => tornado_default,
  Torus: () => torus_default,
  Touchpad: () => touchpad_default,
  TouchpadOff: () => touchpad_off_default,
  TowerControl: () => tower_control_default,
  ToyBrick: () => toy_brick_default,
  Tractor: () => tractor_default,
  TrafficCone: () => traffic_cone_default,
  TrainFront: () => train_front_default,
  TrainFrontTunnel: () => train_front_tunnel_default,
  TrainTrack: () => train_track_default,
  TramFront: () => tram_front_default,
  Transgender: () => transgender_default,
  Trash: () => trash_default,
  Trash2: () => trash_2_default,
  TreeDeciduous: () => tree_deciduous_default,
  TreePalm: () => tree_palm_default,
  TreePine: () => tree_pine_default,
  Trees: () => trees_default,
  Trello: () => trello_default,
  TrendingDown: () => trending_down_default,
  TrendingUp: () => trending_up_default,
  TrendingUpDown: () => trending_up_down_default,
  Triangle: () => triangle_default,
  TriangleAlert: () => triangle_alert_default,
  TriangleDashed: () => triangle_dashed_default,
  TriangleRight: () => triangle_right_default,
  Trophy: () => trophy_default,
  Truck: () => truck_default,
  TruckElectric: () => truck_electric_default,
  TurkishLira: () => turkish_lira_default,
  Turntable: () => turntable_default,
  Turtle: () => turtle_default,
  Tv: () => tv_default,
  TvMinimal: () => tv_minimal_default,
  TvMinimalPlay: () => tv_minimal_play_default,
  Twitch: () => twitch_default,
  Twitter: () => twitter_default,
  Type: () => type_default,
  TypeOutline: () => type_outline_default,
  Umbrella: () => umbrella_default,
  UmbrellaOff: () => umbrella_off_default,
  Underline: () => underline_default,
  Undo: () => undo_default,
  Undo2: () => undo_2_default,
  UndoDot: () => undo_dot_default,
  UnfoldHorizontal: () => unfold_horizontal_default,
  UnfoldVertical: () => unfold_vertical_default,
  Ungroup: () => ungroup_default,
  University: () => university_default,
  Unlink: () => unlink_default,
  Unlink2: () => unlink_2_default,
  Unplug: () => unplug_default,
  Upload: () => upload_default,
  Usb: () => usb_default,
  User: () => user_default,
  UserCheck: () => user_check_default,
  UserCog: () => user_cog_default,
  UserLock: () => user_lock_default,
  UserMinus: () => user_minus_default,
  UserPen: () => user_pen_default,
  UserPlus: () => user_plus_default,
  UserRound: () => user_round_default,
  UserRoundCheck: () => user_round_check_default,
  UserRoundCog: () => user_round_cog_default,
  UserRoundMinus: () => user_round_minus_default,
  UserRoundPen: () => user_round_pen_default,
  UserRoundPlus: () => user_round_plus_default,
  UserRoundSearch: () => user_round_search_default,
  UserRoundX: () => user_round_x_default,
  UserSearch: () => user_search_default,
  UserStar: () => user_star_default,
  UserX: () => user_x_default,
  Users: () => users_default,
  UsersRound: () => users_round_default,
  Utensils: () => utensils_default,
  UtensilsCrossed: () => utensils_crossed_default,
  UtilityPole: () => utility_pole_default,
  Variable: () => variable_default,
  Vault: () => vault_default,
  VectorSquare: () => vector_square_default,
  Vegan: () => vegan_default,
  VenetianMask: () => venetian_mask_default,
  Venus: () => venus_default,
  VenusAndMars: () => venus_and_mars_default,
  Vibrate: () => vibrate_default,
  VibrateOff: () => vibrate_off_default,
  Video: () => video_default,
  VideoOff: () => video_off_default,
  Videotape: () => videotape_default,
  View: () => view_default,
  Voicemail: () => voicemail_default,
  Volleyball: () => volleyball_default,
  Volume: () => volume_default,
  Volume1: () => volume_1_default,
  Volume2: () => volume_2_default,
  VolumeOff: () => volume_off_default,
  VolumeX: () => volume_x_default,
  Vote: () => vote_default,
  Wallet: () => wallet_default,
  WalletCards: () => wallet_cards_default,
  WalletMinimal: () => wallet_minimal_default,
  Wallpaper: () => wallpaper_default,
  Wand: () => wand_default,
  WandSparkles: () => wand_sparkles_default,
  Warehouse: () => warehouse_default,
  WashingMachine: () => washing_machine_default,
  Watch: () => watch_default,
  Waves: () => waves_default,
  WavesLadder: () => waves_ladder_default,
  Waypoints: () => waypoints_default,
  Webcam: () => webcam_default,
  Webhook: () => webhook_default,
  WebhookOff: () => webhook_off_default,
  Weight: () => weight_default,
  Wheat: () => wheat_default,
  WheatOff: () => wheat_off_default,
  WholeWord: () => whole_word_default,
  Wifi: () => wifi_default,
  WifiCog: () => wifi_cog_default,
  WifiHigh: () => wifi_high_default,
  WifiLow: () => wifi_low_default,
  WifiOff: () => wifi_off_default,
  WifiPen: () => wifi_pen_default,
  WifiSync: () => wifi_sync_default,
  WifiZero: () => wifi_zero_default,
  Wind: () => wind_default,
  WindArrowDown: () => wind_arrow_down_default,
  Wine: () => wine_default,
  WineOff: () => wine_off_default,
  Workflow: () => workflow_default,
  Worm: () => worm_default,
  WrapText: () => wrap_text_default,
  Wrench: () => wrench_default,
  X: () => x_default,
  Youtube: () => youtube_default,
  Zap: () => zap_default,
  ZapOff: () => zap_off_default,
  ZoomIn: () => zoom_in_default,
  ZoomOut: () => zoom_out_default
});

// node_modules/lucide-svelte/dist/defaultAttributes.js
var defaultAttributes = {
  xmlns: "http://www.w3.org/2000/svg",
  width: 24,
  height: 24,
  viewBox: "0 0 24 24",
  fill: "none",
  stroke: "currentColor",
  "stroke-width": 2,
  "stroke-linecap": "round",
  "stroke-linejoin": "round"
};
var defaultAttributes_default = defaultAttributes;

// node_modules/lucide-svelte/dist/Icon.svelte
Icon[FILENAME] = "node_modules/lucide-svelte/dist/Icon.svelte";
var root = add_locations(from_svg(`<svg><!><!></svg>`), Icon[FILENAME], [[14, 0]]);
function Icon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  const $$restProps = legacy_rest_props($$sanitized_props, [
    "name",
    "color",
    "size",
    "strokeWidth",
    "absoluteStrokeWidth",
    "iconNode"
  ]);
  push($$props, false, Icon);
  let name = prop($$props, "name", 8, void 0);
  let color = prop($$props, "color", 8, "currentColor");
  let size = prop($$props, "size", 8, 24);
  let strokeWidth = prop($$props, "strokeWidth", 8, 2);
  let absoluteStrokeWidth = prop($$props, "absoluteStrokeWidth", 8, false);
  let iconNode = prop($$props, "iconNode", 24, () => []);
  const mergeClasses = (...classes) => classes.filter((className, index2, array) => {
    return Boolean(className) && strict_equals(array.indexOf(className), index2);
  }).join(" ");
  init();
  var svg = root();
  attribute_effect(
    svg,
    ($0, $1) => ({
      ...defaultAttributes_default,
      ...$$restProps,
      width: size(),
      height: size(),
      stroke: color(),
      "stroke-width": $0,
      class: $1
    }),
    [
      () => (deep_read_state(absoluteStrokeWidth()), deep_read_state(strokeWidth()), deep_read_state(size()), untrack(() => absoluteStrokeWidth() ? Number(strokeWidth()) * 24 / Number(size()) : strokeWidth())),
      () => (deep_read_state(name()), deep_read_state($$sanitized_props), untrack(() => mergeClasses("lucide-icon", "lucide", name() ? `lucide-${name()}` : "", $$sanitized_props.class)))
    ]
  );
  var node = child(svg);
  add_svelte_meta(
    () => each(node, 1, iconNode, index, ($$anchor2, $$item) => {
      var $$array = user_derived(() => to_array(get($$item), 2));
      let tag = () => get($$array)[0];
      tag();
      let attrs = () => get($$array)[1];
      attrs();
      var fragment = comment();
      var node_1 = first_child(fragment);
      {
        validate_dynamic_element_tag(tag);
        element(
          node_1,
          tag,
          true,
          ($$element, $$anchor3) => {
            attribute_effect($$element, () => ({ ...attrs() }));
          },
          void 0,
          [35, 4]
        );
      }
      append($$anchor2, fragment);
    }),
    "each",
    Icon,
    34,
    2
  );
  var node_2 = sibling(node);
  slot(node_2, $$props, "default", {}, null);
  reset(svg);
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Icon = hmr(Icon, () => Icon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Icon[HMR].source;
    set(Icon[HMR].source, module.default[HMR].original);
  });
}
var Icon_default = Icon;

// node_modules/lucide-svelte/dist/icons/a-arrow-down.svelte
A_arrow_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/a-arrow-down.svelte";
function A_arrow_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, A_arrow_down);
  const iconNode = [
    ["path", { "d": "m14 12 4 4 4-4" }],
    ["path", { "d": "M18 16V7" }],
    ["path", { "d": "m2 16 4.039-9.69a.5.5 0 0 1 .923 0L11 16" }],
    ["path", { "d": "M3.304 13h6.392" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "a-arrow-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(A_arrow_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    A_arrow_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  A_arrow_down = hmr(A_arrow_down, () => A_arrow_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = A_arrow_down[HMR].source;
    set(A_arrow_down[HMR].source, module.default[HMR].original);
  });
}
var a_arrow_down_default = A_arrow_down;

// node_modules/lucide-svelte/dist/icons/a-arrow-up.svelte
A_arrow_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/a-arrow-up.svelte";
function A_arrow_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, A_arrow_up);
  const iconNode = [
    ["path", { "d": "m14 11 4-4 4 4" }],
    ["path", { "d": "M18 16V7" }],
    ["path", { "d": "m2 16 4.039-9.69a.5.5 0 0 1 .923 0L11 16" }],
    ["path", { "d": "M3.304 13h6.392" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "a-arrow-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(A_arrow_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    A_arrow_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  A_arrow_up = hmr(A_arrow_up, () => A_arrow_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = A_arrow_up[HMR].source;
    set(A_arrow_up[HMR].source, module.default[HMR].original);
  });
}
var a_arrow_up_default = A_arrow_up;

// node_modules/lucide-svelte/dist/icons/accessibility.svelte
Accessibility[FILENAME] = "node_modules/lucide-svelte/dist/icons/accessibility.svelte";
function Accessibility($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Accessibility);
  const iconNode = [
    ["circle", { "cx": "16", "cy": "4", "r": "1" }],
    ["path", { "d": "m18 19 1-7-6 1" }],
    ["path", { "d": "m5 8 3-3 5.5 3-2.36 3.5" }],
    ["path", { "d": "M4.24 14.5a5 5 0 0 0 6.88 6" }],
    ["path", { "d": "M13.76 17.5a5 5 0 0 0-6.88-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "accessibility" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Accessibility, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Accessibility,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Accessibility = hmr(Accessibility, () => Accessibility[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Accessibility[HMR].source;
    set(Accessibility[HMR].source, module.default[HMR].original);
  });
}
var accessibility_default = Accessibility;

// node_modules/lucide-svelte/dist/icons/a-large-small.svelte
A_large_small[FILENAME] = "node_modules/lucide-svelte/dist/icons/a-large-small.svelte";
function A_large_small($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, A_large_small);
  const iconNode = [
    [
      "path",
      { "d": "m15 16 2.536-7.328a1.02 1.02 1 0 1 1.928 0L22 16" }
    ],
    ["path", { "d": "M15.697 14h5.606" }],
    ["path", { "d": "m2 16 4.039-9.69a.5.5 0 0 1 .923 0L11 16" }],
    ["path", { "d": "M3.304 13h6.392" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "a-large-small" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(A_large_small, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    A_large_small,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  A_large_small = hmr(A_large_small, () => A_large_small[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = A_large_small[HMR].source;
    set(A_large_small[HMR].source, module.default[HMR].original);
  });
}
var a_large_small_default = A_large_small;

// node_modules/lucide-svelte/dist/icons/activity.svelte
Activity[FILENAME] = "node_modules/lucide-svelte/dist/icons/activity.svelte";
function Activity($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Activity);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 12h-2.48a2 2 0 0 0-1.93 1.46l-2.35 8.36a.25.25 0 0 1-.48 0L9.24 2.18a.25.25 0 0 0-.48 0l-2.35 8.36A2 2 0 0 1 4.49 12H2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "activity" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Activity, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Activity,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Activity = hmr(Activity, () => Activity[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Activity[HMR].source;
    set(Activity[HMR].source, module.default[HMR].original);
  });
}
var activity_default = Activity;

// node_modules/lucide-svelte/dist/icons/air-vent.svelte
Air_vent[FILENAME] = "node_modules/lucide-svelte/dist/icons/air-vent.svelte";
function Air_vent($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Air_vent);
  const iconNode = [
    ["path", { "d": "M18 17.5a2.5 2.5 0 1 1-4 2.03V12" }],
    [
      "path",
      {
        "d": "M6 12H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"
      }
    ],
    ["path", { "d": "M6 8h12" }],
    ["path", { "d": "M6.6 15.572A2 2 0 1 0 10 17v-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "air-vent" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Air_vent, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Air_vent,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Air_vent = hmr(Air_vent, () => Air_vent[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Air_vent[HMR].source;
    set(Air_vent[HMR].source, module.default[HMR].original);
  });
}
var air_vent_default = Air_vent;

// node_modules/lucide-svelte/dist/icons/airplay.svelte
Airplay[FILENAME] = "node_modules/lucide-svelte/dist/icons/airplay.svelte";
function Airplay($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Airplay);
  const iconNode = [
    [
      "path",
      {
        "d": "M5 17H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-1"
      }
    ],
    ["path", { "d": "m12 15 5 6H7Z" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "airplay" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Airplay, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Airplay,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Airplay = hmr(Airplay, () => Airplay[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Airplay[HMR].source;
    set(Airplay[HMR].source, module.default[HMR].original);
  });
}
var airplay_default = Airplay;

// node_modules/lucide-svelte/dist/icons/alarm-clock-check.svelte
Alarm_clock_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/alarm-clock-check.svelte";
function Alarm_clock_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Alarm_clock_check);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "13", "r": "8" }],
    ["path", { "d": "M5 3 2 6" }],
    ["path", { "d": "m22 6-3-3" }],
    ["path", { "d": "M6.38 18.7 4 21" }],
    ["path", { "d": "M17.64 18.67 20 21" }],
    ["path", { "d": "m9 13 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "alarm-clock-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Alarm_clock_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Alarm_clock_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Alarm_clock_check = hmr(Alarm_clock_check, () => Alarm_clock_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Alarm_clock_check[HMR].source;
    set(Alarm_clock_check[HMR].source, module.default[HMR].original);
  });
}
var alarm_clock_check_default = Alarm_clock_check;

// node_modules/lucide-svelte/dist/icons/alarm-clock-minus.svelte
Alarm_clock_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/alarm-clock-minus.svelte";
function Alarm_clock_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Alarm_clock_minus);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "13", "r": "8" }],
    ["path", { "d": "M5 3 2 6" }],
    ["path", { "d": "m22 6-3-3" }],
    ["path", { "d": "M6.38 18.7 4 21" }],
    ["path", { "d": "M17.64 18.67 20 21" }],
    ["path", { "d": "M9 13h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "alarm-clock-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Alarm_clock_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Alarm_clock_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Alarm_clock_minus = hmr(Alarm_clock_minus, () => Alarm_clock_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Alarm_clock_minus[HMR].source;
    set(Alarm_clock_minus[HMR].source, module.default[HMR].original);
  });
}
var alarm_clock_minus_default = Alarm_clock_minus;

// node_modules/lucide-svelte/dist/icons/alarm-clock-off.svelte
Alarm_clock_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/alarm-clock-off.svelte";
function Alarm_clock_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Alarm_clock_off);
  const iconNode = [
    ["path", { "d": "M6.87 6.87a8 8 0 1 0 11.26 11.26" }],
    ["path", { "d": "M19.9 14.25a8 8 0 0 0-9.15-9.15" }],
    ["path", { "d": "m22 6-3-3" }],
    ["path", { "d": "M6.26 18.67 4 21" }],
    ["path", { "d": "m2 2 20 20" }],
    ["path", { "d": "M4 4 2 6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "alarm-clock-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Alarm_clock_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Alarm_clock_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Alarm_clock_off = hmr(Alarm_clock_off, () => Alarm_clock_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Alarm_clock_off[HMR].source;
    set(Alarm_clock_off[HMR].source, module.default[HMR].original);
  });
}
var alarm_clock_off_default = Alarm_clock_off;

// node_modules/lucide-svelte/dist/icons/alarm-clock-plus.svelte
Alarm_clock_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/alarm-clock-plus.svelte";
function Alarm_clock_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Alarm_clock_plus);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "13", "r": "8" }],
    ["path", { "d": "M5 3 2 6" }],
    ["path", { "d": "m22 6-3-3" }],
    ["path", { "d": "M6.38 18.7 4 21" }],
    ["path", { "d": "M17.64 18.67 20 21" }],
    ["path", { "d": "M12 10v6" }],
    ["path", { "d": "M9 13h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "alarm-clock-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Alarm_clock_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Alarm_clock_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Alarm_clock_plus = hmr(Alarm_clock_plus, () => Alarm_clock_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Alarm_clock_plus[HMR].source;
    set(Alarm_clock_plus[HMR].source, module.default[HMR].original);
  });
}
var alarm_clock_plus_default = Alarm_clock_plus;

// node_modules/lucide-svelte/dist/icons/alarm-clock.svelte
Alarm_clock[FILENAME] = "node_modules/lucide-svelte/dist/icons/alarm-clock.svelte";
function Alarm_clock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Alarm_clock);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "13", "r": "8" }],
    ["path", { "d": "M12 9v4l2 2" }],
    ["path", { "d": "M5 3 2 6" }],
    ["path", { "d": "m22 6-3-3" }],
    ["path", { "d": "M6.38 18.7 4 21" }],
    ["path", { "d": "M17.64 18.67 20 21" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "alarm-clock" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Alarm_clock, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Alarm_clock,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Alarm_clock = hmr(Alarm_clock, () => Alarm_clock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Alarm_clock[HMR].source;
    set(Alarm_clock[HMR].source, module.default[HMR].original);
  });
}
var alarm_clock_default = Alarm_clock;

// node_modules/lucide-svelte/dist/icons/alarm-smoke.svelte
Alarm_smoke[FILENAME] = "node_modules/lucide-svelte/dist/icons/alarm-smoke.svelte";
function Alarm_smoke($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Alarm_smoke);
  const iconNode = [
    ["path", { "d": "M11 21c0-2.5 2-2.5 2-5" }],
    ["path", { "d": "M16 21c0-2.5 2-2.5 2-5" }],
    [
      "path",
      {
        "d": "m19 8-.8 3a1.25 1.25 0 0 1-1.2 1H7a1.25 1.25 0 0 1-1.2-1L5 8"
      }
    ],
    [
      "path",
      {
        "d": "M21 3a1 1 0 0 1 1 1v2a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a1 1 0 0 1 1-1z"
      }
    ],
    ["path", { "d": "M6 21c0-2.5 2-2.5 2-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "alarm-smoke" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Alarm_smoke, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Alarm_smoke,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Alarm_smoke = hmr(Alarm_smoke, () => Alarm_smoke[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Alarm_smoke[HMR].source;
    set(Alarm_smoke[HMR].source, module.default[HMR].original);
  });
}
var alarm_smoke_default = Alarm_smoke;

// node_modules/lucide-svelte/dist/icons/album.svelte
Album[FILENAME] = "node_modules/lucide-svelte/dist/icons/album.svelte";
function Album($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Album);
  const iconNode = [
    [
      "rect",
      {
        "width": "18",
        "height": "18",
        "x": "3",
        "y": "3",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["polyline", { "points": "11 3 11 11 14 8 17 11 17 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "album" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Album, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Album,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Album = hmr(Album, () => Album[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Album[HMR].source;
    set(Album[HMR].source, module.default[HMR].original);
  });
}
var album_default = Album;

// node_modules/lucide-svelte/dist/icons/align-center-horizontal.svelte
Align_center_horizontal[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-center-horizontal.svelte";
function Align_center_horizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_center_horizontal);
  const iconNode = [
    ["path", { "d": "M2 12h20" }],
    ["path", { "d": "M10 16v4a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-4" }],
    ["path", { "d": "M10 8V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v4" }],
    [
      "path",
      { "d": "M20 16v1a2 2 0 0 1-2 2h-2a2 2 0 0 1-2-2v-1" }
    ],
    ["path", { "d": "M14 8V7c0-1.1.9-2 2-2h2a2 2 0 0 1 2 2v1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-center-horizontal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_center_horizontal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_center_horizontal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_center_horizontal = hmr(Align_center_horizontal, () => Align_center_horizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_center_horizontal[HMR].source;
    set(Align_center_horizontal[HMR].source, module.default[HMR].original);
  });
}
var align_center_horizontal_default = Align_center_horizontal;

// node_modules/lucide-svelte/dist/icons/align-center-vertical.svelte
Align_center_vertical[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-center-vertical.svelte";
function Align_center_vertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_center_vertical);
  const iconNode = [
    ["path", { "d": "M12 2v20" }],
    ["path", { "d": "M8 10H4a2 2 0 0 1-2-2V6c0-1.1.9-2 2-2h4" }],
    ["path", { "d": "M16 10h4a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2h-4" }],
    ["path", { "d": "M8 20H7a2 2 0 0 1-2-2v-2c0-1.1.9-2 2-2h1" }],
    ["path", { "d": "M16 14h1a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2h-1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-center-vertical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_center_vertical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_center_vertical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_center_vertical = hmr(Align_center_vertical, () => Align_center_vertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_center_vertical[HMR].source;
    set(Align_center_vertical[HMR].source, module.default[HMR].original);
  });
}
var align_center_vertical_default = Align_center_vertical;

// node_modules/lucide-svelte/dist/icons/align-center.svelte
Align_center[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-center.svelte";
function Align_center($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_center);
  const iconNode = [
    ["path", { "d": "M17 12H7" }],
    ["path", { "d": "M19 18H5" }],
    ["path", { "d": "M21 6H3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-center" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_center, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_center,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_center = hmr(Align_center, () => Align_center[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_center[HMR].source;
    set(Align_center[HMR].source, module.default[HMR].original);
  });
}
var align_center_default = Align_center;

// node_modules/lucide-svelte/dist/icons/align-end-horizontal.svelte
Align_end_horizontal[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-end-horizontal.svelte";
function Align_end_horizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_end_horizontal);
  const iconNode = [
    [
      "rect",
      { "width": "6", "height": "16", "x": "4", "y": "2", "rx": "2" }
    ],
    [
      "rect",
      { "width": "6", "height": "9", "x": "14", "y": "9", "rx": "2" }
    ],
    ["path", { "d": "M22 22H2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-end-horizontal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_end_horizontal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_end_horizontal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_end_horizontal = hmr(Align_end_horizontal, () => Align_end_horizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_end_horizontal[HMR].source;
    set(Align_end_horizontal[HMR].source, module.default[HMR].original);
  });
}
var align_end_horizontal_default = Align_end_horizontal;

// node_modules/lucide-svelte/dist/icons/align-end-vertical.svelte
Align_end_vertical[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-end-vertical.svelte";
function Align_end_vertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_end_vertical);
  const iconNode = [
    [
      "rect",
      { "width": "16", "height": "6", "x": "2", "y": "4", "rx": "2" }
    ],
    [
      "rect",
      { "width": "9", "height": "6", "x": "9", "y": "14", "rx": "2" }
    ],
    ["path", { "d": "M22 22V2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-end-vertical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_end_vertical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_end_vertical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_end_vertical = hmr(Align_end_vertical, () => Align_end_vertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_end_vertical[HMR].source;
    set(Align_end_vertical[HMR].source, module.default[HMR].original);
  });
}
var align_end_vertical_default = Align_end_vertical;

// node_modules/lucide-svelte/dist/icons/align-horizontal-distribute-center.svelte
Align_horizontal_distribute_center[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-horizontal-distribute-center.svelte";
function Align_horizontal_distribute_center($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_horizontal_distribute_center);
  const iconNode = [
    [
      "rect",
      { "width": "6", "height": "14", "x": "4", "y": "5", "rx": "2" }
    ],
    [
      "rect",
      { "width": "6", "height": "10", "x": "14", "y": "7", "rx": "2" }
    ],
    ["path", { "d": "M17 22v-5" }],
    ["path", { "d": "M17 7V2" }],
    ["path", { "d": "M7 22v-3" }],
    ["path", { "d": "M7 5V2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-horizontal-distribute-center" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_horizontal_distribute_center, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_horizontal_distribute_center,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_horizontal_distribute_center = hmr(Align_horizontal_distribute_center, () => Align_horizontal_distribute_center[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_horizontal_distribute_center[HMR].source;
    set(Align_horizontal_distribute_center[HMR].source, module.default[HMR].original);
  });
}
var align_horizontal_distribute_center_default = Align_horizontal_distribute_center;

// node_modules/lucide-svelte/dist/icons/align-horizontal-distribute-end.svelte
Align_horizontal_distribute_end[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-horizontal-distribute-end.svelte";
function Align_horizontal_distribute_end($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_horizontal_distribute_end);
  const iconNode = [
    [
      "rect",
      { "width": "6", "height": "14", "x": "4", "y": "5", "rx": "2" }
    ],
    [
      "rect",
      { "width": "6", "height": "10", "x": "14", "y": "7", "rx": "2" }
    ],
    ["path", { "d": "M10 2v20" }],
    ["path", { "d": "M20 2v20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-horizontal-distribute-end" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_horizontal_distribute_end, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_horizontal_distribute_end,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_horizontal_distribute_end = hmr(Align_horizontal_distribute_end, () => Align_horizontal_distribute_end[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_horizontal_distribute_end[HMR].source;
    set(Align_horizontal_distribute_end[HMR].source, module.default[HMR].original);
  });
}
var align_horizontal_distribute_end_default = Align_horizontal_distribute_end;

// node_modules/lucide-svelte/dist/icons/align-horizontal-distribute-start.svelte
Align_horizontal_distribute_start[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-horizontal-distribute-start.svelte";
function Align_horizontal_distribute_start($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_horizontal_distribute_start);
  const iconNode = [
    [
      "rect",
      { "width": "6", "height": "14", "x": "4", "y": "5", "rx": "2" }
    ],
    [
      "rect",
      { "width": "6", "height": "10", "x": "14", "y": "7", "rx": "2" }
    ],
    ["path", { "d": "M4 2v20" }],
    ["path", { "d": "M14 2v20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-horizontal-distribute-start" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_horizontal_distribute_start, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_horizontal_distribute_start,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_horizontal_distribute_start = hmr(Align_horizontal_distribute_start, () => Align_horizontal_distribute_start[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_horizontal_distribute_start[HMR].source;
    set(Align_horizontal_distribute_start[HMR].source, module.default[HMR].original);
  });
}
var align_horizontal_distribute_start_default = Align_horizontal_distribute_start;

// node_modules/lucide-svelte/dist/icons/align-horizontal-justify-end.svelte
Align_horizontal_justify_end[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-horizontal-justify-end.svelte";
function Align_horizontal_justify_end($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_horizontal_justify_end);
  const iconNode = [
    [
      "rect",
      { "width": "6", "height": "14", "x": "2", "y": "5", "rx": "2" }
    ],
    [
      "rect",
      { "width": "6", "height": "10", "x": "12", "y": "7", "rx": "2" }
    ],
    ["path", { "d": "M22 2v20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-horizontal-justify-end" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_horizontal_justify_end, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_horizontal_justify_end,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_horizontal_justify_end = hmr(Align_horizontal_justify_end, () => Align_horizontal_justify_end[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_horizontal_justify_end[HMR].source;
    set(Align_horizontal_justify_end[HMR].source, module.default[HMR].original);
  });
}
var align_horizontal_justify_end_default = Align_horizontal_justify_end;

// node_modules/lucide-svelte/dist/icons/align-horizontal-justify-center.svelte
Align_horizontal_justify_center[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-horizontal-justify-center.svelte";
function Align_horizontal_justify_center($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_horizontal_justify_center);
  const iconNode = [
    [
      "rect",
      { "width": "6", "height": "14", "x": "2", "y": "5", "rx": "2" }
    ],
    [
      "rect",
      { "width": "6", "height": "10", "x": "16", "y": "7", "rx": "2" }
    ],
    ["path", { "d": "M12 2v20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-horizontal-justify-center" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_horizontal_justify_center, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_horizontal_justify_center,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_horizontal_justify_center = hmr(Align_horizontal_justify_center, () => Align_horizontal_justify_center[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_horizontal_justify_center[HMR].source;
    set(Align_horizontal_justify_center[HMR].source, module.default[HMR].original);
  });
}
var align_horizontal_justify_center_default = Align_horizontal_justify_center;

// node_modules/lucide-svelte/dist/icons/align-horizontal-justify-start.svelte
Align_horizontal_justify_start[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-horizontal-justify-start.svelte";
function Align_horizontal_justify_start($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_horizontal_justify_start);
  const iconNode = [
    [
      "rect",
      { "width": "6", "height": "14", "x": "6", "y": "5", "rx": "2" }
    ],
    [
      "rect",
      { "width": "6", "height": "10", "x": "16", "y": "7", "rx": "2" }
    ],
    ["path", { "d": "M2 2v20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-horizontal-justify-start" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_horizontal_justify_start, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_horizontal_justify_start,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_horizontal_justify_start = hmr(Align_horizontal_justify_start, () => Align_horizontal_justify_start[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_horizontal_justify_start[HMR].source;
    set(Align_horizontal_justify_start[HMR].source, module.default[HMR].original);
  });
}
var align_horizontal_justify_start_default = Align_horizontal_justify_start;

// node_modules/lucide-svelte/dist/icons/align-horizontal-space-around.svelte
Align_horizontal_space_around[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-horizontal-space-around.svelte";
function Align_horizontal_space_around($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_horizontal_space_around);
  const iconNode = [
    [
      "rect",
      { "width": "6", "height": "10", "x": "9", "y": "7", "rx": "2" }
    ],
    ["path", { "d": "M4 22V2" }],
    ["path", { "d": "M20 22V2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-horizontal-space-around" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_horizontal_space_around, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_horizontal_space_around,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_horizontal_space_around = hmr(Align_horizontal_space_around, () => Align_horizontal_space_around[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_horizontal_space_around[HMR].source;
    set(Align_horizontal_space_around[HMR].source, module.default[HMR].original);
  });
}
var align_horizontal_space_around_default = Align_horizontal_space_around;

// node_modules/lucide-svelte/dist/icons/align-horizontal-space-between.svelte
Align_horizontal_space_between[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-horizontal-space-between.svelte";
function Align_horizontal_space_between($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_horizontal_space_between);
  const iconNode = [
    [
      "rect",
      { "width": "6", "height": "14", "x": "3", "y": "5", "rx": "2" }
    ],
    [
      "rect",
      { "width": "6", "height": "10", "x": "15", "y": "7", "rx": "2" }
    ],
    ["path", { "d": "M3 2v20" }],
    ["path", { "d": "M21 2v20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-horizontal-space-between" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_horizontal_space_between, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_horizontal_space_between,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_horizontal_space_between = hmr(Align_horizontal_space_between, () => Align_horizontal_space_between[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_horizontal_space_between[HMR].source;
    set(Align_horizontal_space_between[HMR].source, module.default[HMR].original);
  });
}
var align_horizontal_space_between_default = Align_horizontal_space_between;

// node_modules/lucide-svelte/dist/icons/align-left.svelte
Align_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-left.svelte";
function Align_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_left);
  const iconNode = [
    ["path", { "d": "M15 12H3" }],
    ["path", { "d": "M17 18H3" }],
    ["path", { "d": "M21 6H3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_left = hmr(Align_left, () => Align_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_left[HMR].source;
    set(Align_left[HMR].source, module.default[HMR].original);
  });
}
var align_left_default = Align_left;

// node_modules/lucide-svelte/dist/icons/align-justify.svelte
Align_justify[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-justify.svelte";
function Align_justify($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_justify);
  const iconNode = [
    ["path", { "d": "M3 12h18" }],
    ["path", { "d": "M3 18h18" }],
    ["path", { "d": "M3 6h18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-justify" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_justify, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_justify,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_justify = hmr(Align_justify, () => Align_justify[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_justify[HMR].source;
    set(Align_justify[HMR].source, module.default[HMR].original);
  });
}
var align_justify_default = Align_justify;

// node_modules/lucide-svelte/dist/icons/align-right.svelte
Align_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-right.svelte";
function Align_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_right);
  const iconNode = [
    ["path", { "d": "M21 12H9" }],
    ["path", { "d": "M21 18H7" }],
    ["path", { "d": "M21 6H3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_right = hmr(Align_right, () => Align_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_right[HMR].source;
    set(Align_right[HMR].source, module.default[HMR].original);
  });
}
var align_right_default = Align_right;

// node_modules/lucide-svelte/dist/icons/align-start-horizontal.svelte
Align_start_horizontal[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-start-horizontal.svelte";
function Align_start_horizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_start_horizontal);
  const iconNode = [
    [
      "rect",
      { "width": "6", "height": "16", "x": "4", "y": "6", "rx": "2" }
    ],
    [
      "rect",
      { "width": "6", "height": "9", "x": "14", "y": "6", "rx": "2" }
    ],
    ["path", { "d": "M22 2H2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-start-horizontal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_start_horizontal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_start_horizontal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_start_horizontal = hmr(Align_start_horizontal, () => Align_start_horizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_start_horizontal[HMR].source;
    set(Align_start_horizontal[HMR].source, module.default[HMR].original);
  });
}
var align_start_horizontal_default = Align_start_horizontal;

// node_modules/lucide-svelte/dist/icons/align-start-vertical.svelte
Align_start_vertical[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-start-vertical.svelte";
function Align_start_vertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_start_vertical);
  const iconNode = [
    [
      "rect",
      { "width": "9", "height": "6", "x": "6", "y": "14", "rx": "2" }
    ],
    [
      "rect",
      { "width": "16", "height": "6", "x": "6", "y": "4", "rx": "2" }
    ],
    ["path", { "d": "M2 2v20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-start-vertical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_start_vertical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_start_vertical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_start_vertical = hmr(Align_start_vertical, () => Align_start_vertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_start_vertical[HMR].source;
    set(Align_start_vertical[HMR].source, module.default[HMR].original);
  });
}
var align_start_vertical_default = Align_start_vertical;

// node_modules/lucide-svelte/dist/icons/align-vertical-distribute-center.svelte
Align_vertical_distribute_center[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-vertical-distribute-center.svelte";
function Align_vertical_distribute_center($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_vertical_distribute_center);
  const iconNode = [
    ["path", { "d": "M22 17h-3" }],
    ["path", { "d": "M22 7h-5" }],
    ["path", { "d": "M5 17H2" }],
    ["path", { "d": "M7 7H2" }],
    [
      "rect",
      { "x": "5", "y": "14", "width": "14", "height": "6", "rx": "2" }
    ],
    [
      "rect",
      { "x": "7", "y": "4", "width": "10", "height": "6", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-vertical-distribute-center" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_vertical_distribute_center, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_vertical_distribute_center,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_vertical_distribute_center = hmr(Align_vertical_distribute_center, () => Align_vertical_distribute_center[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_vertical_distribute_center[HMR].source;
    set(Align_vertical_distribute_center[HMR].source, module.default[HMR].original);
  });
}
var align_vertical_distribute_center_default = Align_vertical_distribute_center;

// node_modules/lucide-svelte/dist/icons/align-vertical-distribute-end.svelte
Align_vertical_distribute_end[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-vertical-distribute-end.svelte";
function Align_vertical_distribute_end($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_vertical_distribute_end);
  const iconNode = [
    [
      "rect",
      { "width": "14", "height": "6", "x": "5", "y": "14", "rx": "2" }
    ],
    [
      "rect",
      { "width": "10", "height": "6", "x": "7", "y": "4", "rx": "2" }
    ],
    ["path", { "d": "M2 20h20" }],
    ["path", { "d": "M2 10h20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-vertical-distribute-end" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_vertical_distribute_end, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_vertical_distribute_end,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_vertical_distribute_end = hmr(Align_vertical_distribute_end, () => Align_vertical_distribute_end[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_vertical_distribute_end[HMR].source;
    set(Align_vertical_distribute_end[HMR].source, module.default[HMR].original);
  });
}
var align_vertical_distribute_end_default = Align_vertical_distribute_end;

// node_modules/lucide-svelte/dist/icons/align-vertical-distribute-start.svelte
Align_vertical_distribute_start[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-vertical-distribute-start.svelte";
function Align_vertical_distribute_start($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_vertical_distribute_start);
  const iconNode = [
    [
      "rect",
      { "width": "14", "height": "6", "x": "5", "y": "14", "rx": "2" }
    ],
    [
      "rect",
      { "width": "10", "height": "6", "x": "7", "y": "4", "rx": "2" }
    ],
    ["path", { "d": "M2 14h20" }],
    ["path", { "d": "M2 4h20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-vertical-distribute-start" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_vertical_distribute_start, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_vertical_distribute_start,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_vertical_distribute_start = hmr(Align_vertical_distribute_start, () => Align_vertical_distribute_start[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_vertical_distribute_start[HMR].source;
    set(Align_vertical_distribute_start[HMR].source, module.default[HMR].original);
  });
}
var align_vertical_distribute_start_default = Align_vertical_distribute_start;

// node_modules/lucide-svelte/dist/icons/align-vertical-justify-end.svelte
Align_vertical_justify_end[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-vertical-justify-end.svelte";
function Align_vertical_justify_end($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_vertical_justify_end);
  const iconNode = [
    [
      "rect",
      { "width": "14", "height": "6", "x": "5", "y": "12", "rx": "2" }
    ],
    [
      "rect",
      { "width": "10", "height": "6", "x": "7", "y": "2", "rx": "2" }
    ],
    ["path", { "d": "M2 22h20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-vertical-justify-end" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_vertical_justify_end, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_vertical_justify_end,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_vertical_justify_end = hmr(Align_vertical_justify_end, () => Align_vertical_justify_end[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_vertical_justify_end[HMR].source;
    set(Align_vertical_justify_end[HMR].source, module.default[HMR].original);
  });
}
var align_vertical_justify_end_default = Align_vertical_justify_end;

// node_modules/lucide-svelte/dist/icons/align-vertical-justify-center.svelte
Align_vertical_justify_center[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-vertical-justify-center.svelte";
function Align_vertical_justify_center($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_vertical_justify_center);
  const iconNode = [
    [
      "rect",
      { "width": "14", "height": "6", "x": "5", "y": "16", "rx": "2" }
    ],
    [
      "rect",
      { "width": "10", "height": "6", "x": "7", "y": "2", "rx": "2" }
    ],
    ["path", { "d": "M2 12h20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-vertical-justify-center" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_vertical_justify_center, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_vertical_justify_center,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_vertical_justify_center = hmr(Align_vertical_justify_center, () => Align_vertical_justify_center[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_vertical_justify_center[HMR].source;
    set(Align_vertical_justify_center[HMR].source, module.default[HMR].original);
  });
}
var align_vertical_justify_center_default = Align_vertical_justify_center;

// node_modules/lucide-svelte/dist/icons/align-vertical-justify-start.svelte
Align_vertical_justify_start[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-vertical-justify-start.svelte";
function Align_vertical_justify_start($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_vertical_justify_start);
  const iconNode = [
    [
      "rect",
      { "width": "14", "height": "6", "x": "5", "y": "16", "rx": "2" }
    ],
    [
      "rect",
      { "width": "10", "height": "6", "x": "7", "y": "6", "rx": "2" }
    ],
    ["path", { "d": "M2 2h20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-vertical-justify-start" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_vertical_justify_start, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_vertical_justify_start,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_vertical_justify_start = hmr(Align_vertical_justify_start, () => Align_vertical_justify_start[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_vertical_justify_start[HMR].source;
    set(Align_vertical_justify_start[HMR].source, module.default[HMR].original);
  });
}
var align_vertical_justify_start_default = Align_vertical_justify_start;

// node_modules/lucide-svelte/dist/icons/align-vertical-space-between.svelte
Align_vertical_space_between[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-vertical-space-between.svelte";
function Align_vertical_space_between($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_vertical_space_between);
  const iconNode = [
    [
      "rect",
      { "width": "14", "height": "6", "x": "5", "y": "15", "rx": "2" }
    ],
    [
      "rect",
      { "width": "10", "height": "6", "x": "7", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M2 21h20" }],
    ["path", { "d": "M2 3h20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-vertical-space-between" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_vertical_space_between, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_vertical_space_between,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_vertical_space_between = hmr(Align_vertical_space_between, () => Align_vertical_space_between[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_vertical_space_between[HMR].source;
    set(Align_vertical_space_between[HMR].source, module.default[HMR].original);
  });
}
var align_vertical_space_between_default = Align_vertical_space_between;

// node_modules/lucide-svelte/dist/icons/align-vertical-space-around.svelte
Align_vertical_space_around[FILENAME] = "node_modules/lucide-svelte/dist/icons/align-vertical-space-around.svelte";
function Align_vertical_space_around($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Align_vertical_space_around);
  const iconNode = [
    [
      "rect",
      { "width": "10", "height": "6", "x": "7", "y": "9", "rx": "2" }
    ],
    ["path", { "d": "M22 20H2" }],
    ["path", { "d": "M22 4H2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "align-vertical-space-around" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Align_vertical_space_around, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Align_vertical_space_around,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Align_vertical_space_around = hmr(Align_vertical_space_around, () => Align_vertical_space_around[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Align_vertical_space_around[HMR].source;
    set(Align_vertical_space_around[HMR].source, module.default[HMR].original);
  });
}
var align_vertical_space_around_default = Align_vertical_space_around;

// node_modules/lucide-svelte/dist/icons/ambulance.svelte
Ambulance[FILENAME] = "node_modules/lucide-svelte/dist/icons/ambulance.svelte";
function Ambulance($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ambulance);
  const iconNode = [
    ["path", { "d": "M10 10H6" }],
    [
      "path",
      {
        "d": "M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2"
      }
    ],
    [
      "path",
      {
        "d": "M19 18h2a1 1 0 0 0 1-1v-3.28a1 1 0 0 0-.684-.948l-1.923-.641a1 1 0 0 1-.578-.502l-1.539-3.076A1 1 0 0 0 16.382 8H14"
      }
    ],
    ["path", { "d": "M8 8v4" }],
    ["path", { "d": "M9 18h6" }],
    ["circle", { "cx": "17", "cy": "18", "r": "2" }],
    ["circle", { "cx": "7", "cy": "18", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ambulance" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ambulance, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ambulance,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ambulance = hmr(Ambulance, () => Ambulance[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ambulance[HMR].source;
    set(Ambulance[HMR].source, module.default[HMR].original);
  });
}
var ambulance_default = Ambulance;

// node_modules/lucide-svelte/dist/icons/ampersand.svelte
Ampersand[FILENAME] = "node_modules/lucide-svelte/dist/icons/ampersand.svelte";
function Ampersand($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ampersand);
  const iconNode = [
    [
      "path",
      {
        "d": "M17.5 12c0 4.4-3.6 8-8 8A4.5 4.5 0 0 1 5 15.5c0-6 8-4 8-8.5a3 3 0 1 0-6 0c0 3 2.5 8.5 12 13"
      }
    ],
    ["path", { "d": "M16 12h3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ampersand" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ampersand, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ampersand,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ampersand = hmr(Ampersand, () => Ampersand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ampersand[HMR].source;
    set(Ampersand[HMR].source, module.default[HMR].original);
  });
}
var ampersand_default = Ampersand;

// node_modules/lucide-svelte/dist/icons/ampersands.svelte
Ampersands[FILENAME] = "node_modules/lucide-svelte/dist/icons/ampersands.svelte";
function Ampersands($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ampersands);
  const iconNode = [
    [
      "path",
      {
        "d": "M10 17c-5-3-7-7-7-9a2 2 0 0 1 4 0c0 2.5-5 2.5-5 6 0 1.7 1.3 3 3 3 2.8 0 5-2.2 5-5"
      }
    ],
    [
      "path",
      {
        "d": "M22 17c-5-3-7-7-7-9a2 2 0 0 1 4 0c0 2.5-5 2.5-5 6 0 1.7 1.3 3 3 3 2.8 0 5-2.2 5-5"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ampersands" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ampersands, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ampersands,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ampersands = hmr(Ampersands, () => Ampersands[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ampersands[HMR].source;
    set(Ampersands[HMR].source, module.default[HMR].original);
  });
}
var ampersands_default = Ampersands;

// node_modules/lucide-svelte/dist/icons/amphora.svelte
Amphora[FILENAME] = "node_modules/lucide-svelte/dist/icons/amphora.svelte";
function Amphora($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Amphora);
  const iconNode = [
    [
      "path",
      {
        "d": "M10 2v5.632c0 .424-.272.795-.653.982A6 6 0 0 0 6 14c.006 4 3 7 5 8"
      }
    ],
    ["path", { "d": "M10 5H8a2 2 0 0 0 0 4h.68" }],
    [
      "path",
      {
        "d": "M14 2v5.632c0 .424.272.795.652.982A6 6 0 0 1 18 14c0 4-3 7-5 8"
      }
    ],
    ["path", { "d": "M14 5h2a2 2 0 0 1 0 4h-.68" }],
    ["path", { "d": "M18 22H6" }],
    ["path", { "d": "M9 2h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "amphora" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Amphora, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Amphora,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Amphora = hmr(Amphora, () => Amphora[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Amphora[HMR].source;
    set(Amphora[HMR].source, module.default[HMR].original);
  });
}
var amphora_default = Amphora;

// node_modules/lucide-svelte/dist/icons/anchor.svelte
Anchor[FILENAME] = "node_modules/lucide-svelte/dist/icons/anchor.svelte";
function Anchor($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Anchor);
  const iconNode = [
    ["path", { "d": "M12 22V8" }],
    ["path", { "d": "M5 12H2a10 10 0 0 0 20 0h-3" }],
    ["circle", { "cx": "12", "cy": "5", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "anchor" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Anchor, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Anchor,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Anchor = hmr(Anchor, () => Anchor[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Anchor[HMR].source;
    set(Anchor[HMR].source, module.default[HMR].original);
  });
}
var anchor_default = Anchor;

// node_modules/lucide-svelte/dist/icons/angry.svelte
Angry[FILENAME] = "node_modules/lucide-svelte/dist/icons/angry.svelte";
function Angry($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Angry);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M16 16s-1.5-2-4-2-4 2-4 2" }],
    ["path", { "d": "M7.5 8 10 9" }],
    ["path", { "d": "m14 9 2.5-1" }],
    ["path", { "d": "M9 10h.01" }],
    ["path", { "d": "M15 10h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "angry" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Angry, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Angry,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Angry = hmr(Angry, () => Angry[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Angry[HMR].source;
    set(Angry[HMR].source, module.default[HMR].original);
  });
}
var angry_default = Angry;

// node_modules/lucide-svelte/dist/icons/annoyed.svelte
Annoyed[FILENAME] = "node_modules/lucide-svelte/dist/icons/annoyed.svelte";
function Annoyed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Annoyed);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M8 15h8" }],
    ["path", { "d": "M8 9h2" }],
    ["path", { "d": "M14 9h2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "annoyed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Annoyed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Annoyed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Annoyed = hmr(Annoyed, () => Annoyed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Annoyed[HMR].source;
    set(Annoyed[HMR].source, module.default[HMR].original);
  });
}
var annoyed_default = Annoyed;

// node_modules/lucide-svelte/dist/icons/antenna.svelte
Antenna[FILENAME] = "node_modules/lucide-svelte/dist/icons/antenna.svelte";
function Antenna($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Antenna);
  const iconNode = [
    ["path", { "d": "M2 12 7 2" }],
    ["path", { "d": "m7 12 5-10" }],
    ["path", { "d": "m12 12 5-10" }],
    ["path", { "d": "m17 12 5-10" }],
    ["path", { "d": "M4.5 7h15" }],
    ["path", { "d": "M12 16v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "antenna" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Antenna, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Antenna,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Antenna = hmr(Antenna, () => Antenna[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Antenna[HMR].source;
    set(Antenna[HMR].source, module.default[HMR].original);
  });
}
var antenna_default = Antenna;

// node_modules/lucide-svelte/dist/icons/anvil.svelte
Anvil[FILENAME] = "node_modules/lucide-svelte/dist/icons/anvil.svelte";
function Anvil($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Anvil);
  const iconNode = [
    ["path", { "d": "M7 10H6a4 4 0 0 1-4-4 1 1 0 0 1 1-1h4" }],
    [
      "path",
      {
        "d": "M7 5a1 1 0 0 1 1-1h13a1 1 0 0 1 1 1 7 7 0 0 1-7 7H8a1 1 0 0 1-1-1z"
      }
    ],
    ["path", { "d": "M9 12v5" }],
    ["path", { "d": "M15 12v5" }],
    [
      "path",
      {
        "d": "M5 20a3 3 0 0 1 3-3h8a3 3 0 0 1 3 3 1 1 0 0 1-1 1H6a1 1 0 0 1-1-1"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "anvil" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Anvil, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Anvil,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Anvil = hmr(Anvil, () => Anvil[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Anvil[HMR].source;
    set(Anvil[HMR].source, module.default[HMR].original);
  });
}
var anvil_default = Anvil;

// node_modules/lucide-svelte/dist/icons/aperture.svelte
Aperture[FILENAME] = "node_modules/lucide-svelte/dist/icons/aperture.svelte";
function Aperture($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Aperture);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "m14.31 8 5.74 9.94" }],
    ["path", { "d": "M9.69 8h11.48" }],
    ["path", { "d": "m7.38 12 5.74-9.94" }],
    ["path", { "d": "M9.69 16 3.95 6.06" }],
    ["path", { "d": "M14.31 16H2.83" }],
    ["path", { "d": "m16.62 12-5.74 9.94" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "aperture" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Aperture, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Aperture,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Aperture = hmr(Aperture, () => Aperture[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Aperture[HMR].source;
    set(Aperture[HMR].source, module.default[HMR].original);
  });
}
var aperture_default = Aperture;

// node_modules/lucide-svelte/dist/icons/app-window-mac.svelte
App_window_mac[FILENAME] = "node_modules/lucide-svelte/dist/icons/app-window-mac.svelte";
function App_window_mac($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, App_window_mac);
  const iconNode = [
    [
      "rect",
      { "width": "20", "height": "16", "x": "2", "y": "4", "rx": "2" }
    ],
    ["path", { "d": "M6 8h.01" }],
    ["path", { "d": "M10 8h.01" }],
    ["path", { "d": "M14 8h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "app-window-mac" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(App_window_mac, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    App_window_mac,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  App_window_mac = hmr(App_window_mac, () => App_window_mac[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = App_window_mac[HMR].source;
    set(App_window_mac[HMR].source, module.default[HMR].original);
  });
}
var app_window_mac_default = App_window_mac;

// node_modules/lucide-svelte/dist/icons/app-window.svelte
App_window[FILENAME] = "node_modules/lucide-svelte/dist/icons/app-window.svelte";
function App_window($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, App_window);
  const iconNode = [
    [
      "rect",
      { "x": "2", "y": "4", "width": "20", "height": "16", "rx": "2" }
    ],
    ["path", { "d": "M10 4v4" }],
    ["path", { "d": "M2 8h20" }],
    ["path", { "d": "M6 4v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "app-window" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(App_window, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    App_window,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  App_window = hmr(App_window, () => App_window[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = App_window[HMR].source;
    set(App_window[HMR].source, module.default[HMR].original);
  });
}
var app_window_default = App_window;

// node_modules/lucide-svelte/dist/icons/apple.svelte
Apple[FILENAME] = "node_modules/lucide-svelte/dist/icons/apple.svelte";
function Apple($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Apple);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 20.94c1.5 0 2.75 1.06 4 1.06 3 0 6-8 6-12.22A4.91 4.91 0 0 0 17 5c-2.22 0-4 1.44-5 2-1-.56-2.78-2-5-2a4.9 4.9 0 0 0-5 4.78C2 14 5 22 8 22c1.25 0 2.5-1.06 4-1.06Z"
      }
    ],
    ["path", { "d": "M10 2c1 .5 2 2 2 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "apple" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Apple, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Apple,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Apple = hmr(Apple, () => Apple[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Apple[HMR].source;
    set(Apple[HMR].source, module.default[HMR].original);
  });
}
var apple_default = Apple;

// node_modules/lucide-svelte/dist/icons/archive-restore.svelte
Archive_restore[FILENAME] = "node_modules/lucide-svelte/dist/icons/archive-restore.svelte";
function Archive_restore($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Archive_restore);
  const iconNode = [
    [
      "rect",
      { "width": "20", "height": "5", "x": "2", "y": "3", "rx": "1" }
    ],
    ["path", { "d": "M4 8v11a2 2 0 0 0 2 2h2" }],
    ["path", { "d": "M20 8v11a2 2 0 0 1-2 2h-2" }],
    ["path", { "d": "m9 15 3-3 3 3" }],
    ["path", { "d": "M12 12v9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "archive-restore" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Archive_restore, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Archive_restore,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Archive_restore = hmr(Archive_restore, () => Archive_restore[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Archive_restore[HMR].source;
    set(Archive_restore[HMR].source, module.default[HMR].original);
  });
}
var archive_restore_default = Archive_restore;

// node_modules/lucide-svelte/dist/icons/archive-x.svelte
Archive_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/archive-x.svelte";
function Archive_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Archive_x);
  const iconNode = [
    [
      "rect",
      { "width": "20", "height": "5", "x": "2", "y": "3", "rx": "1" }
    ],
    ["path", { "d": "M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8" }],
    ["path", { "d": "m9.5 17 5-5" }],
    ["path", { "d": "m9.5 12 5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "archive-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Archive_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Archive_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Archive_x = hmr(Archive_x, () => Archive_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Archive_x[HMR].source;
    set(Archive_x[HMR].source, module.default[HMR].original);
  });
}
var archive_x_default = Archive_x;

// node_modules/lucide-svelte/dist/icons/archive.svelte
Archive[FILENAME] = "node_modules/lucide-svelte/dist/icons/archive.svelte";
function Archive($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Archive);
  const iconNode = [
    [
      "rect",
      { "width": "20", "height": "5", "x": "2", "y": "3", "rx": "1" }
    ],
    ["path", { "d": "M4 8v11a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8" }],
    ["path", { "d": "M10 12h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "archive" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Archive, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Archive,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Archive = hmr(Archive, () => Archive[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Archive[HMR].source;
    set(Archive[HMR].source, module.default[HMR].original);
  });
}
var archive_default = Archive;

// node_modules/lucide-svelte/dist/icons/armchair.svelte
Armchair[FILENAME] = "node_modules/lucide-svelte/dist/icons/armchair.svelte";
function Armchair($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Armchair);
  const iconNode = [
    ["path", { "d": "M19 9V6a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v3" }],
    [
      "path",
      {
        "d": "M3 16a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v1.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V11a2 2 0 0 0-4 0z"
      }
    ],
    ["path", { "d": "M5 18v2" }],
    ["path", { "d": "M19 18v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "armchair" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Armchair, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Armchair,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Armchair = hmr(Armchair, () => Armchair[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Armchair[HMR].source;
    set(Armchair[HMR].source, module.default[HMR].original);
  });
}
var armchair_default = Armchair;

// node_modules/lucide-svelte/dist/icons/arrow-big-down-dash.svelte
Arrow_big_down_dash[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-big-down-dash.svelte";
function Arrow_big_down_dash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_big_down_dash);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 11a1 1 0 0 0 1 1h2.939a1 1 0 0 1 .75 1.811l-6.835 6.836a1.207 1.207 0 0 1-1.707 0L4.31 13.81a1 1 0 0 1 .75-1.811H8a1 1 0 0 0 1-1V9a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1z"
      }
    ],
    ["path", { "d": "M9 4h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-big-down-dash" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_big_down_dash, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_big_down_dash,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_big_down_dash = hmr(Arrow_big_down_dash, () => Arrow_big_down_dash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_big_down_dash[HMR].source;
    set(Arrow_big_down_dash[HMR].source, module.default[HMR].original);
  });
}
var arrow_big_down_dash_default = Arrow_big_down_dash;

// node_modules/lucide-svelte/dist/icons/arrow-big-down.svelte
Arrow_big_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-big-down.svelte";
function Arrow_big_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_big_down);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 11a1 1 0 0 0 1 1h2.939a1 1 0 0 1 .75 1.811l-6.835 6.836a1.207 1.207 0 0 1-1.707 0L4.31 13.81a1 1 0 0 1 .75-1.811H8a1 1 0 0 0 1-1V5a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-big-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_big_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_big_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_big_down = hmr(Arrow_big_down, () => Arrow_big_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_big_down[HMR].source;
    set(Arrow_big_down[HMR].source, module.default[HMR].original);
  });
}
var arrow_big_down_default = Arrow_big_down;

// node_modules/lucide-svelte/dist/icons/arrow-big-left-dash.svelte
Arrow_big_left_dash[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-big-left-dash.svelte";
function Arrow_big_left_dash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_big_left_dash);
  const iconNode = [
    [
      "path",
      {
        "d": "M13 9a1 1 0 0 1-1-1V5.061a1 1 0 0 0-1.811-.75l-6.835 6.836a1.207 1.207 0 0 0 0 1.707l6.835 6.835a1 1 0 0 0 1.811-.75V16a1 1 0 0 1 1-1h2a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1z"
      }
    ],
    ["path", { "d": "M20 9v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-big-left-dash" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_big_left_dash, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_big_left_dash,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_big_left_dash = hmr(Arrow_big_left_dash, () => Arrow_big_left_dash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_big_left_dash[HMR].source;
    set(Arrow_big_left_dash[HMR].source, module.default[HMR].original);
  });
}
var arrow_big_left_dash_default = Arrow_big_left_dash;

// node_modules/lucide-svelte/dist/icons/arrow-big-left.svelte
Arrow_big_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-big-left.svelte";
function Arrow_big_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_big_left);
  const iconNode = [
    [
      "path",
      {
        "d": "M13 9a1 1 0 0 1-1-1V5.061a1 1 0 0 0-1.811-.75l-6.835 6.836a1.207 1.207 0 0 0 0 1.707l6.835 6.835a1 1 0 0 0 1.811-.75V16a1 1 0 0 1 1-1h6a1 1 0 0 0 1-1v-4a1 1 0 0 0-1-1z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-big-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_big_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_big_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_big_left = hmr(Arrow_big_left, () => Arrow_big_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_big_left[HMR].source;
    set(Arrow_big_left[HMR].source, module.default[HMR].original);
  });
}
var arrow_big_left_default = Arrow_big_left;

// node_modules/lucide-svelte/dist/icons/arrow-big-right-dash.svelte
Arrow_big_right_dash[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-big-right-dash.svelte";
function Arrow_big_right_dash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_big_right_dash);
  const iconNode = [
    [
      "path",
      {
        "d": "M11 9a1 1 0 0 0 1-1V5.061a1 1 0 0 1 1.811-.75l6.836 6.836a1.207 1.207 0 0 1 0 1.707l-6.836 6.835a1 1 0 0 1-1.811-.75V16a1 1 0 0 0-1-1H9a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1z"
      }
    ],
    ["path", { "d": "M4 9v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-big-right-dash" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_big_right_dash, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_big_right_dash,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_big_right_dash = hmr(Arrow_big_right_dash, () => Arrow_big_right_dash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_big_right_dash[HMR].source;
    set(Arrow_big_right_dash[HMR].source, module.default[HMR].original);
  });
}
var arrow_big_right_dash_default = Arrow_big_right_dash;

// node_modules/lucide-svelte/dist/icons/arrow-big-right.svelte
Arrow_big_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-big-right.svelte";
function Arrow_big_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_big_right);
  const iconNode = [
    [
      "path",
      {
        "d": "M11 9a1 1 0 0 0 1-1V5.061a1 1 0 0 1 1.811-.75l6.836 6.836a1.207 1.207 0 0 1 0 1.707l-6.836 6.835a1 1 0 0 1-1.811-.75V16a1 1 0 0 0-1-1H5a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-big-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_big_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_big_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_big_right = hmr(Arrow_big_right, () => Arrow_big_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_big_right[HMR].source;
    set(Arrow_big_right[HMR].source, module.default[HMR].original);
  });
}
var arrow_big_right_default = Arrow_big_right;

// node_modules/lucide-svelte/dist/icons/arrow-big-up-dash.svelte
Arrow_big_up_dash[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-big-up-dash.svelte";
function Arrow_big_up_dash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_big_up_dash);
  const iconNode = [
    [
      "path",
      {
        "d": "M9 13a1 1 0 0 0-1-1H5.061a1 1 0 0 1-.75-1.811l6.836-6.835a1.207 1.207 0 0 1 1.707 0l6.835 6.835a1 1 0 0 1-.75 1.811H16a1 1 0 0 0-1 1v2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1z"
      }
    ],
    ["path", { "d": "M9 20h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-big-up-dash" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_big_up_dash, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_big_up_dash,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_big_up_dash = hmr(Arrow_big_up_dash, () => Arrow_big_up_dash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_big_up_dash[HMR].source;
    set(Arrow_big_up_dash[HMR].source, module.default[HMR].original);
  });
}
var arrow_big_up_dash_default = Arrow_big_up_dash;

// node_modules/lucide-svelte/dist/icons/arrow-big-up.svelte
Arrow_big_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-big-up.svelte";
function Arrow_big_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_big_up);
  const iconNode = [
    [
      "path",
      {
        "d": "M9 13a1 1 0 0 0-1-1H5.061a1 1 0 0 1-.75-1.811l6.836-6.835a1.207 1.207 0 0 1 1.707 0l6.835 6.835a1 1 0 0 1-.75 1.811H16a1 1 0 0 0-1 1v6a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-big-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_big_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_big_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_big_up = hmr(Arrow_big_up, () => Arrow_big_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_big_up[HMR].source;
    set(Arrow_big_up[HMR].source, module.default[HMR].original);
  });
}
var arrow_big_up_default = Arrow_big_up;

// node_modules/lucide-svelte/dist/icons/arrow-down-0-1.svelte
Arrow_down_0_1[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-down-0-1.svelte";
function Arrow_down_0_1($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_down_0_1);
  const iconNode = [
    ["path", { "d": "m3 16 4 4 4-4" }],
    ["path", { "d": "M7 20V4" }],
    [
      "rect",
      { "x": "15", "y": "4", "width": "4", "height": "6", "ry": "2" }
    ],
    ["path", { "d": "M17 20v-6h-2" }],
    ["path", { "d": "M15 20h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-down-0-1" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_down_0_1, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_down_0_1,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_down_0_1 = hmr(Arrow_down_0_1, () => Arrow_down_0_1[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_down_0_1[HMR].source;
    set(Arrow_down_0_1[HMR].source, module.default[HMR].original);
  });
}
var arrow_down_0_1_default = Arrow_down_0_1;

// node_modules/lucide-svelte/dist/icons/arrow-down-1-0.svelte
Arrow_down_1_0[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-down-1-0.svelte";
function Arrow_down_1_0($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_down_1_0);
  const iconNode = [
    ["path", { "d": "m3 16 4 4 4-4" }],
    ["path", { "d": "M7 20V4" }],
    ["path", { "d": "M17 10V4h-2" }],
    ["path", { "d": "M15 10h4" }],
    [
      "rect",
      { "x": "15", "y": "14", "width": "4", "height": "6", "ry": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-down-1-0" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_down_1_0, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_down_1_0,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_down_1_0 = hmr(Arrow_down_1_0, () => Arrow_down_1_0[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_down_1_0[HMR].source;
    set(Arrow_down_1_0[HMR].source, module.default[HMR].original);
  });
}
var arrow_down_1_0_default = Arrow_down_1_0;

// node_modules/lucide-svelte/dist/icons/arrow-down-a-z.svelte
Arrow_down_a_z[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-down-a-z.svelte";
function Arrow_down_a_z($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_down_a_z);
  const iconNode = [
    ["path", { "d": "m3 16 4 4 4-4" }],
    ["path", { "d": "M7 20V4" }],
    ["path", { "d": "M20 8h-5" }],
    ["path", { "d": "M15 10V6.5a2.5 2.5 0 0 1 5 0V10" }],
    ["path", { "d": "M15 14h5l-5 6h5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-down-a-z" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_down_a_z, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_down_a_z,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_down_a_z = hmr(Arrow_down_a_z, () => Arrow_down_a_z[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_down_a_z[HMR].source;
    set(Arrow_down_a_z[HMR].source, module.default[HMR].original);
  });
}
var arrow_down_a_z_default = Arrow_down_a_z;

// node_modules/lucide-svelte/dist/icons/arrow-down-from-line.svelte
Arrow_down_from_line[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-down-from-line.svelte";
function Arrow_down_from_line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_down_from_line);
  const iconNode = [
    ["path", { "d": "M19 3H5" }],
    ["path", { "d": "M12 21V7" }],
    ["path", { "d": "m6 15 6 6 6-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-down-from-line" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_down_from_line, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_down_from_line,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_down_from_line = hmr(Arrow_down_from_line, () => Arrow_down_from_line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_down_from_line[HMR].source;
    set(Arrow_down_from_line[HMR].source, module.default[HMR].original);
  });
}
var arrow_down_from_line_default = Arrow_down_from_line;

// node_modules/lucide-svelte/dist/icons/arrow-down-left.svelte
Arrow_down_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-down-left.svelte";
function Arrow_down_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_down_left);
  const iconNode = [
    ["path", { "d": "M17 7 7 17" }],
    ["path", { "d": "M17 17H7V7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-down-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_down_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_down_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_down_left = hmr(Arrow_down_left, () => Arrow_down_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_down_left[HMR].source;
    set(Arrow_down_left[HMR].source, module.default[HMR].original);
  });
}
var arrow_down_left_default = Arrow_down_left;

// node_modules/lucide-svelte/dist/icons/arrow-down-narrow-wide.svelte
Arrow_down_narrow_wide[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-down-narrow-wide.svelte";
function Arrow_down_narrow_wide($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_down_narrow_wide);
  const iconNode = [
    ["path", { "d": "m3 16 4 4 4-4" }],
    ["path", { "d": "M7 20V4" }],
    ["path", { "d": "M11 4h4" }],
    ["path", { "d": "M11 8h7" }],
    ["path", { "d": "M11 12h10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-down-narrow-wide" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_down_narrow_wide, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_down_narrow_wide,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_down_narrow_wide = hmr(Arrow_down_narrow_wide, () => Arrow_down_narrow_wide[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_down_narrow_wide[HMR].source;
    set(Arrow_down_narrow_wide[HMR].source, module.default[HMR].original);
  });
}
var arrow_down_narrow_wide_default = Arrow_down_narrow_wide;

// node_modules/lucide-svelte/dist/icons/arrow-down-right.svelte
Arrow_down_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-down-right.svelte";
function Arrow_down_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_down_right);
  const iconNode = [
    ["path", { "d": "m7 7 10 10" }],
    ["path", { "d": "M17 7v10H7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-down-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_down_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_down_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_down_right = hmr(Arrow_down_right, () => Arrow_down_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_down_right[HMR].source;
    set(Arrow_down_right[HMR].source, module.default[HMR].original);
  });
}
var arrow_down_right_default = Arrow_down_right;

// node_modules/lucide-svelte/dist/icons/arrow-down-to-dot.svelte
Arrow_down_to_dot[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-down-to-dot.svelte";
function Arrow_down_to_dot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_down_to_dot);
  const iconNode = [
    ["path", { "d": "M12 2v14" }],
    ["path", { "d": "m19 9-7 7-7-7" }],
    ["circle", { "cx": "12", "cy": "21", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-down-to-dot" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_down_to_dot, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_down_to_dot,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_down_to_dot = hmr(Arrow_down_to_dot, () => Arrow_down_to_dot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_down_to_dot[HMR].source;
    set(Arrow_down_to_dot[HMR].source, module.default[HMR].original);
  });
}
var arrow_down_to_dot_default = Arrow_down_to_dot;

// node_modules/lucide-svelte/dist/icons/arrow-down-to-line.svelte
Arrow_down_to_line[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-down-to-line.svelte";
function Arrow_down_to_line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_down_to_line);
  const iconNode = [
    ["path", { "d": "M12 17V3" }],
    ["path", { "d": "m6 11 6 6 6-6" }],
    ["path", { "d": "M19 21H5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-down-to-line" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_down_to_line, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_down_to_line,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_down_to_line = hmr(Arrow_down_to_line, () => Arrow_down_to_line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_down_to_line[HMR].source;
    set(Arrow_down_to_line[HMR].source, module.default[HMR].original);
  });
}
var arrow_down_to_line_default = Arrow_down_to_line;

// node_modules/lucide-svelte/dist/icons/arrow-down-up.svelte
Arrow_down_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-down-up.svelte";
function Arrow_down_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_down_up);
  const iconNode = [
    ["path", { "d": "m3 16 4 4 4-4" }],
    ["path", { "d": "M7 20V4" }],
    ["path", { "d": "m21 8-4-4-4 4" }],
    ["path", { "d": "M17 4v16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-down-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_down_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_down_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_down_up = hmr(Arrow_down_up, () => Arrow_down_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_down_up[HMR].source;
    set(Arrow_down_up[HMR].source, module.default[HMR].original);
  });
}
var arrow_down_up_default = Arrow_down_up;

// node_modules/lucide-svelte/dist/icons/arrow-down-wide-narrow.svelte
Arrow_down_wide_narrow[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-down-wide-narrow.svelte";
function Arrow_down_wide_narrow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_down_wide_narrow);
  const iconNode = [
    ["path", { "d": "m3 16 4 4 4-4" }],
    ["path", { "d": "M7 20V4" }],
    ["path", { "d": "M11 4h10" }],
    ["path", { "d": "M11 8h7" }],
    ["path", { "d": "M11 12h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-down-wide-narrow" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_down_wide_narrow, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_down_wide_narrow,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_down_wide_narrow = hmr(Arrow_down_wide_narrow, () => Arrow_down_wide_narrow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_down_wide_narrow[HMR].source;
    set(Arrow_down_wide_narrow[HMR].source, module.default[HMR].original);
  });
}
var arrow_down_wide_narrow_default = Arrow_down_wide_narrow;

// node_modules/lucide-svelte/dist/icons/arrow-down-z-a.svelte
Arrow_down_z_a[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-down-z-a.svelte";
function Arrow_down_z_a($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_down_z_a);
  const iconNode = [
    ["path", { "d": "m3 16 4 4 4-4" }],
    ["path", { "d": "M7 4v16" }],
    ["path", { "d": "M15 4h5l-5 6h5" }],
    ["path", { "d": "M15 20v-3.5a2.5 2.5 0 0 1 5 0V20" }],
    ["path", { "d": "M20 18h-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-down-z-a" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_down_z_a, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_down_z_a,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_down_z_a = hmr(Arrow_down_z_a, () => Arrow_down_z_a[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_down_z_a[HMR].source;
    set(Arrow_down_z_a[HMR].source, module.default[HMR].original);
  });
}
var arrow_down_z_a_default = Arrow_down_z_a;

// node_modules/lucide-svelte/dist/icons/arrow-down.svelte
Arrow_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-down.svelte";
function Arrow_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_down);
  const iconNode = [
    ["path", { "d": "M12 5v14" }],
    ["path", { "d": "m19 12-7 7-7-7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_down = hmr(Arrow_down, () => Arrow_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_down[HMR].source;
    set(Arrow_down[HMR].source, module.default[HMR].original);
  });
}
var arrow_down_default = Arrow_down;

// node_modules/lucide-svelte/dist/icons/arrow-left-from-line.svelte
Arrow_left_from_line[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-left-from-line.svelte";
function Arrow_left_from_line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_left_from_line);
  const iconNode = [
    ["path", { "d": "m9 6-6 6 6 6" }],
    ["path", { "d": "M3 12h14" }],
    ["path", { "d": "M21 19V5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-left-from-line" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_left_from_line, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_left_from_line,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_left_from_line = hmr(Arrow_left_from_line, () => Arrow_left_from_line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_left_from_line[HMR].source;
    set(Arrow_left_from_line[HMR].source, module.default[HMR].original);
  });
}
var arrow_left_from_line_default = Arrow_left_from_line;

// node_modules/lucide-svelte/dist/icons/arrow-left-right.svelte
Arrow_left_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-left-right.svelte";
function Arrow_left_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_left_right);
  const iconNode = [
    ["path", { "d": "M8 3 4 7l4 4" }],
    ["path", { "d": "M4 7h16" }],
    ["path", { "d": "m16 21 4-4-4-4" }],
    ["path", { "d": "M20 17H4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-left-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_left_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_left_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_left_right = hmr(Arrow_left_right, () => Arrow_left_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_left_right[HMR].source;
    set(Arrow_left_right[HMR].source, module.default[HMR].original);
  });
}
var arrow_left_right_default = Arrow_left_right;

// node_modules/lucide-svelte/dist/icons/arrow-left-to-line.svelte
Arrow_left_to_line[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-left-to-line.svelte";
function Arrow_left_to_line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_left_to_line);
  const iconNode = [
    ["path", { "d": "M3 19V5" }],
    ["path", { "d": "m13 6-6 6 6 6" }],
    ["path", { "d": "M7 12h14" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-left-to-line" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_left_to_line, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_left_to_line,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_left_to_line = hmr(Arrow_left_to_line, () => Arrow_left_to_line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_left_to_line[HMR].source;
    set(Arrow_left_to_line[HMR].source, module.default[HMR].original);
  });
}
var arrow_left_to_line_default = Arrow_left_to_line;

// node_modules/lucide-svelte/dist/icons/arrow-left.svelte
Arrow_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-left.svelte";
function Arrow_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_left);
  const iconNode = [
    ["path", { "d": "m12 19-7-7 7-7" }],
    ["path", { "d": "M19 12H5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_left = hmr(Arrow_left, () => Arrow_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_left[HMR].source;
    set(Arrow_left[HMR].source, module.default[HMR].original);
  });
}
var arrow_left_default = Arrow_left;

// node_modules/lucide-svelte/dist/icons/arrow-right-from-line.svelte
Arrow_right_from_line[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-right-from-line.svelte";
function Arrow_right_from_line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_right_from_line);
  const iconNode = [
    ["path", { "d": "M3 5v14" }],
    ["path", { "d": "M21 12H7" }],
    ["path", { "d": "m15 18 6-6-6-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-right-from-line" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_right_from_line, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_right_from_line,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_right_from_line = hmr(Arrow_right_from_line, () => Arrow_right_from_line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_right_from_line[HMR].source;
    set(Arrow_right_from_line[HMR].source, module.default[HMR].original);
  });
}
var arrow_right_from_line_default = Arrow_right_from_line;

// node_modules/lucide-svelte/dist/icons/arrow-right-left.svelte
Arrow_right_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-right-left.svelte";
function Arrow_right_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_right_left);
  const iconNode = [
    ["path", { "d": "m16 3 4 4-4 4" }],
    ["path", { "d": "M20 7H4" }],
    ["path", { "d": "m8 21-4-4 4-4" }],
    ["path", { "d": "M4 17h16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-right-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_right_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_right_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_right_left = hmr(Arrow_right_left, () => Arrow_right_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_right_left[HMR].source;
    set(Arrow_right_left[HMR].source, module.default[HMR].original);
  });
}
var arrow_right_left_default = Arrow_right_left;

// node_modules/lucide-svelte/dist/icons/arrow-right-to-line.svelte
Arrow_right_to_line[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-right-to-line.svelte";
function Arrow_right_to_line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_right_to_line);
  const iconNode = [
    ["path", { "d": "M17 12H3" }],
    ["path", { "d": "m11 18 6-6-6-6" }],
    ["path", { "d": "M21 5v14" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-right-to-line" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_right_to_line, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_right_to_line,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_right_to_line = hmr(Arrow_right_to_line, () => Arrow_right_to_line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_right_to_line[HMR].source;
    set(Arrow_right_to_line[HMR].source, module.default[HMR].original);
  });
}
var arrow_right_to_line_default = Arrow_right_to_line;

// node_modules/lucide-svelte/dist/icons/arrow-right.svelte
Arrow_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-right.svelte";
function Arrow_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_right);
  const iconNode = [
    ["path", { "d": "M5 12h14" }],
    ["path", { "d": "m12 5 7 7-7 7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_right = hmr(Arrow_right, () => Arrow_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_right[HMR].source;
    set(Arrow_right[HMR].source, module.default[HMR].original);
  });
}
var arrow_right_default = Arrow_right;

// node_modules/lucide-svelte/dist/icons/arrow-up-0-1.svelte
Arrow_up_0_1[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-up-0-1.svelte";
function Arrow_up_0_1($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_up_0_1);
  const iconNode = [
    ["path", { "d": "m3 8 4-4 4 4" }],
    ["path", { "d": "M7 4v16" }],
    [
      "rect",
      { "x": "15", "y": "4", "width": "4", "height": "6", "ry": "2" }
    ],
    ["path", { "d": "M17 20v-6h-2" }],
    ["path", { "d": "M15 20h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-up-0-1" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_up_0_1, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_up_0_1,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_up_0_1 = hmr(Arrow_up_0_1, () => Arrow_up_0_1[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_up_0_1[HMR].source;
    set(Arrow_up_0_1[HMR].source, module.default[HMR].original);
  });
}
var arrow_up_0_1_default = Arrow_up_0_1;

// node_modules/lucide-svelte/dist/icons/arrow-up-1-0.svelte
Arrow_up_1_0[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-up-1-0.svelte";
function Arrow_up_1_0($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_up_1_0);
  const iconNode = [
    ["path", { "d": "m3 8 4-4 4 4" }],
    ["path", { "d": "M7 4v16" }],
    ["path", { "d": "M17 10V4h-2" }],
    ["path", { "d": "M15 10h4" }],
    [
      "rect",
      { "x": "15", "y": "14", "width": "4", "height": "6", "ry": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-up-1-0" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_up_1_0, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_up_1_0,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_up_1_0 = hmr(Arrow_up_1_0, () => Arrow_up_1_0[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_up_1_0[HMR].source;
    set(Arrow_up_1_0[HMR].source, module.default[HMR].original);
  });
}
var arrow_up_1_0_default = Arrow_up_1_0;

// node_modules/lucide-svelte/dist/icons/arrow-up-a-z.svelte
Arrow_up_a_z[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-up-a-z.svelte";
function Arrow_up_a_z($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_up_a_z);
  const iconNode = [
    ["path", { "d": "m3 8 4-4 4 4" }],
    ["path", { "d": "M7 4v16" }],
    ["path", { "d": "M20 8h-5" }],
    ["path", { "d": "M15 10V6.5a2.5 2.5 0 0 1 5 0V10" }],
    ["path", { "d": "M15 14h5l-5 6h5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-up-a-z" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_up_a_z, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_up_a_z,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_up_a_z = hmr(Arrow_up_a_z, () => Arrow_up_a_z[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_up_a_z[HMR].source;
    set(Arrow_up_a_z[HMR].source, module.default[HMR].original);
  });
}
var arrow_up_a_z_default = Arrow_up_a_z;

// node_modules/lucide-svelte/dist/icons/arrow-up-down.svelte
Arrow_up_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-up-down.svelte";
function Arrow_up_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_up_down);
  const iconNode = [
    ["path", { "d": "m21 16-4 4-4-4" }],
    ["path", { "d": "M17 20V4" }],
    ["path", { "d": "m3 8 4-4 4 4" }],
    ["path", { "d": "M7 4v16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-up-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_up_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_up_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_up_down = hmr(Arrow_up_down, () => Arrow_up_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_up_down[HMR].source;
    set(Arrow_up_down[HMR].source, module.default[HMR].original);
  });
}
var arrow_up_down_default = Arrow_up_down;

// node_modules/lucide-svelte/dist/icons/arrow-up-from-dot.svelte
Arrow_up_from_dot[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-up-from-dot.svelte";
function Arrow_up_from_dot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_up_from_dot);
  const iconNode = [
    ["path", { "d": "m5 9 7-7 7 7" }],
    ["path", { "d": "M12 16V2" }],
    ["circle", { "cx": "12", "cy": "21", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-up-from-dot" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_up_from_dot, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_up_from_dot,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_up_from_dot = hmr(Arrow_up_from_dot, () => Arrow_up_from_dot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_up_from_dot[HMR].source;
    set(Arrow_up_from_dot[HMR].source, module.default[HMR].original);
  });
}
var arrow_up_from_dot_default = Arrow_up_from_dot;

// node_modules/lucide-svelte/dist/icons/arrow-up-from-line.svelte
Arrow_up_from_line[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-up-from-line.svelte";
function Arrow_up_from_line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_up_from_line);
  const iconNode = [
    ["path", { "d": "m18 9-6-6-6 6" }],
    ["path", { "d": "M12 3v14" }],
    ["path", { "d": "M5 21h14" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-up-from-line" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_up_from_line, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_up_from_line,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_up_from_line = hmr(Arrow_up_from_line, () => Arrow_up_from_line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_up_from_line[HMR].source;
    set(Arrow_up_from_line[HMR].source, module.default[HMR].original);
  });
}
var arrow_up_from_line_default = Arrow_up_from_line;

// node_modules/lucide-svelte/dist/icons/arrow-up-left.svelte
Arrow_up_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-up-left.svelte";
function Arrow_up_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_up_left);
  const iconNode = [
    ["path", { "d": "M7 17V7h10" }],
    ["path", { "d": "M17 17 7 7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-up-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_up_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_up_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_up_left = hmr(Arrow_up_left, () => Arrow_up_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_up_left[HMR].source;
    set(Arrow_up_left[HMR].source, module.default[HMR].original);
  });
}
var arrow_up_left_default = Arrow_up_left;

// node_modules/lucide-svelte/dist/icons/arrow-up-narrow-wide.svelte
Arrow_up_narrow_wide[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-up-narrow-wide.svelte";
function Arrow_up_narrow_wide($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_up_narrow_wide);
  const iconNode = [
    ["path", { "d": "m3 8 4-4 4 4" }],
    ["path", { "d": "M7 4v16" }],
    ["path", { "d": "M11 12h4" }],
    ["path", { "d": "M11 16h7" }],
    ["path", { "d": "M11 20h10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-up-narrow-wide" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_up_narrow_wide, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_up_narrow_wide,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_up_narrow_wide = hmr(Arrow_up_narrow_wide, () => Arrow_up_narrow_wide[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_up_narrow_wide[HMR].source;
    set(Arrow_up_narrow_wide[HMR].source, module.default[HMR].original);
  });
}
var arrow_up_narrow_wide_default = Arrow_up_narrow_wide;

// node_modules/lucide-svelte/dist/icons/arrow-up-right.svelte
Arrow_up_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-up-right.svelte";
function Arrow_up_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_up_right);
  const iconNode = [
    ["path", { "d": "M7 7h10v10" }],
    ["path", { "d": "M7 17 17 7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-up-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_up_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_up_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_up_right = hmr(Arrow_up_right, () => Arrow_up_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_up_right[HMR].source;
    set(Arrow_up_right[HMR].source, module.default[HMR].original);
  });
}
var arrow_up_right_default = Arrow_up_right;

// node_modules/lucide-svelte/dist/icons/arrow-up-to-line.svelte
Arrow_up_to_line[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-up-to-line.svelte";
function Arrow_up_to_line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_up_to_line);
  const iconNode = [
    ["path", { "d": "M5 3h14" }],
    ["path", { "d": "m18 13-6-6-6 6" }],
    ["path", { "d": "M12 7v14" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-up-to-line" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_up_to_line, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_up_to_line,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_up_to_line = hmr(Arrow_up_to_line, () => Arrow_up_to_line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_up_to_line[HMR].source;
    set(Arrow_up_to_line[HMR].source, module.default[HMR].original);
  });
}
var arrow_up_to_line_default = Arrow_up_to_line;

// node_modules/lucide-svelte/dist/icons/arrow-up-wide-narrow.svelte
Arrow_up_wide_narrow[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-up-wide-narrow.svelte";
function Arrow_up_wide_narrow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_up_wide_narrow);
  const iconNode = [
    ["path", { "d": "m3 8 4-4 4 4" }],
    ["path", { "d": "M7 4v16" }],
    ["path", { "d": "M11 12h10" }],
    ["path", { "d": "M11 16h7" }],
    ["path", { "d": "M11 20h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-up-wide-narrow" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_up_wide_narrow, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_up_wide_narrow,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_up_wide_narrow = hmr(Arrow_up_wide_narrow, () => Arrow_up_wide_narrow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_up_wide_narrow[HMR].source;
    set(Arrow_up_wide_narrow[HMR].source, module.default[HMR].original);
  });
}
var arrow_up_wide_narrow_default = Arrow_up_wide_narrow;

// node_modules/lucide-svelte/dist/icons/arrow-up-z-a.svelte
Arrow_up_z_a[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-up-z-a.svelte";
function Arrow_up_z_a($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_up_z_a);
  const iconNode = [
    ["path", { "d": "m3 8 4-4 4 4" }],
    ["path", { "d": "M7 4v16" }],
    ["path", { "d": "M15 4h5l-5 6h5" }],
    ["path", { "d": "M15 20v-3.5a2.5 2.5 0 0 1 5 0V20" }],
    ["path", { "d": "M20 18h-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-up-z-a" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_up_z_a, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_up_z_a,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_up_z_a = hmr(Arrow_up_z_a, () => Arrow_up_z_a[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_up_z_a[HMR].source;
    set(Arrow_up_z_a[HMR].source, module.default[HMR].original);
  });
}
var arrow_up_z_a_default = Arrow_up_z_a;

// node_modules/lucide-svelte/dist/icons/arrow-up.svelte
Arrow_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrow-up.svelte";
function Arrow_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrow_up);
  const iconNode = [
    ["path", { "d": "m5 12 7-7 7 7" }],
    ["path", { "d": "M12 19V5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrow-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrow_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrow_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrow_up = hmr(Arrow_up, () => Arrow_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrow_up[HMR].source;
    set(Arrow_up[HMR].source, module.default[HMR].original);
  });
}
var arrow_up_default = Arrow_up;

// node_modules/lucide-svelte/dist/icons/arrows-up-from-line.svelte
Arrows_up_from_line[FILENAME] = "node_modules/lucide-svelte/dist/icons/arrows-up-from-line.svelte";
function Arrows_up_from_line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Arrows_up_from_line);
  const iconNode = [
    ["path", { "d": "m4 6 3-3 3 3" }],
    ["path", { "d": "M7 17V3" }],
    ["path", { "d": "m14 6 3-3 3 3" }],
    ["path", { "d": "M17 17V3" }],
    ["path", { "d": "M4 21h16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "arrows-up-from-line" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Arrows_up_from_line, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Arrows_up_from_line,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Arrows_up_from_line = hmr(Arrows_up_from_line, () => Arrows_up_from_line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Arrows_up_from_line[HMR].source;
    set(Arrows_up_from_line[HMR].source, module.default[HMR].original);
  });
}
var arrows_up_from_line_default = Arrows_up_from_line;

// node_modules/lucide-svelte/dist/icons/asterisk.svelte
Asterisk[FILENAME] = "node_modules/lucide-svelte/dist/icons/asterisk.svelte";
function Asterisk($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Asterisk);
  const iconNode = [
    ["path", { "d": "M12 6v12" }],
    ["path", { "d": "M17.196 9 6.804 15" }],
    ["path", { "d": "m6.804 9 10.392 6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "asterisk" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Asterisk, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Asterisk,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Asterisk = hmr(Asterisk, () => Asterisk[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Asterisk[HMR].source;
    set(Asterisk[HMR].source, module.default[HMR].original);
  });
}
var asterisk_default = Asterisk;

// node_modules/lucide-svelte/dist/icons/at-sign.svelte
At_sign[FILENAME] = "node_modules/lucide-svelte/dist/icons/at-sign.svelte";
function At_sign($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, At_sign);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "4" }],
    ["path", { "d": "M16 8v5a3 3 0 0 0 6 0v-1a10 10 0 1 0-4 8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "at-sign" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(At_sign, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    At_sign,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  At_sign = hmr(At_sign, () => At_sign[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = At_sign[HMR].source;
    set(At_sign[HMR].source, module.default[HMR].original);
  });
}
var at_sign_default = At_sign;

// node_modules/lucide-svelte/dist/icons/atom.svelte
Atom[FILENAME] = "node_modules/lucide-svelte/dist/icons/atom.svelte";
function Atom($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Atom);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "1" }],
    [
      "path",
      {
        "d": "M20.2 20.2c2.04-2.03.02-7.36-4.5-11.9-4.54-4.52-9.87-6.54-11.9-4.5-2.04 2.03-.02 7.36 4.5 11.9 4.54 4.52 9.87 6.54 11.9 4.5Z"
      }
    ],
    [
      "path",
      {
        "d": "M15.7 15.7c4.52-4.54 6.54-9.87 4.5-11.9-2.03-2.04-7.36-.02-11.9 4.5-4.52 4.54-6.54 9.87-4.5 11.9 2.03 2.04 7.36.02 11.9-4.5Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "atom" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Atom, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Atom,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Atom = hmr(Atom, () => Atom[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Atom[HMR].source;
    set(Atom[HMR].source, module.default[HMR].original);
  });
}
var atom_default = Atom;

// node_modules/lucide-svelte/dist/icons/audio-lines.svelte
Audio_lines[FILENAME] = "node_modules/lucide-svelte/dist/icons/audio-lines.svelte";
function Audio_lines($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Audio_lines);
  const iconNode = [
    ["path", { "d": "M2 10v3" }],
    ["path", { "d": "M6 6v11" }],
    ["path", { "d": "M10 3v18" }],
    ["path", { "d": "M14 8v7" }],
    ["path", { "d": "M18 5v13" }],
    ["path", { "d": "M22 10v3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "audio-lines" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Audio_lines, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Audio_lines,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Audio_lines = hmr(Audio_lines, () => Audio_lines[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Audio_lines[HMR].source;
    set(Audio_lines[HMR].source, module.default[HMR].original);
  });
}
var audio_lines_default = Audio_lines;

// node_modules/lucide-svelte/dist/icons/audio-waveform.svelte
Audio_waveform[FILENAME] = "node_modules/lucide-svelte/dist/icons/audio-waveform.svelte";
function Audio_waveform($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Audio_waveform);
  const iconNode = [
    [
      "path",
      {
        "d": "M2 13a2 2 0 0 0 2-2V7a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0V4a2 2 0 0 1 4 0v13a2 2 0 0 0 4 0v-4a2 2 0 0 1 2-2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "audio-waveform" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Audio_waveform, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Audio_waveform,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Audio_waveform = hmr(Audio_waveform, () => Audio_waveform[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Audio_waveform[HMR].source;
    set(Audio_waveform[HMR].source, module.default[HMR].original);
  });
}
var audio_waveform_default = Audio_waveform;

// node_modules/lucide-svelte/dist/icons/award.svelte
Award[FILENAME] = "node_modules/lucide-svelte/dist/icons/award.svelte";
function Award($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Award);
  const iconNode = [
    [
      "path",
      {
        "d": "m15.477 12.89 1.515 8.526a.5.5 0 0 1-.81.47l-3.58-2.687a1 1 0 0 0-1.197 0l-3.586 2.686a.5.5 0 0 1-.81-.469l1.514-8.526"
      }
    ],
    ["circle", { "cx": "12", "cy": "8", "r": "6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "award" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Award, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Award,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Award = hmr(Award, () => Award[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Award[HMR].source;
    set(Award[HMR].source, module.default[HMR].original);
  });
}
var award_default = Award;

// node_modules/lucide-svelte/dist/icons/axe.svelte
Axe[FILENAME] = "node_modules/lucide-svelte/dist/icons/axe.svelte";
function Axe($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Axe);
  const iconNode = [
    ["path", { "d": "m14 12-8.381 8.38a1 1 0 0 1-3.001-3L11 9" }],
    [
      "path",
      {
        "d": "M15 15.5a.5.5 0 0 0 .5.5A6.5 6.5 0 0 0 22 9.5a.5.5 0 0 0-.5-.5h-1.672a2 2 0 0 1-1.414-.586l-5.062-5.062a1.205 1.205 0 0 0-1.704 0L9.352 5.648a1.205 1.205 0 0 0 0 1.704l5.062 5.062A2 2 0 0 1 15 13.828z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "axe" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Axe, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Axe,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Axe = hmr(Axe, () => Axe[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Axe[HMR].source;
    set(Axe[HMR].source, module.default[HMR].original);
  });
}
var axe_default = Axe;

// node_modules/lucide-svelte/dist/icons/axis-3d.svelte
Axis_3d[FILENAME] = "node_modules/lucide-svelte/dist/icons/axis-3d.svelte";
function Axis_3d($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Axis_3d);
  const iconNode = [
    ["path", { "d": "M13.5 10.5 15 9" }],
    ["path", { "d": "M4 4v15a1 1 0 0 0 1 1h15" }],
    ["path", { "d": "M4.293 19.707 6 18" }],
    ["path", { "d": "m9 15 1.5-1.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "axis-3d" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Axis_3d, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Axis_3d,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Axis_3d = hmr(Axis_3d, () => Axis_3d[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Axis_3d[HMR].source;
    set(Axis_3d[HMR].source, module.default[HMR].original);
  });
}
var axis_3d_default = Axis_3d;

// node_modules/lucide-svelte/dist/icons/backpack.svelte
Backpack[FILENAME] = "node_modules/lucide-svelte/dist/icons/backpack.svelte";
function Backpack($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Backpack);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 10a4 4 0 0 1 4-4h8a4 4 0 0 1 4 4v10a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2z"
      }
    ],
    ["path", { "d": "M8 10h8" }],
    ["path", { "d": "M8 18h8" }],
    ["path", { "d": "M8 22v-6a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v6" }],
    ["path", { "d": "M9 6V4a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "backpack" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Backpack, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Backpack,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Backpack = hmr(Backpack, () => Backpack[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Backpack[HMR].source;
    set(Backpack[HMR].source, module.default[HMR].original);
  });
}
var backpack_default = Backpack;

// node_modules/lucide-svelte/dist/icons/baby.svelte
Baby[FILENAME] = "node_modules/lucide-svelte/dist/icons/baby.svelte";
function Baby($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Baby);
  const iconNode = [
    ["path", { "d": "M10 16c.5.3 1.2.5 2 .5s1.5-.2 2-.5" }],
    ["path", { "d": "M15 12h.01" }],
    [
      "path",
      {
        "d": "M19.38 6.813A9 9 0 0 1 20.8 10.2a2 2 0 0 1 0 3.6 9 9 0 0 1-17.6 0 2 2 0 0 1 0-3.6A9 9 0 0 1 12 3c2 0 3.5 1.1 3.5 2.5s-.9 2.5-2 2.5c-.8 0-1.5-.4-1.5-1"
      }
    ],
    ["path", { "d": "M9 12h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "baby" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Baby, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Baby,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Baby = hmr(Baby, () => Baby[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Baby[HMR].source;
    set(Baby[HMR].source, module.default[HMR].original);
  });
}
var baby_default = Baby;

// node_modules/lucide-svelte/dist/icons/badge-alert.svelte
Badge_alert[FILENAME] = "node_modules/lucide-svelte/dist/icons/badge-alert.svelte";
function Badge_alert($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Badge_alert);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
      }
    ],
    ["line", { "x1": "12", "x2": "12", "y1": "8", "y2": "12" }],
    [
      "line",
      { "x1": "12", "x2": "12.01", "y1": "16", "y2": "16" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "badge-alert" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Badge_alert, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Badge_alert,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge_alert = hmr(Badge_alert, () => Badge_alert[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge_alert[HMR].source;
    set(Badge_alert[HMR].source, module.default[HMR].original);
  });
}
var badge_alert_default = Badge_alert;

// node_modules/lucide-svelte/dist/icons/badge-cent.svelte
Badge_cent[FILENAME] = "node_modules/lucide-svelte/dist/icons/badge-cent.svelte";
function Badge_cent($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Badge_cent);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
      }
    ],
    ["path", { "d": "M12 7v10" }],
    ["path", { "d": "M15.4 10a4 4 0 1 0 0 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "badge-cent" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Badge_cent, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Badge_cent,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge_cent = hmr(Badge_cent, () => Badge_cent[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge_cent[HMR].source;
    set(Badge_cent[HMR].source, module.default[HMR].original);
  });
}
var badge_cent_default = Badge_cent;

// node_modules/lucide-svelte/dist/icons/badge-check.svelte
Badge_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/badge-check.svelte";
function Badge_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Badge_check);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
      }
    ],
    ["path", { "d": "m9 12 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "badge-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Badge_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Badge_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge_check = hmr(Badge_check, () => Badge_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge_check[HMR].source;
    set(Badge_check[HMR].source, module.default[HMR].original);
  });
}
var badge_check_default = Badge_check;

// node_modules/lucide-svelte/dist/icons/badge-dollar-sign.svelte
Badge_dollar_sign[FILENAME] = "node_modules/lucide-svelte/dist/icons/badge-dollar-sign.svelte";
function Badge_dollar_sign($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Badge_dollar_sign);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
      }
    ],
    ["path", { "d": "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8" }],
    ["path", { "d": "M12 18V6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "badge-dollar-sign" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Badge_dollar_sign, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Badge_dollar_sign,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge_dollar_sign = hmr(Badge_dollar_sign, () => Badge_dollar_sign[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge_dollar_sign[HMR].source;
    set(Badge_dollar_sign[HMR].source, module.default[HMR].original);
  });
}
var badge_dollar_sign_default = Badge_dollar_sign;

// node_modules/lucide-svelte/dist/icons/badge-euro.svelte
Badge_euro[FILENAME] = "node_modules/lucide-svelte/dist/icons/badge-euro.svelte";
function Badge_euro($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Badge_euro);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
      }
    ],
    ["path", { "d": "M7 12h5" }],
    ["path", { "d": "M15 9.4a4 4 0 1 0 0 5.2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "badge-euro" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Badge_euro, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Badge_euro,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge_euro = hmr(Badge_euro, () => Badge_euro[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge_euro[HMR].source;
    set(Badge_euro[HMR].source, module.default[HMR].original);
  });
}
var badge_euro_default = Badge_euro;

// node_modules/lucide-svelte/dist/icons/badge-indian-rupee.svelte
Badge_indian_rupee[FILENAME] = "node_modules/lucide-svelte/dist/icons/badge-indian-rupee.svelte";
function Badge_indian_rupee($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Badge_indian_rupee);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
      }
    ],
    ["path", { "d": "M8 8h8" }],
    ["path", { "d": "M8 12h8" }],
    ["path", { "d": "m13 17-5-1h1a4 4 0 0 0 0-8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "badge-indian-rupee" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Badge_indian_rupee, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Badge_indian_rupee,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge_indian_rupee = hmr(Badge_indian_rupee, () => Badge_indian_rupee[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge_indian_rupee[HMR].source;
    set(Badge_indian_rupee[HMR].source, module.default[HMR].original);
  });
}
var badge_indian_rupee_default = Badge_indian_rupee;

// node_modules/lucide-svelte/dist/icons/badge-info.svelte
Badge_info[FILENAME] = "node_modules/lucide-svelte/dist/icons/badge-info.svelte";
function Badge_info($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Badge_info);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
      }
    ],
    ["line", { "x1": "12", "x2": "12", "y1": "16", "y2": "12" }],
    ["line", { "x1": "12", "x2": "12.01", "y1": "8", "y2": "8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "badge-info" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Badge_info, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Badge_info,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge_info = hmr(Badge_info, () => Badge_info[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge_info[HMR].source;
    set(Badge_info[HMR].source, module.default[HMR].original);
  });
}
var badge_info_default = Badge_info;

// node_modules/lucide-svelte/dist/icons/badge-japanese-yen.svelte
Badge_japanese_yen[FILENAME] = "node_modules/lucide-svelte/dist/icons/badge-japanese-yen.svelte";
function Badge_japanese_yen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Badge_japanese_yen);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
      }
    ],
    ["path", { "d": "m9 8 3 3v7" }],
    ["path", { "d": "m12 11 3-3" }],
    ["path", { "d": "M9 12h6" }],
    ["path", { "d": "M9 16h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "badge-japanese-yen" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Badge_japanese_yen, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Badge_japanese_yen,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge_japanese_yen = hmr(Badge_japanese_yen, () => Badge_japanese_yen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge_japanese_yen[HMR].source;
    set(Badge_japanese_yen[HMR].source, module.default[HMR].original);
  });
}
var badge_japanese_yen_default = Badge_japanese_yen;

// node_modules/lucide-svelte/dist/icons/badge-minus.svelte
Badge_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/badge-minus.svelte";
function Badge_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Badge_minus);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
      }
    ],
    ["line", { "x1": "8", "x2": "16", "y1": "12", "y2": "12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "badge-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Badge_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Badge_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge_minus = hmr(Badge_minus, () => Badge_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge_minus[HMR].source;
    set(Badge_minus[HMR].source, module.default[HMR].original);
  });
}
var badge_minus_default = Badge_minus;

// node_modules/lucide-svelte/dist/icons/badge-percent.svelte
Badge_percent[FILENAME] = "node_modules/lucide-svelte/dist/icons/badge-percent.svelte";
function Badge_percent($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Badge_percent);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
      }
    ],
    ["path", { "d": "m15 9-6 6" }],
    ["path", { "d": "M9 9h.01" }],
    ["path", { "d": "M15 15h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "badge-percent" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Badge_percent, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Badge_percent,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge_percent = hmr(Badge_percent, () => Badge_percent[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge_percent[HMR].source;
    set(Badge_percent[HMR].source, module.default[HMR].original);
  });
}
var badge_percent_default = Badge_percent;

// node_modules/lucide-svelte/dist/icons/badge-plus.svelte
Badge_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/badge-plus.svelte";
function Badge_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Badge_plus);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
      }
    ],
    ["line", { "x1": "12", "x2": "12", "y1": "8", "y2": "16" }],
    ["line", { "x1": "8", "x2": "16", "y1": "12", "y2": "12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "badge-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Badge_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Badge_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge_plus = hmr(Badge_plus, () => Badge_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge_plus[HMR].source;
    set(Badge_plus[HMR].source, module.default[HMR].original);
  });
}
var badge_plus_default = Badge_plus;

// node_modules/lucide-svelte/dist/icons/badge-pound-sterling.svelte
Badge_pound_sterling[FILENAME] = "node_modules/lucide-svelte/dist/icons/badge-pound-sterling.svelte";
function Badge_pound_sterling($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Badge_pound_sterling);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
      }
    ],
    ["path", { "d": "M8 12h4" }],
    ["path", { "d": "M10 16V9.5a2.5 2.5 0 0 1 5 0" }],
    ["path", { "d": "M8 16h7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "badge-pound-sterling" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Badge_pound_sterling, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Badge_pound_sterling,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge_pound_sterling = hmr(Badge_pound_sterling, () => Badge_pound_sterling[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge_pound_sterling[HMR].source;
    set(Badge_pound_sterling[HMR].source, module.default[HMR].original);
  });
}
var badge_pound_sterling_default = Badge_pound_sterling;

// node_modules/lucide-svelte/dist/icons/badge-question-mark.svelte
Badge_question_mark[FILENAME] = "node_modules/lucide-svelte/dist/icons/badge-question-mark.svelte";
function Badge_question_mark($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Badge_question_mark);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
      }
    ],
    ["path", { "d": "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3" }],
    [
      "line",
      { "x1": "12", "x2": "12.01", "y1": "17", "y2": "17" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "badge-question-mark" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Badge_question_mark, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Badge_question_mark,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge_question_mark = hmr(Badge_question_mark, () => Badge_question_mark[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge_question_mark[HMR].source;
    set(Badge_question_mark[HMR].source, module.default[HMR].original);
  });
}
var badge_question_mark_default = Badge_question_mark;

// node_modules/lucide-svelte/dist/icons/badge-russian-ruble.svelte
Badge_russian_ruble[FILENAME] = "node_modules/lucide-svelte/dist/icons/badge-russian-ruble.svelte";
function Badge_russian_ruble($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Badge_russian_ruble);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
      }
    ],
    ["path", { "d": "M9 16h5" }],
    ["path", { "d": "M9 12h5a2 2 0 1 0 0-4h-3v9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "badge-russian-ruble" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Badge_russian_ruble, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Badge_russian_ruble,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge_russian_ruble = hmr(Badge_russian_ruble, () => Badge_russian_ruble[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge_russian_ruble[HMR].source;
    set(Badge_russian_ruble[HMR].source, module.default[HMR].original);
  });
}
var badge_russian_ruble_default = Badge_russian_ruble;

// node_modules/lucide-svelte/dist/icons/badge-swiss-franc.svelte
Badge_swiss_franc[FILENAME] = "node_modules/lucide-svelte/dist/icons/badge-swiss-franc.svelte";
function Badge_swiss_franc($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Badge_swiss_franc);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
      }
    ],
    ["path", { "d": "M11 17V8h4" }],
    ["path", { "d": "M11 12h3" }],
    ["path", { "d": "M9 16h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "badge-swiss-franc" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Badge_swiss_franc, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Badge_swiss_franc,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge_swiss_franc = hmr(Badge_swiss_franc, () => Badge_swiss_franc[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge_swiss_franc[HMR].source;
    set(Badge_swiss_franc[HMR].source, module.default[HMR].original);
  });
}
var badge_swiss_franc_default = Badge_swiss_franc;

// node_modules/lucide-svelte/dist/icons/badge-turkish-lira.svelte
Badge_turkish_lira[FILENAME] = "node_modules/lucide-svelte/dist/icons/badge-turkish-lira.svelte";
function Badge_turkish_lira($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Badge_turkish_lira);
  const iconNode = [
    ["path", { "d": "M11 7v10a5 5 0 0 0 5-5" }],
    ["path", { "d": "m15 8-6 3" }],
    [
      "path",
      {
        "d": "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "badge-turkish-lira" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Badge_turkish_lira, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Badge_turkish_lira,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge_turkish_lira = hmr(Badge_turkish_lira, () => Badge_turkish_lira[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge_turkish_lira[HMR].source;
    set(Badge_turkish_lira[HMR].source, module.default[HMR].original);
  });
}
var badge_turkish_lira_default = Badge_turkish_lira;

// node_modules/lucide-svelte/dist/icons/badge-x.svelte
Badge_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/badge-x.svelte";
function Badge_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Badge_x);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
      }
    ],
    ["line", { "x1": "15", "x2": "9", "y1": "9", "y2": "15" }],
    ["line", { "x1": "9", "x2": "15", "y1": "9", "y2": "15" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "badge-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Badge_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Badge_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge_x = hmr(Badge_x, () => Badge_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge_x[HMR].source;
    set(Badge_x[HMR].source, module.default[HMR].original);
  });
}
var badge_x_default = Badge_x;

// node_modules/lucide-svelte/dist/icons/badge.svelte
Badge[FILENAME] = "node_modules/lucide-svelte/dist/icons/badge.svelte";
function Badge($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Badge);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "badge" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Badge, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Badge,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Badge = hmr(Badge, () => Badge[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge[HMR].source;
    set(Badge[HMR].source, module.default[HMR].original);
  });
}
var badge_default = Badge;

// node_modules/lucide-svelte/dist/icons/baggage-claim.svelte
Baggage_claim[FILENAME] = "node_modules/lucide-svelte/dist/icons/baggage-claim.svelte";
function Baggage_claim($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Baggage_claim);
  const iconNode = [
    ["path", { "d": "M22 18H6a2 2 0 0 1-2-2V7a2 2 0 0 0-2-2" }],
    [
      "path",
      { "d": "M17 14V4a2 2 0 0 0-2-2h-1a2 2 0 0 0-2 2v10" }
    ],
    [
      "rect",
      { "width": "13", "height": "8", "x": "8", "y": "6", "rx": "1" }
    ],
    ["circle", { "cx": "18", "cy": "20", "r": "2" }],
    ["circle", { "cx": "9", "cy": "20", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "baggage-claim" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Baggage_claim, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Baggage_claim,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Baggage_claim = hmr(Baggage_claim, () => Baggage_claim[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Baggage_claim[HMR].source;
    set(Baggage_claim[HMR].source, module.default[HMR].original);
  });
}
var baggage_claim_default = Baggage_claim;

// node_modules/lucide-svelte/dist/icons/ban.svelte
Ban[FILENAME] = "node_modules/lucide-svelte/dist/icons/ban.svelte";
function Ban($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ban);
  const iconNode = [
    ["path", { "d": "M4.929 4.929 19.07 19.071" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ban" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ban, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ban,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ban = hmr(Ban, () => Ban[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ban[HMR].source;
    set(Ban[HMR].source, module.default[HMR].original);
  });
}
var ban_default = Ban;

// node_modules/lucide-svelte/dist/icons/banana.svelte
Banana[FILENAME] = "node_modules/lucide-svelte/dist/icons/banana.svelte";
function Banana($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Banana);
  const iconNode = [
    ["path", { "d": "M4 13c3.5-2 8-2 10 2a5.5 5.5 0 0 1 8 5" }],
    [
      "path",
      {
        "d": "M5.15 17.89c5.52-1.52 8.65-6.89 7-12C11.55 4 11.5 2 13 2c3.22 0 5 5.5 5 8 0 6.5-4.2 12-10.49 12C5.11 22 2 22 2 20c0-1.5 1.14-1.55 3.15-2.11Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "banana" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Banana, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Banana,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Banana = hmr(Banana, () => Banana[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Banana[HMR].source;
    set(Banana[HMR].source, module.default[HMR].original);
  });
}
var banana_default = Banana;

// node_modules/lucide-svelte/dist/icons/bandage.svelte
Bandage[FILENAME] = "node_modules/lucide-svelte/dist/icons/bandage.svelte";
function Bandage($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bandage);
  const iconNode = [
    ["path", { "d": "M10 10.01h.01" }],
    ["path", { "d": "M10 14.01h.01" }],
    ["path", { "d": "M14 10.01h.01" }],
    ["path", { "d": "M14 14.01h.01" }],
    ["path", { "d": "M18 6v11.5" }],
    ["path", { "d": "M6 6v12" }],
    [
      "rect",
      { "x": "2", "y": "6", "width": "20", "height": "12", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bandage" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bandage, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bandage,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bandage = hmr(Bandage, () => Bandage[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bandage[HMR].source;
    set(Bandage[HMR].source, module.default[HMR].original);
  });
}
var bandage_default = Bandage;

// node_modules/lucide-svelte/dist/icons/banknote-arrow-down.svelte
Banknote_arrow_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/banknote-arrow-down.svelte";
function Banknote_arrow_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Banknote_arrow_down);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5"
      }
    ],
    ["path", { "d": "m16 19 3 3 3-3" }],
    ["path", { "d": "M18 12h.01" }],
    ["path", { "d": "M19 16v6" }],
    ["path", { "d": "M6 12h.01" }],
    ["circle", { "cx": "12", "cy": "12", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "banknote-arrow-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Banknote_arrow_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Banknote_arrow_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Banknote_arrow_down = hmr(Banknote_arrow_down, () => Banknote_arrow_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Banknote_arrow_down[HMR].source;
    set(Banknote_arrow_down[HMR].source, module.default[HMR].original);
  });
}
var banknote_arrow_down_default = Banknote_arrow_down;

// node_modules/lucide-svelte/dist/icons/banknote-arrow-up.svelte
Banknote_arrow_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/banknote-arrow-up.svelte";
function Banknote_arrow_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Banknote_arrow_up);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5"
      }
    ],
    ["path", { "d": "M18 12h.01" }],
    ["path", { "d": "M19 22v-6" }],
    ["path", { "d": "m22 19-3-3-3 3" }],
    ["path", { "d": "M6 12h.01" }],
    ["circle", { "cx": "12", "cy": "12", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "banknote-arrow-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Banknote_arrow_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Banknote_arrow_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Banknote_arrow_up = hmr(Banknote_arrow_up, () => Banknote_arrow_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Banknote_arrow_up[HMR].source;
    set(Banknote_arrow_up[HMR].source, module.default[HMR].original);
  });
}
var banknote_arrow_up_default = Banknote_arrow_up;

// node_modules/lucide-svelte/dist/icons/banknote.svelte
Banknote[FILENAME] = "node_modules/lucide-svelte/dist/icons/banknote.svelte";
function Banknote($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Banknote);
  const iconNode = [
    [
      "rect",
      { "width": "20", "height": "12", "x": "2", "y": "6", "rx": "2" }
    ],
    ["circle", { "cx": "12", "cy": "12", "r": "2" }],
    ["path", { "d": "M6 12h.01M18 12h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "banknote" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Banknote, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Banknote,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Banknote = hmr(Banknote, () => Banknote[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Banknote[HMR].source;
    set(Banknote[HMR].source, module.default[HMR].original);
  });
}
var banknote_default = Banknote;

// node_modules/lucide-svelte/dist/icons/banknote-x.svelte
Banknote_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/banknote-x.svelte";
function Banknote_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Banknote_x);
  const iconNode = [
    [
      "path",
      {
        "d": "M13 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5"
      }
    ],
    ["path", { "d": "m17 17 5 5" }],
    ["path", { "d": "M18 12h.01" }],
    ["path", { "d": "m22 17-5 5" }],
    ["path", { "d": "M6 12h.01" }],
    ["circle", { "cx": "12", "cy": "12", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "banknote-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Banknote_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Banknote_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Banknote_x = hmr(Banknote_x, () => Banknote_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Banknote_x[HMR].source;
    set(Banknote_x[HMR].source, module.default[HMR].original);
  });
}
var banknote_x_default = Banknote_x;

// node_modules/lucide-svelte/dist/icons/barcode.svelte
Barcode[FILENAME] = "node_modules/lucide-svelte/dist/icons/barcode.svelte";
function Barcode($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Barcode);
  const iconNode = [
    ["path", { "d": "M3 5v14" }],
    ["path", { "d": "M8 5v14" }],
    ["path", { "d": "M12 5v14" }],
    ["path", { "d": "M17 5v14" }],
    ["path", { "d": "M21 5v14" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "barcode" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Barcode, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Barcode,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Barcode = hmr(Barcode, () => Barcode[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Barcode[HMR].source;
    set(Barcode[HMR].source, module.default[HMR].original);
  });
}
var barcode_default = Barcode;

// node_modules/lucide-svelte/dist/icons/barrel.svelte
Barrel[FILENAME] = "node_modules/lucide-svelte/dist/icons/barrel.svelte";
function Barrel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Barrel);
  const iconNode = [
    ["path", { "d": "M10 3a41 41 0 0 0 0 18" }],
    ["path", { "d": "M14 3a41 41 0 0 1 0 18" }],
    [
      "path",
      {
        "d": "M17 3a2 2 0 0 1 1.68.92 15.25 15.25 0 0 1 0 16.16A2 2 0 0 1 17 21H7a2 2 0 0 1-1.68-.92 15.25 15.25 0 0 1 0-16.16A2 2 0 0 1 7 3z"
      }
    ],
    ["path", { "d": "M3.84 17h16.32" }],
    ["path", { "d": "M3.84 7h16.32" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "barrel" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Barrel, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Barrel,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Barrel = hmr(Barrel, () => Barrel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Barrel[HMR].source;
    set(Barrel[HMR].source, module.default[HMR].original);
  });
}
var barrel_default = Barrel;

// node_modules/lucide-svelte/dist/icons/baseline.svelte
Baseline[FILENAME] = "node_modules/lucide-svelte/dist/icons/baseline.svelte";
function Baseline($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Baseline);
  const iconNode = [
    ["path", { "d": "M4 20h16" }],
    ["path", { "d": "m6 16 6-12 6 12" }],
    ["path", { "d": "M8 12h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "baseline" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Baseline, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Baseline,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Baseline = hmr(Baseline, () => Baseline[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Baseline[HMR].source;
    set(Baseline[HMR].source, module.default[HMR].original);
  });
}
var baseline_default = Baseline;

// node_modules/lucide-svelte/dist/icons/bath.svelte
Bath[FILENAME] = "node_modules/lucide-svelte/dist/icons/bath.svelte";
function Bath($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bath);
  const iconNode = [
    ["path", { "d": "M10 4 8 6" }],
    ["path", { "d": "M17 19v2" }],
    ["path", { "d": "M2 12h20" }],
    ["path", { "d": "M7 19v2" }],
    [
      "path",
      {
        "d": "M9 5 7.621 3.621A2.121 2.121 0 0 0 4 5v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-5"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bath" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bath, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bath,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bath = hmr(Bath, () => Bath[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bath[HMR].source;
    set(Bath[HMR].source, module.default[HMR].original);
  });
}
var bath_default = Bath;

// node_modules/lucide-svelte/dist/icons/battery-charging.svelte
Battery_charging[FILENAME] = "node_modules/lucide-svelte/dist/icons/battery-charging.svelte";
function Battery_charging($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Battery_charging);
  const iconNode = [
    ["path", { "d": "m11 7-3 5h4l-3 5" }],
    [
      "path",
      { "d": "M14.856 6H16a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.935" }
    ],
    ["path", { "d": "M22 14v-4" }],
    [
      "path",
      { "d": "M5.14 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h2.936" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "battery-charging" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Battery_charging, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Battery_charging,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Battery_charging = hmr(Battery_charging, () => Battery_charging[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Battery_charging[HMR].source;
    set(Battery_charging[HMR].source, module.default[HMR].original);
  });
}
var battery_charging_default = Battery_charging;

// node_modules/lucide-svelte/dist/icons/battery-full.svelte
Battery_full[FILENAME] = "node_modules/lucide-svelte/dist/icons/battery-full.svelte";
function Battery_full($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Battery_full);
  const iconNode = [
    ["path", { "d": "M10 10v4" }],
    ["path", { "d": "M14 10v4" }],
    ["path", { "d": "M22 14v-4" }],
    ["path", { "d": "M6 10v4" }],
    [
      "rect",
      { "x": "2", "y": "6", "width": "16", "height": "12", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "battery-full" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Battery_full, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Battery_full,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Battery_full = hmr(Battery_full, () => Battery_full[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Battery_full[HMR].source;
    set(Battery_full[HMR].source, module.default[HMR].original);
  });
}
var battery_full_default = Battery_full;

// node_modules/lucide-svelte/dist/icons/battery-low.svelte
Battery_low[FILENAME] = "node_modules/lucide-svelte/dist/icons/battery-low.svelte";
function Battery_low($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Battery_low);
  const iconNode = [
    ["path", { "d": "M22 14v-4" }],
    ["path", { "d": "M6 14v-4" }],
    [
      "rect",
      { "x": "2", "y": "6", "width": "16", "height": "12", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "battery-low" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Battery_low, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Battery_low,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Battery_low = hmr(Battery_low, () => Battery_low[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Battery_low[HMR].source;
    set(Battery_low[HMR].source, module.default[HMR].original);
  });
}
var battery_low_default = Battery_low;

// node_modules/lucide-svelte/dist/icons/battery-medium.svelte
Battery_medium[FILENAME] = "node_modules/lucide-svelte/dist/icons/battery-medium.svelte";
function Battery_medium($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Battery_medium);
  const iconNode = [
    ["path", { "d": "M10 14v-4" }],
    ["path", { "d": "M22 14v-4" }],
    ["path", { "d": "M6 14v-4" }],
    [
      "rect",
      { "x": "2", "y": "6", "width": "16", "height": "12", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "battery-medium" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Battery_medium, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Battery_medium,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Battery_medium = hmr(Battery_medium, () => Battery_medium[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Battery_medium[HMR].source;
    set(Battery_medium[HMR].source, module.default[HMR].original);
  });
}
var battery_medium_default = Battery_medium;

// node_modules/lucide-svelte/dist/icons/battery-plus.svelte
Battery_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/battery-plus.svelte";
function Battery_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Battery_plus);
  const iconNode = [
    ["path", { "d": "M10 9v6" }],
    [
      "path",
      { "d": "M12.543 6H16a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-3.605" }
    ],
    ["path", { "d": "M22 14v-4" }],
    ["path", { "d": "M7 12h6" }],
    [
      "path",
      { "d": "M7.606 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3.606" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "battery-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Battery_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Battery_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Battery_plus = hmr(Battery_plus, () => Battery_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Battery_plus[HMR].source;
    set(Battery_plus[HMR].source, module.default[HMR].original);
  });
}
var battery_plus_default = Battery_plus;

// node_modules/lucide-svelte/dist/icons/battery-warning.svelte
Battery_warning[FILENAME] = "node_modules/lucide-svelte/dist/icons/battery-warning.svelte";
function Battery_warning($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Battery_warning);
  const iconNode = [
    ["path", { "d": "M10 17h.01" }],
    ["path", { "d": "M10 7v6" }],
    ["path", { "d": "M14 6h2a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2" }],
    ["path", { "d": "M22 14v-4" }],
    ["path", { "d": "M6 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "battery-warning" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Battery_warning, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Battery_warning,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Battery_warning = hmr(Battery_warning, () => Battery_warning[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Battery_warning[HMR].source;
    set(Battery_warning[HMR].source, module.default[HMR].original);
  });
}
var battery_warning_default = Battery_warning;

// node_modules/lucide-svelte/dist/icons/battery.svelte
Battery[FILENAME] = "node_modules/lucide-svelte/dist/icons/battery.svelte";
function Battery($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Battery);
  const iconNode = [
    ["path", { "d": "M 22 14 L 22 10" }],
    [
      "rect",
      { "x": "2", "y": "6", "width": "16", "height": "12", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "battery" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Battery, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Battery,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Battery = hmr(Battery, () => Battery[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Battery[HMR].source;
    set(Battery[HMR].source, module.default[HMR].original);
  });
}
var battery_default = Battery;

// node_modules/lucide-svelte/dist/icons/beaker.svelte
Beaker[FILENAME] = "node_modules/lucide-svelte/dist/icons/beaker.svelte";
function Beaker($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Beaker);
  const iconNode = [
    ["path", { "d": "M4.5 3h15" }],
    ["path", { "d": "M6 3v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V3" }],
    ["path", { "d": "M6 14h12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "beaker" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Beaker, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Beaker,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Beaker = hmr(Beaker, () => Beaker[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Beaker[HMR].source;
    set(Beaker[HMR].source, module.default[HMR].original);
  });
}
var beaker_default = Beaker;

// node_modules/lucide-svelte/dist/icons/bean-off.svelte
Bean_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/bean-off.svelte";
function Bean_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bean_off);
  const iconNode = [
    [
      "path",
      {
        "d": "M9 9c-.64.64-1.521.954-2.402 1.165A6 6 0 0 0 8 22a13.96 13.96 0 0 0 9.9-4.1"
      }
    ],
    [
      "path",
      {
        "d": "M10.75 5.093A6 6 0 0 1 22 8c0 2.411-.61 4.68-1.683 6.66"
      }
    ],
    [
      "path",
      {
        "d": "M5.341 10.62a4 4 0 0 0 6.487 1.208M10.62 5.341a4.015 4.015 0 0 1 2.039 2.04"
      }
    ],
    ["line", { "x1": "2", "x2": "22", "y1": "2", "y2": "22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bean-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bean_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bean_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bean_off = hmr(Bean_off, () => Bean_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bean_off[HMR].source;
    set(Bean_off[HMR].source, module.default[HMR].original);
  });
}
var bean_off_default = Bean_off;

// node_modules/lucide-svelte/dist/icons/bean.svelte
Bean[FILENAME] = "node_modules/lucide-svelte/dist/icons/bean.svelte";
function Bean($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bean);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.165 6.598C9.954 7.478 9.64 8.36 9 9c-.64.64-1.521.954-2.402 1.165A6 6 0 0 0 8 22c7.732 0 14-6.268 14-14a6 6 0 0 0-11.835-1.402Z"
      }
    ],
    ["path", { "d": "M5.341 10.62a4 4 0 1 0 5.279-5.28" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bean" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bean, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bean,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bean = hmr(Bean, () => Bean[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bean[HMR].source;
    set(Bean[HMR].source, module.default[HMR].original);
  });
}
var bean_default = Bean;

// node_modules/lucide-svelte/dist/icons/bed-double.svelte
Bed_double[FILENAME] = "node_modules/lucide-svelte/dist/icons/bed-double.svelte";
function Bed_double($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bed_double);
  const iconNode = [
    ["path", { "d": "M2 20v-8a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v8" }],
    ["path", { "d": "M4 10V6a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4" }],
    ["path", { "d": "M12 4v6" }],
    ["path", { "d": "M2 18h20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bed-double" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bed_double, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bed_double,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bed_double = hmr(Bed_double, () => Bed_double[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bed_double[HMR].source;
    set(Bed_double[HMR].source, module.default[HMR].original);
  });
}
var bed_double_default = Bed_double;

// node_modules/lucide-svelte/dist/icons/bed-single.svelte
Bed_single[FILENAME] = "node_modules/lucide-svelte/dist/icons/bed-single.svelte";
function Bed_single($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bed_single);
  const iconNode = [
    ["path", { "d": "M3 20v-8a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v8" }],
    ["path", { "d": "M5 10V6a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v4" }],
    ["path", { "d": "M3 18h18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bed-single" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bed_single, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bed_single,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bed_single = hmr(Bed_single, () => Bed_single[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bed_single[HMR].source;
    set(Bed_single[HMR].source, module.default[HMR].original);
  });
}
var bed_single_default = Bed_single;

// node_modules/lucide-svelte/dist/icons/bed.svelte
Bed[FILENAME] = "node_modules/lucide-svelte/dist/icons/bed.svelte";
function Bed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bed);
  const iconNode = [
    ["path", { "d": "M2 4v16" }],
    ["path", { "d": "M2 8h18a2 2 0 0 1 2 2v10" }],
    ["path", { "d": "M2 17h20" }],
    ["path", { "d": "M6 8v9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bed = hmr(Bed, () => Bed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bed[HMR].source;
    set(Bed[HMR].source, module.default[HMR].original);
  });
}
var bed_default = Bed;

// node_modules/lucide-svelte/dist/icons/beef.svelte
Beef[FILENAME] = "node_modules/lucide-svelte/dist/icons/beef.svelte";
function Beef($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Beef);
  const iconNode = [
    [
      "path",
      {
        "d": "M16.4 13.7A6.5 6.5 0 1 0 6.28 6.6c-1.1 3.13-.78 3.9-3.18 6.08A3 3 0 0 0 5 18c4 0 8.4-1.8 11.4-4.3"
      }
    ],
    [
      "path",
      {
        "d": "m18.5 6 2.19 4.5a6.48 6.48 0 0 1-2.29 7.2C15.4 20.2 11 22 7 22a3 3 0 0 1-2.68-1.66L2.4 16.5"
      }
    ],
    ["circle", { "cx": "12.5", "cy": "8.5", "r": "2.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "beef" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Beef, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Beef,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Beef = hmr(Beef, () => Beef[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Beef[HMR].source;
    set(Beef[HMR].source, module.default[HMR].original);
  });
}
var beef_default = Beef;

// node_modules/lucide-svelte/dist/icons/beer-off.svelte
Beer_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/beer-off.svelte";
function Beer_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Beer_off);
  const iconNode = [
    ["path", { "d": "M13 13v5" }],
    ["path", { "d": "M17 11.47V8" }],
    ["path", { "d": "M17 11h1a3 3 0 0 1 2.745 4.211" }],
    ["path", { "d": "m2 2 20 20" }],
    ["path", { "d": "M5 8v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2v-3" }],
    [
      "path",
      {
        "d": "M7.536 7.535C6.766 7.649 6.154 8 5.5 8a2.5 2.5 0 0 1-1.768-4.268"
      }
    ],
    [
      "path",
      {
        "d": "M8.727 3.204C9.306 2.767 9.885 2 11 2c1.56 0 2 1.5 3 1.5s1.72-.5 2.5-.5a1 1 0 1 1 0 5c-.78 0-1.5-.5-2.5-.5a3.149 3.149 0 0 0-.842.12"
      }
    ],
    ["path", { "d": "M9 14.6V18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "beer-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Beer_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Beer_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Beer_off = hmr(Beer_off, () => Beer_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Beer_off[HMR].source;
    set(Beer_off[HMR].source, module.default[HMR].original);
  });
}
var beer_off_default = Beer_off;

// node_modules/lucide-svelte/dist/icons/beer.svelte
Beer[FILENAME] = "node_modules/lucide-svelte/dist/icons/beer.svelte";
function Beer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Beer);
  const iconNode = [
    ["path", { "d": "M17 11h1a3 3 0 0 1 0 6h-1" }],
    ["path", { "d": "M9 12v6" }],
    ["path", { "d": "M13 12v6" }],
    [
      "path",
      {
        "d": "M14 7.5c-1 0-1.44.5-3 .5s-2-.5-3-.5-1.72.5-2.5.5a2.5 2.5 0 0 1 0-5c.78 0 1.57.5 2.5.5S9.44 2 11 2s2 1.5 3 1.5 1.72-.5 2.5-.5a2.5 2.5 0 0 1 0 5c-.78 0-1.5-.5-2.5-.5Z"
      }
    ],
    ["path", { "d": "M5 8v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "beer" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Beer, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Beer,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Beer = hmr(Beer, () => Beer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Beer[HMR].source;
    set(Beer[HMR].source, module.default[HMR].original);
  });
}
var beer_default = Beer;

// node_modules/lucide-svelte/dist/icons/bell-dot.svelte
Bell_dot[FILENAME] = "node_modules/lucide-svelte/dist/icons/bell-dot.svelte";
function Bell_dot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bell_dot);
  const iconNode = [
    ["path", { "d": "M10.268 21a2 2 0 0 0 3.464 0" }],
    [
      "path",
      {
        "d": "M13.916 2.314A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.74 7.327A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673 9 9 0 0 1-.585-.665"
      }
    ],
    ["circle", { "cx": "18", "cy": "8", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bell-dot" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bell_dot, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bell_dot,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bell_dot = hmr(Bell_dot, () => Bell_dot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bell_dot[HMR].source;
    set(Bell_dot[HMR].source, module.default[HMR].original);
  });
}
var bell_dot_default = Bell_dot;

// node_modules/lucide-svelte/dist/icons/bell-electric.svelte
Bell_electric[FILENAME] = "node_modules/lucide-svelte/dist/icons/bell-electric.svelte";
function Bell_electric($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bell_electric);
  const iconNode = [
    ["path", { "d": "M18.518 17.347A7 7 0 0 1 14 19" }],
    ["path", { "d": "M18.8 4A11 11 0 0 1 20 9" }],
    ["path", { "d": "M9 9h.01" }],
    ["circle", { "cx": "20", "cy": "16", "r": "2" }],
    ["circle", { "cx": "9", "cy": "9", "r": "7" }],
    [
      "rect",
      { "x": "4", "y": "16", "width": "10", "height": "6", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bell-electric" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bell_electric, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bell_electric,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bell_electric = hmr(Bell_electric, () => Bell_electric[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bell_electric[HMR].source;
    set(Bell_electric[HMR].source, module.default[HMR].original);
  });
}
var bell_electric_default = Bell_electric;

// node_modules/lucide-svelte/dist/icons/bell-minus.svelte
Bell_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/bell-minus.svelte";
function Bell_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bell_minus);
  const iconNode = [
    ["path", { "d": "M10.268 21a2 2 0 0 0 3.464 0" }],
    ["path", { "d": "M15 8h6" }],
    [
      "path",
      {
        "d": "M16.243 3.757A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673A9.4 9.4 0 0 1 18.667 12"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bell-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bell_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bell_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bell_minus = hmr(Bell_minus, () => Bell_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bell_minus[HMR].source;
    set(Bell_minus[HMR].source, module.default[HMR].original);
  });
}
var bell_minus_default = Bell_minus;

// node_modules/lucide-svelte/dist/icons/bell-off.svelte
Bell_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/bell-off.svelte";
function Bell_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bell_off);
  const iconNode = [
    ["path", { "d": "M10.268 21a2 2 0 0 0 3.464 0" }],
    [
      "path",
      {
        "d": "M17 17H4a1 1 0 0 1-.74-1.673C4.59 13.956 6 12.499 6 8a6 6 0 0 1 .258-1.742"
      }
    ],
    ["path", { "d": "m2 2 20 20" }],
    [
      "path",
      {
        "d": "M8.668 3.01A6 6 0 0 1 18 8c0 2.687.77 4.653 1.707 6.05"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bell-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bell_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bell_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bell_off = hmr(Bell_off, () => Bell_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bell_off[HMR].source;
    set(Bell_off[HMR].source, module.default[HMR].original);
  });
}
var bell_off_default = Bell_off;

// node_modules/lucide-svelte/dist/icons/bell-plus.svelte
Bell_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/bell-plus.svelte";
function Bell_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bell_plus);
  const iconNode = [
    ["path", { "d": "M10.268 21a2 2 0 0 0 3.464 0" }],
    ["path", { "d": "M15 8h6" }],
    ["path", { "d": "M18 5v6" }],
    [
      "path",
      {
        "d": "M20.002 14.464a9 9 0 0 0 .738.863A1 1 0 0 1 20 17H4a1 1 0 0 1-.74-1.673C4.59 13.956 6 12.499 6 8a6 6 0 0 1 8.75-5.332"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bell-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bell_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bell_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bell_plus = hmr(Bell_plus, () => Bell_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bell_plus[HMR].source;
    set(Bell_plus[HMR].source, module.default[HMR].original);
  });
}
var bell_plus_default = Bell_plus;

// node_modules/lucide-svelte/dist/icons/bell-ring.svelte
Bell_ring[FILENAME] = "node_modules/lucide-svelte/dist/icons/bell-ring.svelte";
function Bell_ring($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bell_ring);
  const iconNode = [
    ["path", { "d": "M10.268 21a2 2 0 0 0 3.464 0" }],
    ["path", { "d": "M22 8c0-2.3-.8-4.3-2-6" }],
    [
      "path",
      {
        "d": "M3.262 15.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673C19.41 13.956 18 12.499 18 8A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326"
      }
    ],
    ["path", { "d": "M4 2C2.8 3.7 2 5.7 2 8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bell-ring" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bell_ring, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bell_ring,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bell_ring = hmr(Bell_ring, () => Bell_ring[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bell_ring[HMR].source;
    set(Bell_ring[HMR].source, module.default[HMR].original);
  });
}
var bell_ring_default = Bell_ring;

// node_modules/lucide-svelte/dist/icons/bell.svelte
Bell[FILENAME] = "node_modules/lucide-svelte/dist/icons/bell.svelte";
function Bell($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bell);
  const iconNode = [
    ["path", { "d": "M10.268 21a2 2 0 0 0 3.464 0" }],
    [
      "path",
      {
        "d": "M3.262 15.326A1 1 0 0 0 4 17h16a1 1 0 0 0 .74-1.673C19.41 13.956 18 12.499 18 8A6 6 0 0 0 6 8c0 4.499-1.411 5.956-2.738 7.326"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bell" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bell, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bell,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bell = hmr(Bell, () => Bell[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bell[HMR].source;
    set(Bell[HMR].source, module.default[HMR].original);
  });
}
var bell_default = Bell;

// node_modules/lucide-svelte/dist/icons/between-horizontal-end.svelte
Between_horizontal_end[FILENAME] = "node_modules/lucide-svelte/dist/icons/between-horizontal-end.svelte";
function Between_horizontal_end($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Between_horizontal_end);
  const iconNode = [
    [
      "rect",
      { "width": "13", "height": "7", "x": "3", "y": "3", "rx": "1" }
    ],
    ["path", { "d": "m22 15-3-3 3-3" }],
    [
      "rect",
      { "width": "13", "height": "7", "x": "3", "y": "14", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "between-horizontal-end" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Between_horizontal_end, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Between_horizontal_end,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Between_horizontal_end = hmr(Between_horizontal_end, () => Between_horizontal_end[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Between_horizontal_end[HMR].source;
    set(Between_horizontal_end[HMR].source, module.default[HMR].original);
  });
}
var between_horizontal_end_default = Between_horizontal_end;

// node_modules/lucide-svelte/dist/icons/between-horizontal-start.svelte
Between_horizontal_start[FILENAME] = "node_modules/lucide-svelte/dist/icons/between-horizontal-start.svelte";
function Between_horizontal_start($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Between_horizontal_start);
  const iconNode = [
    [
      "rect",
      { "width": "13", "height": "7", "x": "8", "y": "3", "rx": "1" }
    ],
    ["path", { "d": "m2 9 3 3-3 3" }],
    [
      "rect",
      { "width": "13", "height": "7", "x": "8", "y": "14", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "between-horizontal-start" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Between_horizontal_start, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Between_horizontal_start,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Between_horizontal_start = hmr(Between_horizontal_start, () => Between_horizontal_start[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Between_horizontal_start[HMR].source;
    set(Between_horizontal_start[HMR].source, module.default[HMR].original);
  });
}
var between_horizontal_start_default = Between_horizontal_start;

// node_modules/lucide-svelte/dist/icons/between-vertical-start.svelte
Between_vertical_start[FILENAME] = "node_modules/lucide-svelte/dist/icons/between-vertical-start.svelte";
function Between_vertical_start($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Between_vertical_start);
  const iconNode = [
    [
      "rect",
      { "width": "7", "height": "13", "x": "3", "y": "8", "rx": "1" }
    ],
    ["path", { "d": "m15 2-3 3-3-3" }],
    [
      "rect",
      { "width": "7", "height": "13", "x": "14", "y": "8", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "between-vertical-start" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Between_vertical_start, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Between_vertical_start,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Between_vertical_start = hmr(Between_vertical_start, () => Between_vertical_start[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Between_vertical_start[HMR].source;
    set(Between_vertical_start[HMR].source, module.default[HMR].original);
  });
}
var between_vertical_start_default = Between_vertical_start;

// node_modules/lucide-svelte/dist/icons/between-vertical-end.svelte
Between_vertical_end[FILENAME] = "node_modules/lucide-svelte/dist/icons/between-vertical-end.svelte";
function Between_vertical_end($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Between_vertical_end);
  const iconNode = [
    [
      "rect",
      { "width": "7", "height": "13", "x": "3", "y": "3", "rx": "1" }
    ],
    ["path", { "d": "m9 22 3-3 3 3" }],
    [
      "rect",
      { "width": "7", "height": "13", "x": "14", "y": "3", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "between-vertical-end" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Between_vertical_end, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Between_vertical_end,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Between_vertical_end = hmr(Between_vertical_end, () => Between_vertical_end[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Between_vertical_end[HMR].source;
    set(Between_vertical_end[HMR].source, module.default[HMR].original);
  });
}
var between_vertical_end_default = Between_vertical_end;

// node_modules/lucide-svelte/dist/icons/biceps-flexed.svelte
Biceps_flexed[FILENAME] = "node_modules/lucide-svelte/dist/icons/biceps-flexed.svelte";
function Biceps_flexed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Biceps_flexed);
  const iconNode = [
    [
      "path",
      {
        "d": "M12.409 13.017A5 5 0 0 1 22 15c0 3.866-4 7-9 7-4.077 0-8.153-.82-10.371-2.462-.426-.316-.631-.832-.62-1.362C2.118 12.723 2.627 2 10 2a3 3 0 0 1 3 3 2 2 0 0 1-2 2c-1.105 0-1.64-.444-2-1"
      }
    ],
    ["path", { "d": "M15 14a5 5 0 0 0-7.584 2" }],
    ["path", { "d": "M9.964 6.825C8.019 7.977 9.5 13 8 15" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "biceps-flexed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Biceps_flexed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Biceps_flexed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Biceps_flexed = hmr(Biceps_flexed, () => Biceps_flexed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Biceps_flexed[HMR].source;
    set(Biceps_flexed[HMR].source, module.default[HMR].original);
  });
}
var biceps_flexed_default = Biceps_flexed;

// node_modules/lucide-svelte/dist/icons/bike.svelte
Bike[FILENAME] = "node_modules/lucide-svelte/dist/icons/bike.svelte";
function Bike($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bike);
  const iconNode = [
    ["circle", { "cx": "18.5", "cy": "17.5", "r": "3.5" }],
    ["circle", { "cx": "5.5", "cy": "17.5", "r": "3.5" }],
    ["circle", { "cx": "15", "cy": "5", "r": "1" }],
    ["path", { "d": "M12 17.5V14l-3-3 4-3 2 3h2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bike" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bike, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bike,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bike = hmr(Bike, () => Bike[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bike[HMR].source;
    set(Bike[HMR].source, module.default[HMR].original);
  });
}
var bike_default = Bike;

// node_modules/lucide-svelte/dist/icons/binary.svelte
Binary[FILENAME] = "node_modules/lucide-svelte/dist/icons/binary.svelte";
function Binary($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Binary);
  const iconNode = [
    [
      "rect",
      { "x": "14", "y": "14", "width": "4", "height": "6", "rx": "2" }
    ],
    [
      "rect",
      { "x": "6", "y": "4", "width": "4", "height": "6", "rx": "2" }
    ],
    ["path", { "d": "M6 20h4" }],
    ["path", { "d": "M14 10h4" }],
    ["path", { "d": "M6 14h2v6" }],
    ["path", { "d": "M14 4h2v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "binary" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Binary, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Binary,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Binary = hmr(Binary, () => Binary[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Binary[HMR].source;
    set(Binary[HMR].source, module.default[HMR].original);
  });
}
var binary_default = Binary;

// node_modules/lucide-svelte/dist/icons/binoculars.svelte
Binoculars[FILENAME] = "node_modules/lucide-svelte/dist/icons/binoculars.svelte";
function Binoculars($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Binoculars);
  const iconNode = [
    ["path", { "d": "M10 10h4" }],
    ["path", { "d": "M19 7V4a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v3" }],
    [
      "path",
      {
        "d": "M20 21a2 2 0 0 0 2-2v-3.851c0-1.39-2-2.962-2-4.829V8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v11a2 2 0 0 0 2 2z"
      }
    ],
    ["path", { "d": "M 22 16 L 2 16" }],
    [
      "path",
      {
        "d": "M4 21a2 2 0 0 1-2-2v-3.851c0-1.39 2-2.962 2-4.829V8a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v11a2 2 0 0 1-2 2z"
      }
    ],
    ["path", { "d": "M9 7V4a1 1 0 0 0-1-1H6a1 1 0 0 0-1 1v3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "binoculars" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Binoculars, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Binoculars,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Binoculars = hmr(Binoculars, () => Binoculars[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Binoculars[HMR].source;
    set(Binoculars[HMR].source, module.default[HMR].original);
  });
}
var binoculars_default = Binoculars;

// node_modules/lucide-svelte/dist/icons/biohazard.svelte
Biohazard[FILENAME] = "node_modules/lucide-svelte/dist/icons/biohazard.svelte";
function Biohazard($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Biohazard);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "11.9", "r": "2" }],
    [
      "path",
      { "d": "M6.7 3.4c-.9 2.5 0 5.2 2.2 6.7C6.5 9 3.7 9.6 2 11.6" }
    ],
    ["path", { "d": "m8.9 10.1 1.4.8" }],
    [
      "path",
      { "d": "M17.3 3.4c.9 2.5 0 5.2-2.2 6.7 2.4-1.2 5.2-.6 6.9 1.5" }
    ],
    ["path", { "d": "m15.1 10.1-1.4.8" }],
    [
      "path",
      {
        "d": "M16.7 20.8c-2.6-.4-4.6-2.6-4.7-5.3-.2 2.6-2.1 4.8-4.7 5.2"
      }
    ],
    ["path", { "d": "M12 13.9v1.6" }],
    ["path", { "d": "M13.5 5.4c-1-.2-2-.2-3 0" }],
    ["path", { "d": "M17 16.4c.7-.7 1.2-1.6 1.5-2.5" }],
    ["path", { "d": "M5.5 13.9c.3.9.8 1.8 1.5 2.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "biohazard" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Biohazard, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Biohazard,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Biohazard = hmr(Biohazard, () => Biohazard[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Biohazard[HMR].source;
    set(Biohazard[HMR].source, module.default[HMR].original);
  });
}
var biohazard_default = Biohazard;

// node_modules/lucide-svelte/dist/icons/bird.svelte
Bird[FILENAME] = "node_modules/lucide-svelte/dist/icons/bird.svelte";
function Bird($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bird);
  const iconNode = [
    ["path", { "d": "M16 7h.01" }],
    [
      "path",
      { "d": "M3.4 18H12a8 8 0 0 0 8-8V7a4 4 0 0 0-7.28-2.3L2 20" }
    ],
    ["path", { "d": "m20 7 2 .5-2 .5" }],
    ["path", { "d": "M10 18v3" }],
    ["path", { "d": "M14 17.75V21" }],
    ["path", { "d": "M7 18a6 6 0 0 0 3.84-10.61" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bird" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bird, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bird,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bird = hmr(Bird, () => Bird[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bird[HMR].source;
    set(Bird[HMR].source, module.default[HMR].original);
  });
}
var bird_default = Bird;

// node_modules/lucide-svelte/dist/icons/bitcoin.svelte
Bitcoin[FILENAME] = "node_modules/lucide-svelte/dist/icons/bitcoin.svelte";
function Bitcoin($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bitcoin);
  const iconNode = [
    [
      "path",
      {
        "d": "M11.767 19.089c4.924.868 6.14-6.025 1.216-6.894m-1.216 6.894L5.86 18.047m5.908 1.042-.347 1.97m1.563-8.864c4.924.869 6.14-6.025 1.215-6.893m-1.215 6.893-3.94-.694m5.155-6.2L8.29 4.26m5.908 1.042.348-1.97M7.48 20.364l3.126-17.727"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bitcoin" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bitcoin, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bitcoin,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bitcoin = hmr(Bitcoin, () => Bitcoin[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bitcoin[HMR].source;
    set(Bitcoin[HMR].source, module.default[HMR].original);
  });
}
var bitcoin_default = Bitcoin;

// node_modules/lucide-svelte/dist/icons/blend.svelte
Blend[FILENAME] = "node_modules/lucide-svelte/dist/icons/blend.svelte";
function Blend($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Blend);
  const iconNode = [
    ["circle", { "cx": "9", "cy": "9", "r": "7" }],
    ["circle", { "cx": "15", "cy": "15", "r": "7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "blend" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Blend, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Blend,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Blend = hmr(Blend, () => Blend[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Blend[HMR].source;
    set(Blend[HMR].source, module.default[HMR].original);
  });
}
var blend_default = Blend;

// node_modules/lucide-svelte/dist/icons/blinds.svelte
Blinds[FILENAME] = "node_modules/lucide-svelte/dist/icons/blinds.svelte";
function Blinds($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Blinds);
  const iconNode = [
    ["path", { "d": "M3 3h18" }],
    ["path", { "d": "M20 7H8" }],
    ["path", { "d": "M20 11H8" }],
    ["path", { "d": "M10 19h10" }],
    ["path", { "d": "M8 15h12" }],
    ["path", { "d": "M4 3v14" }],
    ["circle", { "cx": "4", "cy": "19", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "blinds" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Blinds, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Blinds,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Blinds = hmr(Blinds, () => Blinds[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Blinds[HMR].source;
    set(Blinds[HMR].source, module.default[HMR].original);
  });
}
var blinds_default = Blinds;

// node_modules/lucide-svelte/dist/icons/blocks.svelte
Blocks[FILENAME] = "node_modules/lucide-svelte/dist/icons/blocks.svelte";
function Blocks($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Blocks);
  const iconNode = [
    [
      "path",
      {
        "d": "M10 22V7a1 1 0 0 0-1-1H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-5a1 1 0 0 0-1-1H2"
      }
    ],
    [
      "rect",
      { "x": "14", "y": "2", "width": "8", "height": "8", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "blocks" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Blocks, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Blocks,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Blocks = hmr(Blocks, () => Blocks[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Blocks[HMR].source;
    set(Blocks[HMR].source, module.default[HMR].original);
  });
}
var blocks_default = Blocks;

// node_modules/lucide-svelte/dist/icons/bluetooth-connected.svelte
Bluetooth_connected[FILENAME] = "node_modules/lucide-svelte/dist/icons/bluetooth-connected.svelte";
function Bluetooth_connected($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bluetooth_connected);
  const iconNode = [
    ["path", { "d": "m7 7 10 10-5 5V2l5 5L7 17" }],
    ["line", { "x1": "18", "x2": "21", "y1": "12", "y2": "12" }],
    ["line", { "x1": "3", "x2": "6", "y1": "12", "y2": "12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bluetooth-connected" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bluetooth_connected, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bluetooth_connected,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bluetooth_connected = hmr(Bluetooth_connected, () => Bluetooth_connected[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bluetooth_connected[HMR].source;
    set(Bluetooth_connected[HMR].source, module.default[HMR].original);
  });
}
var bluetooth_connected_default = Bluetooth_connected;

// node_modules/lucide-svelte/dist/icons/bluetooth-off.svelte
Bluetooth_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/bluetooth-off.svelte";
function Bluetooth_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bluetooth_off);
  const iconNode = [
    ["path", { "d": "m17 17-5 5V12l-5 5" }],
    ["path", { "d": "m2 2 20 20" }],
    ["path", { "d": "M14.5 9.5 17 7l-5-5v4.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bluetooth-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bluetooth_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bluetooth_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bluetooth_off = hmr(Bluetooth_off, () => Bluetooth_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bluetooth_off[HMR].source;
    set(Bluetooth_off[HMR].source, module.default[HMR].original);
  });
}
var bluetooth_off_default = Bluetooth_off;

// node_modules/lucide-svelte/dist/icons/bluetooth-searching.svelte
Bluetooth_searching[FILENAME] = "node_modules/lucide-svelte/dist/icons/bluetooth-searching.svelte";
function Bluetooth_searching($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bluetooth_searching);
  const iconNode = [
    ["path", { "d": "m7 7 10 10-5 5V2l5 5L7 17" }],
    ["path", { "d": "M20.83 14.83a4 4 0 0 0 0-5.66" }],
    ["path", { "d": "M18 12h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bluetooth-searching" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bluetooth_searching, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bluetooth_searching,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bluetooth_searching = hmr(Bluetooth_searching, () => Bluetooth_searching[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bluetooth_searching[HMR].source;
    set(Bluetooth_searching[HMR].source, module.default[HMR].original);
  });
}
var bluetooth_searching_default = Bluetooth_searching;

// node_modules/lucide-svelte/dist/icons/bluetooth.svelte
Bluetooth[FILENAME] = "node_modules/lucide-svelte/dist/icons/bluetooth.svelte";
function Bluetooth($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bluetooth);
  const iconNode = [["path", { "d": "m7 7 10 10-5 5V2l5 5L7 17" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bluetooth" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bluetooth, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bluetooth,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bluetooth = hmr(Bluetooth, () => Bluetooth[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bluetooth[HMR].source;
    set(Bluetooth[HMR].source, module.default[HMR].original);
  });
}
var bluetooth_default = Bluetooth;

// node_modules/lucide-svelte/dist/icons/bold.svelte
Bold[FILENAME] = "node_modules/lucide-svelte/dist/icons/bold.svelte";
function Bold($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bold);
  const iconNode = [
    [
      "path",
      {
        "d": "M6 12h9a4 4 0 0 1 0 8H7a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1h7a4 4 0 0 1 0 8"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bold" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bold, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bold,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bold = hmr(Bold, () => Bold[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bold[HMR].source;
    set(Bold[HMR].source, module.default[HMR].original);
  });
}
var bold_default = Bold;

// node_modules/lucide-svelte/dist/icons/bolt.svelte
Bolt[FILENAME] = "node_modules/lucide-svelte/dist/icons/bolt.svelte";
function Bolt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bolt);
  const iconNode = [
    [
      "path",
      {
        "d": "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"
      }
    ],
    ["circle", { "cx": "12", "cy": "12", "r": "4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bolt" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bolt, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bolt,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bolt = hmr(Bolt, () => Bolt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bolt[HMR].source;
    set(Bolt[HMR].source, module.default[HMR].original);
  });
}
var bolt_default = Bolt;

// node_modules/lucide-svelte/dist/icons/bomb.svelte
Bomb[FILENAME] = "node_modules/lucide-svelte/dist/icons/bomb.svelte";
function Bomb($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bomb);
  const iconNode = [
    ["circle", { "cx": "11", "cy": "13", "r": "9" }],
    [
      "path",
      {
        "d": "M14.35 4.65 16.3 2.7a2.41 2.41 0 0 1 3.4 0l1.6 1.6a2.4 2.4 0 0 1 0 3.4l-1.95 1.95"
      }
    ],
    ["path", { "d": "m22 2-1.5 1.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bomb" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bomb, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bomb,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bomb = hmr(Bomb, () => Bomb[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bomb[HMR].source;
    set(Bomb[HMR].source, module.default[HMR].original);
  });
}
var bomb_default = Bomb;

// node_modules/lucide-svelte/dist/icons/bone.svelte
Bone[FILENAME] = "node_modules/lucide-svelte/dist/icons/bone.svelte";
function Bone($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bone);
  const iconNode = [
    [
      "path",
      {
        "d": "M17 10c.7-.7 1.69 0 2.5 0a2.5 2.5 0 1 0 0-5 .5.5 0 0 1-.5-.5 2.5 2.5 0 1 0-5 0c0 .81.7 1.8 0 2.5l-7 7c-.7.7-1.69 0-2.5 0a2.5 2.5 0 0 0 0 5c.28 0 .5.22.5.5a2.5 2.5 0 1 0 5 0c0-.81-.7-1.8 0-2.5Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bone" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bone, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bone,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bone = hmr(Bone, () => Bone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bone[HMR].source;
    set(Bone[HMR].source, module.default[HMR].original);
  });
}
var bone_default = Bone;

// node_modules/lucide-svelte/dist/icons/book-a.svelte
Book_a[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-a.svelte";
function Book_a($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_a);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
      }
    ],
    ["path", { "d": "m8 13 4-7 4 7" }],
    ["path", { "d": "M9.1 11h5.7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-a" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_a, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_a,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_a = hmr(Book_a, () => Book_a[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_a[HMR].source;
    set(Book_a[HMR].source, module.default[HMR].original);
  });
}
var book_a_default = Book_a;

// node_modules/lucide-svelte/dist/icons/book-alert.svelte
Book_alert[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-alert.svelte";
function Book_alert($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_alert);
  const iconNode = [
    ["path", { "d": "M12 13h.01" }],
    ["path", { "d": "M12 6v3" }],
    [
      "path",
      {
        "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-alert" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_alert, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_alert,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_alert = hmr(Book_alert, () => Book_alert[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_alert[HMR].source;
    set(Book_alert[HMR].source, module.default[HMR].original);
  });
}
var book_alert_default = Book_alert;

// node_modules/lucide-svelte/dist/icons/book-audio.svelte
Book_audio[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-audio.svelte";
function Book_audio($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_audio);
  const iconNode = [
    ["path", { "d": "M12 6v7" }],
    ["path", { "d": "M16 8v3" }],
    [
      "path",
      {
        "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
      }
    ],
    ["path", { "d": "M8 8v3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-audio" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_audio, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_audio,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_audio = hmr(Book_audio, () => Book_audio[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_audio[HMR].source;
    set(Book_audio[HMR].source, module.default[HMR].original);
  });
}
var book_audio_default = Book_audio;

// node_modules/lucide-svelte/dist/icons/book-check.svelte
Book_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-check.svelte";
function Book_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_check);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
      }
    ],
    ["path", { "d": "m9 9.5 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_check = hmr(Book_check, () => Book_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_check[HMR].source;
    set(Book_check[HMR].source, module.default[HMR].original);
  });
}
var book_check_default = Book_check;

// node_modules/lucide-svelte/dist/icons/book-copy.svelte
Book_copy[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-copy.svelte";
function Book_copy($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_copy);
  const iconNode = [
    ["path", { "d": "M5 7a2 2 0 0 0-2 2v11" }],
    [
      "path",
      { "d": "M5.803 18H5a2 2 0 0 0 0 4h9.5a.5.5 0 0 0 .5-.5V21" }
    ],
    [
      "path",
      {
        "d": "M9 15V4a2 2 0 0 1 2-2h9.5a.5.5 0 0 1 .5.5v14a.5.5 0 0 1-.5.5H11a2 2 0 0 1 0-4h10"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-copy" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_copy, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_copy,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_copy = hmr(Book_copy, () => Book_copy[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_copy[HMR].source;
    set(Book_copy[HMR].source, module.default[HMR].original);
  });
}
var book_copy_default = Book_copy;

// node_modules/lucide-svelte/dist/icons/book-dashed.svelte
Book_dashed[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-dashed.svelte";
function Book_dashed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_dashed);
  const iconNode = [
    ["path", { "d": "M12 17h1.5" }],
    ["path", { "d": "M12 22h1.5" }],
    ["path", { "d": "M12 2h1.5" }],
    ["path", { "d": "M17.5 22H19a1 1 0 0 0 1-1" }],
    ["path", { "d": "M17.5 2H19a1 1 0 0 1 1 1v1.5" }],
    ["path", { "d": "M20 14v3h-2.5" }],
    ["path", { "d": "M20 8.5V10" }],
    ["path", { "d": "M4 10V8.5" }],
    ["path", { "d": "M4 19.5V14" }],
    ["path", { "d": "M4 4.5A2.5 2.5 0 0 1 6.5 2H8" }],
    ["path", { "d": "M8 22H6.5a1 1 0 0 1 0-5H8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-dashed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_dashed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_dashed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_dashed = hmr(Book_dashed, () => Book_dashed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_dashed[HMR].source;
    set(Book_dashed[HMR].source, module.default[HMR].original);
  });
}
var book_dashed_default = Book_dashed;

// node_modules/lucide-svelte/dist/icons/book-down.svelte
Book_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-down.svelte";
function Book_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_down);
  const iconNode = [
    ["path", { "d": "M12 13V7" }],
    [
      "path",
      {
        "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
      }
    ],
    ["path", { "d": "m9 10 3 3 3-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_down = hmr(Book_down, () => Book_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_down[HMR].source;
    set(Book_down[HMR].source, module.default[HMR].original);
  });
}
var book_down_default = Book_down;

// node_modules/lucide-svelte/dist/icons/book-headphones.svelte
Book_headphones[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-headphones.svelte";
function Book_headphones($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_headphones);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
      }
    ],
    ["path", { "d": "M8 12v-2a4 4 0 0 1 8 0v2" }],
    ["circle", { "cx": "15", "cy": "12", "r": "1" }],
    ["circle", { "cx": "9", "cy": "12", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-headphones" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_headphones, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_headphones,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_headphones = hmr(Book_headphones, () => Book_headphones[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_headphones[HMR].source;
    set(Book_headphones[HMR].source, module.default[HMR].original);
  });
}
var book_headphones_default = Book_headphones;

// node_modules/lucide-svelte/dist/icons/book-heart.svelte
Book_heart[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-heart.svelte";
function Book_heart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_heart);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
      }
    ],
    [
      "path",
      {
        "d": "M8.62 9.8A2.25 2.25 0 1 1 12 6.836a2.25 2.25 0 1 1 3.38 2.966l-2.626 2.856a.998.998 0 0 1-1.507 0z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-heart" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_heart, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_heart,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_heart = hmr(Book_heart, () => Book_heart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_heart[HMR].source;
    set(Book_heart[HMR].source, module.default[HMR].original);
  });
}
var book_heart_default = Book_heart;

// node_modules/lucide-svelte/dist/icons/book-image.svelte
Book_image[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-image.svelte";
function Book_image($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_image);
  const iconNode = [
    ["path", { "d": "m20 13.7-2.1-2.1a2 2 0 0 0-2.8 0L9.7 17" }],
    [
      "path",
      {
        "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
      }
    ],
    ["circle", { "cx": "10", "cy": "8", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-image" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_image, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_image,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_image = hmr(Book_image, () => Book_image[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_image[HMR].source;
    set(Book_image[HMR].source, module.default[HMR].original);
  });
}
var book_image_default = Book_image;

// node_modules/lucide-svelte/dist/icons/book-lock.svelte
Book_lock[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-lock.svelte";
function Book_lock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_lock);
  const iconNode = [
    ["path", { "d": "M18 6V4a2 2 0 1 0-4 0v2" }],
    [
      "path",
      { "d": "M20 15v6a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" }
    ],
    ["path", { "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H10" }],
    [
      "rect",
      { "x": "12", "y": "6", "width": "8", "height": "5", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-lock" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_lock, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_lock,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_lock = hmr(Book_lock, () => Book_lock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_lock[HMR].source;
    set(Book_lock[HMR].source, module.default[HMR].original);
  });
}
var book_lock_default = Book_lock;

// node_modules/lucide-svelte/dist/icons/book-key.svelte
Book_key[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-key.svelte";
function Book_key($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_key);
  const iconNode = [
    ["path", { "d": "m19 3 1 1" }],
    ["path", { "d": "m20 2-4.5 4.5" }],
    [
      "path",
      { "d": "M20 7.898V21a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20" }
    ],
    ["path", { "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2h7.844" }],
    ["circle", { "cx": "14", "cy": "8", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-key" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_key, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_key,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_key = hmr(Book_key, () => Book_key[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_key[HMR].source;
    set(Book_key[HMR].source, module.default[HMR].original);
  });
}
var book_key_default = Book_key;

// node_modules/lucide-svelte/dist/icons/book-marked.svelte
Book_marked[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-marked.svelte";
function Book_marked($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_marked);
  const iconNode = [
    ["path", { "d": "M10 2v8l3-3 3 3V2" }],
    [
      "path",
      {
        "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-marked" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_marked, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_marked,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_marked = hmr(Book_marked, () => Book_marked[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_marked[HMR].source;
    set(Book_marked[HMR].source, module.default[HMR].original);
  });
}
var book_marked_default = Book_marked;

// node_modules/lucide-svelte/dist/icons/book-minus.svelte
Book_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-minus.svelte";
function Book_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_minus);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
      }
    ],
    ["path", { "d": "M9 10h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_minus = hmr(Book_minus, () => Book_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_minus[HMR].source;
    set(Book_minus[HMR].source, module.default[HMR].original);
  });
}
var book_minus_default = Book_minus;

// node_modules/lucide-svelte/dist/icons/book-open-check.svelte
Book_open_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-open-check.svelte";
function Book_open_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_open_check);
  const iconNode = [
    ["path", { "d": "M12 21V7" }],
    ["path", { "d": "m16 12 2 2 4-4" }],
    [
      "path",
      {
        "d": "M22 6V4a1 1 0 0 0-1-1h-5a4 4 0 0 0-4 4 4 4 0 0 0-4-4H3a1 1 0 0 0-1 1v13a1 1 0 0 0 1 1h6a3 3 0 0 1 3 3 3 3 0 0 1 3-3h6a1 1 0 0 0 1-1v-1.3"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-open-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_open_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_open_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_open_check = hmr(Book_open_check, () => Book_open_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_open_check[HMR].source;
    set(Book_open_check[HMR].source, module.default[HMR].original);
  });
}
var book_open_check_default = Book_open_check;

// node_modules/lucide-svelte/dist/icons/book-open-text.svelte
Book_open_text[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-open-text.svelte";
function Book_open_text($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_open_text);
  const iconNode = [
    ["path", { "d": "M12 7v14" }],
    ["path", { "d": "M16 12h2" }],
    ["path", { "d": "M16 8h2" }],
    [
      "path",
      {
        "d": "M3 18a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4 4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3 3 3 0 0 0-3-3z"
      }
    ],
    ["path", { "d": "M6 12h2" }],
    ["path", { "d": "M6 8h2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-open-text" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_open_text, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_open_text,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_open_text = hmr(Book_open_text, () => Book_open_text[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_open_text[HMR].source;
    set(Book_open_text[HMR].source, module.default[HMR].original);
  });
}
var book_open_text_default = Book_open_text;

// node_modules/lucide-svelte/dist/icons/book-open.svelte
Book_open[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-open.svelte";
function Book_open($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_open);
  const iconNode = [
    ["path", { "d": "M12 7v14" }],
    [
      "path",
      {
        "d": "M3 18a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h5a4 4 0 0 1 4 4 4 4 0 0 1 4-4h5a1 1 0 0 1 1 1v13a1 1 0 0 1-1 1h-6a3 3 0 0 0-3 3 3 3 0 0 0-3-3z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-open" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_open, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_open,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_open = hmr(Book_open, () => Book_open[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_open[HMR].source;
    set(Book_open[HMR].source, module.default[HMR].original);
  });
}
var book_open_default = Book_open;

// node_modules/lucide-svelte/dist/icons/book-text.svelte
Book_text[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-text.svelte";
function Book_text($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_text);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
      }
    ],
    ["path", { "d": "M8 11h8" }],
    ["path", { "d": "M8 7h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-text" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_text, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_text,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_text = hmr(Book_text, () => Book_text[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_text[HMR].source;
    set(Book_text[HMR].source, module.default[HMR].original);
  });
}
var book_text_default = Book_text;

// node_modules/lucide-svelte/dist/icons/book-plus.svelte
Book_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-plus.svelte";
function Book_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_plus);
  const iconNode = [
    ["path", { "d": "M12 7v6" }],
    [
      "path",
      {
        "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
      }
    ],
    ["path", { "d": "M9 10h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_plus = hmr(Book_plus, () => Book_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_plus[HMR].source;
    set(Book_plus[HMR].source, module.default[HMR].original);
  });
}
var book_plus_default = Book_plus;

// node_modules/lucide-svelte/dist/icons/book-type.svelte
Book_type[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-type.svelte";
function Book_type($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_type);
  const iconNode = [
    ["path", { "d": "M10 13h4" }],
    ["path", { "d": "M12 6v7" }],
    ["path", { "d": "M16 8V6H8v2" }],
    [
      "path",
      {
        "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-type" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_type, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_type,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_type = hmr(Book_type, () => Book_type[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_type[HMR].source;
    set(Book_type[HMR].source, module.default[HMR].original);
  });
}
var book_type_default = Book_type;

// node_modules/lucide-svelte/dist/icons/book-up-2.svelte
Book_up_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-up-2.svelte";
function Book_up_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_up_2);
  const iconNode = [
    ["path", { "d": "M12 13V7" }],
    [
      "path",
      {
        "d": "M18 2h1a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
      }
    ],
    ["path", { "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2" }],
    ["path", { "d": "m9 10 3-3 3 3" }],
    ["path", { "d": "m9 5 3-3 3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-up-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_up_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_up_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_up_2 = hmr(Book_up_2, () => Book_up_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_up_2[HMR].source;
    set(Book_up_2[HMR].source, module.default[HMR].original);
  });
}
var book_up_2_default = Book_up_2;

// node_modules/lucide-svelte/dist/icons/book-up.svelte
Book_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-up.svelte";
function Book_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_up);
  const iconNode = [
    ["path", { "d": "M12 13V7" }],
    [
      "path",
      {
        "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
      }
    ],
    ["path", { "d": "m9 10 3-3 3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_up = hmr(Book_up, () => Book_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_up[HMR].source;
    set(Book_up[HMR].source, module.default[HMR].original);
  });
}
var book_up_default = Book_up;

// node_modules/lucide-svelte/dist/icons/book-user.svelte
Book_user[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-user.svelte";
function Book_user($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_user);
  const iconNode = [
    ["path", { "d": "M15 13a3 3 0 1 0-6 0" }],
    [
      "path",
      {
        "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
      }
    ],
    ["circle", { "cx": "12", "cy": "8", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-user" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_user, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_user,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_user = hmr(Book_user, () => Book_user[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_user[HMR].source;
    set(Book_user[HMR].source, module.default[HMR].original);
  });
}
var book_user_default = Book_user;

// node_modules/lucide-svelte/dist/icons/book.svelte
Book[FILENAME] = "node_modules/lucide-svelte/dist/icons/book.svelte";
function Book($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book = hmr(Book, () => Book[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book[HMR].source;
    set(Book[HMR].source, module.default[HMR].original);
  });
}
var book_default = Book;

// node_modules/lucide-svelte/dist/icons/book-x.svelte
Book_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/book-x.svelte";
function Book_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Book_x);
  const iconNode = [
    ["path", { "d": "m14.5 7-5 5" }],
    [
      "path",
      {
        "d": "M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H19a1 1 0 0 1 1 1v18a1 1 0 0 1-1 1H6.5a1 1 0 0 1 0-5H20"
      }
    ],
    ["path", { "d": "m9.5 7 5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "book-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Book_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Book_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Book_x = hmr(Book_x, () => Book_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Book_x[HMR].source;
    set(Book_x[HMR].source, module.default[HMR].original);
  });
}
var book_x_default = Book_x;

// node_modules/lucide-svelte/dist/icons/bookmark-check.svelte
Bookmark_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/bookmark-check.svelte";
function Bookmark_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bookmark_check);
  const iconNode = [
    [
      "path",
      { "d": "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2Z" }
    ],
    ["path", { "d": "m9 10 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bookmark-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bookmark_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bookmark_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bookmark_check = hmr(Bookmark_check, () => Bookmark_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bookmark_check[HMR].source;
    set(Bookmark_check[HMR].source, module.default[HMR].original);
  });
}
var bookmark_check_default = Bookmark_check;

// node_modules/lucide-svelte/dist/icons/bookmark-minus.svelte
Bookmark_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/bookmark-minus.svelte";
function Bookmark_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bookmark_minus);
  const iconNode = [
    [
      "path",
      { "d": "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z" }
    ],
    ["line", { "x1": "15", "x2": "9", "y1": "10", "y2": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bookmark-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bookmark_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bookmark_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bookmark_minus = hmr(Bookmark_minus, () => Bookmark_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bookmark_minus[HMR].source;
    set(Bookmark_minus[HMR].source, module.default[HMR].original);
  });
}
var bookmark_minus_default = Bookmark_minus;

// node_modules/lucide-svelte/dist/icons/bookmark-x.svelte
Bookmark_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/bookmark-x.svelte";
function Bookmark_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bookmark_x);
  const iconNode = [
    [
      "path",
      { "d": "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2Z" }
    ],
    ["path", { "d": "m14.5 7.5-5 5" }],
    ["path", { "d": "m9.5 7.5 5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bookmark-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bookmark_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bookmark_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bookmark_x = hmr(Bookmark_x, () => Bookmark_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bookmark_x[HMR].source;
    set(Bookmark_x[HMR].source, module.default[HMR].original);
  });
}
var bookmark_x_default = Bookmark_x;

// node_modules/lucide-svelte/dist/icons/bookmark-plus.svelte
Bookmark_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/bookmark-plus.svelte";
function Bookmark_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bookmark_plus);
  const iconNode = [
    [
      "path",
      { "d": "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z" }
    ],
    ["line", { "x1": "12", "x2": "12", "y1": "7", "y2": "13" }],
    ["line", { "x1": "15", "x2": "9", "y1": "10", "y2": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bookmark-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bookmark_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bookmark_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bookmark_plus = hmr(Bookmark_plus, () => Bookmark_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bookmark_plus[HMR].source;
    set(Bookmark_plus[HMR].source, module.default[HMR].original);
  });
}
var bookmark_plus_default = Bookmark_plus;

// node_modules/lucide-svelte/dist/icons/boom-box.svelte
Boom_box[FILENAME] = "node_modules/lucide-svelte/dist/icons/boom-box.svelte";
function Boom_box($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Boom_box);
  const iconNode = [
    ["path", { "d": "M4 9V5a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v4" }],
    ["path", { "d": "M8 8v1" }],
    ["path", { "d": "M12 8v1" }],
    ["path", { "d": "M16 8v1" }],
    [
      "rect",
      { "width": "20", "height": "12", "x": "2", "y": "9", "rx": "2" }
    ],
    ["circle", { "cx": "8", "cy": "15", "r": "2" }],
    ["circle", { "cx": "16", "cy": "15", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "boom-box" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Boom_box, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Boom_box,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Boom_box = hmr(Boom_box, () => Boom_box[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Boom_box[HMR].source;
    set(Boom_box[HMR].source, module.default[HMR].original);
  });
}
var boom_box_default = Boom_box;

// node_modules/lucide-svelte/dist/icons/bookmark.svelte
Bookmark[FILENAME] = "node_modules/lucide-svelte/dist/icons/bookmark.svelte";
function Bookmark($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bookmark);
  const iconNode = [
    [
      "path",
      { "d": "m19 21-7-4-7 4V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v16z" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bookmark" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bookmark, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bookmark,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bookmark = hmr(Bookmark, () => Bookmark[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bookmark[HMR].source;
    set(Bookmark[HMR].source, module.default[HMR].original);
  });
}
var bookmark_default = Bookmark;

// node_modules/lucide-svelte/dist/icons/bot-message-square.svelte
Bot_message_square[FILENAME] = "node_modules/lucide-svelte/dist/icons/bot-message-square.svelte";
function Bot_message_square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bot_message_square);
  const iconNode = [
    ["path", { "d": "M12 6V2H8" }],
    ["path", { "d": "M15 11v2" }],
    ["path", { "d": "M2 12h2" }],
    ["path", { "d": "M20 12h2" }],
    [
      "path",
      {
        "d": "M20 16a2 2 0 0 1-2 2H8.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 4 20.286V8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2z"
      }
    ],
    ["path", { "d": "M9 11v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bot-message-square" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bot_message_square, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bot_message_square,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bot_message_square = hmr(Bot_message_square, () => Bot_message_square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bot_message_square[HMR].source;
    set(Bot_message_square[HMR].source, module.default[HMR].original);
  });
}
var bot_message_square_default = Bot_message_square;

// node_modules/lucide-svelte/dist/icons/bot-off.svelte
Bot_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/bot-off.svelte";
function Bot_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bot_off);
  const iconNode = [
    ["path", { "d": "M13.67 8H18a2 2 0 0 1 2 2v4.33" }],
    ["path", { "d": "M2 14h2" }],
    ["path", { "d": "M20 14h2" }],
    ["path", { "d": "M22 22 2 2" }],
    [
      "path",
      {
        "d": "M8 8H6a2 2 0 0 0-2 2v8a2 2 0 0 0 2 2h12a2 2 0 0 0 1.414-.586"
      }
    ],
    ["path", { "d": "M9 13v2" }],
    ["path", { "d": "M9.67 4H12v2.33" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bot-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bot_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bot_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bot_off = hmr(Bot_off, () => Bot_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bot_off[HMR].source;
    set(Bot_off[HMR].source, module.default[HMR].original);
  });
}
var bot_off_default = Bot_off;

// node_modules/lucide-svelte/dist/icons/bot.svelte
Bot[FILENAME] = "node_modules/lucide-svelte/dist/icons/bot.svelte";
function Bot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bot);
  const iconNode = [
    ["path", { "d": "M12 8V4H8" }],
    [
      "rect",
      { "width": "16", "height": "12", "x": "4", "y": "8", "rx": "2" }
    ],
    ["path", { "d": "M2 14h2" }],
    ["path", { "d": "M20 14h2" }],
    ["path", { "d": "M15 13v2" }],
    ["path", { "d": "M9 13v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bot" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bot, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bot,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bot = hmr(Bot, () => Bot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bot[HMR].source;
    set(Bot[HMR].source, module.default[HMR].original);
  });
}
var bot_default = Bot;

// node_modules/lucide-svelte/dist/icons/bottle-wine.svelte
Bottle_wine[FILENAME] = "node_modules/lucide-svelte/dist/icons/bottle-wine.svelte";
function Bottle_wine($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bottle_wine);
  const iconNode = [
    [
      "path",
      {
        "d": "M10 3a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a6 6 0 0 0 1.2 3.6l.6.8A6 6 0 0 1 17 13v8a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1v-8a6 6 0 0 1 1.2-3.6l.6-.8A6 6 0 0 0 10 5z"
      }
    ],
    ["path", { "d": "M17 13h-4a1 1 0 0 0-1 1v3a1 1 0 0 0 1 1h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bottle-wine" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bottle_wine, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bottle_wine,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bottle_wine = hmr(Bottle_wine, () => Bottle_wine[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bottle_wine[HMR].source;
    set(Bottle_wine[HMR].source, module.default[HMR].original);
  });
}
var bottle_wine_default = Bottle_wine;

// node_modules/lucide-svelte/dist/icons/bow-arrow.svelte
Bow_arrow[FILENAME] = "node_modules/lucide-svelte/dist/icons/bow-arrow.svelte";
function Bow_arrow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bow_arrow);
  const iconNode = [
    ["path", { "d": "M17 3h4v4" }],
    [
      "path",
      {
        "d": "M18.575 11.082a13 13 0 0 1 1.048 9.027 1.17 1.17 0 0 1-1.914.597L14 17"
      }
    ],
    [
      "path",
      {
        "d": "M7 10 3.29 6.29a1.17 1.17 0 0 1 .6-1.91 13 13 0 0 1 9.03 1.05"
      }
    ],
    [
      "path",
      {
        "d": "M7 14a1.7 1.7 0 0 0-1.207.5l-2.646 2.646A.5.5 0 0 0 3.5 18H5a1 1 0 0 1 1 1v1.5a.5.5 0 0 0 .854.354L9.5 18.207A1.7 1.7 0 0 0 10 17v-2a1 1 0 0 0-1-1z"
      }
    ],
    ["path", { "d": "M9.707 14.293 21 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bow-arrow" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bow_arrow, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bow_arrow,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bow_arrow = hmr(Bow_arrow, () => Bow_arrow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bow_arrow[HMR].source;
    set(Bow_arrow[HMR].source, module.default[HMR].original);
  });
}
var bow_arrow_default = Bow_arrow;

// node_modules/lucide-svelte/dist/icons/box.svelte
Box[FILENAME] = "node_modules/lucide-svelte/dist/icons/box.svelte";
function Box($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Box);
  const iconNode = [
    [
      "path",
      {
        "d": "M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z"
      }
    ],
    ["path", { "d": "m3.3 7 8.7 5 8.7-5" }],
    ["path", { "d": "M12 22V12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "box" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Box, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Box,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Box = hmr(Box, () => Box[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Box[HMR].source;
    set(Box[HMR].source, module.default[HMR].original);
  });
}
var box_default = Box;

// node_modules/lucide-svelte/dist/icons/boxes.svelte
Boxes[FILENAME] = "node_modules/lucide-svelte/dist/icons/boxes.svelte";
function Boxes($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Boxes);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.97 12.92A2 2 0 0 0 2 14.63v3.24a2 2 0 0 0 .97 1.71l3 1.8a2 2 0 0 0 2.06 0L12 19v-5.5l-5-3-4.03 2.42Z"
      }
    ],
    ["path", { "d": "m7 16.5-4.74-2.85" }],
    ["path", { "d": "m7 16.5 5-3" }],
    ["path", { "d": "M7 16.5v5.17" }],
    [
      "path",
      {
        "d": "M12 13.5V19l3.97 2.38a2 2 0 0 0 2.06 0l3-1.8a2 2 0 0 0 .97-1.71v-3.24a2 2 0 0 0-.97-1.71L17 10.5l-5 3Z"
      }
    ],
    ["path", { "d": "m17 16.5-5-3" }],
    ["path", { "d": "m17 16.5 4.74-2.85" }],
    ["path", { "d": "M17 16.5v5.17" }],
    [
      "path",
      {
        "d": "M7.97 4.42A2 2 0 0 0 7 6.13v4.37l5 3 5-3V6.13a2 2 0 0 0-.97-1.71l-3-1.8a2 2 0 0 0-2.06 0l-3 1.8Z"
      }
    ],
    ["path", { "d": "M12 8 7.26 5.15" }],
    ["path", { "d": "m12 8 4.74-2.85" }],
    ["path", { "d": "M12 13.5V8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "boxes" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Boxes, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Boxes,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Boxes = hmr(Boxes, () => Boxes[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Boxes[HMR].source;
    set(Boxes[HMR].source, module.default[HMR].original);
  });
}
var boxes_default = Boxes;

// node_modules/lucide-svelte/dist/icons/braces.svelte
Braces[FILENAME] = "node_modules/lucide-svelte/dist/icons/braces.svelte";
function Braces($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Braces);
  const iconNode = [
    [
      "path",
      {
        "d": "M8 3H7a2 2 0 0 0-2 2v5a2 2 0 0 1-2 2 2 2 0 0 1 2 2v5c0 1.1.9 2 2 2h1"
      }
    ],
    [
      "path",
      {
        "d": "M16 21h1a2 2 0 0 0 2-2v-5c0-1.1.9-2 2-2a2 2 0 0 1-2-2V5a2 2 0 0 0-2-2h-1"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "braces" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Braces, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Braces,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Braces = hmr(Braces, () => Braces[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Braces[HMR].source;
    set(Braces[HMR].source, module.default[HMR].original);
  });
}
var braces_default = Braces;

// node_modules/lucide-svelte/dist/icons/brackets.svelte
Brackets[FILENAME] = "node_modules/lucide-svelte/dist/icons/brackets.svelte";
function Brackets($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Brackets);
  const iconNode = [
    ["path", { "d": "M16 3h3a1 1 0 0 1 1 1v16a1 1 0 0 1-1 1h-3" }],
    ["path", { "d": "M8 21H5a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1h3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "brackets" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Brackets, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Brackets,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Brackets = hmr(Brackets, () => Brackets[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Brackets[HMR].source;
    set(Brackets[HMR].source, module.default[HMR].original);
  });
}
var brackets_default = Brackets;

// node_modules/lucide-svelte/dist/icons/brain-circuit.svelte
Brain_circuit[FILENAME] = "node_modules/lucide-svelte/dist/icons/brain-circuit.svelte";
function Brain_circuit($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Brain_circuit);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 5a3 3 0 1 0-5.997.125 4 4 0 0 0-2.526 5.77 4 4 0 0 0 .556 6.588A4 4 0 1 0 12 18Z"
      }
    ],
    ["path", { "d": "M9 13a4.5 4.5 0 0 0 3-4" }],
    ["path", { "d": "M6.003 5.125A3 3 0 0 0 6.401 6.5" }],
    ["path", { "d": "M3.477 10.896a4 4 0 0 1 .585-.396" }],
    ["path", { "d": "M6 18a4 4 0 0 1-1.967-.516" }],
    ["path", { "d": "M12 13h4" }],
    ["path", { "d": "M12 18h6a2 2 0 0 1 2 2v1" }],
    ["path", { "d": "M12 8h8" }],
    ["path", { "d": "M16 8V5a2 2 0 0 1 2-2" }],
    ["circle", { "cx": "16", "cy": "13", "r": ".5" }],
    ["circle", { "cx": "18", "cy": "3", "r": ".5" }],
    ["circle", { "cx": "20", "cy": "21", "r": ".5" }],
    ["circle", { "cx": "20", "cy": "8", "r": ".5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "brain-circuit" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Brain_circuit, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Brain_circuit,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Brain_circuit = hmr(Brain_circuit, () => Brain_circuit[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Brain_circuit[HMR].source;
    set(Brain_circuit[HMR].source, module.default[HMR].original);
  });
}
var brain_circuit_default = Brain_circuit;

// node_modules/lucide-svelte/dist/icons/brain-cog.svelte
Brain_cog[FILENAME] = "node_modules/lucide-svelte/dist/icons/brain-cog.svelte";
function Brain_cog($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Brain_cog);
  const iconNode = [
    ["path", { "d": "m10.852 14.772-.383.923" }],
    ["path", { "d": "m10.852 9.228-.383-.923" }],
    ["path", { "d": "m13.148 14.772.382.924" }],
    ["path", { "d": "m13.531 8.305-.383.923" }],
    ["path", { "d": "m14.772 10.852.923-.383" }],
    ["path", { "d": "m14.772 13.148.923.383" }],
    [
      "path",
      {
        "d": "M17.598 6.5A3 3 0 1 0 12 5a3 3 0 0 0-5.63-1.446 3 3 0 0 0-.368 1.571 4 4 0 0 0-2.525 5.771"
      }
    ],
    ["path", { "d": "M17.998 5.125a4 4 0 0 1 2.525 5.771" }],
    ["path", { "d": "M19.505 10.294a4 4 0 0 1-1.5 7.706" }],
    [
      "path",
      {
        "d": "M4.032 17.483A4 4 0 0 0 11.464 20c.18-.311.892-.311 1.072 0a4 4 0 0 0 7.432-2.516"
      }
    ],
    ["path", { "d": "M4.5 10.291A4 4 0 0 0 6 18" }],
    ["path", { "d": "M6.002 5.125a3 3 0 0 0 .4 1.375" }],
    ["path", { "d": "m9.228 10.852-.923-.383" }],
    ["path", { "d": "m9.228 13.148-.923.383" }],
    ["circle", { "cx": "12", "cy": "12", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "brain-cog" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Brain_cog, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Brain_cog,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Brain_cog = hmr(Brain_cog, () => Brain_cog[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Brain_cog[HMR].source;
    set(Brain_cog[HMR].source, module.default[HMR].original);
  });
}
var brain_cog_default = Brain_cog;

// node_modules/lucide-svelte/dist/icons/brain.svelte
Brain[FILENAME] = "node_modules/lucide-svelte/dist/icons/brain.svelte";
function Brain($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Brain);
  const iconNode = [
    ["path", { "d": "M12 18V5" }],
    [
      "path",
      { "d": "M15 13a4.17 4.17 0 0 1-3-4 4.17 4.17 0 0 1-3 4" }
    ],
    [
      "path",
      { "d": "M17.598 6.5A3 3 0 1 0 12 5a3 3 0 1 0-5.598 1.5" }
    ],
    ["path", { "d": "M17.997 5.125a4 4 0 0 1 2.526 5.77" }],
    ["path", { "d": "M18 18a4 4 0 0 0 2-7.464" }],
    [
      "path",
      { "d": "M19.967 17.483A4 4 0 1 1 12 18a4 4 0 1 1-7.967-.517" }
    ],
    ["path", { "d": "M6 18a4 4 0 0 1-2-7.464" }],
    ["path", { "d": "M6.003 5.125a4 4 0 0 0-2.526 5.77" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "brain" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Brain, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Brain,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Brain = hmr(Brain, () => Brain[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Brain[HMR].source;
    set(Brain[HMR].source, module.default[HMR].original);
  });
}
var brain_default = Brain;

// node_modules/lucide-svelte/dist/icons/brick-wall-fire.svelte
Brick_wall_fire[FILENAME] = "node_modules/lucide-svelte/dist/icons/brick-wall-fire.svelte";
function Brick_wall_fire($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Brick_wall_fire);
  const iconNode = [
    ["path", { "d": "M16 3v2.107" }],
    [
      "path",
      {
        "d": "M17 9c1 3 2.5 3.5 3.5 4.5A5 5 0 0 1 22 17a5 5 0 0 1-10 0c0-.3 0-.6.1-.9a2 2 0 1 0 3.3-2C13 11.5 16 9 17 9"
      }
    ],
    [
      "path",
      {
        "d": "M21 8.274V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3.938"
      }
    ],
    ["path", { "d": "M3 15h5.253" }],
    ["path", { "d": "M3 9h8.228" }],
    ["path", { "d": "M8 15v6" }],
    ["path", { "d": "M8 3v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "brick-wall-fire" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Brick_wall_fire, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Brick_wall_fire,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Brick_wall_fire = hmr(Brick_wall_fire, () => Brick_wall_fire[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Brick_wall_fire[HMR].source;
    set(Brick_wall_fire[HMR].source, module.default[HMR].original);
  });
}
var brick_wall_fire_default = Brick_wall_fire;

// node_modules/lucide-svelte/dist/icons/brick-wall.svelte
Brick_wall[FILENAME] = "node_modules/lucide-svelte/dist/icons/brick-wall.svelte";
function Brick_wall($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Brick_wall);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M12 9v6" }],
    ["path", { "d": "M16 15v6" }],
    ["path", { "d": "M16 3v6" }],
    ["path", { "d": "M3 15h18" }],
    ["path", { "d": "M3 9h18" }],
    ["path", { "d": "M8 15v6" }],
    ["path", { "d": "M8 3v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "brick-wall" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Brick_wall, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Brick_wall,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Brick_wall = hmr(Brick_wall, () => Brick_wall[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Brick_wall[HMR].source;
    set(Brick_wall[HMR].source, module.default[HMR].original);
  });
}
var brick_wall_default = Brick_wall;

// node_modules/lucide-svelte/dist/icons/briefcase-business.svelte
Briefcase_business[FILENAME] = "node_modules/lucide-svelte/dist/icons/briefcase-business.svelte";
function Briefcase_business($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Briefcase_business);
  const iconNode = [
    ["path", { "d": "M12 12h.01" }],
    ["path", { "d": "M16 6V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v2" }],
    ["path", { "d": "M22 13a18.15 18.15 0 0 1-20 0" }],
    [
      "rect",
      { "width": "20", "height": "14", "x": "2", "y": "6", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "briefcase-business" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Briefcase_business, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Briefcase_business,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Briefcase_business = hmr(Briefcase_business, () => Briefcase_business[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Briefcase_business[HMR].source;
    set(Briefcase_business[HMR].source, module.default[HMR].original);
  });
}
var briefcase_business_default = Briefcase_business;

// node_modules/lucide-svelte/dist/icons/briefcase-conveyor-belt.svelte
Briefcase_conveyor_belt[FILENAME] = "node_modules/lucide-svelte/dist/icons/briefcase-conveyor-belt.svelte";
function Briefcase_conveyor_belt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Briefcase_conveyor_belt);
  const iconNode = [
    ["path", { "d": "M10 20v2" }],
    ["path", { "d": "M14 20v2" }],
    ["path", { "d": "M18 20v2" }],
    ["path", { "d": "M21 20H3" }],
    ["path", { "d": "M6 20v2" }],
    ["path", { "d": "M8 16V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v12" }],
    [
      "rect",
      { "x": "4", "y": "6", "width": "16", "height": "10", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "briefcase-conveyor-belt" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Briefcase_conveyor_belt, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Briefcase_conveyor_belt,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Briefcase_conveyor_belt = hmr(Briefcase_conveyor_belt, () => Briefcase_conveyor_belt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Briefcase_conveyor_belt[HMR].source;
    set(Briefcase_conveyor_belt[HMR].source, module.default[HMR].original);
  });
}
var briefcase_conveyor_belt_default = Briefcase_conveyor_belt;

// node_modules/lucide-svelte/dist/icons/briefcase-medical.svelte
Briefcase_medical[FILENAME] = "node_modules/lucide-svelte/dist/icons/briefcase-medical.svelte";
function Briefcase_medical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Briefcase_medical);
  const iconNode = [
    ["path", { "d": "M12 11v4" }],
    ["path", { "d": "M14 13h-4" }],
    ["path", { "d": "M16 6V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v2" }],
    ["path", { "d": "M18 6v14" }],
    ["path", { "d": "M6 6v14" }],
    [
      "rect",
      { "width": "20", "height": "14", "x": "2", "y": "6", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "briefcase-medical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Briefcase_medical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Briefcase_medical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Briefcase_medical = hmr(Briefcase_medical, () => Briefcase_medical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Briefcase_medical[HMR].source;
    set(Briefcase_medical[HMR].source, module.default[HMR].original);
  });
}
var briefcase_medical_default = Briefcase_medical;

// node_modules/lucide-svelte/dist/icons/briefcase.svelte
Briefcase[FILENAME] = "node_modules/lucide-svelte/dist/icons/briefcase.svelte";
function Briefcase($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Briefcase);
  const iconNode = [
    [
      "path",
      { "d": "M16 20V4a2 2 0 0 0-2-2h-4a2 2 0 0 0-2 2v16" }
    ],
    [
      "rect",
      { "width": "20", "height": "14", "x": "2", "y": "6", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "briefcase" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Briefcase, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Briefcase,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Briefcase = hmr(Briefcase, () => Briefcase[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Briefcase[HMR].source;
    set(Briefcase[HMR].source, module.default[HMR].original);
  });
}
var briefcase_default = Briefcase;

// node_modules/lucide-svelte/dist/icons/bring-to-front.svelte
Bring_to_front[FILENAME] = "node_modules/lucide-svelte/dist/icons/bring-to-front.svelte";
function Bring_to_front($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bring_to_front);
  const iconNode = [
    [
      "rect",
      { "x": "8", "y": "8", "width": "8", "height": "8", "rx": "2" }
    ],
    [
      "path",
      { "d": "M4 10a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2" }
    ],
    [
      "path",
      { "d": "M14 20a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bring-to-front" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bring_to_front, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bring_to_front,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bring_to_front = hmr(Bring_to_front, () => Bring_to_front[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bring_to_front[HMR].source;
    set(Bring_to_front[HMR].source, module.default[HMR].original);
  });
}
var bring_to_front_default = Bring_to_front;

// node_modules/lucide-svelte/dist/icons/brush-cleaning.svelte
Brush_cleaning[FILENAME] = "node_modules/lucide-svelte/dist/icons/brush-cleaning.svelte";
function Brush_cleaning($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Brush_cleaning);
  const iconNode = [
    ["path", { "d": "m16 22-1-4" }],
    [
      "path",
      {
        "d": "M19 13.99a1 1 0 0 0 1-1V12a2 2 0 0 0-2-2h-3a1 1 0 0 1-1-1V4a2 2 0 0 0-4 0v5a1 1 0 0 1-1 1H6a2 2 0 0 0-2 2v.99a1 1 0 0 0 1 1"
      }
    ],
    [
      "path",
      {
        "d": "M5 14h14l1.973 6.767A1 1 0 0 1 20 22H4a1 1 0 0 1-.973-1.233z"
      }
    ],
    ["path", { "d": "m8 22 1-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "brush-cleaning" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Brush_cleaning, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Brush_cleaning,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Brush_cleaning = hmr(Brush_cleaning, () => Brush_cleaning[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Brush_cleaning[HMR].source;
    set(Brush_cleaning[HMR].source, module.default[HMR].original);
  });
}
var brush_cleaning_default = Brush_cleaning;

// node_modules/lucide-svelte/dist/icons/brush.svelte
Brush[FILENAME] = "node_modules/lucide-svelte/dist/icons/brush.svelte";
function Brush($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Brush);
  const iconNode = [
    ["path", { "d": "m11 10 3 3" }],
    [
      "path",
      {
        "d": "M6.5 21A3.5 3.5 0 1 0 3 17.5a2.62 2.62 0 0 1-.708 1.792A1 1 0 0 0 3 21z"
      }
    ],
    [
      "path",
      {
        "d": "M9.969 17.031 21.378 5.624a1 1 0 0 0-3.002-3.002L6.967 14.031"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "brush" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Brush, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Brush,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Brush = hmr(Brush, () => Brush[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Brush[HMR].source;
    set(Brush[HMR].source, module.default[HMR].original);
  });
}
var brush_default = Brush;

// node_modules/lucide-svelte/dist/icons/bubbles.svelte
Bubbles[FILENAME] = "node_modules/lucide-svelte/dist/icons/bubbles.svelte";
function Bubbles($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bubbles);
  const iconNode = [
    ["path", { "d": "M7.2 14.8a2 2 0 0 1 2 2" }],
    ["circle", { "cx": "18.5", "cy": "8.5", "r": "3.5" }],
    ["circle", { "cx": "7.5", "cy": "16.5", "r": "5.5" }],
    ["circle", { "cx": "7.5", "cy": "4.5", "r": "2.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bubbles" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bubbles, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bubbles,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bubbles = hmr(Bubbles, () => Bubbles[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bubbles[HMR].source;
    set(Bubbles[HMR].source, module.default[HMR].original);
  });
}
var bubbles_default = Bubbles;

// node_modules/lucide-svelte/dist/icons/bug-off.svelte
Bug_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/bug-off.svelte";
function Bug_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bug_off);
  const iconNode = [
    ["path", { "d": "M15 7.13V6a3 3 0 0 0-5.14-2.1L8 2" }],
    ["path", { "d": "M14.12 3.88 16 2" }],
    ["path", { "d": "M22 13h-4v-2a4 4 0 0 0-4-4h-1.3" }],
    ["path", { "d": "M20.97 5c0 2.1-1.6 3.8-3.5 4" }],
    ["path", { "d": "m2 2 20 20" }],
    [
      "path",
      { "d": "M7.7 7.7A4 4 0 0 0 6 11v3a6 6 0 0 0 11.13 3.13" }
    ],
    ["path", { "d": "M12 20v-8" }],
    ["path", { "d": "M6 13H2" }],
    ["path", { "d": "M3 21c0-2.1 1.7-3.9 3.8-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bug-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bug_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bug_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bug_off = hmr(Bug_off, () => Bug_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bug_off[HMR].source;
    set(Bug_off[HMR].source, module.default[HMR].original);
  });
}
var bug_off_default = Bug_off;

// node_modules/lucide-svelte/dist/icons/bug-play.svelte
Bug_play[FILENAME] = "node_modules/lucide-svelte/dist/icons/bug-play.svelte";
function Bug_play($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bug_play);
  const iconNode = [
    [
      "path",
      {
        "d": "M10 19.655A6 6 0 0 1 6 14v-3a4 4 0 0 1 4-4h4a4 4 0 0 1 4 3.97"
      }
    ],
    [
      "path",
      {
        "d": "M14 15.003a1 1 0 0 1 1.517-.859l4.997 2.997a1 1 0 0 1 0 1.718l-4.997 2.997a1 1 0 0 1-1.517-.86z"
      }
    ],
    ["path", { "d": "M14.12 3.88 16 2" }],
    ["path", { "d": "M20.97 5c0 2.1-1.6 3.8-3.5 4" }],
    ["path", { "d": "M3 21c0-2.1 1.7-3.9 3.8-4" }],
    ["path", { "d": "M6 13H2" }],
    ["path", { "d": "M6.53 9C4.6 8.8 3 7.1 3 5" }],
    ["path", { "d": "m8 2 1.88 1.88" }],
    [
      "path",
      {
        "d": "M9 7.13v-1a3 3 0 0 1 4.18-2.895 3 3 0 0 1 1.821 2.896v1"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bug-play" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bug_play, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bug_play,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bug_play = hmr(Bug_play, () => Bug_play[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bug_play[HMR].source;
    set(Bug_play[HMR].source, module.default[HMR].original);
  });
}
var bug_play_default = Bug_play;

// node_modules/lucide-svelte/dist/icons/bug.svelte
Bug[FILENAME] = "node_modules/lucide-svelte/dist/icons/bug.svelte";
function Bug($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bug);
  const iconNode = [
    ["path", { "d": "m8 2 1.88 1.88" }],
    ["path", { "d": "M14.12 3.88 16 2" }],
    ["path", { "d": "M9 7.13v-1a3.003 3.003 0 1 1 6 0v1" }],
    [
      "path",
      {
        "d": "M12 20c-3.3 0-6-2.7-6-6v-3a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v3c0 3.3-2.7 6-6 6"
      }
    ],
    ["path", { "d": "M12 20v-9" }],
    ["path", { "d": "M6.53 9C4.6 8.8 3 7.1 3 5" }],
    ["path", { "d": "M6 13H2" }],
    ["path", { "d": "M3 21c0-2.1 1.7-3.9 3.8-4" }],
    ["path", { "d": "M20.97 5c0 2.1-1.6 3.8-3.5 4" }],
    ["path", { "d": "M22 13h-4" }],
    ["path", { "d": "M17.2 17c2.1.1 3.8 1.9 3.8 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bug" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bug, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bug,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bug = hmr(Bug, () => Bug[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bug[HMR].source;
    set(Bug[HMR].source, module.default[HMR].original);
  });
}
var bug_default = Bug;

// node_modules/lucide-svelte/dist/icons/building-2.svelte
Building_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/building-2.svelte";
function Building_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Building_2);
  const iconNode = [
    ["path", { "d": "M6 22V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v18Z" }],
    ["path", { "d": "M6 12H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h2" }],
    ["path", { "d": "M18 9h2a2 2 0 0 1 2 2v9a2 2 0 0 1-2 2h-2" }],
    ["path", { "d": "M10 6h4" }],
    ["path", { "d": "M10 10h4" }],
    ["path", { "d": "M10 14h4" }],
    ["path", { "d": "M10 18h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "building-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Building_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Building_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Building_2 = hmr(Building_2, () => Building_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Building_2[HMR].source;
    set(Building_2[HMR].source, module.default[HMR].original);
  });
}
var building_2_default = Building_2;

// node_modules/lucide-svelte/dist/icons/building.svelte
Building[FILENAME] = "node_modules/lucide-svelte/dist/icons/building.svelte";
function Building($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Building);
  const iconNode = [
    [
      "rect",
      {
        "width": "16",
        "height": "20",
        "x": "4",
        "y": "2",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["path", { "d": "M9 22v-4h6v4" }],
    ["path", { "d": "M8 6h.01" }],
    ["path", { "d": "M16 6h.01" }],
    ["path", { "d": "M12 6h.01" }],
    ["path", { "d": "M12 10h.01" }],
    ["path", { "d": "M12 14h.01" }],
    ["path", { "d": "M16 10h.01" }],
    ["path", { "d": "M16 14h.01" }],
    ["path", { "d": "M8 10h.01" }],
    ["path", { "d": "M8 14h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "building" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Building, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Building,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Building = hmr(Building, () => Building[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Building[HMR].source;
    set(Building[HMR].source, module.default[HMR].original);
  });
}
var building_default = Building;

// node_modules/lucide-svelte/dist/icons/bus-front.svelte
Bus_front[FILENAME] = "node_modules/lucide-svelte/dist/icons/bus-front.svelte";
function Bus_front($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bus_front);
  const iconNode = [
    ["path", { "d": "M4 6 2 7" }],
    ["path", { "d": "M10 6h4" }],
    ["path", { "d": "m22 7-2-1" }],
    [
      "rect",
      { "width": "16", "height": "16", "x": "4", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M4 11h16" }],
    ["path", { "d": "M8 15h.01" }],
    ["path", { "d": "M16 15h.01" }],
    ["path", { "d": "M6 19v2" }],
    ["path", { "d": "M18 21v-2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bus-front" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bus_front, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bus_front,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bus_front = hmr(Bus_front, () => Bus_front[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bus_front[HMR].source;
    set(Bus_front[HMR].source, module.default[HMR].original);
  });
}
var bus_front_default = Bus_front;

// node_modules/lucide-svelte/dist/icons/bus.svelte
Bus[FILENAME] = "node_modules/lucide-svelte/dist/icons/bus.svelte";
function Bus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Bus);
  const iconNode = [
    ["path", { "d": "M8 6v6" }],
    ["path", { "d": "M15 6v6" }],
    ["path", { "d": "M2 12h19.6" }],
    [
      "path",
      {
        "d": "M18 18h3s.5-1.7.8-2.8c.1-.4.2-.8.2-1.2 0-.4-.1-.8-.2-1.2l-1.4-5C20.1 6.8 19.1 6 18 6H4a2 2 0 0 0-2 2v10h3"
      }
    ],
    ["circle", { "cx": "7", "cy": "18", "r": "2" }],
    ["path", { "d": "M9 18h5" }],
    ["circle", { "cx": "16", "cy": "18", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "bus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Bus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Bus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Bus = hmr(Bus, () => Bus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Bus[HMR].source;
    set(Bus[HMR].source, module.default[HMR].original);
  });
}
var bus_default = Bus;

// node_modules/lucide-svelte/dist/icons/cable-car.svelte
Cable_car[FILENAME] = "node_modules/lucide-svelte/dist/icons/cable-car.svelte";
function Cable_car($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cable_car);
  const iconNode = [
    ["path", { "d": "M10 3h.01" }],
    ["path", { "d": "M14 2h.01" }],
    ["path", { "d": "m2 9 20-5" }],
    ["path", { "d": "M12 12V6.5" }],
    [
      "rect",
      {
        "width": "16",
        "height": "10",
        "x": "4",
        "y": "12",
        "rx": "3"
      }
    ],
    ["path", { "d": "M9 12v5" }],
    ["path", { "d": "M15 12v5" }],
    ["path", { "d": "M4 17h16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cable-car" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cable_car, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cable_car,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cable_car = hmr(Cable_car, () => Cable_car[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cable_car[HMR].source;
    set(Cable_car[HMR].source, module.default[HMR].original);
  });
}
var cable_car_default = Cable_car;

// node_modules/lucide-svelte/dist/icons/cable.svelte
Cable[FILENAME] = "node_modules/lucide-svelte/dist/icons/cable.svelte";
function Cable($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cable);
  const iconNode = [
    [
      "path",
      {
        "d": "M17 19a1 1 0 0 1-1-1v-2a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2a1 1 0 0 1-1 1z"
      }
    ],
    ["path", { "d": "M17 21v-2" }],
    [
      "path",
      { "d": "M19 14V6.5a1 1 0 0 0-7 0v11a1 1 0 0 1-7 0V10" }
    ],
    ["path", { "d": "M21 21v-2" }],
    ["path", { "d": "M3 5V3" }],
    [
      "path",
      {
        "d": "M4 10a2 2 0 0 1-2-2V6a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2a2 2 0 0 1-2 2z"
      }
    ],
    ["path", { "d": "M7 5V3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cable" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cable, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cable,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cable = hmr(Cable, () => Cable[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cable[HMR].source;
    set(Cable[HMR].source, module.default[HMR].original);
  });
}
var cable_default = Cable;

// node_modules/lucide-svelte/dist/icons/cake-slice.svelte
Cake_slice[FILENAME] = "node_modules/lucide-svelte/dist/icons/cake-slice.svelte";
function Cake_slice($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cake_slice);
  const iconNode = [
    ["path", { "d": "M16 13H3" }],
    ["path", { "d": "M16 17H3" }],
    [
      "path",
      {
        "d": "m7.2 7.9-3.388 2.5A2 2 0 0 0 3 12.01V20a1 1 0 0 0 1 1h16a1 1 0 0 0 1-1v-8.654c0-2-2.44-6.026-6.44-8.026a1 1 0 0 0-1.082.057L10.4 5.6"
      }
    ],
    ["circle", { "cx": "9", "cy": "7", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cake-slice" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cake_slice, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cake_slice,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cake_slice = hmr(Cake_slice, () => Cake_slice[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cake_slice[HMR].source;
    set(Cake_slice[HMR].source, module.default[HMR].original);
  });
}
var cake_slice_default = Cake_slice;

// node_modules/lucide-svelte/dist/icons/cake.svelte
Cake[FILENAME] = "node_modules/lucide-svelte/dist/icons/cake.svelte";
function Cake($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cake);
  const iconNode = [
    ["path", { "d": "M20 21v-8a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v8" }],
    [
      "path",
      { "d": "M4 16s.5-1 2-1 2.5 2 4 2 2.5-2 4-2 2.5 2 4 2 2-1 2-1" }
    ],
    ["path", { "d": "M2 21h20" }],
    ["path", { "d": "M7 8v3" }],
    ["path", { "d": "M12 8v3" }],
    ["path", { "d": "M17 8v3" }],
    ["path", { "d": "M7 4h.01" }],
    ["path", { "d": "M12 4h.01" }],
    ["path", { "d": "M17 4h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cake" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cake, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cake,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cake = hmr(Cake, () => Cake[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cake[HMR].source;
    set(Cake[HMR].source, module.default[HMR].original);
  });
}
var cake_default = Cake;

// node_modules/lucide-svelte/dist/icons/calculator.svelte
Calculator[FILENAME] = "node_modules/lucide-svelte/dist/icons/calculator.svelte";
function Calculator($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calculator);
  const iconNode = [
    [
      "rect",
      { "width": "16", "height": "20", "x": "4", "y": "2", "rx": "2" }
    ],
    ["line", { "x1": "8", "x2": "16", "y1": "6", "y2": "6" }],
    ["line", { "x1": "16", "x2": "16", "y1": "14", "y2": "18" }],
    ["path", { "d": "M16 10h.01" }],
    ["path", { "d": "M12 10h.01" }],
    ["path", { "d": "M8 10h.01" }],
    ["path", { "d": "M12 14h.01" }],
    ["path", { "d": "M8 14h.01" }],
    ["path", { "d": "M12 18h.01" }],
    ["path", { "d": "M8 18h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calculator" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calculator, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calculator,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calculator = hmr(Calculator, () => Calculator[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calculator[HMR].source;
    set(Calculator[HMR].source, module.default[HMR].original);
  });
}
var calculator_default = Calculator;

// node_modules/lucide-svelte/dist/icons/calendar-1.svelte
Calendar_1[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-1.svelte";
function Calendar_1($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_1);
  const iconNode = [
    ["path", { "d": "M11 14h1v4" }],
    ["path", { "d": "M16 2v4" }],
    ["path", { "d": "M3 10h18" }],
    ["path", { "d": "M8 2v4" }],
    [
      "rect",
      { "x": "3", "y": "4", "width": "18", "height": "18", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-1" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_1, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_1,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_1 = hmr(Calendar_1, () => Calendar_1[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_1[HMR].source;
    set(Calendar_1[HMR].source, module.default[HMR].original);
  });
}
var calendar_1_default = Calendar_1;

// node_modules/lucide-svelte/dist/icons/calendar-arrow-down.svelte
Calendar_arrow_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-arrow-down.svelte";
function Calendar_arrow_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_arrow_down);
  const iconNode = [
    ["path", { "d": "m14 18 4 4 4-4" }],
    ["path", { "d": "M16 2v4" }],
    ["path", { "d": "M18 14v8" }],
    [
      "path",
      {
        "d": "M21 11.354V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7.343"
      }
    ],
    ["path", { "d": "M3 10h18" }],
    ["path", { "d": "M8 2v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-arrow-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_arrow_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_arrow_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_arrow_down = hmr(Calendar_arrow_down, () => Calendar_arrow_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_arrow_down[HMR].source;
    set(Calendar_arrow_down[HMR].source, module.default[HMR].original);
  });
}
var calendar_arrow_down_default = Calendar_arrow_down;

// node_modules/lucide-svelte/dist/icons/calendar-arrow-up.svelte
Calendar_arrow_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-arrow-up.svelte";
function Calendar_arrow_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_arrow_up);
  const iconNode = [
    ["path", { "d": "m14 18 4-4 4 4" }],
    ["path", { "d": "M16 2v4" }],
    ["path", { "d": "M18 22v-8" }],
    [
      "path",
      {
        "d": "M21 11.343V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h9"
      }
    ],
    ["path", { "d": "M3 10h18" }],
    ["path", { "d": "M8 2v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-arrow-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_arrow_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_arrow_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_arrow_up = hmr(Calendar_arrow_up, () => Calendar_arrow_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_arrow_up[HMR].source;
    set(Calendar_arrow_up[HMR].source, module.default[HMR].original);
  });
}
var calendar_arrow_up_default = Calendar_arrow_up;

// node_modules/lucide-svelte/dist/icons/calendar-check-2.svelte
Calendar_check_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-check-2.svelte";
function Calendar_check_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_check_2);
  const iconNode = [
    ["path", { "d": "M8 2v4" }],
    ["path", { "d": "M16 2v4" }],
    [
      "path",
      {
        "d": "M21 14V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8"
      }
    ],
    ["path", { "d": "M3 10h18" }],
    ["path", { "d": "m16 20 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-check-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_check_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_check_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_check_2 = hmr(Calendar_check_2, () => Calendar_check_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_check_2[HMR].source;
    set(Calendar_check_2[HMR].source, module.default[HMR].original);
  });
}
var calendar_check_2_default = Calendar_check_2;

// node_modules/lucide-svelte/dist/icons/calendar-check.svelte
Calendar_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-check.svelte";
function Calendar_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_check);
  const iconNode = [
    ["path", { "d": "M8 2v4" }],
    ["path", { "d": "M16 2v4" }],
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "4", "rx": "2" }
    ],
    ["path", { "d": "M3 10h18" }],
    ["path", { "d": "m9 16 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_check = hmr(Calendar_check, () => Calendar_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_check[HMR].source;
    set(Calendar_check[HMR].source, module.default[HMR].original);
  });
}
var calendar_check_default = Calendar_check;

// node_modules/lucide-svelte/dist/icons/calendar-clock.svelte
Calendar_clock[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-clock.svelte";
function Calendar_clock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_clock);
  const iconNode = [
    ["path", { "d": "M16 14v2.2l1.6 1" }],
    ["path", { "d": "M16 2v4" }],
    [
      "path",
      {
        "d": "M21 7.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h3.5"
      }
    ],
    ["path", { "d": "M3 10h5" }],
    ["path", { "d": "M8 2v4" }],
    ["circle", { "cx": "16", "cy": "16", "r": "6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-clock" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_clock, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_clock,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_clock = hmr(Calendar_clock, () => Calendar_clock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_clock[HMR].source;
    set(Calendar_clock[HMR].source, module.default[HMR].original);
  });
}
var calendar_clock_default = Calendar_clock;

// node_modules/lucide-svelte/dist/icons/calendar-cog.svelte
Calendar_cog[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-cog.svelte";
function Calendar_cog($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_cog);
  const iconNode = [
    ["path", { "d": "m15.228 16.852-.923-.383" }],
    ["path", { "d": "m15.228 19.148-.923.383" }],
    ["path", { "d": "M16 2v4" }],
    ["path", { "d": "m16.47 14.305.382.923" }],
    ["path", { "d": "m16.852 20.772-.383.924" }],
    ["path", { "d": "m19.148 15.228.383-.923" }],
    ["path", { "d": "m19.53 21.696-.382-.924" }],
    ["path", { "d": "m20.772 16.852.924-.383" }],
    ["path", { "d": "m20.772 19.148.924.383" }],
    [
      "path",
      {
        "d": "M21 11V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6"
      }
    ],
    ["path", { "d": "M3 10h18" }],
    ["path", { "d": "M8 2v4" }],
    ["circle", { "cx": "18", "cy": "18", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-cog" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_cog, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_cog,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_cog = hmr(Calendar_cog, () => Calendar_cog[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_cog[HMR].source;
    set(Calendar_cog[HMR].source, module.default[HMR].original);
  });
}
var calendar_cog_default = Calendar_cog;

// node_modules/lucide-svelte/dist/icons/calendar-days.svelte
Calendar_days[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-days.svelte";
function Calendar_days($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_days);
  const iconNode = [
    ["path", { "d": "M8 2v4" }],
    ["path", { "d": "M16 2v4" }],
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "4", "rx": "2" }
    ],
    ["path", { "d": "M3 10h18" }],
    ["path", { "d": "M8 14h.01" }],
    ["path", { "d": "M12 14h.01" }],
    ["path", { "d": "M16 14h.01" }],
    ["path", { "d": "M8 18h.01" }],
    ["path", { "d": "M12 18h.01" }],
    ["path", { "d": "M16 18h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-days" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_days, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_days,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_days = hmr(Calendar_days, () => Calendar_days[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_days[HMR].source;
    set(Calendar_days[HMR].source, module.default[HMR].original);
  });
}
var calendar_days_default = Calendar_days;

// node_modules/lucide-svelte/dist/icons/calendar-fold.svelte
Calendar_fold[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-fold.svelte";
function Calendar_fold($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_fold);
  const iconNode = [
    ["path", { "d": "M8 2v4" }],
    ["path", { "d": "M16 2v4" }],
    [
      "path",
      {
        "d": "M21 17V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h11Z"
      }
    ],
    ["path", { "d": "M3 10h18" }],
    ["path", { "d": "M15 22v-4a2 2 0 0 1 2-2h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-fold" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_fold, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_fold,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_fold = hmr(Calendar_fold, () => Calendar_fold[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_fold[HMR].source;
    set(Calendar_fold[HMR].source, module.default[HMR].original);
  });
}
var calendar_fold_default = Calendar_fold;

// node_modules/lucide-svelte/dist/icons/calendar-heart.svelte
Calendar_heart[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-heart.svelte";
function Calendar_heart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_heart);
  const iconNode = [
    [
      "path",
      {
        "d": "M12.127 22H5a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v5.125"
      }
    ],
    [
      "path",
      {
        "d": "M14.62 18.8A2.25 2.25 0 1 1 18 15.836a2.25 2.25 0 1 1 3.38 2.966l-2.626 2.856a.998.998 0 0 1-1.507 0z"
      }
    ],
    ["path", { "d": "M16 2v4" }],
    ["path", { "d": "M3 10h18" }],
    ["path", { "d": "M8 2v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-heart" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_heart, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_heart,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_heart = hmr(Calendar_heart, () => Calendar_heart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_heart[HMR].source;
    set(Calendar_heart[HMR].source, module.default[HMR].original);
  });
}
var calendar_heart_default = Calendar_heart;

// node_modules/lucide-svelte/dist/icons/calendar-minus-2.svelte
Calendar_minus_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-minus-2.svelte";
function Calendar_minus_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_minus_2);
  const iconNode = [
    ["path", { "d": "M8 2v4" }],
    ["path", { "d": "M16 2v4" }],
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "4", "rx": "2" }
    ],
    ["path", { "d": "M3 10h18" }],
    ["path", { "d": "M10 16h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-minus-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_minus_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_minus_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_minus_2 = hmr(Calendar_minus_2, () => Calendar_minus_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_minus_2[HMR].source;
    set(Calendar_minus_2[HMR].source, module.default[HMR].original);
  });
}
var calendar_minus_2_default = Calendar_minus_2;

// node_modules/lucide-svelte/dist/icons/calendar-minus.svelte
Calendar_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-minus.svelte";
function Calendar_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_minus);
  const iconNode = [
    ["path", { "d": "M16 19h6" }],
    ["path", { "d": "M16 2v4" }],
    [
      "path",
      {
        "d": "M21 15V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8.5"
      }
    ],
    ["path", { "d": "M3 10h18" }],
    ["path", { "d": "M8 2v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_minus = hmr(Calendar_minus, () => Calendar_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_minus[HMR].source;
    set(Calendar_minus[HMR].source, module.default[HMR].original);
  });
}
var calendar_minus_default = Calendar_minus;

// node_modules/lucide-svelte/dist/icons/calendar-off.svelte
Calendar_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-off.svelte";
function Calendar_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_off);
  const iconNode = [
    [
      "path",
      {
        "d": "M4.2 4.2A2 2 0 0 0 3 6v14a2 2 0 0 0 2 2h14a2 2 0 0 0 1.82-1.18"
      }
    ],
    ["path", { "d": "M21 15.5V6a2 2 0 0 0-2-2H9.5" }],
    ["path", { "d": "M16 2v4" }],
    ["path", { "d": "M3 10h7" }],
    ["path", { "d": "M21 10h-5.5" }],
    ["path", { "d": "m2 2 20 20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_off = hmr(Calendar_off, () => Calendar_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_off[HMR].source;
    set(Calendar_off[HMR].source, module.default[HMR].original);
  });
}
var calendar_off_default = Calendar_off;

// node_modules/lucide-svelte/dist/icons/calendar-plus-2.svelte
Calendar_plus_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-plus-2.svelte";
function Calendar_plus_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_plus_2);
  const iconNode = [
    ["path", { "d": "M8 2v4" }],
    ["path", { "d": "M16 2v4" }],
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "4", "rx": "2" }
    ],
    ["path", { "d": "M3 10h18" }],
    ["path", { "d": "M10 16h4" }],
    ["path", { "d": "M12 14v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-plus-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_plus_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_plus_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_plus_2 = hmr(Calendar_plus_2, () => Calendar_plus_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_plus_2[HMR].source;
    set(Calendar_plus_2[HMR].source, module.default[HMR].original);
  });
}
var calendar_plus_2_default = Calendar_plus_2;

// node_modules/lucide-svelte/dist/icons/calendar-plus.svelte
Calendar_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-plus.svelte";
function Calendar_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_plus);
  const iconNode = [
    ["path", { "d": "M16 19h6" }],
    ["path", { "d": "M16 2v4" }],
    ["path", { "d": "M19 16v6" }],
    [
      "path",
      {
        "d": "M21 12.598V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8.5"
      }
    ],
    ["path", { "d": "M3 10h18" }],
    ["path", { "d": "M8 2v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_plus = hmr(Calendar_plus, () => Calendar_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_plus[HMR].source;
    set(Calendar_plus[HMR].source, module.default[HMR].original);
  });
}
var calendar_plus_default = Calendar_plus;

// node_modules/lucide-svelte/dist/icons/calendar-range.svelte
Calendar_range[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-range.svelte";
function Calendar_range($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_range);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "4", "rx": "2" }
    ],
    ["path", { "d": "M16 2v4" }],
    ["path", { "d": "M3 10h18" }],
    ["path", { "d": "M8 2v4" }],
    ["path", { "d": "M17 14h-6" }],
    ["path", { "d": "M13 18H7" }],
    ["path", { "d": "M7 14h.01" }],
    ["path", { "d": "M17 18h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-range" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_range, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_range,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_range = hmr(Calendar_range, () => Calendar_range[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_range[HMR].source;
    set(Calendar_range[HMR].source, module.default[HMR].original);
  });
}
var calendar_range_default = Calendar_range;

// node_modules/lucide-svelte/dist/icons/calendar-sync.svelte
Calendar_sync[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-sync.svelte";
function Calendar_sync($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_sync);
  const iconNode = [
    ["path", { "d": "M11 10v4h4" }],
    ["path", { "d": "m11 14 1.535-1.605a5 5 0 0 1 8 1.5" }],
    ["path", { "d": "M16 2v4" }],
    ["path", { "d": "m21 18-1.535 1.605a5 5 0 0 1-8-1.5" }],
    ["path", { "d": "M21 22v-4h-4" }],
    [
      "path",
      {
        "d": "M21 8.5V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h4.3"
      }
    ],
    ["path", { "d": "M3 10h4" }],
    ["path", { "d": "M8 2v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-sync" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_sync, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_sync,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_sync = hmr(Calendar_sync, () => Calendar_sync[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_sync[HMR].source;
    set(Calendar_sync[HMR].source, module.default[HMR].original);
  });
}
var calendar_sync_default = Calendar_sync;

// node_modules/lucide-svelte/dist/icons/calendar-search.svelte
Calendar_search[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-search.svelte";
function Calendar_search($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_search);
  const iconNode = [
    ["path", { "d": "M16 2v4" }],
    [
      "path",
      {
        "d": "M21 11.75V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h7.25"
      }
    ],
    ["path", { "d": "m22 22-1.875-1.875" }],
    ["path", { "d": "M3 10h18" }],
    ["path", { "d": "M8 2v4" }],
    ["circle", { "cx": "18", "cy": "18", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-search" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_search, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_search,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_search = hmr(Calendar_search, () => Calendar_search[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_search[HMR].source;
    set(Calendar_search[HMR].source, module.default[HMR].original);
  });
}
var calendar_search_default = Calendar_search;

// node_modules/lucide-svelte/dist/icons/calendar-x-2.svelte
Calendar_x_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-x-2.svelte";
function Calendar_x_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_x_2);
  const iconNode = [
    ["path", { "d": "M8 2v4" }],
    ["path", { "d": "M16 2v4" }],
    [
      "path",
      {
        "d": "M21 13V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h8"
      }
    ],
    ["path", { "d": "M3 10h18" }],
    ["path", { "d": "m17 22 5-5" }],
    ["path", { "d": "m17 17 5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-x-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_x_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_x_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_x_2 = hmr(Calendar_x_2, () => Calendar_x_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_x_2[HMR].source;
    set(Calendar_x_2[HMR].source, module.default[HMR].original);
  });
}
var calendar_x_2_default = Calendar_x_2;

// node_modules/lucide-svelte/dist/icons/calendar-x.svelte
Calendar_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar-x.svelte";
function Calendar_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar_x);
  const iconNode = [
    ["path", { "d": "M8 2v4" }],
    ["path", { "d": "M16 2v4" }],
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "4", "rx": "2" }
    ],
    ["path", { "d": "M3 10h18" }],
    ["path", { "d": "m14 14-4 4" }],
    ["path", { "d": "m10 14 4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar_x = hmr(Calendar_x, () => Calendar_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar_x[HMR].source;
    set(Calendar_x[HMR].source, module.default[HMR].original);
  });
}
var calendar_x_default = Calendar_x;

// node_modules/lucide-svelte/dist/icons/calendar.svelte
Calendar[FILENAME] = "node_modules/lucide-svelte/dist/icons/calendar.svelte";
function Calendar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Calendar);
  const iconNode = [
    ["path", { "d": "M8 2v4" }],
    ["path", { "d": "M16 2v4" }],
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "4", "rx": "2" }
    ],
    ["path", { "d": "M3 10h18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "calendar" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Calendar, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Calendar,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Calendar = hmr(Calendar, () => Calendar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Calendar[HMR].source;
    set(Calendar[HMR].source, module.default[HMR].original);
  });
}
var calendar_default = Calendar;

// node_modules/lucide-svelte/dist/icons/camera-off.svelte
Camera_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/camera-off.svelte";
function Camera_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Camera_off);
  const iconNode = [
    ["line", { "x1": "2", "x2": "22", "y1": "2", "y2": "22" }],
    ["path", { "d": "M7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16" }],
    ["path", { "d": "M9.5 4h5L17 7h3a2 2 0 0 1 2 2v7.5" }],
    ["path", { "d": "M14.121 15.121A3 3 0 1 1 9.88 10.88" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "camera-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Camera_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Camera_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Camera_off = hmr(Camera_off, () => Camera_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Camera_off[HMR].source;
    set(Camera_off[HMR].source, module.default[HMR].original);
  });
}
var camera_off_default = Camera_off;

// node_modules/lucide-svelte/dist/icons/camera.svelte
Camera[FILENAME] = "node_modules/lucide-svelte/dist/icons/camera.svelte";
function Camera($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Camera);
  const iconNode = [
    [
      "path",
      {
        "d": "M14.5 4h-5L7 7H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2h-3l-2.5-3z"
      }
    ],
    ["circle", { "cx": "12", "cy": "13", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "camera" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Camera, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Camera,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Camera = hmr(Camera, () => Camera[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Camera[HMR].source;
    set(Camera[HMR].source, module.default[HMR].original);
  });
}
var camera_default = Camera;

// node_modules/lucide-svelte/dist/icons/candy-cane.svelte
Candy_cane[FILENAME] = "node_modules/lucide-svelte/dist/icons/candy-cane.svelte";
function Candy_cane($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Candy_cane);
  const iconNode = [
    [
      "path",
      {
        "d": "M5.7 21a2 2 0 0 1-3.5-2l8.6-14a6 6 0 0 1 10.4 6 2 2 0 1 1-3.464-2 2 2 0 1 0-3.464-2Z"
      }
    ],
    ["path", { "d": "M17.75 7 15 2.1" }],
    ["path", { "d": "M10.9 4.8 13 9" }],
    ["path", { "d": "m7.9 9.7 2 4.4" }],
    ["path", { "d": "M4.9 14.7 7 18.9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "candy-cane" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Candy_cane, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Candy_cane,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Candy_cane = hmr(Candy_cane, () => Candy_cane[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Candy_cane[HMR].source;
    set(Candy_cane[HMR].source, module.default[HMR].original);
  });
}
var candy_cane_default = Candy_cane;

// node_modules/lucide-svelte/dist/icons/candy-off.svelte
Candy_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/candy-off.svelte";
function Candy_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Candy_off);
  const iconNode = [
    ["path", { "d": "M10 10v7.9" }],
    ["path", { "d": "M11.802 6.145a5 5 0 0 1 6.053 6.053" }],
    ["path", { "d": "M14 6.1v2.243" }],
    [
      "path",
      {
        "d": "m15.5 15.571-.964.964a5 5 0 0 1-7.071 0 5 5 0 0 1 0-7.07l.964-.965"
      }
    ],
    [
      "path",
      {
        "d": "M16 7V3a1 1 0 0 1 1.707-.707 2.5 2.5 0 0 0 2.152.717 1 1 0 0 1 1.131 1.131 2.5 2.5 0 0 0 .717 2.152A1 1 0 0 1 21 8h-4"
      }
    ],
    ["path", { "d": "m2 2 20 20" }],
    [
      "path",
      {
        "d": "M8 17v4a1 1 0 0 1-1.707.707 2.5 2.5 0 0 0-2.152-.717 1 1 0 0 1-1.131-1.131 2.5 2.5 0 0 0-.717-2.152A1 1 0 0 1 3 16h4"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "candy-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Candy_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Candy_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Candy_off = hmr(Candy_off, () => Candy_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Candy_off[HMR].source;
    set(Candy_off[HMR].source, module.default[HMR].original);
  });
}
var candy_off_default = Candy_off;

// node_modules/lucide-svelte/dist/icons/candy.svelte
Candy[FILENAME] = "node_modules/lucide-svelte/dist/icons/candy.svelte";
function Candy($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Candy);
  const iconNode = [
    ["path", { "d": "M10 7v10.9" }],
    ["path", { "d": "M14 6.1V17" }],
    [
      "path",
      {
        "d": "M16 7V3a1 1 0 0 1 1.707-.707 2.5 2.5 0 0 0 2.152.717 1 1 0 0 1 1.131 1.131 2.5 2.5 0 0 0 .717 2.152A1 1 0 0 1 21 8h-4"
      }
    ],
    [
      "path",
      {
        "d": "M16.536 7.465a5 5 0 0 0-7.072 0l-2 2a5 5 0 0 0 0 7.07 5 5 0 0 0 7.072 0l2-2a5 5 0 0 0 0-7.07"
      }
    ],
    [
      "path",
      {
        "d": "M8 17v4a1 1 0 0 1-1.707.707 2.5 2.5 0 0 0-2.152-.717 1 1 0 0 1-1.131-1.131 2.5 2.5 0 0 0-.717-2.152A1 1 0 0 1 3 16h4"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "candy" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Candy, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Candy,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Candy = hmr(Candy, () => Candy[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Candy[HMR].source;
    set(Candy[HMR].source, module.default[HMR].original);
  });
}
var candy_default = Candy;

// node_modules/lucide-svelte/dist/icons/cannabis.svelte
Cannabis[FILENAME] = "node_modules/lucide-svelte/dist/icons/cannabis.svelte";
function Cannabis($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cannabis);
  const iconNode = [
    ["path", { "d": "M12 22v-4" }],
    [
      "path",
      {
        "d": "M7 12c-1.5 0-4.5 1.5-5 3 3.5 1.5 6 1 6 1-1.5 1.5-2 3.5-2 5 2.5 0 4.5-1.5 6-3 1.5 1.5 3.5 3 6 3 0-1.5-.5-3.5-2-5 0 0 2.5.5 6-1-.5-1.5-3.5-3-5-3 1.5-1 4-4 4-6-2.5 0-5.5 1.5-7 3 0-2.5-.5-5-2-7-1.5 2-2 4.5-2 7-1.5-1.5-4.5-3-7-3 0 2 2.5 5 4 6"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cannabis" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cannabis, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cannabis,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cannabis = hmr(Cannabis, () => Cannabis[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cannabis[HMR].source;
    set(Cannabis[HMR].source, module.default[HMR].original);
  });
}
var cannabis_default = Cannabis;

// node_modules/lucide-svelte/dist/icons/captions-off.svelte
Captions_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/captions-off.svelte";
function Captions_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Captions_off);
  const iconNode = [
    ["path", { "d": "M10.5 5H19a2 2 0 0 1 2 2v8.5" }],
    ["path", { "d": "M17 11h-.5" }],
    ["path", { "d": "M19 19H5a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2" }],
    ["path", { "d": "m2 2 20 20" }],
    ["path", { "d": "M7 11h4" }],
    ["path", { "d": "M7 15h2.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "captions-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Captions_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Captions_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Captions_off = hmr(Captions_off, () => Captions_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Captions_off[HMR].source;
    set(Captions_off[HMR].source, module.default[HMR].original);
  });
}
var captions_off_default = Captions_off;

// node_modules/lucide-svelte/dist/icons/captions.svelte
Captions[FILENAME] = "node_modules/lucide-svelte/dist/icons/captions.svelte";
function Captions($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Captions);
  const iconNode = [
    [
      "rect",
      {
        "width": "18",
        "height": "14",
        "x": "3",
        "y": "5",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["path", { "d": "M7 15h4M15 15h2M7 11h2M13 11h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "captions" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Captions, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Captions,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Captions = hmr(Captions, () => Captions[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Captions[HMR].source;
    set(Captions[HMR].source, module.default[HMR].original);
  });
}
var captions_default = Captions;

// node_modules/lucide-svelte/dist/icons/car-front.svelte
Car_front[FILENAME] = "node_modules/lucide-svelte/dist/icons/car-front.svelte";
function Car_front($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Car_front);
  const iconNode = [
    [
      "path",
      {
        "d": "m21 8-2 2-1.5-3.7A2 2 0 0 0 15.646 5H8.4a2 2 0 0 0-1.903 1.257L5 10 3 8"
      }
    ],
    ["path", { "d": "M7 14h.01" }],
    ["path", { "d": "M17 14h.01" }],
    [
      "rect",
      { "width": "18", "height": "8", "x": "3", "y": "10", "rx": "2" }
    ],
    ["path", { "d": "M5 18v2" }],
    ["path", { "d": "M19 18v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "car-front" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Car_front, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Car_front,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Car_front = hmr(Car_front, () => Car_front[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Car_front[HMR].source;
    set(Car_front[HMR].source, module.default[HMR].original);
  });
}
var car_front_default = Car_front;

// node_modules/lucide-svelte/dist/icons/car-taxi-front.svelte
Car_taxi_front[FILENAME] = "node_modules/lucide-svelte/dist/icons/car-taxi-front.svelte";
function Car_taxi_front($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Car_taxi_front);
  const iconNode = [
    ["path", { "d": "M10 2h4" }],
    [
      "path",
      {
        "d": "m21 8-2 2-1.5-3.7A2 2 0 0 0 15.646 5H8.4a2 2 0 0 0-1.903 1.257L5 10 3 8"
      }
    ],
    ["path", { "d": "M7 14h.01" }],
    ["path", { "d": "M17 14h.01" }],
    [
      "rect",
      { "width": "18", "height": "8", "x": "3", "y": "10", "rx": "2" }
    ],
    ["path", { "d": "M5 18v2" }],
    ["path", { "d": "M19 18v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "car-taxi-front" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Car_taxi_front, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Car_taxi_front,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Car_taxi_front = hmr(Car_taxi_front, () => Car_taxi_front[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Car_taxi_front[HMR].source;
    set(Car_taxi_front[HMR].source, module.default[HMR].original);
  });
}
var car_taxi_front_default = Car_taxi_front;

// node_modules/lucide-svelte/dist/icons/car.svelte
Car[FILENAME] = "node_modules/lucide-svelte/dist/icons/car.svelte";
function Car($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Car);
  const iconNode = [
    [
      "path",
      {
        "d": "M19 17h2c.6 0 1-.4 1-1v-3c0-.9-.7-1.7-1.5-1.9C18.7 10.6 16 10 16 10s-1.3-1.4-2.2-2.3c-.5-.4-1.1-.7-1.8-.7H5c-.6 0-1.1.4-1.4.9l-1.4 2.9A3.7 3.7 0 0 0 2 12v4c0 .6.4 1 1 1h2"
      }
    ],
    ["circle", { "cx": "7", "cy": "17", "r": "2" }],
    ["path", { "d": "M9 17h6" }],
    ["circle", { "cx": "17", "cy": "17", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "car" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Car, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Car,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Car = hmr(Car, () => Car[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Car[HMR].source;
    set(Car[HMR].source, module.default[HMR].original);
  });
}
var car_default = Car;

// node_modules/lucide-svelte/dist/icons/caravan.svelte
Caravan[FILENAME] = "node_modules/lucide-svelte/dist/icons/caravan.svelte";
function Caravan($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Caravan);
  const iconNode = [
    [
      "path",
      {
        "d": "M18 19V9a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v8a2 2 0 0 0 2 2h2"
      }
    ],
    ["path", { "d": "M2 9h3a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2" }],
    [
      "path",
      {
        "d": "M22 17v1a1 1 0 0 1-1 1H10v-9a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v9"
      }
    ],
    ["circle", { "cx": "8", "cy": "19", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "caravan" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Caravan, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Caravan,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Caravan = hmr(Caravan, () => Caravan[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Caravan[HMR].source;
    set(Caravan[HMR].source, module.default[HMR].original);
  });
}
var caravan_default = Caravan;

// node_modules/lucide-svelte/dist/icons/card-sim.svelte
Card_sim[FILENAME] = "node_modules/lucide-svelte/dist/icons/card-sim.svelte";
function Card_sim($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Card_sim);
  const iconNode = [
    ["path", { "d": "M12 14v4" }],
    [
      "path",
      {
        "d": "M14.172 2a2 2 0 0 1 1.414.586l3.828 3.828A2 2 0 0 1 20 7.828V20a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2z"
      }
    ],
    ["path", { "d": "M8 14h8" }],
    [
      "rect",
      { "x": "8", "y": "10", "width": "8", "height": "8", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "card-sim" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Card_sim, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Card_sim,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Card_sim = hmr(Card_sim, () => Card_sim[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Card_sim[HMR].source;
    set(Card_sim[HMR].source, module.default[HMR].original);
  });
}
var card_sim_default = Card_sim;

// node_modules/lucide-svelte/dist/icons/carrot.svelte
Carrot[FILENAME] = "node_modules/lucide-svelte/dist/icons/carrot.svelte";
function Carrot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Carrot);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.27 21.7s9.87-3.5 12.73-6.36a4.5 4.5 0 0 0-6.36-6.37C5.77 11.84 2.27 21.7 2.27 21.7zM8.64 14l-2.05-2.04M15.34 15l-2.46-2.46"
      }
    ],
    [
      "path",
      {
        "d": "M22 9s-1.33-2-3.5-2C16.86 7 15 9 15 9s1.33 2 3.5 2S22 9 22 9z"
      }
    ],
    [
      "path",
      {
        "d": "M15 2s-2 1.33-2 3.5S15 9 15 9s2-1.84 2-3.5C17 3.33 15 2 15 2z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "carrot" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Carrot, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Carrot,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Carrot = hmr(Carrot, () => Carrot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Carrot[HMR].source;
    set(Carrot[HMR].source, module.default[HMR].original);
  });
}
var carrot_default = Carrot;

// node_modules/lucide-svelte/dist/icons/case-lower.svelte
Case_lower[FILENAME] = "node_modules/lucide-svelte/dist/icons/case-lower.svelte";
function Case_lower($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Case_lower);
  const iconNode = [
    ["path", { "d": "M10 9v7" }],
    ["path", { "d": "M14 6v10" }],
    ["circle", { "cx": "17.5", "cy": "12.5", "r": "3.5" }],
    ["circle", { "cx": "6.5", "cy": "12.5", "r": "3.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "case-lower" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Case_lower, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Case_lower,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Case_lower = hmr(Case_lower, () => Case_lower[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Case_lower[HMR].source;
    set(Case_lower[HMR].source, module.default[HMR].original);
  });
}
var case_lower_default = Case_lower;

// node_modules/lucide-svelte/dist/icons/case-sensitive.svelte
Case_sensitive[FILENAME] = "node_modules/lucide-svelte/dist/icons/case-sensitive.svelte";
function Case_sensitive($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Case_sensitive);
  const iconNode = [
    ["path", { "d": "m2 16 4.039-9.69a.5.5 0 0 1 .923 0L11 16" }],
    ["path", { "d": "M22 9v7" }],
    ["path", { "d": "M3.304 13h6.392" }],
    ["circle", { "cx": "18.5", "cy": "12.5", "r": "3.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "case-sensitive" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Case_sensitive, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Case_sensitive,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Case_sensitive = hmr(Case_sensitive, () => Case_sensitive[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Case_sensitive[HMR].source;
    set(Case_sensitive[HMR].source, module.default[HMR].original);
  });
}
var case_sensitive_default = Case_sensitive;

// node_modules/lucide-svelte/dist/icons/case-upper.svelte
Case_upper[FILENAME] = "node_modules/lucide-svelte/dist/icons/case-upper.svelte";
function Case_upper($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Case_upper);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 11h4.5a1 1 0 0 1 0 5h-4a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h3a1 1 0 0 1 0 5"
      }
    ],
    ["path", { "d": "m2 16 4.039-9.69a.5.5 0 0 1 .923 0L11 16" }],
    ["path", { "d": "M3.304 13h6.392" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "case-upper" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Case_upper, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Case_upper,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Case_upper = hmr(Case_upper, () => Case_upper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Case_upper[HMR].source;
    set(Case_upper[HMR].source, module.default[HMR].original);
  });
}
var case_upper_default = Case_upper;

// node_modules/lucide-svelte/dist/icons/cassette-tape.svelte
Cassette_tape[FILENAME] = "node_modules/lucide-svelte/dist/icons/cassette-tape.svelte";
function Cassette_tape($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cassette_tape);
  const iconNode = [
    [
      "rect",
      { "width": "20", "height": "16", "x": "2", "y": "4", "rx": "2" }
    ],
    ["circle", { "cx": "8", "cy": "10", "r": "2" }],
    ["path", { "d": "M8 12h8" }],
    ["circle", { "cx": "16", "cy": "10", "r": "2" }],
    [
      "path",
      {
        "d": "m6 20 .7-2.9A1.4 1.4 0 0 1 8.1 16h7.8a1.4 1.4 0 0 1 1.4 1l.7 3"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cassette-tape" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cassette_tape, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cassette_tape,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cassette_tape = hmr(Cassette_tape, () => Cassette_tape[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cassette_tape[HMR].source;
    set(Cassette_tape[HMR].source, module.default[HMR].original);
  });
}
var cassette_tape_default = Cassette_tape;

// node_modules/lucide-svelte/dist/icons/cast.svelte
Cast[FILENAME] = "node_modules/lucide-svelte/dist/icons/cast.svelte";
function Cast($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cast);
  const iconNode = [
    [
      "path",
      {
        "d": "M2 8V6a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2h-6"
      }
    ],
    ["path", { "d": "M2 12a9 9 0 0 1 8 8" }],
    ["path", { "d": "M2 16a5 5 0 0 1 4 4" }],
    ["line", { "x1": "2", "x2": "2.01", "y1": "20", "y2": "20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cast" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cast, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cast,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cast = hmr(Cast, () => Cast[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cast[HMR].source;
    set(Cast[HMR].source, module.default[HMR].original);
  });
}
var cast_default = Cast;

// node_modules/lucide-svelte/dist/icons/castle.svelte
Castle[FILENAME] = "node_modules/lucide-svelte/dist/icons/castle.svelte";
function Castle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Castle);
  const iconNode = [
    ["path", { "d": "M10 5V3" }],
    ["path", { "d": "M14 5V3" }],
    ["path", { "d": "M15 21v-3a3 3 0 0 0-6 0v3" }],
    ["path", { "d": "M18 3v8" }],
    ["path", { "d": "M18 5H6" }],
    ["path", { "d": "M22 11H2" }],
    ["path", { "d": "M22 9v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9" }],
    ["path", { "d": "M6 3v8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "castle" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Castle, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Castle,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Castle = hmr(Castle, () => Castle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Castle[HMR].source;
    set(Castle[HMR].source, module.default[HMR].original);
  });
}
var castle_default = Castle;

// node_modules/lucide-svelte/dist/icons/cat.svelte
Cat[FILENAME] = "node_modules/lucide-svelte/dist/icons/cat.svelte";
function Cat($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cat);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 5c.67 0 1.35.09 2 .26 1.78-2 5.03-2.84 6.42-2.26 1.4.58-.42 7-.42 7 .57 1.07 1 2.24 1 3.44C21 17.9 16.97 21 12 21s-9-3-9-7.56c0-1.25.5-2.4 1-3.44 0 0-1.89-6.42-.5-7 1.39-.58 4.72.23 6.5 2.23A9.04 9.04 0 0 1 12 5Z"
      }
    ],
    ["path", { "d": "M8 14v.5" }],
    ["path", { "d": "M16 14v.5" }],
    ["path", { "d": "M11.25 16.25h1.5L12 17l-.75-.75Z" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cat" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cat, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cat,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cat = hmr(Cat, () => Cat[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cat[HMR].source;
    set(Cat[HMR].source, module.default[HMR].original);
  });
}
var cat_default = Cat;

// node_modules/lucide-svelte/dist/icons/cctv.svelte
Cctv[FILENAME] = "node_modules/lucide-svelte/dist/icons/cctv.svelte";
function Cctv($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cctv);
  const iconNode = [
    [
      "path",
      {
        "d": "M16.75 12h3.632a1 1 0 0 1 .894 1.447l-2.034 4.069a1 1 0 0 1-1.708.134l-2.124-2.97"
      }
    ],
    [
      "path",
      {
        "d": "M17.106 9.053a1 1 0 0 1 .447 1.341l-3.106 6.211a1 1 0 0 1-1.342.447L3.61 12.3a2.92 2.92 0 0 1-1.3-3.91L3.69 5.6a2.92 2.92 0 0 1 3.92-1.3z"
      }
    ],
    ["path", { "d": "M2 19h3.76a2 2 0 0 0 1.8-1.1L9 15" }],
    ["path", { "d": "M2 21v-4" }],
    ["path", { "d": "M7 9h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cctv" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cctv, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cctv,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cctv = hmr(Cctv, () => Cctv[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cctv[HMR].source;
    set(Cctv[HMR].source, module.default[HMR].original);
  });
}
var cctv_default = Cctv;

// node_modules/lucide-svelte/dist/icons/chart-area.svelte
Chart_area[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-area.svelte";
function Chart_area($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_area);
  const iconNode = [
    ["path", { "d": "M3 3v16a2 2 0 0 0 2 2h16" }],
    [
      "path",
      {
        "d": "M7 11.207a.5.5 0 0 1 .146-.353l2-2a.5.5 0 0 1 .708 0l3.292 3.292a.5.5 0 0 0 .708 0l4.292-4.292a.5.5 0 0 1 .854.353V16a1 1 0 0 1-1 1H8a1 1 0 0 1-1-1z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-area" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_area, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_area,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_area = hmr(Chart_area, () => Chart_area[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_area[HMR].source;
    set(Chart_area[HMR].source, module.default[HMR].original);
  });
}
var chart_area_default = Chart_area;

// node_modules/lucide-svelte/dist/icons/chart-bar-big.svelte
Chart_bar_big[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-bar-big.svelte";
function Chart_bar_big($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_bar_big);
  const iconNode = [
    ["path", { "d": "M3 3v16a2 2 0 0 0 2 2h16" }],
    [
      "rect",
      { "x": "7", "y": "13", "width": "9", "height": "4", "rx": "1" }
    ],
    [
      "rect",
      { "x": "7", "y": "5", "width": "12", "height": "4", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-bar-big" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_bar_big, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_bar_big,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_bar_big = hmr(Chart_bar_big, () => Chart_bar_big[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_bar_big[HMR].source;
    set(Chart_bar_big[HMR].source, module.default[HMR].original);
  });
}
var chart_bar_big_default = Chart_bar_big;

// node_modules/lucide-svelte/dist/icons/chart-bar-decreasing.svelte
Chart_bar_decreasing[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-bar-decreasing.svelte";
function Chart_bar_decreasing($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_bar_decreasing);
  const iconNode = [
    ["path", { "d": "M3 3v16a2 2 0 0 0 2 2h16" }],
    ["path", { "d": "M7 11h8" }],
    ["path", { "d": "M7 16h3" }],
    ["path", { "d": "M7 6h12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-bar-decreasing" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_bar_decreasing, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_bar_decreasing,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_bar_decreasing = hmr(Chart_bar_decreasing, () => Chart_bar_decreasing[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_bar_decreasing[HMR].source;
    set(Chart_bar_decreasing[HMR].source, module.default[HMR].original);
  });
}
var chart_bar_decreasing_default = Chart_bar_decreasing;

// node_modules/lucide-svelte/dist/icons/chart-bar-increasing.svelte
Chart_bar_increasing[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-bar-increasing.svelte";
function Chart_bar_increasing($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_bar_increasing);
  const iconNode = [
    ["path", { "d": "M3 3v16a2 2 0 0 0 2 2h16" }],
    ["path", { "d": "M7 11h8" }],
    ["path", { "d": "M7 16h12" }],
    ["path", { "d": "M7 6h3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-bar-increasing" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_bar_increasing, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_bar_increasing,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_bar_increasing = hmr(Chart_bar_increasing, () => Chart_bar_increasing[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_bar_increasing[HMR].source;
    set(Chart_bar_increasing[HMR].source, module.default[HMR].original);
  });
}
var chart_bar_increasing_default = Chart_bar_increasing;

// node_modules/lucide-svelte/dist/icons/chart-bar-stacked.svelte
Chart_bar_stacked[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-bar-stacked.svelte";
function Chart_bar_stacked($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_bar_stacked);
  const iconNode = [
    ["path", { "d": "M11 13v4" }],
    ["path", { "d": "M15 5v4" }],
    ["path", { "d": "M3 3v16a2 2 0 0 0 2 2h16" }],
    [
      "rect",
      { "x": "7", "y": "13", "width": "9", "height": "4", "rx": "1" }
    ],
    [
      "rect",
      { "x": "7", "y": "5", "width": "12", "height": "4", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-bar-stacked" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_bar_stacked, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_bar_stacked,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_bar_stacked = hmr(Chart_bar_stacked, () => Chart_bar_stacked[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_bar_stacked[HMR].source;
    set(Chart_bar_stacked[HMR].source, module.default[HMR].original);
  });
}
var chart_bar_stacked_default = Chart_bar_stacked;

// node_modules/lucide-svelte/dist/icons/chart-bar.svelte
Chart_bar[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-bar.svelte";
function Chart_bar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_bar);
  const iconNode = [
    ["path", { "d": "M3 3v16a2 2 0 0 0 2 2h16" }],
    ["path", { "d": "M7 16h8" }],
    ["path", { "d": "M7 11h12" }],
    ["path", { "d": "M7 6h3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-bar" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_bar, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_bar,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_bar = hmr(Chart_bar, () => Chart_bar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_bar[HMR].source;
    set(Chart_bar[HMR].source, module.default[HMR].original);
  });
}
var chart_bar_default = Chart_bar;

// node_modules/lucide-svelte/dist/icons/chart-candlestick.svelte
Chart_candlestick[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-candlestick.svelte";
function Chart_candlestick($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_candlestick);
  const iconNode = [
    ["path", { "d": "M9 5v4" }],
    [
      "rect",
      { "width": "4", "height": "6", "x": "7", "y": "9", "rx": "1" }
    ],
    ["path", { "d": "M9 15v2" }],
    ["path", { "d": "M17 3v2" }],
    [
      "rect",
      { "width": "4", "height": "8", "x": "15", "y": "5", "rx": "1" }
    ],
    ["path", { "d": "M17 13v3" }],
    ["path", { "d": "M3 3v16a2 2 0 0 0 2 2h16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-candlestick" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_candlestick, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_candlestick,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_candlestick = hmr(Chart_candlestick, () => Chart_candlestick[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_candlestick[HMR].source;
    set(Chart_candlestick[HMR].source, module.default[HMR].original);
  });
}
var chart_candlestick_default = Chart_candlestick;

// node_modules/lucide-svelte/dist/icons/chart-column-big.svelte
Chart_column_big[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-column-big.svelte";
function Chart_column_big($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_column_big);
  const iconNode = [
    ["path", { "d": "M3 3v16a2 2 0 0 0 2 2h16" }],
    [
      "rect",
      { "x": "15", "y": "5", "width": "4", "height": "12", "rx": "1" }
    ],
    [
      "rect",
      { "x": "7", "y": "8", "width": "4", "height": "9", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-column-big" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_column_big, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_column_big,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_column_big = hmr(Chart_column_big, () => Chart_column_big[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_column_big[HMR].source;
    set(Chart_column_big[HMR].source, module.default[HMR].original);
  });
}
var chart_column_big_default = Chart_column_big;

// node_modules/lucide-svelte/dist/icons/chart-column-decreasing.svelte
Chart_column_decreasing[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-column-decreasing.svelte";
function Chart_column_decreasing($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_column_decreasing);
  const iconNode = [
    ["path", { "d": "M13 17V9" }],
    ["path", { "d": "M18 17v-3" }],
    ["path", { "d": "M3 3v16a2 2 0 0 0 2 2h16" }],
    ["path", { "d": "M8 17V5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-column-decreasing" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_column_decreasing, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_column_decreasing,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_column_decreasing = hmr(Chart_column_decreasing, () => Chart_column_decreasing[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_column_decreasing[HMR].source;
    set(Chart_column_decreasing[HMR].source, module.default[HMR].original);
  });
}
var chart_column_decreasing_default = Chart_column_decreasing;

// node_modules/lucide-svelte/dist/icons/chart-column-increasing.svelte
Chart_column_increasing[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-column-increasing.svelte";
function Chart_column_increasing($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_column_increasing);
  const iconNode = [
    ["path", { "d": "M13 17V9" }],
    ["path", { "d": "M18 17V5" }],
    ["path", { "d": "M3 3v16a2 2 0 0 0 2 2h16" }],
    ["path", { "d": "M8 17v-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-column-increasing" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_column_increasing, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_column_increasing,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_column_increasing = hmr(Chart_column_increasing, () => Chart_column_increasing[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_column_increasing[HMR].source;
    set(Chart_column_increasing[HMR].source, module.default[HMR].original);
  });
}
var chart_column_increasing_default = Chart_column_increasing;

// node_modules/lucide-svelte/dist/icons/chart-column-stacked.svelte
Chart_column_stacked[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-column-stacked.svelte";
function Chart_column_stacked($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_column_stacked);
  const iconNode = [
    ["path", { "d": "M11 13H7" }],
    ["path", { "d": "M19 9h-4" }],
    ["path", { "d": "M3 3v16a2 2 0 0 0 2 2h16" }],
    [
      "rect",
      { "x": "15", "y": "5", "width": "4", "height": "12", "rx": "1" }
    ],
    [
      "rect",
      { "x": "7", "y": "8", "width": "4", "height": "9", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-column-stacked" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_column_stacked, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_column_stacked,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_column_stacked = hmr(Chart_column_stacked, () => Chart_column_stacked[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_column_stacked[HMR].source;
    set(Chart_column_stacked[HMR].source, module.default[HMR].original);
  });
}
var chart_column_stacked_default = Chart_column_stacked;

// node_modules/lucide-svelte/dist/icons/chart-column.svelte
Chart_column[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-column.svelte";
function Chart_column($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_column);
  const iconNode = [
    ["path", { "d": "M3 3v16a2 2 0 0 0 2 2h16" }],
    ["path", { "d": "M18 17V9" }],
    ["path", { "d": "M13 17V5" }],
    ["path", { "d": "M8 17v-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-column" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_column, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_column,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_column = hmr(Chart_column, () => Chart_column[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_column[HMR].source;
    set(Chart_column[HMR].source, module.default[HMR].original);
  });
}
var chart_column_default = Chart_column;

// node_modules/lucide-svelte/dist/icons/chart-gantt.svelte
Chart_gantt[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-gantt.svelte";
function Chart_gantt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_gantt);
  const iconNode = [
    ["path", { "d": "M10 6h8" }],
    ["path", { "d": "M12 16h6" }],
    ["path", { "d": "M3 3v16a2 2 0 0 0 2 2h16" }],
    ["path", { "d": "M8 11h7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-gantt" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_gantt, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_gantt,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_gantt = hmr(Chart_gantt, () => Chart_gantt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_gantt[HMR].source;
    set(Chart_gantt[HMR].source, module.default[HMR].original);
  });
}
var chart_gantt_default = Chart_gantt;

// node_modules/lucide-svelte/dist/icons/chart-network.svelte
Chart_network[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-network.svelte";
function Chart_network($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_network);
  const iconNode = [
    ["path", { "d": "m13.11 7.664 1.78 2.672" }],
    ["path", { "d": "m14.162 12.788-3.324 1.424" }],
    ["path", { "d": "m20 4-6.06 1.515" }],
    ["path", { "d": "M3 3v16a2 2 0 0 0 2 2h16" }],
    ["circle", { "cx": "12", "cy": "6", "r": "2" }],
    ["circle", { "cx": "16", "cy": "12", "r": "2" }],
    ["circle", { "cx": "9", "cy": "15", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-network" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_network, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_network,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_network = hmr(Chart_network, () => Chart_network[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_network[HMR].source;
    set(Chart_network[HMR].source, module.default[HMR].original);
  });
}
var chart_network_default = Chart_network;

// node_modules/lucide-svelte/dist/icons/chart-line.svelte
Chart_line[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-line.svelte";
function Chart_line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_line);
  const iconNode = [
    ["path", { "d": "M3 3v16a2 2 0 0 0 2 2h16" }],
    ["path", { "d": "m19 9-5 5-4-4-3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-line" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_line, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_line,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_line = hmr(Chart_line, () => Chart_line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_line[HMR].source;
    set(Chart_line[HMR].source, module.default[HMR].original);
  });
}
var chart_line_default = Chart_line;

// node_modules/lucide-svelte/dist/icons/chart-no-axes-column-decreasing.svelte
Chart_no_axes_column_decreasing[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-no-axes-column-decreasing.svelte";
function Chart_no_axes_column_decreasing($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_no_axes_column_decreasing);
  const iconNode = [
    ["path", { "d": "M12 20V10" }],
    ["path", { "d": "M18 20v-4" }],
    ["path", { "d": "M6 20V4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-no-axes-column-decreasing" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_no_axes_column_decreasing, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_no_axes_column_decreasing,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_no_axes_column_decreasing = hmr(Chart_no_axes_column_decreasing, () => Chart_no_axes_column_decreasing[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_no_axes_column_decreasing[HMR].source;
    set(Chart_no_axes_column_decreasing[HMR].source, module.default[HMR].original);
  });
}
var chart_no_axes_column_decreasing_default = Chart_no_axes_column_decreasing;

// node_modules/lucide-svelte/dist/icons/chart-no-axes-column-increasing.svelte
Chart_no_axes_column_increasing[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-no-axes-column-increasing.svelte";
function Chart_no_axes_column_increasing($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_no_axes_column_increasing);
  const iconNode = [
    ["line", { "x1": "12", "x2": "12", "y1": "20", "y2": "10" }],
    ["line", { "x1": "18", "x2": "18", "y1": "20", "y2": "4" }],
    ["line", { "x1": "6", "x2": "6", "y1": "20", "y2": "16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-no-axes-column-increasing" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_no_axes_column_increasing, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_no_axes_column_increasing,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_no_axes_column_increasing = hmr(Chart_no_axes_column_increasing, () => Chart_no_axes_column_increasing[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_no_axes_column_increasing[HMR].source;
    set(Chart_no_axes_column_increasing[HMR].source, module.default[HMR].original);
  });
}
var chart_no_axes_column_increasing_default = Chart_no_axes_column_increasing;

// node_modules/lucide-svelte/dist/icons/chart-no-axes-column.svelte
Chart_no_axes_column[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-no-axes-column.svelte";
function Chart_no_axes_column($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_no_axes_column);
  const iconNode = [
    ["line", { "x1": "18", "x2": "18", "y1": "20", "y2": "10" }],
    ["line", { "x1": "12", "x2": "12", "y1": "20", "y2": "4" }],
    ["line", { "x1": "6", "x2": "6", "y1": "20", "y2": "14" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-no-axes-column" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_no_axes_column, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_no_axes_column,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_no_axes_column = hmr(Chart_no_axes_column, () => Chart_no_axes_column[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_no_axes_column[HMR].source;
    set(Chart_no_axes_column[HMR].source, module.default[HMR].original);
  });
}
var chart_no_axes_column_default = Chart_no_axes_column;

// node_modules/lucide-svelte/dist/icons/chart-no-axes-combined.svelte
Chart_no_axes_combined[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-no-axes-combined.svelte";
function Chart_no_axes_combined($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_no_axes_combined);
  const iconNode = [
    ["path", { "d": "M12 16v5" }],
    ["path", { "d": "M16 14v7" }],
    ["path", { "d": "M20 10v11" }],
    [
      "path",
      {
        "d": "m22 3-8.646 8.646a.5.5 0 0 1-.708 0L9.354 8.354a.5.5 0 0 0-.707 0L2 15"
      }
    ],
    ["path", { "d": "M4 18v3" }],
    ["path", { "d": "M8 14v7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-no-axes-combined" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_no_axes_combined, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_no_axes_combined,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_no_axes_combined = hmr(Chart_no_axes_combined, () => Chart_no_axes_combined[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_no_axes_combined[HMR].source;
    set(Chart_no_axes_combined[HMR].source, module.default[HMR].original);
  });
}
var chart_no_axes_combined_default = Chart_no_axes_combined;

// node_modules/lucide-svelte/dist/icons/chart-no-axes-gantt.svelte
Chart_no_axes_gantt[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-no-axes-gantt.svelte";
function Chart_no_axes_gantt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_no_axes_gantt);
  const iconNode = [
    ["path", { "d": "M8 6h10" }],
    ["path", { "d": "M6 12h9" }],
    ["path", { "d": "M11 18h7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-no-axes-gantt" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_no_axes_gantt, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_no_axes_gantt,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_no_axes_gantt = hmr(Chart_no_axes_gantt, () => Chart_no_axes_gantt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_no_axes_gantt[HMR].source;
    set(Chart_no_axes_gantt[HMR].source, module.default[HMR].original);
  });
}
var chart_no_axes_gantt_default = Chart_no_axes_gantt;

// node_modules/lucide-svelte/dist/icons/chart-pie.svelte
Chart_pie[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-pie.svelte";
function Chart_pie($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_pie);
  const iconNode = [
    [
      "path",
      {
        "d": "M21 12c.552 0 1.005-.449.95-.998a10 10 0 0 0-8.953-8.951c-.55-.055-.998.398-.998.95v8a1 1 0 0 0 1 1z"
      }
    ],
    ["path", { "d": "M21.21 15.89A10 10 0 1 1 8 2.83" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-pie" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_pie, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_pie,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_pie = hmr(Chart_pie, () => Chart_pie[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_pie[HMR].source;
    set(Chart_pie[HMR].source, module.default[HMR].original);
  });
}
var chart_pie_default = Chart_pie;

// node_modules/lucide-svelte/dist/icons/chart-scatter.svelte
Chart_scatter[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-scatter.svelte";
function Chart_scatter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_scatter);
  const iconNode = [
    [
      "circle",
      { "cx": "7.5", "cy": "7.5", "r": ".5", "fill": "currentColor" }
    ],
    [
      "circle",
      { "cx": "18.5", "cy": "5.5", "r": ".5", "fill": "currentColor" }
    ],
    [
      "circle",
      {
        "cx": "11.5",
        "cy": "11.5",
        "r": ".5",
        "fill": "currentColor"
      }
    ],
    [
      "circle",
      { "cx": "7.5", "cy": "16.5", "r": ".5", "fill": "currentColor" }
    ],
    [
      "circle",
      {
        "cx": "17.5",
        "cy": "14.5",
        "r": ".5",
        "fill": "currentColor"
      }
    ],
    ["path", { "d": "M3 3v16a2 2 0 0 0 2 2h16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-scatter" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_scatter, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_scatter,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_scatter = hmr(Chart_scatter, () => Chart_scatter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_scatter[HMR].source;
    set(Chart_scatter[HMR].source, module.default[HMR].original);
  });
}
var chart_scatter_default = Chart_scatter;

// node_modules/lucide-svelte/dist/icons/chart-spline.svelte
Chart_spline[FILENAME] = "node_modules/lucide-svelte/dist/icons/chart-spline.svelte";
function Chart_spline($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chart_spline);
  const iconNode = [
    ["path", { "d": "M3 3v16a2 2 0 0 0 2 2h16" }],
    [
      "path",
      { "d": "M7 16c.5-2 1.5-7 4-7 2 0 2 3 4 3 2.5 0 4.5-5 5-7" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chart-spline" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chart_spline, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chart_spline,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chart_spline = hmr(Chart_spline, () => Chart_spline[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chart_spline[HMR].source;
    set(Chart_spline[HMR].source, module.default[HMR].original);
  });
}
var chart_spline_default = Chart_spline;

// node_modules/lucide-svelte/dist/icons/check-check.svelte
Check_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/check-check.svelte";
function Check_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Check_check);
  const iconNode = [
    ["path", { "d": "M18 6 7 17l-5-5" }],
    ["path", { "d": "m22 10-7.5 7.5L13 16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "check-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Check_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Check_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Check_check = hmr(Check_check, () => Check_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Check_check[HMR].source;
    set(Check_check[HMR].source, module.default[HMR].original);
  });
}
var check_check_default = Check_check;

// node_modules/lucide-svelte/dist/icons/check-line.svelte
Check_line[FILENAME] = "node_modules/lucide-svelte/dist/icons/check-line.svelte";
function Check_line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Check_line);
  const iconNode = [
    ["path", { "d": "M20 4L9 15" }],
    ["path", { "d": "M21 19L3 19" }],
    ["path", { "d": "M9 15L4 10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "check-line" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Check_line, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Check_line,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Check_line = hmr(Check_line, () => Check_line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Check_line[HMR].source;
    set(Check_line[HMR].source, module.default[HMR].original);
  });
}
var check_line_default = Check_line;

// node_modules/lucide-svelte/dist/icons/check.svelte
Check[FILENAME] = "node_modules/lucide-svelte/dist/icons/check.svelte";
function Check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Check);
  const iconNode = [["path", { "d": "M20 6 9 17l-5-5" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Check = hmr(Check, () => Check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Check[HMR].source;
    set(Check[HMR].source, module.default[HMR].original);
  });
}
var check_default = Check;

// node_modules/lucide-svelte/dist/icons/chef-hat.svelte
Chef_hat[FILENAME] = "node_modules/lucide-svelte/dist/icons/chef-hat.svelte";
function Chef_hat($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chef_hat);
  const iconNode = [
    [
      "path",
      {
        "d": "M17 21a1 1 0 0 0 1-1v-5.35c0-.457.316-.844.727-1.041a4 4 0 0 0-2.134-7.589 5 5 0 0 0-9.186 0 4 4 0 0 0-2.134 7.588c.411.198.727.585.727 1.041V20a1 1 0 0 0 1 1Z"
      }
    ],
    ["path", { "d": "M6 17h12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chef-hat" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chef_hat, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chef_hat,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chef_hat = hmr(Chef_hat, () => Chef_hat[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chef_hat[HMR].source;
    set(Chef_hat[HMR].source, module.default[HMR].original);
  });
}
var chef_hat_default = Chef_hat;

// node_modules/lucide-svelte/dist/icons/cherry.svelte
Cherry[FILENAME] = "node_modules/lucide-svelte/dist/icons/cherry.svelte";
function Cherry($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cherry);
  const iconNode = [
    [
      "path",
      {
        "d": "M2 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z"
      }
    ],
    [
      "path",
      {
        "d": "M12 17a5 5 0 0 0 10 0c0-2.76-2.5-5-5-3-2.5-2-5 .24-5 3Z"
      }
    ],
    [
      "path",
      { "d": "M7 14c3.22-2.91 4.29-8.75 5-12 1.66 2.38 4.94 9 5 12" }
    ],
    [
      "path",
      { "d": "M22 9c-4.29 0-7.14-2.33-10-7 5.71 0 10 4.67 10 7Z" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cherry" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cherry, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cherry,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cherry = hmr(Cherry, () => Cherry[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cherry[HMR].source;
    set(Cherry[HMR].source, module.default[HMR].original);
  });
}
var cherry_default = Cherry;

// node_modules/lucide-svelte/dist/icons/chevron-down.svelte
Chevron_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/chevron-down.svelte";
function Chevron_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chevron_down);
  const iconNode = [["path", { "d": "m6 9 6 6 6-6" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chevron-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chevron_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chevron_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chevron_down = hmr(Chevron_down, () => Chevron_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chevron_down[HMR].source;
    set(Chevron_down[HMR].source, module.default[HMR].original);
  });
}
var chevron_down_default = Chevron_down;

// node_modules/lucide-svelte/dist/icons/chevron-first.svelte
Chevron_first[FILENAME] = "node_modules/lucide-svelte/dist/icons/chevron-first.svelte";
function Chevron_first($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chevron_first);
  const iconNode = [
    ["path", { "d": "m17 18-6-6 6-6" }],
    ["path", { "d": "M7 6v12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chevron-first" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chevron_first, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chevron_first,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chevron_first = hmr(Chevron_first, () => Chevron_first[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chevron_first[HMR].source;
    set(Chevron_first[HMR].source, module.default[HMR].original);
  });
}
var chevron_first_default = Chevron_first;

// node_modules/lucide-svelte/dist/icons/chevron-last.svelte
Chevron_last[FILENAME] = "node_modules/lucide-svelte/dist/icons/chevron-last.svelte";
function Chevron_last($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chevron_last);
  const iconNode = [
    ["path", { "d": "m7 18 6-6-6-6" }],
    ["path", { "d": "M17 6v12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chevron-last" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chevron_last, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chevron_last,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chevron_last = hmr(Chevron_last, () => Chevron_last[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chevron_last[HMR].source;
    set(Chevron_last[HMR].source, module.default[HMR].original);
  });
}
var chevron_last_default = Chevron_last;

// node_modules/lucide-svelte/dist/icons/chevron-left.svelte
Chevron_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/chevron-left.svelte";
function Chevron_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chevron_left);
  const iconNode = [["path", { "d": "m15 18-6-6 6-6" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chevron-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chevron_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chevron_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chevron_left = hmr(Chevron_left, () => Chevron_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chevron_left[HMR].source;
    set(Chevron_left[HMR].source, module.default[HMR].original);
  });
}
var chevron_left_default = Chevron_left;

// node_modules/lucide-svelte/dist/icons/chevron-right.svelte
Chevron_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/chevron-right.svelte";
function Chevron_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chevron_right);
  const iconNode = [["path", { "d": "m9 18 6-6-6-6" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chevron-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chevron_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chevron_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chevron_right = hmr(Chevron_right, () => Chevron_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chevron_right[HMR].source;
    set(Chevron_right[HMR].source, module.default[HMR].original);
  });
}
var chevron_right_default = Chevron_right;

// node_modules/lucide-svelte/dist/icons/chevron-up.svelte
Chevron_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/chevron-up.svelte";
function Chevron_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chevron_up);
  const iconNode = [["path", { "d": "m18 15-6-6-6 6" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chevron-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chevron_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chevron_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chevron_up = hmr(Chevron_up, () => Chevron_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chevron_up[HMR].source;
    set(Chevron_up[HMR].source, module.default[HMR].original);
  });
}
var chevron_up_default = Chevron_up;

// node_modules/lucide-svelte/dist/icons/chevrons-down-up.svelte
Chevrons_down_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/chevrons-down-up.svelte";
function Chevrons_down_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chevrons_down_up);
  const iconNode = [
    ["path", { "d": "m7 20 5-5 5 5" }],
    ["path", { "d": "m7 4 5 5 5-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chevrons-down-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chevrons_down_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chevrons_down_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chevrons_down_up = hmr(Chevrons_down_up, () => Chevrons_down_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chevrons_down_up[HMR].source;
    set(Chevrons_down_up[HMR].source, module.default[HMR].original);
  });
}
var chevrons_down_up_default = Chevrons_down_up;

// node_modules/lucide-svelte/dist/icons/chevrons-down.svelte
Chevrons_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/chevrons-down.svelte";
function Chevrons_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chevrons_down);
  const iconNode = [
    ["path", { "d": "m7 6 5 5 5-5" }],
    ["path", { "d": "m7 13 5 5 5-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chevrons-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chevrons_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chevrons_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chevrons_down = hmr(Chevrons_down, () => Chevrons_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chevrons_down[HMR].source;
    set(Chevrons_down[HMR].source, module.default[HMR].original);
  });
}
var chevrons_down_default = Chevrons_down;

// node_modules/lucide-svelte/dist/icons/chevrons-left-right-ellipsis.svelte
Chevrons_left_right_ellipsis[FILENAME] = "node_modules/lucide-svelte/dist/icons/chevrons-left-right-ellipsis.svelte";
function Chevrons_left_right_ellipsis($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chevrons_left_right_ellipsis);
  const iconNode = [
    ["path", { "d": "M12 12h.01" }],
    ["path", { "d": "M16 12h.01" }],
    ["path", { "d": "m17 7 5 5-5 5" }],
    ["path", { "d": "m7 7-5 5 5 5" }],
    ["path", { "d": "M8 12h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chevrons-left-right-ellipsis" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chevrons_left_right_ellipsis, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chevrons_left_right_ellipsis,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chevrons_left_right_ellipsis = hmr(Chevrons_left_right_ellipsis, () => Chevrons_left_right_ellipsis[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chevrons_left_right_ellipsis[HMR].source;
    set(Chevrons_left_right_ellipsis[HMR].source, module.default[HMR].original);
  });
}
var chevrons_left_right_ellipsis_default = Chevrons_left_right_ellipsis;

// node_modules/lucide-svelte/dist/icons/chevrons-left-right.svelte
Chevrons_left_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/chevrons-left-right.svelte";
function Chevrons_left_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chevrons_left_right);
  const iconNode = [
    ["path", { "d": "m9 7-5 5 5 5" }],
    ["path", { "d": "m15 7 5 5-5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chevrons-left-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chevrons_left_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chevrons_left_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chevrons_left_right = hmr(Chevrons_left_right, () => Chevrons_left_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chevrons_left_right[HMR].source;
    set(Chevrons_left_right[HMR].source, module.default[HMR].original);
  });
}
var chevrons_left_right_default = Chevrons_left_right;

// node_modules/lucide-svelte/dist/icons/chevrons-left.svelte
Chevrons_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/chevrons-left.svelte";
function Chevrons_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chevrons_left);
  const iconNode = [
    ["path", { "d": "m11 17-5-5 5-5" }],
    ["path", { "d": "m18 17-5-5 5-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chevrons-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chevrons_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chevrons_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chevrons_left = hmr(Chevrons_left, () => Chevrons_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chevrons_left[HMR].source;
    set(Chevrons_left[HMR].source, module.default[HMR].original);
  });
}
var chevrons_left_default = Chevrons_left;

// node_modules/lucide-svelte/dist/icons/chevrons-right-left.svelte
Chevrons_right_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/chevrons-right-left.svelte";
function Chevrons_right_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chevrons_right_left);
  const iconNode = [
    ["path", { "d": "m20 17-5-5 5-5" }],
    ["path", { "d": "m4 17 5-5-5-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chevrons-right-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chevrons_right_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chevrons_right_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chevrons_right_left = hmr(Chevrons_right_left, () => Chevrons_right_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chevrons_right_left[HMR].source;
    set(Chevrons_right_left[HMR].source, module.default[HMR].original);
  });
}
var chevrons_right_left_default = Chevrons_right_left;

// node_modules/lucide-svelte/dist/icons/chevrons-right.svelte
Chevrons_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/chevrons-right.svelte";
function Chevrons_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chevrons_right);
  const iconNode = [
    ["path", { "d": "m6 17 5-5-5-5" }],
    ["path", { "d": "m13 17 5-5-5-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chevrons-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chevrons_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chevrons_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chevrons_right = hmr(Chevrons_right, () => Chevrons_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chevrons_right[HMR].source;
    set(Chevrons_right[HMR].source, module.default[HMR].original);
  });
}
var chevrons_right_default = Chevrons_right;

// node_modules/lucide-svelte/dist/icons/chevrons-up-down.svelte
Chevrons_up_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/chevrons-up-down.svelte";
function Chevrons_up_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chevrons_up_down);
  const iconNode = [
    ["path", { "d": "m7 15 5 5 5-5" }],
    ["path", { "d": "m7 9 5-5 5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chevrons-up-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chevrons_up_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chevrons_up_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chevrons_up_down = hmr(Chevrons_up_down, () => Chevrons_up_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chevrons_up_down[HMR].source;
    set(Chevrons_up_down[HMR].source, module.default[HMR].original);
  });
}
var chevrons_up_down_default = Chevrons_up_down;

// node_modules/lucide-svelte/dist/icons/chevrons-up.svelte
Chevrons_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/chevrons-up.svelte";
function Chevrons_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chevrons_up);
  const iconNode = [
    ["path", { "d": "m17 11-5-5-5 5" }],
    ["path", { "d": "m17 18-5-5-5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chevrons-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chevrons_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chevrons_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chevrons_up = hmr(Chevrons_up, () => Chevrons_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chevrons_up[HMR].source;
    set(Chevrons_up[HMR].source, module.default[HMR].original);
  });
}
var chevrons_up_default = Chevrons_up;

// node_modules/lucide-svelte/dist/icons/chrome.svelte
Chrome[FILENAME] = "node_modules/lucide-svelte/dist/icons/chrome.svelte";
function Chrome($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Chrome);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["circle", { "cx": "12", "cy": "12", "r": "4" }],
    ["line", { "x1": "21.17", "x2": "12", "y1": "8", "y2": "8" }],
    [
      "line",
      { "x1": "3.95", "x2": "8.54", "y1": "6.06", "y2": "14" }
    ],
    [
      "line",
      { "x1": "10.88", "x2": "15.46", "y1": "21.94", "y2": "14" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "chrome" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Chrome, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Chrome,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Chrome = hmr(Chrome, () => Chrome[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Chrome[HMR].source;
    set(Chrome[HMR].source, module.default[HMR].original);
  });
}
var chrome_default = Chrome;

// node_modules/lucide-svelte/dist/icons/church.svelte
Church[FILENAME] = "node_modules/lucide-svelte/dist/icons/church.svelte";
function Church($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Church);
  const iconNode = [
    ["path", { "d": "M10 9h4" }],
    ["path", { "d": "M12 7v5" }],
    ["path", { "d": "M14 22v-4a2 2 0 0 0-4 0v4" }],
    [
      "path",
      {
        "d": "M18 22V5.618a1 1 0 0 0-.553-.894l-4.553-2.277a2 2 0 0 0-1.788 0L6.553 4.724A1 1 0 0 0 6 5.618V22"
      }
    ],
    [
      "path",
      {
        "d": "m18 7 3.447 1.724a1 1 0 0 1 .553.894V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9.618a1 1 0 0 1 .553-.894L6 7"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "church" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Church, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Church,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Church = hmr(Church, () => Church[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Church[HMR].source;
    set(Church[HMR].source, module.default[HMR].original);
  });
}
var church_default = Church;

// node_modules/lucide-svelte/dist/icons/cigarette-off.svelte
Cigarette_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/cigarette-off.svelte";
function Cigarette_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cigarette_off);
  const iconNode = [
    ["path", { "d": "M12 12H3a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h13" }],
    ["path", { "d": "M18 8c0-2.5-2-2.5-2-5" }],
    ["path", { "d": "m2 2 20 20" }],
    ["path", { "d": "M21 12a1 1 0 0 1 1 1v2a1 1 0 0 1-.5.866" }],
    ["path", { "d": "M22 8c0-2.5-2-2.5-2-5" }],
    ["path", { "d": "M7 12v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cigarette-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cigarette_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cigarette_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cigarette_off = hmr(Cigarette_off, () => Cigarette_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cigarette_off[HMR].source;
    set(Cigarette_off[HMR].source, module.default[HMR].original);
  });
}
var cigarette_off_default = Cigarette_off;

// node_modules/lucide-svelte/dist/icons/cigarette.svelte
Cigarette[FILENAME] = "node_modules/lucide-svelte/dist/icons/cigarette.svelte";
function Cigarette($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cigarette);
  const iconNode = [
    ["path", { "d": "M17 12H3a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h14" }],
    ["path", { "d": "M18 8c0-2.5-2-2.5-2-5" }],
    ["path", { "d": "M21 16a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1" }],
    ["path", { "d": "M22 8c0-2.5-2-2.5-2-5" }],
    ["path", { "d": "M7 12v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cigarette" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cigarette, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cigarette,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cigarette = hmr(Cigarette, () => Cigarette[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cigarette[HMR].source;
    set(Cigarette[HMR].source, module.default[HMR].original);
  });
}
var cigarette_default = Cigarette;

// node_modules/lucide-svelte/dist/icons/circle-alert.svelte
Circle_alert[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-alert.svelte";
function Circle_alert($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_alert);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["line", { "x1": "12", "x2": "12", "y1": "8", "y2": "12" }],
    [
      "line",
      { "x1": "12", "x2": "12.01", "y1": "16", "y2": "16" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-alert" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_alert, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_alert,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_alert = hmr(Circle_alert, () => Circle_alert[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_alert[HMR].source;
    set(Circle_alert[HMR].source, module.default[HMR].original);
  });
}
var circle_alert_default = Circle_alert;

// node_modules/lucide-svelte/dist/icons/circle-arrow-down.svelte
Circle_arrow_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-arrow-down.svelte";
function Circle_arrow_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_arrow_down);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M12 8v8" }],
    ["path", { "d": "m8 12 4 4 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-arrow-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_arrow_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_arrow_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_arrow_down = hmr(Circle_arrow_down, () => Circle_arrow_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_arrow_down[HMR].source;
    set(Circle_arrow_down[HMR].source, module.default[HMR].original);
  });
}
var circle_arrow_down_default = Circle_arrow_down;

// node_modules/lucide-svelte/dist/icons/circle-arrow-left.svelte
Circle_arrow_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-arrow-left.svelte";
function Circle_arrow_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_arrow_left);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "m12 8-4 4 4 4" }],
    ["path", { "d": "M16 12H8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-arrow-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_arrow_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_arrow_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_arrow_left = hmr(Circle_arrow_left, () => Circle_arrow_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_arrow_left[HMR].source;
    set(Circle_arrow_left[HMR].source, module.default[HMR].original);
  });
}
var circle_arrow_left_default = Circle_arrow_left;

// node_modules/lucide-svelte/dist/icons/circle-arrow-out-down-left.svelte
Circle_arrow_out_down_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-arrow-out-down-left.svelte";
function Circle_arrow_out_down_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_arrow_out_down_left);
  const iconNode = [
    ["path", { "d": "M2 12a10 10 0 1 1 10 10" }],
    ["path", { "d": "m2 22 10-10" }],
    ["path", { "d": "M8 22H2v-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-arrow-out-down-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_arrow_out_down_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_arrow_out_down_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_arrow_out_down_left = hmr(Circle_arrow_out_down_left, () => Circle_arrow_out_down_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_arrow_out_down_left[HMR].source;
    set(Circle_arrow_out_down_left[HMR].source, module.default[HMR].original);
  });
}
var circle_arrow_out_down_left_default = Circle_arrow_out_down_left;

// node_modules/lucide-svelte/dist/icons/circle-arrow-out-down-right.svelte
Circle_arrow_out_down_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-arrow-out-down-right.svelte";
function Circle_arrow_out_down_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_arrow_out_down_right);
  const iconNode = [
    ["path", { "d": "M12 22a10 10 0 1 1 10-10" }],
    ["path", { "d": "M22 22 12 12" }],
    ["path", { "d": "M22 16v6h-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-arrow-out-down-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_arrow_out_down_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_arrow_out_down_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_arrow_out_down_right = hmr(Circle_arrow_out_down_right, () => Circle_arrow_out_down_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_arrow_out_down_right[HMR].source;
    set(Circle_arrow_out_down_right[HMR].source, module.default[HMR].original);
  });
}
var circle_arrow_out_down_right_default = Circle_arrow_out_down_right;

// node_modules/lucide-svelte/dist/icons/circle-arrow-out-up-right.svelte
Circle_arrow_out_up_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-arrow-out-up-right.svelte";
function Circle_arrow_out_up_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_arrow_out_up_right);
  const iconNode = [
    ["path", { "d": "M22 12A10 10 0 1 1 12 2" }],
    ["path", { "d": "M22 2 12 12" }],
    ["path", { "d": "M16 2h6v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-arrow-out-up-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_arrow_out_up_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_arrow_out_up_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_arrow_out_up_right = hmr(Circle_arrow_out_up_right, () => Circle_arrow_out_up_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_arrow_out_up_right[HMR].source;
    set(Circle_arrow_out_up_right[HMR].source, module.default[HMR].original);
  });
}
var circle_arrow_out_up_right_default = Circle_arrow_out_up_right;

// node_modules/lucide-svelte/dist/icons/circle-arrow-out-up-left.svelte
Circle_arrow_out_up_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-arrow-out-up-left.svelte";
function Circle_arrow_out_up_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_arrow_out_up_left);
  const iconNode = [
    ["path", { "d": "M2 8V2h6" }],
    ["path", { "d": "m2 2 10 10" }],
    ["path", { "d": "M12 2A10 10 0 1 1 2 12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-arrow-out-up-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_arrow_out_up_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_arrow_out_up_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_arrow_out_up_left = hmr(Circle_arrow_out_up_left, () => Circle_arrow_out_up_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_arrow_out_up_left[HMR].source;
    set(Circle_arrow_out_up_left[HMR].source, module.default[HMR].original);
  });
}
var circle_arrow_out_up_left_default = Circle_arrow_out_up_left;

// node_modules/lucide-svelte/dist/icons/circle-arrow-right.svelte
Circle_arrow_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-arrow-right.svelte";
function Circle_arrow_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_arrow_right);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "m12 16 4-4-4-4" }],
    ["path", { "d": "M8 12h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-arrow-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_arrow_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_arrow_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_arrow_right = hmr(Circle_arrow_right, () => Circle_arrow_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_arrow_right[HMR].source;
    set(Circle_arrow_right[HMR].source, module.default[HMR].original);
  });
}
var circle_arrow_right_default = Circle_arrow_right;

// node_modules/lucide-svelte/dist/icons/circle-arrow-up.svelte
Circle_arrow_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-arrow-up.svelte";
function Circle_arrow_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_arrow_up);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "m16 12-4-4-4 4" }],
    ["path", { "d": "M12 16V8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-arrow-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_arrow_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_arrow_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_arrow_up = hmr(Circle_arrow_up, () => Circle_arrow_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_arrow_up[HMR].source;
    set(Circle_arrow_up[HMR].source, module.default[HMR].original);
  });
}
var circle_arrow_up_default = Circle_arrow_up;

// node_modules/lucide-svelte/dist/icons/circle-check-big.svelte
Circle_check_big[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-check-big.svelte";
function Circle_check_big($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_check_big);
  const iconNode = [
    ["path", { "d": "M21.801 10A10 10 0 1 1 17 3.335" }],
    ["path", { "d": "m9 11 3 3L22 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-check-big" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_check_big, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_check_big,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_check_big = hmr(Circle_check_big, () => Circle_check_big[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_check_big[HMR].source;
    set(Circle_check_big[HMR].source, module.default[HMR].original);
  });
}
var circle_check_big_default = Circle_check_big;

// node_modules/lucide-svelte/dist/icons/circle-check.svelte
Circle_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-check.svelte";
function Circle_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_check);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "m9 12 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_check = hmr(Circle_check, () => Circle_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_check[HMR].source;
    set(Circle_check[HMR].source, module.default[HMR].original);
  });
}
var circle_check_default = Circle_check;

// node_modules/lucide-svelte/dist/icons/circle-chevron-down.svelte
Circle_chevron_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-chevron-down.svelte";
function Circle_chevron_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_chevron_down);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "m16 10-4 4-4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-chevron-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_chevron_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_chevron_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_chevron_down = hmr(Circle_chevron_down, () => Circle_chevron_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_chevron_down[HMR].source;
    set(Circle_chevron_down[HMR].source, module.default[HMR].original);
  });
}
var circle_chevron_down_default = Circle_chevron_down;

// node_modules/lucide-svelte/dist/icons/circle-chevron-left.svelte
Circle_chevron_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-chevron-left.svelte";
function Circle_chevron_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_chevron_left);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "m14 16-4-4 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-chevron-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_chevron_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_chevron_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_chevron_left = hmr(Circle_chevron_left, () => Circle_chevron_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_chevron_left[HMR].source;
    set(Circle_chevron_left[HMR].source, module.default[HMR].original);
  });
}
var circle_chevron_left_default = Circle_chevron_left;

// node_modules/lucide-svelte/dist/icons/circle-chevron-right.svelte
Circle_chevron_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-chevron-right.svelte";
function Circle_chevron_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_chevron_right);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "m10 8 4 4-4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-chevron-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_chevron_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_chevron_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_chevron_right = hmr(Circle_chevron_right, () => Circle_chevron_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_chevron_right[HMR].source;
    set(Circle_chevron_right[HMR].source, module.default[HMR].original);
  });
}
var circle_chevron_right_default = Circle_chevron_right;

// node_modules/lucide-svelte/dist/icons/circle-chevron-up.svelte
Circle_chevron_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-chevron-up.svelte";
function Circle_chevron_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_chevron_up);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "m8 14 4-4 4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-chevron-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_chevron_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_chevron_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_chevron_up = hmr(Circle_chevron_up, () => Circle_chevron_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_chevron_up[HMR].source;
    set(Circle_chevron_up[HMR].source, module.default[HMR].original);
  });
}
var circle_chevron_up_default = Circle_chevron_up;

// node_modules/lucide-svelte/dist/icons/circle-dashed.svelte
Circle_dashed[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-dashed.svelte";
function Circle_dashed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_dashed);
  const iconNode = [
    ["path", { "d": "M10.1 2.182a10 10 0 0 1 3.8 0" }],
    ["path", { "d": "M13.9 21.818a10 10 0 0 1-3.8 0" }],
    ["path", { "d": "M17.609 3.721a10 10 0 0 1 2.69 2.7" }],
    ["path", { "d": "M2.182 13.9a10 10 0 0 1 0-3.8" }],
    ["path", { "d": "M20.279 17.609a10 10 0 0 1-2.7 2.69" }],
    ["path", { "d": "M21.818 10.1a10 10 0 0 1 0 3.8" }],
    ["path", { "d": "M3.721 6.391a10 10 0 0 1 2.7-2.69" }],
    ["path", { "d": "M6.391 20.279a10 10 0 0 1-2.69-2.7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-dashed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_dashed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_dashed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_dashed = hmr(Circle_dashed, () => Circle_dashed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_dashed[HMR].source;
    set(Circle_dashed[HMR].source, module.default[HMR].original);
  });
}
var circle_dashed_default = Circle_dashed;

// node_modules/lucide-svelte/dist/icons/circle-divide.svelte
Circle_divide[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-divide.svelte";
function Circle_divide($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_divide);
  const iconNode = [
    ["line", { "x1": "8", "x2": "16", "y1": "12", "y2": "12" }],
    ["line", { "x1": "12", "x2": "12", "y1": "16", "y2": "16" }],
    ["line", { "x1": "12", "x2": "12", "y1": "8", "y2": "8" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-divide" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_divide, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_divide,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_divide = hmr(Circle_divide, () => Circle_divide[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_divide[HMR].source;
    set(Circle_divide[HMR].source, module.default[HMR].original);
  });
}
var circle_divide_default = Circle_divide;

// node_modules/lucide-svelte/dist/icons/circle-dollar-sign.svelte
Circle_dollar_sign[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-dollar-sign.svelte";
function Circle_dollar_sign($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_dollar_sign);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8" }],
    ["path", { "d": "M12 18V6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-dollar-sign" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_dollar_sign, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_dollar_sign,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_dollar_sign = hmr(Circle_dollar_sign, () => Circle_dollar_sign[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_dollar_sign[HMR].source;
    set(Circle_dollar_sign[HMR].source, module.default[HMR].original);
  });
}
var circle_dollar_sign_default = Circle_dollar_sign;

// node_modules/lucide-svelte/dist/icons/circle-dot-dashed.svelte
Circle_dot_dashed[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-dot-dashed.svelte";
function Circle_dot_dashed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_dot_dashed);
  const iconNode = [
    ["path", { "d": "M10.1 2.18a9.93 9.93 0 0 1 3.8 0" }],
    ["path", { "d": "M17.6 3.71a9.95 9.95 0 0 1 2.69 2.7" }],
    ["path", { "d": "M21.82 10.1a9.93 9.93 0 0 1 0 3.8" }],
    ["path", { "d": "M20.29 17.6a9.95 9.95 0 0 1-2.7 2.69" }],
    ["path", { "d": "M13.9 21.82a9.94 9.94 0 0 1-3.8 0" }],
    ["path", { "d": "M6.4 20.29a9.95 9.95 0 0 1-2.69-2.7" }],
    ["path", { "d": "M2.18 13.9a9.93 9.93 0 0 1 0-3.8" }],
    ["path", { "d": "M3.71 6.4a9.95 9.95 0 0 1 2.7-2.69" }],
    ["circle", { "cx": "12", "cy": "12", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-dot-dashed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_dot_dashed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_dot_dashed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_dot_dashed = hmr(Circle_dot_dashed, () => Circle_dot_dashed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_dot_dashed[HMR].source;
    set(Circle_dot_dashed[HMR].source, module.default[HMR].original);
  });
}
var circle_dot_dashed_default = Circle_dot_dashed;

// node_modules/lucide-svelte/dist/icons/circle-dot.svelte
Circle_dot[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-dot.svelte";
function Circle_dot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_dot);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["circle", { "cx": "12", "cy": "12", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-dot" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_dot, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_dot,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_dot = hmr(Circle_dot, () => Circle_dot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_dot[HMR].source;
    set(Circle_dot[HMR].source, module.default[HMR].original);
  });
}
var circle_dot_default = Circle_dot;

// node_modules/lucide-svelte/dist/icons/circle-ellipsis.svelte
Circle_ellipsis[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-ellipsis.svelte";
function Circle_ellipsis($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_ellipsis);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M17 12h.01" }],
    ["path", { "d": "M12 12h.01" }],
    ["path", { "d": "M7 12h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-ellipsis" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_ellipsis, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_ellipsis,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_ellipsis = hmr(Circle_ellipsis, () => Circle_ellipsis[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_ellipsis[HMR].source;
    set(Circle_ellipsis[HMR].source, module.default[HMR].original);
  });
}
var circle_ellipsis_default = Circle_ellipsis;

// node_modules/lucide-svelte/dist/icons/circle-equal.svelte
Circle_equal[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-equal.svelte";
function Circle_equal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_equal);
  const iconNode = [
    ["path", { "d": "M7 10h10" }],
    ["path", { "d": "M7 14h10" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-equal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_equal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_equal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_equal = hmr(Circle_equal, () => Circle_equal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_equal[HMR].source;
    set(Circle_equal[HMR].source, module.default[HMR].original);
  });
}
var circle_equal_default = Circle_equal;

// node_modules/lucide-svelte/dist/icons/circle-fading-arrow-up.svelte
Circle_fading_arrow_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-fading-arrow-up.svelte";
function Circle_fading_arrow_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_fading_arrow_up);
  const iconNode = [
    ["path", { "d": "M12 2a10 10 0 0 1 7.38 16.75" }],
    ["path", { "d": "m16 12-4-4-4 4" }],
    ["path", { "d": "M12 16V8" }],
    ["path", { "d": "M2.5 8.875a10 10 0 0 0-.5 3" }],
    ["path", { "d": "M2.83 16a10 10 0 0 0 2.43 3.4" }],
    ["path", { "d": "M4.636 5.235a10 10 0 0 1 .891-.857" }],
    ["path", { "d": "M8.644 21.42a10 10 0 0 0 7.631-.38" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-fading-arrow-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_fading_arrow_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_fading_arrow_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_fading_arrow_up = hmr(Circle_fading_arrow_up, () => Circle_fading_arrow_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_fading_arrow_up[HMR].source;
    set(Circle_fading_arrow_up[HMR].source, module.default[HMR].original);
  });
}
var circle_fading_arrow_up_default = Circle_fading_arrow_up;

// node_modules/lucide-svelte/dist/icons/circle-fading-plus.svelte
Circle_fading_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-fading-plus.svelte";
function Circle_fading_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_fading_plus);
  const iconNode = [
    ["path", { "d": "M12 2a10 10 0 0 1 7.38 16.75" }],
    ["path", { "d": "M12 8v8" }],
    ["path", { "d": "M16 12H8" }],
    ["path", { "d": "M2.5 8.875a10 10 0 0 0-.5 3" }],
    ["path", { "d": "M2.83 16a10 10 0 0 0 2.43 3.4" }],
    ["path", { "d": "M4.636 5.235a10 10 0 0 1 .891-.857" }],
    ["path", { "d": "M8.644 21.42a10 10 0 0 0 7.631-.38" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-fading-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_fading_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_fading_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_fading_plus = hmr(Circle_fading_plus, () => Circle_fading_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_fading_plus[HMR].source;
    set(Circle_fading_plus[HMR].source, module.default[HMR].original);
  });
}
var circle_fading_plus_default = Circle_fading_plus;

// node_modules/lucide-svelte/dist/icons/circle-gauge.svelte
Circle_gauge[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-gauge.svelte";
function Circle_gauge($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_gauge);
  const iconNode = [
    ["path", { "d": "M15.6 2.7a10 10 0 1 0 5.7 5.7" }],
    ["circle", { "cx": "12", "cy": "12", "r": "2" }],
    ["path", { "d": "M13.4 10.6 19 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-gauge" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_gauge, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_gauge,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_gauge = hmr(Circle_gauge, () => Circle_gauge[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_gauge[HMR].source;
    set(Circle_gauge[HMR].source, module.default[HMR].original);
  });
}
var circle_gauge_default = Circle_gauge;

// node_modules/lucide-svelte/dist/icons/circle-minus.svelte
Circle_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-minus.svelte";
function Circle_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_minus);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M8 12h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_minus = hmr(Circle_minus, () => Circle_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_minus[HMR].source;
    set(Circle_minus[HMR].source, module.default[HMR].original);
  });
}
var circle_minus_default = Circle_minus;

// node_modules/lucide-svelte/dist/icons/circle-off.svelte
Circle_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-off.svelte";
function Circle_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_off);
  const iconNode = [
    ["path", { "d": "m2 2 20 20" }],
    ["path", { "d": "M8.35 2.69A10 10 0 0 1 21.3 15.65" }],
    ["path", { "d": "M19.08 19.08A10 10 0 1 1 4.92 4.92" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_off = hmr(Circle_off, () => Circle_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_off[HMR].source;
    set(Circle_off[HMR].source, module.default[HMR].original);
  });
}
var circle_off_default = Circle_off;

// node_modules/lucide-svelte/dist/icons/circle-parking-off.svelte
Circle_parking_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-parking-off.svelte";
function Circle_parking_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_parking_off);
  const iconNode = [
    ["path", { "d": "M12.656 7H13a3 3 0 0 1 2.984 3.307" }],
    ["path", { "d": "M13 13H9" }],
    ["path", { "d": "M19.071 19.071A1 1 0 0 1 4.93 4.93" }],
    ["path", { "d": "m2 2 20 20" }],
    ["path", { "d": "M8.357 2.687a10 10 0 0 1 12.956 12.956" }],
    ["path", { "d": "M9 17V9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-parking-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_parking_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_parking_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_parking_off = hmr(Circle_parking_off, () => Circle_parking_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_parking_off[HMR].source;
    set(Circle_parking_off[HMR].source, module.default[HMR].original);
  });
}
var circle_parking_off_default = Circle_parking_off;

// node_modules/lucide-svelte/dist/icons/circle-parking.svelte
Circle_parking[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-parking.svelte";
function Circle_parking($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_parking);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M9 17V7h4a3 3 0 0 1 0 6H9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-parking" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_parking, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_parking,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_parking = hmr(Circle_parking, () => Circle_parking[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_parking[HMR].source;
    set(Circle_parking[HMR].source, module.default[HMR].original);
  });
}
var circle_parking_default = Circle_parking;

// node_modules/lucide-svelte/dist/icons/circle-pause.svelte
Circle_pause[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-pause.svelte";
function Circle_pause($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_pause);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["line", { "x1": "10", "x2": "10", "y1": "15", "y2": "9" }],
    ["line", { "x1": "14", "x2": "14", "y1": "15", "y2": "9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-pause" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_pause, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_pause,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_pause = hmr(Circle_pause, () => Circle_pause[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_pause[HMR].source;
    set(Circle_pause[HMR].source, module.default[HMR].original);
  });
}
var circle_pause_default = Circle_pause;

// node_modules/lucide-svelte/dist/icons/circle-percent.svelte
Circle_percent[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-percent.svelte";
function Circle_percent($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_percent);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "m15 9-6 6" }],
    ["path", { "d": "M9 9h.01" }],
    ["path", { "d": "M15 15h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-percent" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_percent, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_percent,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_percent = hmr(Circle_percent, () => Circle_percent[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_percent[HMR].source;
    set(Circle_percent[HMR].source, module.default[HMR].original);
  });
}
var circle_percent_default = Circle_percent;

// node_modules/lucide-svelte/dist/icons/circle-plus.svelte
Circle_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-plus.svelte";
function Circle_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_plus);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M8 12h8" }],
    ["path", { "d": "M12 8v8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_plus = hmr(Circle_plus, () => Circle_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_plus[HMR].source;
    set(Circle_plus[HMR].source, module.default[HMR].original);
  });
}
var circle_plus_default = Circle_plus;

// node_modules/lucide-svelte/dist/icons/circle-play.svelte
Circle_play[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-play.svelte";
function Circle_play($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_play);
  const iconNode = [
    [
      "path",
      {
        "d": "M9 9.003a1 1 0 0 1 1.517-.859l4.997 2.997a1 1 0 0 1 0 1.718l-4.997 2.997A1 1 0 0 1 9 14.996z"
      }
    ],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-play" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_play, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_play,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_play = hmr(Circle_play, () => Circle_play[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_play[HMR].source;
    set(Circle_play[HMR].source, module.default[HMR].original);
  });
}
var circle_play_default = Circle_play;

// node_modules/lucide-svelte/dist/icons/circle-pound-sterling.svelte
Circle_pound_sterling[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-pound-sterling.svelte";
function Circle_pound_sterling($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_pound_sterling);
  const iconNode = [
    ["path", { "d": "M10 16V9.5a1 1 0 0 1 5 0" }],
    ["path", { "d": "M8 12h4" }],
    ["path", { "d": "M8 16h7" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-pound-sterling" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_pound_sterling, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_pound_sterling,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_pound_sterling = hmr(Circle_pound_sterling, () => Circle_pound_sterling[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_pound_sterling[HMR].source;
    set(Circle_pound_sterling[HMR].source, module.default[HMR].original);
  });
}
var circle_pound_sterling_default = Circle_pound_sterling;

// node_modules/lucide-svelte/dist/icons/circle-power.svelte
Circle_power[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-power.svelte";
function Circle_power($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_power);
  const iconNode = [
    ["path", { "d": "M12 7v4" }],
    ["path", { "d": "M7.998 9.003a5 5 0 1 0 8-.005" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-power" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_power, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_power,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_power = hmr(Circle_power, () => Circle_power[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_power[HMR].source;
    set(Circle_power[HMR].source, module.default[HMR].original);
  });
}
var circle_power_default = Circle_power;

// node_modules/lucide-svelte/dist/icons/circle-question-mark.svelte
Circle_question_mark[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-question-mark.svelte";
function Circle_question_mark($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_question_mark);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3" }],
    ["path", { "d": "M12 17h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-question-mark" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_question_mark, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_question_mark,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_question_mark = hmr(Circle_question_mark, () => Circle_question_mark[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_question_mark[HMR].source;
    set(Circle_question_mark[HMR].source, module.default[HMR].original);
  });
}
var circle_question_mark_default = Circle_question_mark;

// node_modules/lucide-svelte/dist/icons/circle-slash-2.svelte
Circle_slash_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-slash-2.svelte";
function Circle_slash_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_slash_2);
  const iconNode = [
    ["path", { "d": "M22 2 2 22" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-slash-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_slash_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_slash_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_slash_2 = hmr(Circle_slash_2, () => Circle_slash_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_slash_2[HMR].source;
    set(Circle_slash_2[HMR].source, module.default[HMR].original);
  });
}
var circle_slash_2_default = Circle_slash_2;

// node_modules/lucide-svelte/dist/icons/circle-small.svelte
Circle_small[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-small.svelte";
function Circle_small($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_small);
  const iconNode = [["circle", { "cx": "12", "cy": "12", "r": "6" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-small" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_small, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_small,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_small = hmr(Circle_small, () => Circle_small[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_small[HMR].source;
    set(Circle_small[HMR].source, module.default[HMR].original);
  });
}
var circle_small_default = Circle_small;

// node_modules/lucide-svelte/dist/icons/circle-slash.svelte
Circle_slash[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-slash.svelte";
function Circle_slash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_slash);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["line", { "x1": "9", "x2": "15", "y1": "15", "y2": "9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-slash" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_slash, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_slash,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_slash = hmr(Circle_slash, () => Circle_slash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_slash[HMR].source;
    set(Circle_slash[HMR].source, module.default[HMR].original);
  });
}
var circle_slash_default = Circle_slash;

// node_modules/lucide-svelte/dist/icons/circle-stop.svelte
Circle_stop[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-stop.svelte";
function Circle_stop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_stop);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    [
      "rect",
      { "x": "9", "y": "9", "width": "6", "height": "6", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-stop" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_stop, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_stop,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_stop = hmr(Circle_stop, () => Circle_stop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_stop[HMR].source;
    set(Circle_stop[HMR].source, module.default[HMR].original);
  });
}
var circle_stop_default = Circle_stop;

// node_modules/lucide-svelte/dist/icons/circle-user-round.svelte
Circle_user_round[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-user-round.svelte";
function Circle_user_round($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_user_round);
  const iconNode = [
    ["path", { "d": "M18 20a6 6 0 0 0-12 0" }],
    ["circle", { "cx": "12", "cy": "10", "r": "4" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-user-round" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_user_round, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_user_round,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_user_round = hmr(Circle_user_round, () => Circle_user_round[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_user_round[HMR].source;
    set(Circle_user_round[HMR].source, module.default[HMR].original);
  });
}
var circle_user_round_default = Circle_user_round;

// node_modules/lucide-svelte/dist/icons/circle-user.svelte
Circle_user[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-user.svelte";
function Circle_user($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_user);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["circle", { "cx": "12", "cy": "10", "r": "3" }],
    [
      "path",
      { "d": "M7 20.662V19a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v1.662" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-user" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_user, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_user,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_user = hmr(Circle_user, () => Circle_user[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_user[HMR].source;
    set(Circle_user[HMR].source, module.default[HMR].original);
  });
}
var circle_user_default = Circle_user;

// node_modules/lucide-svelte/dist/icons/circle-x.svelte
Circle_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle-x.svelte";
function Circle_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle_x);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "m15 9-6 6" }],
    ["path", { "d": "m9 9 6 6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle_x = hmr(Circle_x, () => Circle_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle_x[HMR].source;
    set(Circle_x[HMR].source, module.default[HMR].original);
  });
}
var circle_x_default = Circle_x;

// node_modules/lucide-svelte/dist/icons/circle.svelte
Circle[FILENAME] = "node_modules/lucide-svelte/dist/icons/circle.svelte";
function Circle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circle);
  const iconNode = [["circle", { "cx": "12", "cy": "12", "r": "10" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circle" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circle, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circle,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circle = hmr(Circle, () => Circle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circle[HMR].source;
    set(Circle[HMR].source, module.default[HMR].original);
  });
}
var circle_default = Circle;

// node_modules/lucide-svelte/dist/icons/circuit-board.svelte
Circuit_board[FILENAME] = "node_modules/lucide-svelte/dist/icons/circuit-board.svelte";
function Circuit_board($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Circuit_board);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M11 9h4a2 2 0 0 0 2-2V3" }],
    ["circle", { "cx": "9", "cy": "9", "r": "2" }],
    ["path", { "d": "M7 21v-4a2 2 0 0 1 2-2h4" }],
    ["circle", { "cx": "15", "cy": "15", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "circuit-board" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Circuit_board, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Circuit_board,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Circuit_board = hmr(Circuit_board, () => Circuit_board[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Circuit_board[HMR].source;
    set(Circuit_board[HMR].source, module.default[HMR].original);
  });
}
var circuit_board_default = Circuit_board;

// node_modules/lucide-svelte/dist/icons/citrus.svelte
Citrus[FILENAME] = "node_modules/lucide-svelte/dist/icons/citrus.svelte";
function Citrus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Citrus);
  const iconNode = [
    [
      "path",
      {
        "d": "M21.66 17.67a1.08 1.08 0 0 1-.04 1.6A12 12 0 0 1 4.73 2.38a1.1 1.1 0 0 1 1.61-.04z"
      }
    ],
    ["path", { "d": "M19.65 15.66A8 8 0 0 1 8.35 4.34" }],
    ["path", { "d": "m14 10-5.5 5.5" }],
    ["path", { "d": "M14 17.85V10H6.15" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "citrus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Citrus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Citrus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Citrus = hmr(Citrus, () => Citrus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Citrus[HMR].source;
    set(Citrus[HMR].source, module.default[HMR].original);
  });
}
var citrus_default = Citrus;

// node_modules/lucide-svelte/dist/icons/clapperboard.svelte
Clapperboard[FILENAME] = "node_modules/lucide-svelte/dist/icons/clapperboard.svelte";
function Clapperboard($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clapperboard);
  const iconNode = [
    [
      "path",
      {
        "d": "M20.2 6 3 11l-.9-2.4c-.3-1.1.3-2.2 1.3-2.5l13.5-4c1.1-.3 2.2.3 2.5 1.3Z"
      }
    ],
    ["path", { "d": "m6.2 5.3 3.1 3.9" }],
    ["path", { "d": "m12.4 3.4 3.1 4" }],
    ["path", { "d": "M3 11h18v8a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2Z" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clapperboard" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clapperboard, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clapperboard,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clapperboard = hmr(Clapperboard, () => Clapperboard[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clapperboard[HMR].source;
    set(Clapperboard[HMR].source, module.default[HMR].original);
  });
}
var clapperboard_default = Clapperboard;

// node_modules/lucide-svelte/dist/icons/clipboard-check.svelte
Clipboard_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/clipboard-check.svelte";
function Clipboard_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clipboard_check);
  const iconNode = [
    [
      "rect",
      {
        "width": "8",
        "height": "4",
        "x": "8",
        "y": "2",
        "rx": "1",
        "ry": "1"
      }
    ],
    [
      "path",
      {
        "d": "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"
      }
    ],
    ["path", { "d": "m9 14 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clipboard-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clipboard_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clipboard_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard_check = hmr(Clipboard_check, () => Clipboard_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard_check[HMR].source;
    set(Clipboard_check[HMR].source, module.default[HMR].original);
  });
}
var clipboard_check_default = Clipboard_check;

// node_modules/lucide-svelte/dist/icons/clipboard-clock.svelte
Clipboard_clock[FILENAME] = "node_modules/lucide-svelte/dist/icons/clipboard-clock.svelte";
function Clipboard_clock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clipboard_clock);
  const iconNode = [
    ["path", { "d": "M16 14v2.2l1.6 1" }],
    ["path", { "d": "M16 4h2a2 2 0 0 1 2 2v.832" }],
    ["path", { "d": "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h2" }],
    ["circle", { "cx": "16", "cy": "16", "r": "6" }],
    [
      "rect",
      { "x": "8", "y": "2", "width": "8", "height": "4", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clipboard-clock" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clipboard_clock, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clipboard_clock,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard_clock = hmr(Clipboard_clock, () => Clipboard_clock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard_clock[HMR].source;
    set(Clipboard_clock[HMR].source, module.default[HMR].original);
  });
}
var clipboard_clock_default = Clipboard_clock;

// node_modules/lucide-svelte/dist/icons/clipboard-copy.svelte
Clipboard_copy[FILENAME] = "node_modules/lucide-svelte/dist/icons/clipboard-copy.svelte";
function Clipboard_copy($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clipboard_copy);
  const iconNode = [
    [
      "rect",
      {
        "width": "8",
        "height": "4",
        "x": "8",
        "y": "2",
        "rx": "1",
        "ry": "1"
      }
    ],
    [
      "path",
      {
        "d": "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-2"
      }
    ],
    ["path", { "d": "M16 4h2a2 2 0 0 1 2 2v4" }],
    ["path", { "d": "M21 14H11" }],
    ["path", { "d": "m15 10-4 4 4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clipboard-copy" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clipboard_copy, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clipboard_copy,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard_copy = hmr(Clipboard_copy, () => Clipboard_copy[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard_copy[HMR].source;
    set(Clipboard_copy[HMR].source, module.default[HMR].original);
  });
}
var clipboard_copy_default = Clipboard_copy;

// node_modules/lucide-svelte/dist/icons/clipboard-list.svelte
Clipboard_list[FILENAME] = "node_modules/lucide-svelte/dist/icons/clipboard-list.svelte";
function Clipboard_list($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clipboard_list);
  const iconNode = [
    [
      "rect",
      {
        "width": "8",
        "height": "4",
        "x": "8",
        "y": "2",
        "rx": "1",
        "ry": "1"
      }
    ],
    [
      "path",
      {
        "d": "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"
      }
    ],
    ["path", { "d": "M12 11h4" }],
    ["path", { "d": "M12 16h4" }],
    ["path", { "d": "M8 11h.01" }],
    ["path", { "d": "M8 16h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clipboard-list" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clipboard_list, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clipboard_list,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard_list = hmr(Clipboard_list, () => Clipboard_list[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard_list[HMR].source;
    set(Clipboard_list[HMR].source, module.default[HMR].original);
  });
}
var clipboard_list_default = Clipboard_list;

// node_modules/lucide-svelte/dist/icons/clipboard-minus.svelte
Clipboard_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/clipboard-minus.svelte";
function Clipboard_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clipboard_minus);
  const iconNode = [
    [
      "rect",
      {
        "width": "8",
        "height": "4",
        "x": "8",
        "y": "2",
        "rx": "1",
        "ry": "1"
      }
    ],
    [
      "path",
      {
        "d": "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"
      }
    ],
    ["path", { "d": "M9 14h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clipboard-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clipboard_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clipboard_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard_minus = hmr(Clipboard_minus, () => Clipboard_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard_minus[HMR].source;
    set(Clipboard_minus[HMR].source, module.default[HMR].original);
  });
}
var clipboard_minus_default = Clipboard_minus;

// node_modules/lucide-svelte/dist/icons/clipboard-paste.svelte
Clipboard_paste[FILENAME] = "node_modules/lucide-svelte/dist/icons/clipboard-paste.svelte";
function Clipboard_paste($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clipboard_paste);
  const iconNode = [
    ["path", { "d": "M11 14h10" }],
    ["path", { "d": "M16 4h2a2 2 0 0 1 2 2v1.344" }],
    ["path", { "d": "m17 18 4-4-4-4" }],
    [
      "path",
      {
        "d": "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 1.793-1.113"
      }
    ],
    [
      "rect",
      { "x": "8", "y": "2", "width": "8", "height": "4", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clipboard-paste" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clipboard_paste, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clipboard_paste,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard_paste = hmr(Clipboard_paste, () => Clipboard_paste[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard_paste[HMR].source;
    set(Clipboard_paste[HMR].source, module.default[HMR].original);
  });
}
var clipboard_paste_default = Clipboard_paste;

// node_modules/lucide-svelte/dist/icons/clipboard-pen-line.svelte
Clipboard_pen_line[FILENAME] = "node_modules/lucide-svelte/dist/icons/clipboard-pen-line.svelte";
function Clipboard_pen_line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clipboard_pen_line);
  const iconNode = [
    [
      "rect",
      { "width": "8", "height": "4", "x": "8", "y": "2", "rx": "1" }
    ],
    [
      "path",
      {
        "d": "M8 4H6a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-.5"
      }
    ],
    ["path", { "d": "M16 4h2a2 2 0 0 1 1.73 1" }],
    ["path", { "d": "M8 18h1" }],
    [
      "path",
      {
        "d": "M21.378 12.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clipboard-pen-line" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clipboard_pen_line, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clipboard_pen_line,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard_pen_line = hmr(Clipboard_pen_line, () => Clipboard_pen_line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard_pen_line[HMR].source;
    set(Clipboard_pen_line[HMR].source, module.default[HMR].original);
  });
}
var clipboard_pen_line_default = Clipboard_pen_line;

// node_modules/lucide-svelte/dist/icons/clipboard-pen.svelte
Clipboard_pen[FILENAME] = "node_modules/lucide-svelte/dist/icons/clipboard-pen.svelte";
function Clipboard_pen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clipboard_pen);
  const iconNode = [
    [
      "rect",
      { "width": "8", "height": "4", "x": "8", "y": "2", "rx": "1" }
    ],
    [
      "path",
      { "d": "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-5.5" }
    ],
    ["path", { "d": "M4 13.5V6a2 2 0 0 1 2-2h2" }],
    [
      "path",
      {
        "d": "M13.378 15.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clipboard-pen" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clipboard_pen, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clipboard_pen,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard_pen = hmr(Clipboard_pen, () => Clipboard_pen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard_pen[HMR].source;
    set(Clipboard_pen[HMR].source, module.default[HMR].original);
  });
}
var clipboard_pen_default = Clipboard_pen;

// node_modules/lucide-svelte/dist/icons/clipboard-plus.svelte
Clipboard_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/clipboard-plus.svelte";
function Clipboard_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clipboard_plus);
  const iconNode = [
    [
      "rect",
      {
        "width": "8",
        "height": "4",
        "x": "8",
        "y": "2",
        "rx": "1",
        "ry": "1"
      }
    ],
    [
      "path",
      {
        "d": "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"
      }
    ],
    ["path", { "d": "M9 14h6" }],
    ["path", { "d": "M12 17v-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clipboard-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clipboard_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clipboard_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard_plus = hmr(Clipboard_plus, () => Clipboard_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard_plus[HMR].source;
    set(Clipboard_plus[HMR].source, module.default[HMR].original);
  });
}
var clipboard_plus_default = Clipboard_plus;

// node_modules/lucide-svelte/dist/icons/clipboard-type.svelte
Clipboard_type[FILENAME] = "node_modules/lucide-svelte/dist/icons/clipboard-type.svelte";
function Clipboard_type($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clipboard_type);
  const iconNode = [
    [
      "rect",
      {
        "width": "8",
        "height": "4",
        "x": "8",
        "y": "2",
        "rx": "1",
        "ry": "1"
      }
    ],
    [
      "path",
      {
        "d": "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"
      }
    ],
    ["path", { "d": "M9 12v-1h6v1" }],
    ["path", { "d": "M11 17h2" }],
    ["path", { "d": "M12 11v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clipboard-type" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clipboard_type, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clipboard_type,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard_type = hmr(Clipboard_type, () => Clipboard_type[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard_type[HMR].source;
    set(Clipboard_type[HMR].source, module.default[HMR].original);
  });
}
var clipboard_type_default = Clipboard_type;

// node_modules/lucide-svelte/dist/icons/clipboard-x.svelte
Clipboard_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/clipboard-x.svelte";
function Clipboard_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clipboard_x);
  const iconNode = [
    [
      "rect",
      {
        "width": "8",
        "height": "4",
        "x": "8",
        "y": "2",
        "rx": "1",
        "ry": "1"
      }
    ],
    [
      "path",
      {
        "d": "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"
      }
    ],
    ["path", { "d": "m15 11-6 6" }],
    ["path", { "d": "m9 11 6 6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clipboard-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clipboard_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clipboard_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard_x = hmr(Clipboard_x, () => Clipboard_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard_x[HMR].source;
    set(Clipboard_x[HMR].source, module.default[HMR].original);
  });
}
var clipboard_x_default = Clipboard_x;

// node_modules/lucide-svelte/dist/icons/clipboard.svelte
Clipboard[FILENAME] = "node_modules/lucide-svelte/dist/icons/clipboard.svelte";
function Clipboard($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clipboard);
  const iconNode = [
    [
      "rect",
      {
        "width": "8",
        "height": "4",
        "x": "8",
        "y": "2",
        "rx": "1",
        "ry": "1"
      }
    ],
    [
      "path",
      {
        "d": "M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clipboard" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clipboard, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clipboard,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clipboard = hmr(Clipboard, () => Clipboard[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard[HMR].source;
    set(Clipboard[HMR].source, module.default[HMR].original);
  });
}
var clipboard_default = Clipboard;

// node_modules/lucide-svelte/dist/icons/clock-1.svelte
Clock_1[FILENAME] = "node_modules/lucide-svelte/dist/icons/clock-1.svelte";
function Clock_1($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clock_1);
  const iconNode = [
    ["path", { "d": "M12 6v6l2-4" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clock-1" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clock_1, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clock_1,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock_1 = hmr(Clock_1, () => Clock_1[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock_1[HMR].source;
    set(Clock_1[HMR].source, module.default[HMR].original);
  });
}
var clock_1_default = Clock_1;

// node_modules/lucide-svelte/dist/icons/clock-10.svelte
Clock_10[FILENAME] = "node_modules/lucide-svelte/dist/icons/clock-10.svelte";
function Clock_10($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clock_10);
  const iconNode = [
    ["path", { "d": "M12 6v6l-4-2" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clock-10" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clock_10, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clock_10,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock_10 = hmr(Clock_10, () => Clock_10[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock_10[HMR].source;
    set(Clock_10[HMR].source, module.default[HMR].original);
  });
}
var clock_10_default = Clock_10;

// node_modules/lucide-svelte/dist/icons/clock-11.svelte
Clock_11[FILENAME] = "node_modules/lucide-svelte/dist/icons/clock-11.svelte";
function Clock_11($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clock_11);
  const iconNode = [
    ["path", { "d": "M12 6v6l-2-4" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clock-11" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clock_11, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clock_11,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock_11 = hmr(Clock_11, () => Clock_11[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock_11[HMR].source;
    set(Clock_11[HMR].source, module.default[HMR].original);
  });
}
var clock_11_default = Clock_11;

// node_modules/lucide-svelte/dist/icons/clock-12.svelte
Clock_12[FILENAME] = "node_modules/lucide-svelte/dist/icons/clock-12.svelte";
function Clock_12($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clock_12);
  const iconNode = [
    ["path", { "d": "M12 6v6" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clock-12" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clock_12, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clock_12,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock_12 = hmr(Clock_12, () => Clock_12[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock_12[HMR].source;
    set(Clock_12[HMR].source, module.default[HMR].original);
  });
}
var clock_12_default = Clock_12;

// node_modules/lucide-svelte/dist/icons/clock-2.svelte
Clock_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/clock-2.svelte";
function Clock_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clock_2);
  const iconNode = [
    ["path", { "d": "M12 6v6l4-2" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clock-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clock_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clock_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock_2 = hmr(Clock_2, () => Clock_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock_2[HMR].source;
    set(Clock_2[HMR].source, module.default[HMR].original);
  });
}
var clock_2_default = Clock_2;

// node_modules/lucide-svelte/dist/icons/clock-3.svelte
Clock_3[FILENAME] = "node_modules/lucide-svelte/dist/icons/clock-3.svelte";
function Clock_3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clock_3);
  const iconNode = [
    ["path", { "d": "M12 6v6h4" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clock-3" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clock_3, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clock_3,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock_3 = hmr(Clock_3, () => Clock_3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock_3[HMR].source;
    set(Clock_3[HMR].source, module.default[HMR].original);
  });
}
var clock_3_default = Clock_3;

// node_modules/lucide-svelte/dist/icons/clock-4.svelte
Clock_4[FILENAME] = "node_modules/lucide-svelte/dist/icons/clock-4.svelte";
function Clock_4($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clock_4);
  const iconNode = [
    ["path", { "d": "M12 6v6l4 2" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clock-4" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clock_4, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clock_4,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock_4 = hmr(Clock_4, () => Clock_4[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock_4[HMR].source;
    set(Clock_4[HMR].source, module.default[HMR].original);
  });
}
var clock_4_default = Clock_4;

// node_modules/lucide-svelte/dist/icons/clock-5.svelte
Clock_5[FILENAME] = "node_modules/lucide-svelte/dist/icons/clock-5.svelte";
function Clock_5($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clock_5);
  const iconNode = [
    ["path", { "d": "M12 6v6l2 4" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clock-5" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clock_5, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clock_5,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock_5 = hmr(Clock_5, () => Clock_5[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock_5[HMR].source;
    set(Clock_5[HMR].source, module.default[HMR].original);
  });
}
var clock_5_default = Clock_5;

// node_modules/lucide-svelte/dist/icons/clock-6.svelte
Clock_6[FILENAME] = "node_modules/lucide-svelte/dist/icons/clock-6.svelte";
function Clock_6($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clock_6);
  const iconNode = [
    ["path", { "d": "M12 6v10" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clock-6" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clock_6, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clock_6,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock_6 = hmr(Clock_6, () => Clock_6[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock_6[HMR].source;
    set(Clock_6[HMR].source, module.default[HMR].original);
  });
}
var clock_6_default = Clock_6;

// node_modules/lucide-svelte/dist/icons/clock-7.svelte
Clock_7[FILENAME] = "node_modules/lucide-svelte/dist/icons/clock-7.svelte";
function Clock_7($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clock_7);
  const iconNode = [
    ["path", { "d": "M12 6v6l-2 4" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clock-7" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clock_7, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clock_7,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock_7 = hmr(Clock_7, () => Clock_7[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock_7[HMR].source;
    set(Clock_7[HMR].source, module.default[HMR].original);
  });
}
var clock_7_default = Clock_7;

// node_modules/lucide-svelte/dist/icons/clock-8.svelte
Clock_8[FILENAME] = "node_modules/lucide-svelte/dist/icons/clock-8.svelte";
function Clock_8($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clock_8);
  const iconNode = [
    ["path", { "d": "M12 6v6l-4 2" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clock-8" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clock_8, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clock_8,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock_8 = hmr(Clock_8, () => Clock_8[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock_8[HMR].source;
    set(Clock_8[HMR].source, module.default[HMR].original);
  });
}
var clock_8_default = Clock_8;

// node_modules/lucide-svelte/dist/icons/clock-9.svelte
Clock_9[FILENAME] = "node_modules/lucide-svelte/dist/icons/clock-9.svelte";
function Clock_9($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clock_9);
  const iconNode = [
    ["path", { "d": "M12 6v6H8" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clock-9" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clock_9, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clock_9,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock_9 = hmr(Clock_9, () => Clock_9[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock_9[HMR].source;
    set(Clock_9[HMR].source, module.default[HMR].original);
  });
}
var clock_9_default = Clock_9;

// node_modules/lucide-svelte/dist/icons/clock-alert.svelte
Clock_alert[FILENAME] = "node_modules/lucide-svelte/dist/icons/clock-alert.svelte";
function Clock_alert($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clock_alert);
  const iconNode = [
    ["path", { "d": "M12 6v6l4 2" }],
    ["path", { "d": "M20 12v5" }],
    ["path", { "d": "M20 21h.01" }],
    ["path", { "d": "M21.25 8.2A10 10 0 1 0 16 21.16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clock-alert" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clock_alert, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clock_alert,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock_alert = hmr(Clock_alert, () => Clock_alert[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock_alert[HMR].source;
    set(Clock_alert[HMR].source, module.default[HMR].original);
  });
}
var clock_alert_default = Clock_alert;

// node_modules/lucide-svelte/dist/icons/clock-arrow-down.svelte
Clock_arrow_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/clock-arrow-down.svelte";
function Clock_arrow_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clock_arrow_down);
  const iconNode = [
    ["path", { "d": "M12 6v6l2 1" }],
    ["path", { "d": "M12.337 21.994a10 10 0 1 1 9.588-8.767" }],
    ["path", { "d": "m14 18 4 4 4-4" }],
    ["path", { "d": "M18 14v8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clock-arrow-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clock_arrow_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clock_arrow_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock_arrow_down = hmr(Clock_arrow_down, () => Clock_arrow_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock_arrow_down[HMR].source;
    set(Clock_arrow_down[HMR].source, module.default[HMR].original);
  });
}
var clock_arrow_down_default = Clock_arrow_down;

// node_modules/lucide-svelte/dist/icons/clock-arrow-up.svelte
Clock_arrow_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/clock-arrow-up.svelte";
function Clock_arrow_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clock_arrow_up);
  const iconNode = [
    ["path", { "d": "M12 6v6l1.56.78" }],
    ["path", { "d": "M13.227 21.925a10 10 0 1 1 8.767-9.588" }],
    ["path", { "d": "m14 18 4-4 4 4" }],
    ["path", { "d": "M18 22v-8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clock-arrow-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clock_arrow_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clock_arrow_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock_arrow_up = hmr(Clock_arrow_up, () => Clock_arrow_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock_arrow_up[HMR].source;
    set(Clock_arrow_up[HMR].source, module.default[HMR].original);
  });
}
var clock_arrow_up_default = Clock_arrow_up;

// node_modules/lucide-svelte/dist/icons/clock-fading.svelte
Clock_fading[FILENAME] = "node_modules/lucide-svelte/dist/icons/clock-fading.svelte";
function Clock_fading($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clock_fading);
  const iconNode = [
    ["path", { "d": "M12 2a10 10 0 0 1 7.38 16.75" }],
    ["path", { "d": "M12 6v6l4 2" }],
    ["path", { "d": "M2.5 8.875a10 10 0 0 0-.5 3" }],
    ["path", { "d": "M2.83 16a10 10 0 0 0 2.43 3.4" }],
    ["path", { "d": "M4.636 5.235a10 10 0 0 1 .891-.857" }],
    ["path", { "d": "M8.644 21.42a10 10 0 0 0 7.631-.38" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clock-fading" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clock_fading, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clock_fading,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock_fading = hmr(Clock_fading, () => Clock_fading[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock_fading[HMR].source;
    set(Clock_fading[HMR].source, module.default[HMR].original);
  });
}
var clock_fading_default = Clock_fading;

// node_modules/lucide-svelte/dist/icons/clock-plus.svelte
Clock_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/clock-plus.svelte";
function Clock_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clock_plus);
  const iconNode = [
    ["path", { "d": "M12 6v6l3.644 1.822" }],
    ["path", { "d": "M16 19h6" }],
    ["path", { "d": "M19 16v6" }],
    ["path", { "d": "M21.92 13.267a10 10 0 1 0-8.653 8.653" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clock-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clock_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clock_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock_plus = hmr(Clock_plus, () => Clock_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock_plus[HMR].source;
    set(Clock_plus[HMR].source, module.default[HMR].original);
  });
}
var clock_plus_default = Clock_plus;

// node_modules/lucide-svelte/dist/icons/clock.svelte
Clock[FILENAME] = "node_modules/lucide-svelte/dist/icons/clock.svelte";
function Clock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clock);
  const iconNode = [
    ["path", { "d": "M12 6v6l4 2" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clock" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clock, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clock,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clock = hmr(Clock, () => Clock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clock[HMR].source;
    set(Clock[HMR].source, module.default[HMR].original);
  });
}
var clock_default = Clock;

// node_modules/lucide-svelte/dist/icons/closed-caption.svelte
Closed_caption[FILENAME] = "node_modules/lucide-svelte/dist/icons/closed-caption.svelte";
function Closed_caption($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Closed_caption);
  const iconNode = [
    ["path", { "d": "M10 9.17a3 3 0 1 0 0 5.66" }],
    ["path", { "d": "M17 9.17a3 3 0 1 0 0 5.66" }],
    [
      "rect",
      { "x": "2", "y": "5", "width": "20", "height": "14", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "closed-caption" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Closed_caption, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Closed_caption,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Closed_caption = hmr(Closed_caption, () => Closed_caption[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Closed_caption[HMR].source;
    set(Closed_caption[HMR].source, module.default[HMR].original);
  });
}
var closed_caption_default = Closed_caption;

// node_modules/lucide-svelte/dist/icons/cloud-alert.svelte
Cloud_alert[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloud-alert.svelte";
function Cloud_alert($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloud_alert);
  const iconNode = [
    ["path", { "d": "M12 12v4" }],
    ["path", { "d": "M12 20h.01" }],
    [
      "path",
      { "d": "M17 18h.5a1 1 0 0 0 0-9h-1.79A7 7 0 1 0 7 17.708" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloud-alert" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloud_alert, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloud_alert,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud_alert = hmr(Cloud_alert, () => Cloud_alert[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud_alert[HMR].source;
    set(Cloud_alert[HMR].source, module.default[HMR].original);
  });
}
var cloud_alert_default = Cloud_alert;

// node_modules/lucide-svelte/dist/icons/cloud-check.svelte
Cloud_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloud-check.svelte";
function Cloud_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloud_check);
  const iconNode = [
    ["path", { "d": "m17 15-5.5 5.5L9 18" }],
    [
      "path",
      {
        "d": "M5 17.743A7 7 0 1 1 15.71 10h1.79a4.5 4.5 0 0 1 1.5 8.742"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloud-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloud_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloud_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud_check = hmr(Cloud_check, () => Cloud_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud_check[HMR].source;
    set(Cloud_check[HMR].source, module.default[HMR].original);
  });
}
var cloud_check_default = Cloud_check;

// node_modules/lucide-svelte/dist/icons/cloud-cog.svelte
Cloud_cog[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloud-cog.svelte";
function Cloud_cog($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloud_cog);
  const iconNode = [
    ["path", { "d": "m10.852 19.772-.383.924" }],
    ["path", { "d": "m13.148 14.228.383-.923" }],
    [
      "path",
      { "d": "M13.148 19.772a3 3 0 1 0-2.296-5.544l-.383-.923" }
    ],
    [
      "path",
      { "d": "m13.53 20.696-.382-.924a3 3 0 1 1-2.296-5.544" }
    ],
    ["path", { "d": "m14.772 15.852.923-.383" }],
    ["path", { "d": "m14.772 18.148.923.383" }],
    [
      "path",
      {
        "d": "M4.2 15.1a7 7 0 1 1 9.93-9.858A7 7 0 0 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.2"
      }
    ],
    ["path", { "d": "m9.228 15.852-.923-.383" }],
    ["path", { "d": "m9.228 18.148-.923.383" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloud-cog" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloud_cog, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloud_cog,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud_cog = hmr(Cloud_cog, () => Cloud_cog[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud_cog[HMR].source;
    set(Cloud_cog[HMR].source, module.default[HMR].original);
  });
}
var cloud_cog_default = Cloud_cog;

// node_modules/lucide-svelte/dist/icons/cloud-download.svelte
Cloud_download[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloud-download.svelte";
function Cloud_download($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloud_download);
  const iconNode = [
    ["path", { "d": "M12 13v8l-4-4" }],
    ["path", { "d": "m12 21 4-4" }],
    [
      "path",
      {
        "d": "M4.393 15.269A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.436 8.284"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloud-download" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloud_download, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloud_download,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud_download = hmr(Cloud_download, () => Cloud_download[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud_download[HMR].source;
    set(Cloud_download[HMR].source, module.default[HMR].original);
  });
}
var cloud_download_default = Cloud_download;

// node_modules/lucide-svelte/dist/icons/cloud-drizzle.svelte
Cloud_drizzle[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloud-drizzle.svelte";
function Cloud_drizzle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloud_drizzle);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"
      }
    ],
    ["path", { "d": "M8 19v1" }],
    ["path", { "d": "M8 14v1" }],
    ["path", { "d": "M16 19v1" }],
    ["path", { "d": "M16 14v1" }],
    ["path", { "d": "M12 21v1" }],
    ["path", { "d": "M12 16v1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloud-drizzle" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloud_drizzle, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloud_drizzle,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud_drizzle = hmr(Cloud_drizzle, () => Cloud_drizzle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud_drizzle[HMR].source;
    set(Cloud_drizzle[HMR].source, module.default[HMR].original);
  });
}
var cloud_drizzle_default = Cloud_drizzle;

// node_modules/lucide-svelte/dist/icons/cloud-fog.svelte
Cloud_fog[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloud-fog.svelte";
function Cloud_fog($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloud_fog);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"
      }
    ],
    ["path", { "d": "M16 17H7" }],
    ["path", { "d": "M17 21H9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloud-fog" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloud_fog, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloud_fog,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud_fog = hmr(Cloud_fog, () => Cloud_fog[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud_fog[HMR].source;
    set(Cloud_fog[HMR].source, module.default[HMR].original);
  });
}
var cloud_fog_default = Cloud_fog;

// node_modules/lucide-svelte/dist/icons/cloud-hail.svelte
Cloud_hail[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloud-hail.svelte";
function Cloud_hail($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloud_hail);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"
      }
    ],
    ["path", { "d": "M16 14v2" }],
    ["path", { "d": "M8 14v2" }],
    ["path", { "d": "M16 20h.01" }],
    ["path", { "d": "M8 20h.01" }],
    ["path", { "d": "M12 16v2" }],
    ["path", { "d": "M12 22h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloud-hail" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloud_hail, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloud_hail,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud_hail = hmr(Cloud_hail, () => Cloud_hail[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud_hail[HMR].source;
    set(Cloud_hail[HMR].source, module.default[HMR].original);
  });
}
var cloud_hail_default = Cloud_hail;

// node_modules/lucide-svelte/dist/icons/cloud-lightning.svelte
Cloud_lightning[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloud-lightning.svelte";
function Cloud_lightning($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloud_lightning);
  const iconNode = [
    [
      "path",
      {
        "d": "M6 16.326A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 .5 8.973"
      }
    ],
    ["path", { "d": "m13 12-3 5h4l-3 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloud-lightning" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloud_lightning, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloud_lightning,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud_lightning = hmr(Cloud_lightning, () => Cloud_lightning[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud_lightning[HMR].source;
    set(Cloud_lightning[HMR].source, module.default[HMR].original);
  });
}
var cloud_lightning_default = Cloud_lightning;

// node_modules/lucide-svelte/dist/icons/cloud-moon-rain.svelte
Cloud_moon_rain[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloud-moon-rain.svelte";
function Cloud_moon_rain($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloud_moon_rain);
  const iconNode = [
    ["path", { "d": "M11 20v2" }],
    [
      "path",
      {
        "d": "M18.376 14.512a6 6 0 0 0 3.461-4.127c.148-.625-.659-.97-1.248-.714a4 4 0 0 1-5.259-5.26c.255-.589-.09-1.395-.716-1.248a6 6 0 0 0-4.594 5.36"
      }
    ],
    ["path", { "d": "M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24" }],
    ["path", { "d": "M7 19v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloud-moon-rain" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloud_moon_rain, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloud_moon_rain,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud_moon_rain = hmr(Cloud_moon_rain, () => Cloud_moon_rain[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud_moon_rain[HMR].source;
    set(Cloud_moon_rain[HMR].source, module.default[HMR].original);
  });
}
var cloud_moon_rain_default = Cloud_moon_rain;

// node_modules/lucide-svelte/dist/icons/cloud-moon.svelte
Cloud_moon[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloud-moon.svelte";
function Cloud_moon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloud_moon);
  const iconNode = [
    ["path", { "d": "M13 16a3 3 0 0 1 0 6H7a5 5 0 1 1 4.9-6z" }],
    [
      "path",
      {
        "d": "M18.376 14.512a6 6 0 0 0 3.461-4.127c.148-.625-.659-.97-1.248-.714a4 4 0 0 1-5.259-5.26c.255-.589-.09-1.395-.716-1.248a6 6 0 0 0-4.594 5.36"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloud-moon" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloud_moon, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloud_moon,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud_moon = hmr(Cloud_moon, () => Cloud_moon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud_moon[HMR].source;
    set(Cloud_moon[HMR].source, module.default[HMR].original);
  });
}
var cloud_moon_default = Cloud_moon;

// node_modules/lucide-svelte/dist/icons/cloud-off.svelte
Cloud_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloud-off.svelte";
function Cloud_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloud_off);
  const iconNode = [
    ["path", { "d": "m2 2 20 20" }],
    [
      "path",
      {
        "d": "M5.782 5.782A7 7 0 0 0 9 19h8.5a4.5 4.5 0 0 0 1.307-.193"
      }
    ],
    [
      "path",
      {
        "d": "M21.532 16.5A4.5 4.5 0 0 0 17.5 10h-1.79A7.008 7.008 0 0 0 10 5.07"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloud-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloud_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloud_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud_off = hmr(Cloud_off, () => Cloud_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud_off[HMR].source;
    set(Cloud_off[HMR].source, module.default[HMR].original);
  });
}
var cloud_off_default = Cloud_off;

// node_modules/lucide-svelte/dist/icons/cloud-rain-wind.svelte
Cloud_rain_wind[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloud-rain-wind.svelte";
function Cloud_rain_wind($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloud_rain_wind);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"
      }
    ],
    ["path", { "d": "m9.2 22 3-7" }],
    ["path", { "d": "m9 13-3 7" }],
    ["path", { "d": "m17 13-3 7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloud-rain-wind" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloud_rain_wind, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloud_rain_wind,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud_rain_wind = hmr(Cloud_rain_wind, () => Cloud_rain_wind[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud_rain_wind[HMR].source;
    set(Cloud_rain_wind[HMR].source, module.default[HMR].original);
  });
}
var cloud_rain_wind_default = Cloud_rain_wind;

// node_modules/lucide-svelte/dist/icons/cloud-rain.svelte
Cloud_rain[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloud-rain.svelte";
function Cloud_rain($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloud_rain);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"
      }
    ],
    ["path", { "d": "M16 14v6" }],
    ["path", { "d": "M8 14v6" }],
    ["path", { "d": "M12 16v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloud-rain" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloud_rain, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloud_rain,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud_rain = hmr(Cloud_rain, () => Cloud_rain[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud_rain[HMR].source;
    set(Cloud_rain[HMR].source, module.default[HMR].original);
  });
}
var cloud_rain_default = Cloud_rain;

// node_modules/lucide-svelte/dist/icons/cloud-snow.svelte
Cloud_snow[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloud-snow.svelte";
function Cloud_snow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloud_snow);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"
      }
    ],
    ["path", { "d": "M8 15h.01" }],
    ["path", { "d": "M8 19h.01" }],
    ["path", { "d": "M12 17h.01" }],
    ["path", { "d": "M12 21h.01" }],
    ["path", { "d": "M16 15h.01" }],
    ["path", { "d": "M16 19h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloud-snow" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloud_snow, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloud_snow,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud_snow = hmr(Cloud_snow, () => Cloud_snow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud_snow[HMR].source;
    set(Cloud_snow[HMR].source, module.default[HMR].original);
  });
}
var cloud_snow_default = Cloud_snow;

// node_modules/lucide-svelte/dist/icons/cloud-sun-rain.svelte
Cloud_sun_rain[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloud-sun-rain.svelte";
function Cloud_sun_rain($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloud_sun_rain);
  const iconNode = [
    ["path", { "d": "M12 2v2" }],
    ["path", { "d": "m4.93 4.93 1.41 1.41" }],
    ["path", { "d": "M20 12h2" }],
    ["path", { "d": "m19.07 4.93-1.41 1.41" }],
    ["path", { "d": "M15.947 12.65a4 4 0 0 0-5.925-4.128" }],
    ["path", { "d": "M3 20a5 5 0 1 1 8.9-4H13a3 3 0 0 1 2 5.24" }],
    ["path", { "d": "M11 20v2" }],
    ["path", { "d": "M7 19v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloud-sun-rain" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloud_sun_rain, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloud_sun_rain,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud_sun_rain = hmr(Cloud_sun_rain, () => Cloud_sun_rain[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud_sun_rain[HMR].source;
    set(Cloud_sun_rain[HMR].source, module.default[HMR].original);
  });
}
var cloud_sun_rain_default = Cloud_sun_rain;

// node_modules/lucide-svelte/dist/icons/cloud-sun.svelte
Cloud_sun[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloud-sun.svelte";
function Cloud_sun($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloud_sun);
  const iconNode = [
    ["path", { "d": "M12 2v2" }],
    ["path", { "d": "m4.93 4.93 1.41 1.41" }],
    ["path", { "d": "M20 12h2" }],
    ["path", { "d": "m19.07 4.93-1.41 1.41" }],
    ["path", { "d": "M15.947 12.65a4 4 0 0 0-5.925-4.128" }],
    [
      "path",
      { "d": "M13 22H7a5 5 0 1 1 4.9-6H13a3 3 0 0 1 0 6Z" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloud-sun" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloud_sun, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloud_sun,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud_sun = hmr(Cloud_sun, () => Cloud_sun[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud_sun[HMR].source;
    set(Cloud_sun[HMR].source, module.default[HMR].original);
  });
}
var cloud_sun_default = Cloud_sun;

// node_modules/lucide-svelte/dist/icons/cloud-upload.svelte
Cloud_upload[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloud-upload.svelte";
function Cloud_upload($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloud_upload);
  const iconNode = [
    ["path", { "d": "M12 13v8" }],
    [
      "path",
      {
        "d": "M4 14.899A7 7 0 1 1 15.71 8h1.79a4.5 4.5 0 0 1 2.5 8.242"
      }
    ],
    ["path", { "d": "m8 17 4-4 4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloud-upload" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloud_upload, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloud_upload,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud_upload = hmr(Cloud_upload, () => Cloud_upload[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud_upload[HMR].source;
    set(Cloud_upload[HMR].source, module.default[HMR].original);
  });
}
var cloud_upload_default = Cloud_upload;

// node_modules/lucide-svelte/dist/icons/cloud.svelte
Cloud[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloud.svelte";
function Cloud($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloud);
  const iconNode = [
    [
      "path",
      { "d": "M17.5 19H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloud" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloud, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloud,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloud = hmr(Cloud, () => Cloud[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloud[HMR].source;
    set(Cloud[HMR].source, module.default[HMR].original);
  });
}
var cloud_default = Cloud;

// node_modules/lucide-svelte/dist/icons/cloudy.svelte
Cloudy[FILENAME] = "node_modules/lucide-svelte/dist/icons/cloudy.svelte";
function Cloudy($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cloudy);
  const iconNode = [
    [
      "path",
      { "d": "M17.5 21H9a7 7 0 1 1 6.71-9h1.79a4.5 4.5 0 1 1 0 9Z" }
    ],
    [
      "path",
      {
        "d": "M22 10a3 3 0 0 0-3-3h-2.207a5.502 5.502 0 0 0-10.702.5"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cloudy" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cloudy, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cloudy,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cloudy = hmr(Cloudy, () => Cloudy[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cloudy[HMR].source;
    set(Cloudy[HMR].source, module.default[HMR].original);
  });
}
var cloudy_default = Cloudy;

// node_modules/lucide-svelte/dist/icons/clover.svelte
Clover[FILENAME] = "node_modules/lucide-svelte/dist/icons/clover.svelte";
function Clover($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Clover);
  const iconNode = [
    ["path", { "d": "M16.17 7.83 2 22" }],
    [
      "path",
      {
        "d": "M4.02 12a2.827 2.827 0 1 1 3.81-4.17A2.827 2.827 0 1 1 12 4.02a2.827 2.827 0 1 1 4.17 3.81A2.827 2.827 0 1 1 19.98 12a2.827 2.827 0 1 1-3.81 4.17A2.827 2.827 0 1 1 12 19.98a2.827 2.827 0 1 1-4.17-3.81A1 1 0 1 1 4 12"
      }
    ],
    ["path", { "d": "m7.83 7.83 8.34 8.34" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "clover" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Clover, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Clover,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Clover = hmr(Clover, () => Clover[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clover[HMR].source;
    set(Clover[HMR].source, module.default[HMR].original);
  });
}
var clover_default = Clover;

// node_modules/lucide-svelte/dist/icons/club.svelte
Club[FILENAME] = "node_modules/lucide-svelte/dist/icons/club.svelte";
function Club($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Club);
  const iconNode = [
    [
      "path",
      {
        "d": "M17.28 9.05a5.5 5.5 0 1 0-10.56 0A5.5 5.5 0 1 0 12 17.66a5.5 5.5 0 1 0 5.28-8.6Z"
      }
    ],
    ["path", { "d": "M12 17.66L12 22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "club" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Club, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Club,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Club = hmr(Club, () => Club[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Club[HMR].source;
    set(Club[HMR].source, module.default[HMR].original);
  });
}
var club_default = Club;

// node_modules/lucide-svelte/dist/icons/code-xml.svelte
Code_xml[FILENAME] = "node_modules/lucide-svelte/dist/icons/code-xml.svelte";
function Code_xml($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Code_xml);
  const iconNode = [
    ["path", { "d": "m18 16 4-4-4-4" }],
    ["path", { "d": "m6 8-4 4 4 4" }],
    ["path", { "d": "m14.5 4-5 16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "code-xml" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Code_xml, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Code_xml,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Code_xml = hmr(Code_xml, () => Code_xml[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Code_xml[HMR].source;
    set(Code_xml[HMR].source, module.default[HMR].original);
  });
}
var code_xml_default = Code_xml;

// node_modules/lucide-svelte/dist/icons/code.svelte
Code[FILENAME] = "node_modules/lucide-svelte/dist/icons/code.svelte";
function Code($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Code);
  const iconNode = [
    ["path", { "d": "m16 18 6-6-6-6" }],
    ["path", { "d": "m8 6-6 6 6 6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "code" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Code, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Code,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Code = hmr(Code, () => Code[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Code[HMR].source;
    set(Code[HMR].source, module.default[HMR].original);
  });
}
var code_default = Code;

// node_modules/lucide-svelte/dist/icons/codepen.svelte
Codepen[FILENAME] = "node_modules/lucide-svelte/dist/icons/codepen.svelte";
function Codepen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Codepen);
  const iconNode = [
    [
      "polygon",
      { "points": "12 2 22 8.5 22 15.5 12 22 2 15.5 2 8.5 12 2" }
    ],
    ["line", { "x1": "12", "x2": "12", "y1": "22", "y2": "15.5" }],
    ["polyline", { "points": "22 8.5 12 15.5 2 8.5" }],
    ["polyline", { "points": "2 15.5 12 8.5 22 15.5" }],
    ["line", { "x1": "12", "x2": "12", "y1": "2", "y2": "8.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "codepen" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Codepen, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Codepen,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Codepen = hmr(Codepen, () => Codepen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Codepen[HMR].source;
    set(Codepen[HMR].source, module.default[HMR].original);
  });
}
var codepen_default = Codepen;

// node_modules/lucide-svelte/dist/icons/codesandbox.svelte
Codesandbox[FILENAME] = "node_modules/lucide-svelte/dist/icons/codesandbox.svelte";
function Codesandbox($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Codesandbox);
  const iconNode = [
    [
      "path",
      {
        "d": "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"
      }
    ],
    ["polyline", { "points": "7.5 4.21 12 6.81 16.5 4.21" }],
    ["polyline", { "points": "7.5 19.79 7.5 14.6 3 12" }],
    ["polyline", { "points": "21 12 16.5 14.6 16.5 19.79" }],
    ["polyline", { "points": "3.27 6.96 12 12.01 20.73 6.96" }],
    [
      "line",
      { "x1": "12", "x2": "12", "y1": "22.08", "y2": "12" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "codesandbox" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Codesandbox, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Codesandbox,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Codesandbox = hmr(Codesandbox, () => Codesandbox[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Codesandbox[HMR].source;
    set(Codesandbox[HMR].source, module.default[HMR].original);
  });
}
var codesandbox_default = Codesandbox;

// node_modules/lucide-svelte/dist/icons/coffee.svelte
Coffee[FILENAME] = "node_modules/lucide-svelte/dist/icons/coffee.svelte";
function Coffee($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Coffee);
  const iconNode = [
    ["path", { "d": "M10 2v2" }],
    ["path", { "d": "M14 2v2" }],
    [
      "path",
      {
        "d": "M16 8a1 1 0 0 1 1 1v8a4 4 0 0 1-4 4H7a4 4 0 0 1-4-4V9a1 1 0 0 1 1-1h14a4 4 0 1 1 0 8h-1"
      }
    ],
    ["path", { "d": "M6 2v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "coffee" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Coffee, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Coffee,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Coffee = hmr(Coffee, () => Coffee[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Coffee[HMR].source;
    set(Coffee[HMR].source, module.default[HMR].original);
  });
}
var coffee_default = Coffee;

// node_modules/lucide-svelte/dist/icons/cog.svelte
Cog[FILENAME] = "node_modules/lucide-svelte/dist/icons/cog.svelte";
function Cog($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cog);
  const iconNode = [
    ["path", { "d": "M12 20a8 8 0 1 0 0-16 8 8 0 0 0 0 16Z" }],
    ["path", { "d": "M12 14a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z" }],
    ["path", { "d": "M12 2v2" }],
    ["path", { "d": "M12 22v-2" }],
    ["path", { "d": "m17 20.66-1-1.73" }],
    ["path", { "d": "M11 10.27 7 3.34" }],
    ["path", { "d": "m20.66 17-1.73-1" }],
    ["path", { "d": "m3.34 7 1.73 1" }],
    ["path", { "d": "M14 12h8" }],
    ["path", { "d": "M2 12h2" }],
    ["path", { "d": "m20.66 7-1.73 1" }],
    ["path", { "d": "m3.34 17 1.73-1" }],
    ["path", { "d": "m17 3.34-1 1.73" }],
    ["path", { "d": "m11 13.73-4 6.93" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cog" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cog, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cog,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cog = hmr(Cog, () => Cog[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cog[HMR].source;
    set(Cog[HMR].source, module.default[HMR].original);
  });
}
var cog_default = Cog;

// node_modules/lucide-svelte/dist/icons/coins.svelte
Coins[FILENAME] = "node_modules/lucide-svelte/dist/icons/coins.svelte";
function Coins($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Coins);
  const iconNode = [
    ["circle", { "cx": "8", "cy": "8", "r": "6" }],
    ["path", { "d": "M18.09 10.37A6 6 0 1 1 10.34 18" }],
    ["path", { "d": "M7 6h1v4" }],
    ["path", { "d": "m16.71 13.88.7.71-2.82 2.82" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "coins" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Coins, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Coins,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Coins = hmr(Coins, () => Coins[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Coins[HMR].source;
    set(Coins[HMR].source, module.default[HMR].original);
  });
}
var coins_default = Coins;

// node_modules/lucide-svelte/dist/icons/columns-2.svelte
Columns_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/columns-2.svelte";
function Columns_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Columns_2);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M12 3v18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "columns-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Columns_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Columns_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Columns_2 = hmr(Columns_2, () => Columns_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Columns_2[HMR].source;
    set(Columns_2[HMR].source, module.default[HMR].original);
  });
}
var columns_2_default = Columns_2;

// node_modules/lucide-svelte/dist/icons/columns-3-cog.svelte
Columns_3_cog[FILENAME] = "node_modules/lucide-svelte/dist/icons/columns-3-cog.svelte";
function Columns_3_cog($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Columns_3_cog);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.5 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v5.5"
      }
    ],
    ["path", { "d": "m14.3 19.6 1-.4" }],
    ["path", { "d": "M15 3v7.5" }],
    ["path", { "d": "m15.2 16.9-.9-.3" }],
    ["path", { "d": "m16.6 21.7.3-.9" }],
    ["path", { "d": "m16.8 15.3-.4-1" }],
    ["path", { "d": "m19.1 15.2.3-.9" }],
    ["path", { "d": "m19.6 21.7-.4-1" }],
    ["path", { "d": "m20.7 16.8 1-.4" }],
    ["path", { "d": "m21.7 19.4-.9-.3" }],
    ["path", { "d": "M9 3v18" }],
    ["circle", { "cx": "18", "cy": "18", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "columns-3-cog" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Columns_3_cog, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Columns_3_cog,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Columns_3_cog = hmr(Columns_3_cog, () => Columns_3_cog[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Columns_3_cog[HMR].source;
    set(Columns_3_cog[HMR].source, module.default[HMR].original);
  });
}
var columns_3_cog_default = Columns_3_cog;

// node_modules/lucide-svelte/dist/icons/columns-3.svelte
Columns_3[FILENAME] = "node_modules/lucide-svelte/dist/icons/columns-3.svelte";
function Columns_3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Columns_3);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M9 3v18" }],
    ["path", { "d": "M15 3v18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "columns-3" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Columns_3, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Columns_3,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Columns_3 = hmr(Columns_3, () => Columns_3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Columns_3[HMR].source;
    set(Columns_3[HMR].source, module.default[HMR].original);
  });
}
var columns_3_default = Columns_3;

// node_modules/lucide-svelte/dist/icons/columns-4.svelte
Columns_4[FILENAME] = "node_modules/lucide-svelte/dist/icons/columns-4.svelte";
function Columns_4($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Columns_4);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M7.5 3v18" }],
    ["path", { "d": "M12 3v18" }],
    ["path", { "d": "M16.5 3v18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "columns-4" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Columns_4, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Columns_4,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Columns_4 = hmr(Columns_4, () => Columns_4[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Columns_4[HMR].source;
    set(Columns_4[HMR].source, module.default[HMR].original);
  });
}
var columns_4_default = Columns_4;

// node_modules/lucide-svelte/dist/icons/command.svelte
Command[FILENAME] = "node_modules/lucide-svelte/dist/icons/command.svelte";
function Command($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Command);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 6v12a3 3 0 1 0 3-3H6a3 3 0 1 0 3 3V6a3 3 0 1 0-3 3h12a3 3 0 1 0-3-3"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "command" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Command, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Command,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Command = hmr(Command, () => Command[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Command[HMR].source;
    set(Command[HMR].source, module.default[HMR].original);
  });
}
var command_default = Command;

// node_modules/lucide-svelte/dist/icons/combine.svelte
Combine[FILENAME] = "node_modules/lucide-svelte/dist/icons/combine.svelte";
function Combine($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Combine);
  const iconNode = [
    ["path", { "d": "M10 18H5a3 3 0 0 1-3-3v-1" }],
    ["path", { "d": "M14 2a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2" }],
    ["path", { "d": "M20 2a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2" }],
    ["path", { "d": "m7 21 3-3-3-3" }],
    [
      "rect",
      { "x": "14", "y": "14", "width": "8", "height": "8", "rx": "2" }
    ],
    [
      "rect",
      { "x": "2", "y": "2", "width": "8", "height": "8", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "combine" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Combine, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Combine,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Combine = hmr(Combine, () => Combine[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Combine[HMR].source;
    set(Combine[HMR].source, module.default[HMR].original);
  });
}
var combine_default = Combine;

// node_modules/lucide-svelte/dist/icons/component.svelte
Component[FILENAME] = "node_modules/lucide-svelte/dist/icons/component.svelte";
function Component($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Component);
  const iconNode = [
    [
      "path",
      {
        "d": "M15.536 11.293a1 1 0 0 0 0 1.414l2.376 2.377a1 1 0 0 0 1.414 0l2.377-2.377a1 1 0 0 0 0-1.414l-2.377-2.377a1 1 0 0 0-1.414 0z"
      }
    ],
    [
      "path",
      {
        "d": "M2.297 11.293a1 1 0 0 0 0 1.414l2.377 2.377a1 1 0 0 0 1.414 0l2.377-2.377a1 1 0 0 0 0-1.414L6.088 8.916a1 1 0 0 0-1.414 0z"
      }
    ],
    [
      "path",
      {
        "d": "M8.916 17.912a1 1 0 0 0 0 1.415l2.377 2.376a1 1 0 0 0 1.414 0l2.377-2.376a1 1 0 0 0 0-1.415l-2.377-2.376a1 1 0 0 0-1.414 0z"
      }
    ],
    [
      "path",
      {
        "d": "M8.916 4.674a1 1 0 0 0 0 1.414l2.377 2.376a1 1 0 0 0 1.414 0l2.377-2.376a1 1 0 0 0 0-1.414l-2.377-2.377a1 1 0 0 0-1.414 0z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "component" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Component, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Component,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Component = hmr(Component, () => Component[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Component[HMR].source;
    set(Component[HMR].source, module.default[HMR].original);
  });
}
var component_default = Component;

// node_modules/lucide-svelte/dist/icons/compass.svelte
Compass[FILENAME] = "node_modules/lucide-svelte/dist/icons/compass.svelte";
function Compass($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Compass);
  const iconNode = [
    [
      "path",
      {
        "d": "m16.24 7.76-1.804 5.411a2 2 0 0 1-1.265 1.265L7.76 16.24l1.804-5.411a2 2 0 0 1 1.265-1.265z"
      }
    ],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "compass" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Compass, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Compass,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Compass = hmr(Compass, () => Compass[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Compass[HMR].source;
    set(Compass[HMR].source, module.default[HMR].original);
  });
}
var compass_default = Compass;

// node_modules/lucide-svelte/dist/icons/computer.svelte
Computer[FILENAME] = "node_modules/lucide-svelte/dist/icons/computer.svelte";
function Computer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Computer);
  const iconNode = [
    [
      "rect",
      { "width": "14", "height": "8", "x": "5", "y": "2", "rx": "2" }
    ],
    [
      "rect",
      { "width": "20", "height": "8", "x": "2", "y": "14", "rx": "2" }
    ],
    ["path", { "d": "M6 18h2" }],
    ["path", { "d": "M12 18h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "computer" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Computer, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Computer,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Computer = hmr(Computer, () => Computer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Computer[HMR].source;
    set(Computer[HMR].source, module.default[HMR].original);
  });
}
var computer_default = Computer;

// node_modules/lucide-svelte/dist/icons/concierge-bell.svelte
Concierge_bell[FILENAME] = "node_modules/lucide-svelte/dist/icons/concierge-bell.svelte";
function Concierge_bell($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Concierge_bell);
  const iconNode = [
    [
      "path",
      {
        "d": "M3 20a1 1 0 0 1-1-1v-1a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v1a1 1 0 0 1-1 1Z"
      }
    ],
    ["path", { "d": "M20 16a8 8 0 1 0-16 0" }],
    ["path", { "d": "M12 4v4" }],
    ["path", { "d": "M10 4h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "concierge-bell" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Concierge_bell, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Concierge_bell,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Concierge_bell = hmr(Concierge_bell, () => Concierge_bell[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Concierge_bell[HMR].source;
    set(Concierge_bell[HMR].source, module.default[HMR].original);
  });
}
var concierge_bell_default = Concierge_bell;

// node_modules/lucide-svelte/dist/icons/cone.svelte
Cone[FILENAME] = "node_modules/lucide-svelte/dist/icons/cone.svelte";
function Cone($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cone);
  const iconNode = [
    [
      "path",
      { "d": "m20.9 18.55-8-15.98a1 1 0 0 0-1.8 0l-8 15.98" }
    ],
    ["ellipse", { "cx": "12", "cy": "19", "rx": "9", "ry": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cone" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cone, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cone,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cone = hmr(Cone, () => Cone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cone[HMR].source;
    set(Cone[HMR].source, module.default[HMR].original);
  });
}
var cone_default = Cone;

// node_modules/lucide-svelte/dist/icons/construction.svelte
Construction[FILENAME] = "node_modules/lucide-svelte/dist/icons/construction.svelte";
function Construction($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Construction);
  const iconNode = [
    [
      "rect",
      { "x": "2", "y": "6", "width": "20", "height": "8", "rx": "1" }
    ],
    ["path", { "d": "M17 14v7" }],
    ["path", { "d": "M7 14v7" }],
    ["path", { "d": "M17 3v3" }],
    ["path", { "d": "M7 3v3" }],
    ["path", { "d": "M10 14 2.3 6.3" }],
    ["path", { "d": "m14 6 7.7 7.7" }],
    ["path", { "d": "m8 6 8 8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "construction" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Construction, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Construction,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Construction = hmr(Construction, () => Construction[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Construction[HMR].source;
    set(Construction[HMR].source, module.default[HMR].original);
  });
}
var construction_default = Construction;

// node_modules/lucide-svelte/dist/icons/contact-round.svelte
Contact_round[FILENAME] = "node_modules/lucide-svelte/dist/icons/contact-round.svelte";
function Contact_round($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Contact_round);
  const iconNode = [
    ["path", { "d": "M16 2v2" }],
    ["path", { "d": "M17.915 22a6 6 0 0 0-12 0" }],
    ["path", { "d": "M8 2v2" }],
    ["circle", { "cx": "12", "cy": "12", "r": "4" }],
    [
      "rect",
      { "x": "3", "y": "4", "width": "18", "height": "18", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "contact-round" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Contact_round, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Contact_round,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Contact_round = hmr(Contact_round, () => Contact_round[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Contact_round[HMR].source;
    set(Contact_round[HMR].source, module.default[HMR].original);
  });
}
var contact_round_default = Contact_round;

// node_modules/lucide-svelte/dist/icons/contact.svelte
Contact[FILENAME] = "node_modules/lucide-svelte/dist/icons/contact.svelte";
function Contact($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Contact);
  const iconNode = [
    ["path", { "d": "M16 2v2" }],
    ["path", { "d": "M7 22v-2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2" }],
    ["path", { "d": "M8 2v2" }],
    ["circle", { "cx": "12", "cy": "11", "r": "3" }],
    [
      "rect",
      { "x": "3", "y": "4", "width": "18", "height": "18", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "contact" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Contact, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Contact,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Contact = hmr(Contact, () => Contact[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Contact[HMR].source;
    set(Contact[HMR].source, module.default[HMR].original);
  });
}
var contact_default = Contact;

// node_modules/lucide-svelte/dist/icons/container.svelte
Container[FILENAME] = "node_modules/lucide-svelte/dist/icons/container.svelte";
function Container($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Container);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 7.7c0-.6-.4-1.2-.8-1.5l-6.3-3.9a1.72 1.72 0 0 0-1.7 0l-10.3 6c-.5.2-.9.8-.9 1.4v6.6c0 .5.4 1.2.8 1.5l6.3 3.9a1.72 1.72 0 0 0 1.7 0l10.3-6c.5-.3.9-1 .9-1.5Z"
      }
    ],
    ["path", { "d": "M10 21.9V14L2.1 9.1" }],
    ["path", { "d": "m10 14 11.9-6.9" }],
    ["path", { "d": "M14 19.8v-8.1" }],
    ["path", { "d": "M18 17.5V9.4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "container" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Container, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Container,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Container = hmr(Container, () => Container[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Container[HMR].source;
    set(Container[HMR].source, module.default[HMR].original);
  });
}
var container_default = Container;

// node_modules/lucide-svelte/dist/icons/contrast.svelte
Contrast[FILENAME] = "node_modules/lucide-svelte/dist/icons/contrast.svelte";
function Contrast($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Contrast);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M12 18a6 6 0 0 0 0-12v12z" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "contrast" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Contrast, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Contrast,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Contrast = hmr(Contrast, () => Contrast[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Contrast[HMR].source;
    set(Contrast[HMR].source, module.default[HMR].original);
  });
}
var contrast_default = Contrast;

// node_modules/lucide-svelte/dist/icons/cookie.svelte
Cookie[FILENAME] = "node_modules/lucide-svelte/dist/icons/cookie.svelte";
function Cookie($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cookie);
  const iconNode = [
    [
      "path",
      { "d": "M12 2a10 10 0 1 0 10 10 4 4 0 0 1-5-5 4 4 0 0 1-5-5" }
    ],
    ["path", { "d": "M8.5 8.5v.01" }],
    ["path", { "d": "M16 15.5v.01" }],
    ["path", { "d": "M12 12v.01" }],
    ["path", { "d": "M11 17v.01" }],
    ["path", { "d": "M7 14v.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cookie" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cookie, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cookie,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cookie = hmr(Cookie, () => Cookie[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cookie[HMR].source;
    set(Cookie[HMR].source, module.default[HMR].original);
  });
}
var cookie_default = Cookie;

// node_modules/lucide-svelte/dist/icons/cooking-pot.svelte
Cooking_pot[FILENAME] = "node_modules/lucide-svelte/dist/icons/cooking-pot.svelte";
function Cooking_pot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cooking_pot);
  const iconNode = [
    ["path", { "d": "M2 12h20" }],
    ["path", { "d": "M20 12v8a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-8" }],
    ["path", { "d": "m4 8 16-4" }],
    [
      "path",
      {
        "d": "m8.86 6.78-.45-1.81a2 2 0 0 1 1.45-2.43l1.94-.48a2 2 0 0 1 2.43 1.46l.45 1.8"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cooking-pot" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cooking_pot, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cooking_pot,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cooking_pot = hmr(Cooking_pot, () => Cooking_pot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cooking_pot[HMR].source;
    set(Cooking_pot[HMR].source, module.default[HMR].original);
  });
}
var cooking_pot_default = Cooking_pot;

// node_modules/lucide-svelte/dist/icons/copy-check.svelte
Copy_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/copy-check.svelte";
function Copy_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Copy_check);
  const iconNode = [
    ["path", { "d": "m12 15 2 2 4-4" }],
    [
      "rect",
      {
        "width": "14",
        "height": "14",
        "x": "8",
        "y": "8",
        "rx": "2",
        "ry": "2"
      }
    ],
    [
      "path",
      {
        "d": "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "copy-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Copy_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Copy_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Copy_check = hmr(Copy_check, () => Copy_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Copy_check[HMR].source;
    set(Copy_check[HMR].source, module.default[HMR].original);
  });
}
var copy_check_default = Copy_check;

// node_modules/lucide-svelte/dist/icons/copy-minus.svelte
Copy_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/copy-minus.svelte";
function Copy_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Copy_minus);
  const iconNode = [
    ["line", { "x1": "12", "x2": "18", "y1": "15", "y2": "15" }],
    [
      "rect",
      {
        "width": "14",
        "height": "14",
        "x": "8",
        "y": "8",
        "rx": "2",
        "ry": "2"
      }
    ],
    [
      "path",
      {
        "d": "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "copy-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Copy_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Copy_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Copy_minus = hmr(Copy_minus, () => Copy_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Copy_minus[HMR].source;
    set(Copy_minus[HMR].source, module.default[HMR].original);
  });
}
var copy_minus_default = Copy_minus;

// node_modules/lucide-svelte/dist/icons/copy-plus.svelte
Copy_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/copy-plus.svelte";
function Copy_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Copy_plus);
  const iconNode = [
    ["line", { "x1": "15", "x2": "15", "y1": "12", "y2": "18" }],
    ["line", { "x1": "12", "x2": "18", "y1": "15", "y2": "15" }],
    [
      "rect",
      {
        "width": "14",
        "height": "14",
        "x": "8",
        "y": "8",
        "rx": "2",
        "ry": "2"
      }
    ],
    [
      "path",
      {
        "d": "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "copy-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Copy_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Copy_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Copy_plus = hmr(Copy_plus, () => Copy_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Copy_plus[HMR].source;
    set(Copy_plus[HMR].source, module.default[HMR].original);
  });
}
var copy_plus_default = Copy_plus;

// node_modules/lucide-svelte/dist/icons/copy-slash.svelte
Copy_slash[FILENAME] = "node_modules/lucide-svelte/dist/icons/copy-slash.svelte";
function Copy_slash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Copy_slash);
  const iconNode = [
    ["line", { "x1": "12", "x2": "18", "y1": "18", "y2": "12" }],
    [
      "rect",
      {
        "width": "14",
        "height": "14",
        "x": "8",
        "y": "8",
        "rx": "2",
        "ry": "2"
      }
    ],
    [
      "path",
      {
        "d": "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "copy-slash" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Copy_slash, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Copy_slash,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Copy_slash = hmr(Copy_slash, () => Copy_slash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Copy_slash[HMR].source;
    set(Copy_slash[HMR].source, module.default[HMR].original);
  });
}
var copy_slash_default = Copy_slash;

// node_modules/lucide-svelte/dist/icons/copy-x.svelte
Copy_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/copy-x.svelte";
function Copy_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Copy_x);
  const iconNode = [
    ["line", { "x1": "12", "x2": "18", "y1": "12", "y2": "18" }],
    ["line", { "x1": "12", "x2": "18", "y1": "18", "y2": "12" }],
    [
      "rect",
      {
        "width": "14",
        "height": "14",
        "x": "8",
        "y": "8",
        "rx": "2",
        "ry": "2"
      }
    ],
    [
      "path",
      {
        "d": "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "copy-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Copy_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Copy_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Copy_x = hmr(Copy_x, () => Copy_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Copy_x[HMR].source;
    set(Copy_x[HMR].source, module.default[HMR].original);
  });
}
var copy_x_default = Copy_x;

// node_modules/lucide-svelte/dist/icons/copy.svelte
Copy[FILENAME] = "node_modules/lucide-svelte/dist/icons/copy.svelte";
function Copy($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Copy);
  const iconNode = [
    [
      "rect",
      {
        "width": "14",
        "height": "14",
        "x": "8",
        "y": "8",
        "rx": "2",
        "ry": "2"
      }
    ],
    [
      "path",
      {
        "d": "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "copy" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Copy, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Copy,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Copy = hmr(Copy, () => Copy[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Copy[HMR].source;
    set(Copy[HMR].source, module.default[HMR].original);
  });
}
var copy_default = Copy;

// node_modules/lucide-svelte/dist/icons/copyleft.svelte
Copyleft[FILENAME] = "node_modules/lucide-svelte/dist/icons/copyleft.svelte";
function Copyleft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Copyleft);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M9.17 14.83a4 4 0 1 0 0-5.66" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "copyleft" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Copyleft, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Copyleft,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Copyleft = hmr(Copyleft, () => Copyleft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Copyleft[HMR].source;
    set(Copyleft[HMR].source, module.default[HMR].original);
  });
}
var copyleft_default = Copyleft;

// node_modules/lucide-svelte/dist/icons/copyright.svelte
Copyright[FILENAME] = "node_modules/lucide-svelte/dist/icons/copyright.svelte";
function Copyright($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Copyright);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M14.83 14.83a4 4 0 1 1 0-5.66" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "copyright" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Copyright, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Copyright,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Copyright = hmr(Copyright, () => Copyright[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Copyright[HMR].source;
    set(Copyright[HMR].source, module.default[HMR].original);
  });
}
var copyright_default = Copyright;

// node_modules/lucide-svelte/dist/icons/corner-down-left.svelte
Corner_down_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/corner-down-left.svelte";
function Corner_down_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Corner_down_left);
  const iconNode = [
    ["path", { "d": "M20 4v7a4 4 0 0 1-4 4H4" }],
    ["path", { "d": "m9 10-5 5 5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "corner-down-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Corner_down_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Corner_down_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Corner_down_left = hmr(Corner_down_left, () => Corner_down_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Corner_down_left[HMR].source;
    set(Corner_down_left[HMR].source, module.default[HMR].original);
  });
}
var corner_down_left_default = Corner_down_left;

// node_modules/lucide-svelte/dist/icons/corner-down-right.svelte
Corner_down_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/corner-down-right.svelte";
function Corner_down_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Corner_down_right);
  const iconNode = [
    ["path", { "d": "m15 10 5 5-5 5" }],
    ["path", { "d": "M4 4v7a4 4 0 0 0 4 4h12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "corner-down-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Corner_down_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Corner_down_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Corner_down_right = hmr(Corner_down_right, () => Corner_down_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Corner_down_right[HMR].source;
    set(Corner_down_right[HMR].source, module.default[HMR].original);
  });
}
var corner_down_right_default = Corner_down_right;

// node_modules/lucide-svelte/dist/icons/corner-left-down.svelte
Corner_left_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/corner-left-down.svelte";
function Corner_left_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Corner_left_down);
  const iconNode = [
    ["path", { "d": "m14 15-5 5-5-5" }],
    ["path", { "d": "M20 4h-7a4 4 0 0 0-4 4v12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "corner-left-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Corner_left_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Corner_left_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Corner_left_down = hmr(Corner_left_down, () => Corner_left_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Corner_left_down[HMR].source;
    set(Corner_left_down[HMR].source, module.default[HMR].original);
  });
}
var corner_left_down_default = Corner_left_down;

// node_modules/lucide-svelte/dist/icons/corner-left-up.svelte
Corner_left_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/corner-left-up.svelte";
function Corner_left_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Corner_left_up);
  const iconNode = [
    ["path", { "d": "M14 9 9 4 4 9" }],
    ["path", { "d": "M20 20h-7a4 4 0 0 1-4-4V4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "corner-left-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Corner_left_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Corner_left_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Corner_left_up = hmr(Corner_left_up, () => Corner_left_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Corner_left_up[HMR].source;
    set(Corner_left_up[HMR].source, module.default[HMR].original);
  });
}
var corner_left_up_default = Corner_left_up;

// node_modules/lucide-svelte/dist/icons/corner-right-down.svelte
Corner_right_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/corner-right-down.svelte";
function Corner_right_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Corner_right_down);
  const iconNode = [
    ["path", { "d": "m10 15 5 5 5-5" }],
    ["path", { "d": "M4 4h7a4 4 0 0 1 4 4v12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "corner-right-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Corner_right_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Corner_right_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Corner_right_down = hmr(Corner_right_down, () => Corner_right_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Corner_right_down[HMR].source;
    set(Corner_right_down[HMR].source, module.default[HMR].original);
  });
}
var corner_right_down_default = Corner_right_down;

// node_modules/lucide-svelte/dist/icons/corner-right-up.svelte
Corner_right_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/corner-right-up.svelte";
function Corner_right_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Corner_right_up);
  const iconNode = [
    ["path", { "d": "m10 9 5-5 5 5" }],
    ["path", { "d": "M4 20h7a4 4 0 0 0 4-4V4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "corner-right-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Corner_right_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Corner_right_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Corner_right_up = hmr(Corner_right_up, () => Corner_right_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Corner_right_up[HMR].source;
    set(Corner_right_up[HMR].source, module.default[HMR].original);
  });
}
var corner_right_up_default = Corner_right_up;

// node_modules/lucide-svelte/dist/icons/corner-up-left.svelte
Corner_up_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/corner-up-left.svelte";
function Corner_up_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Corner_up_left);
  const iconNode = [
    ["path", { "d": "M20 20v-7a4 4 0 0 0-4-4H4" }],
    ["path", { "d": "M9 14 4 9l5-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "corner-up-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Corner_up_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Corner_up_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Corner_up_left = hmr(Corner_up_left, () => Corner_up_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Corner_up_left[HMR].source;
    set(Corner_up_left[HMR].source, module.default[HMR].original);
  });
}
var corner_up_left_default = Corner_up_left;

// node_modules/lucide-svelte/dist/icons/corner-up-right.svelte
Corner_up_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/corner-up-right.svelte";
function Corner_up_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Corner_up_right);
  const iconNode = [
    ["path", { "d": "m15 14 5-5-5-5" }],
    ["path", { "d": "M4 20v-7a4 4 0 0 1 4-4h12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "corner-up-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Corner_up_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Corner_up_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Corner_up_right = hmr(Corner_up_right, () => Corner_up_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Corner_up_right[HMR].source;
    set(Corner_up_right[HMR].source, module.default[HMR].original);
  });
}
var corner_up_right_default = Corner_up_right;

// node_modules/lucide-svelte/dist/icons/cpu.svelte
Cpu[FILENAME] = "node_modules/lucide-svelte/dist/icons/cpu.svelte";
function Cpu($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cpu);
  const iconNode = [
    ["path", { "d": "M12 20v2" }],
    ["path", { "d": "M12 2v2" }],
    ["path", { "d": "M17 20v2" }],
    ["path", { "d": "M17 2v2" }],
    ["path", { "d": "M2 12h2" }],
    ["path", { "d": "M2 17h2" }],
    ["path", { "d": "M2 7h2" }],
    ["path", { "d": "M20 12h2" }],
    ["path", { "d": "M20 17h2" }],
    ["path", { "d": "M20 7h2" }],
    ["path", { "d": "M7 20v2" }],
    ["path", { "d": "M7 2v2" }],
    [
      "rect",
      { "x": "4", "y": "4", "width": "16", "height": "16", "rx": "2" }
    ],
    [
      "rect",
      { "x": "8", "y": "8", "width": "8", "height": "8", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cpu" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cpu, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cpu,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cpu = hmr(Cpu, () => Cpu[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cpu[HMR].source;
    set(Cpu[HMR].source, module.default[HMR].original);
  });
}
var cpu_default = Cpu;

// node_modules/lucide-svelte/dist/icons/creative-commons.svelte
Creative_commons[FILENAME] = "node_modules/lucide-svelte/dist/icons/creative-commons.svelte";
function Creative_commons($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Creative_commons);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    [
      "path",
      {
        "d": "M10 9.3a2.8 2.8 0 0 0-3.5 1 3.1 3.1 0 0 0 0 3.4 2.7 2.7 0 0 0 3.5 1"
      }
    ],
    [
      "path",
      {
        "d": "M17 9.3a2.8 2.8 0 0 0-3.5 1 3.1 3.1 0 0 0 0 3.4 2.7 2.7 0 0 0 3.5 1"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "creative-commons" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Creative_commons, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Creative_commons,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Creative_commons = hmr(Creative_commons, () => Creative_commons[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Creative_commons[HMR].source;
    set(Creative_commons[HMR].source, module.default[HMR].original);
  });
}
var creative_commons_default = Creative_commons;

// node_modules/lucide-svelte/dist/icons/credit-card.svelte
Credit_card[FILENAME] = "node_modules/lucide-svelte/dist/icons/credit-card.svelte";
function Credit_card($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Credit_card);
  const iconNode = [
    [
      "rect",
      { "width": "20", "height": "14", "x": "2", "y": "5", "rx": "2" }
    ],
    ["line", { "x1": "2", "x2": "22", "y1": "10", "y2": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "credit-card" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Credit_card, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Credit_card,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Credit_card = hmr(Credit_card, () => Credit_card[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Credit_card[HMR].source;
    set(Credit_card[HMR].source, module.default[HMR].original);
  });
}
var credit_card_default = Credit_card;

// node_modules/lucide-svelte/dist/icons/croissant.svelte
Croissant[FILENAME] = "node_modules/lucide-svelte/dist/icons/croissant.svelte";
function Croissant($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Croissant);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.2 18H4.774a1.5 1.5 0 0 1-1.352-.97 11 11 0 0 1 .132-6.487"
      }
    ],
    [
      "path",
      {
        "d": "M18 10.2V4.774a1.5 1.5 0 0 0-.97-1.352 11 11 0 0 0-6.486.132"
      }
    ],
    [
      "path",
      {
        "d": "M18 5a4 3 0 0 1 4 3 2 2 0 0 1-2 2 10 10 0 0 0-5.139 1.42"
      }
    ],
    [
      "path",
      {
        "d": "M5 18a3 4 0 0 0 3 4 2 2 0 0 0 2-2 10 10 0 0 1 1.42-5.14"
      }
    ],
    [
      "path",
      {
        "d": "M8.709 2.554a10 10 0 0 0-6.155 6.155 1.5 1.5 0 0 0 .676 1.626l9.807 5.42a2 2 0 0 0 2.718-2.718l-5.42-9.807a1.5 1.5 0 0 0-1.626-.676"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "croissant" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Croissant, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Croissant,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Croissant = hmr(Croissant, () => Croissant[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Croissant[HMR].source;
    set(Croissant[HMR].source, module.default[HMR].original);
  });
}
var croissant_default = Croissant;

// node_modules/lucide-svelte/dist/icons/crop.svelte
Crop[FILENAME] = "node_modules/lucide-svelte/dist/icons/crop.svelte";
function Crop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Crop);
  const iconNode = [
    ["path", { "d": "M6 2v14a2 2 0 0 0 2 2h14" }],
    ["path", { "d": "M18 22V8a2 2 0 0 0-2-2H2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "crop" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Crop, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Crop,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Crop = hmr(Crop, () => Crop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Crop[HMR].source;
    set(Crop[HMR].source, module.default[HMR].original);
  });
}
var crop_default = Crop;

// node_modules/lucide-svelte/dist/icons/cross.svelte
Cross[FILENAME] = "node_modules/lucide-svelte/dist/icons/cross.svelte";
function Cross($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cross);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 9a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h4a1 1 0 0 1 1 1v4a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-4a1 1 0 0 1 1-1h4a2 2 0 0 0 2-2v-2a2 2 0 0 0-2-2h-4a1 1 0 0 1-1-1V4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4a1 1 0 0 1-1 1z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cross" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cross, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cross,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cross = hmr(Cross, () => Cross[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cross[HMR].source;
    set(Cross[HMR].source, module.default[HMR].original);
  });
}
var cross_default = Cross;

// node_modules/lucide-svelte/dist/icons/crosshair.svelte
Crosshair[FILENAME] = "node_modules/lucide-svelte/dist/icons/crosshair.svelte";
function Crosshair($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Crosshair);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["line", { "x1": "22", "x2": "18", "y1": "12", "y2": "12" }],
    ["line", { "x1": "6", "x2": "2", "y1": "12", "y2": "12" }],
    ["line", { "x1": "12", "x2": "12", "y1": "6", "y2": "2" }],
    ["line", { "x1": "12", "x2": "12", "y1": "22", "y2": "18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "crosshair" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Crosshair, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Crosshair,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Crosshair = hmr(Crosshair, () => Crosshair[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Crosshair[HMR].source;
    set(Crosshair[HMR].source, module.default[HMR].original);
  });
}
var crosshair_default = Crosshair;

// node_modules/lucide-svelte/dist/icons/crown.svelte
Crown[FILENAME] = "node_modules/lucide-svelte/dist/icons/crown.svelte";
function Crown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Crown);
  const iconNode = [
    [
      "path",
      {
        "d": "M11.562 3.266a.5.5 0 0 1 .876 0L15.39 8.87a1 1 0 0 0 1.516.294L21.183 5.5a.5.5 0 0 1 .798.519l-2.834 10.246a1 1 0 0 1-.956.734H5.81a1 1 0 0 1-.957-.734L2.02 6.02a.5.5 0 0 1 .798-.519l4.276 3.664a1 1 0 0 0 1.516-.294z"
      }
    ],
    ["path", { "d": "M5 21h14" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "crown" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Crown, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Crown,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Crown = hmr(Crown, () => Crown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Crown[HMR].source;
    set(Crown[HMR].source, module.default[HMR].original);
  });
}
var crown_default = Crown;

// node_modules/lucide-svelte/dist/icons/cuboid.svelte
Cuboid[FILENAME] = "node_modules/lucide-svelte/dist/icons/cuboid.svelte";
function Cuboid($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cuboid);
  const iconNode = [
    [
      "path",
      {
        "d": "m21.12 6.4-6.05-4.06a2 2 0 0 0-2.17-.05L2.95 8.41a2 2 0 0 0-.95 1.7v5.82a2 2 0 0 0 .88 1.66l6.05 4.07a2 2 0 0 0 2.17.05l9.95-6.12a2 2 0 0 0 .95-1.7V8.06a2 2 0 0 0-.88-1.66Z"
      }
    ],
    ["path", { "d": "M10 22v-8L2.25 9.15" }],
    ["path", { "d": "m10 14 11.77-6.87" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cuboid" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cuboid, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cuboid,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cuboid = hmr(Cuboid, () => Cuboid[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cuboid[HMR].source;
    set(Cuboid[HMR].source, module.default[HMR].original);
  });
}
var cuboid_default = Cuboid;

// node_modules/lucide-svelte/dist/icons/cup-soda.svelte
Cup_soda[FILENAME] = "node_modules/lucide-svelte/dist/icons/cup-soda.svelte";
function Cup_soda($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cup_soda);
  const iconNode = [
    [
      "path",
      {
        "d": "m6 8 1.75 12.28a2 2 0 0 0 2 1.72h4.54a2 2 0 0 0 2-1.72L18 8"
      }
    ],
    ["path", { "d": "M5 8h14" }],
    [
      "path",
      { "d": "M7 15a6.47 6.47 0 0 1 5 0 6.47 6.47 0 0 0 5 0" }
    ],
    ["path", { "d": "m12 8 1-6h2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cup-soda" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cup_soda, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cup_soda,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cup_soda = hmr(Cup_soda, () => Cup_soda[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cup_soda[HMR].source;
    set(Cup_soda[HMR].source, module.default[HMR].original);
  });
}
var cup_soda_default = Cup_soda;

// node_modules/lucide-svelte/dist/icons/currency.svelte
Currency[FILENAME] = "node_modules/lucide-svelte/dist/icons/currency.svelte";
function Currency($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Currency);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "8" }],
    ["line", { "x1": "3", "x2": "6", "y1": "3", "y2": "6" }],
    ["line", { "x1": "21", "x2": "18", "y1": "3", "y2": "6" }],
    ["line", { "x1": "3", "x2": "6", "y1": "21", "y2": "18" }],
    ["line", { "x1": "21", "x2": "18", "y1": "21", "y2": "18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "currency" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Currency, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Currency,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Currency = hmr(Currency, () => Currency[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Currency[HMR].source;
    set(Currency[HMR].source, module.default[HMR].original);
  });
}
var currency_default = Currency;

// node_modules/lucide-svelte/dist/icons/cylinder.svelte
Cylinder[FILENAME] = "node_modules/lucide-svelte/dist/icons/cylinder.svelte";
function Cylinder($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Cylinder);
  const iconNode = [
    ["ellipse", { "cx": "12", "cy": "5", "rx": "9", "ry": "3" }],
    ["path", { "d": "M3 5v14a9 3 0 0 0 18 0V5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "cylinder" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Cylinder, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Cylinder,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Cylinder = hmr(Cylinder, () => Cylinder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Cylinder[HMR].source;
    set(Cylinder[HMR].source, module.default[HMR].original);
  });
}
var cylinder_default = Cylinder;

// node_modules/lucide-svelte/dist/icons/dam.svelte
Dam[FILENAME] = "node_modules/lucide-svelte/dist/icons/dam.svelte";
function Dam($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Dam);
  const iconNode = [
    [
      "path",
      {
        "d": "M11 11.31c1.17.56 1.54 1.69 3.5 1.69 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"
      }
    ],
    [
      "path",
      {
        "d": "M11.75 18c.35.5 1.45 1 2.75 1 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"
      }
    ],
    ["path", { "d": "M2 10h4" }],
    ["path", { "d": "M2 14h4" }],
    ["path", { "d": "M2 18h4" }],
    ["path", { "d": "M2 6h4" }],
    [
      "path",
      {
        "d": "M7 3a1 1 0 0 0-1 1v16a1 1 0 0 0 1 1h4a1 1 0 0 0 1-1L10 4a1 1 0 0 0-1-1z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "dam" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Dam, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Dam,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dam = hmr(Dam, () => Dam[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dam[HMR].source;
    set(Dam[HMR].source, module.default[HMR].original);
  });
}
var dam_default = Dam;

// node_modules/lucide-svelte/dist/icons/database-backup.svelte
Database_backup[FILENAME] = "node_modules/lucide-svelte/dist/icons/database-backup.svelte";
function Database_backup($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Database_backup);
  const iconNode = [
    ["ellipse", { "cx": "12", "cy": "5", "rx": "9", "ry": "3" }],
    ["path", { "d": "M3 12a9 3 0 0 0 5 2.69" }],
    ["path", { "d": "M21 9.3V5" }],
    ["path", { "d": "M3 5v14a9 3 0 0 0 6.47 2.88" }],
    ["path", { "d": "M12 12v4h4" }],
    [
      "path",
      {
        "d": "M13 20a5 5 0 0 0 9-3 4.5 4.5 0 0 0-4.5-4.5c-1.33 0-2.54.54-3.41 1.41L12 16"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "database-backup" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Database_backup, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Database_backup,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Database_backup = hmr(Database_backup, () => Database_backup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Database_backup[HMR].source;
    set(Database_backup[HMR].source, module.default[HMR].original);
  });
}
var database_backup_default = Database_backup;

// node_modules/lucide-svelte/dist/icons/database-zap.svelte
Database_zap[FILENAME] = "node_modules/lucide-svelte/dist/icons/database-zap.svelte";
function Database_zap($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Database_zap);
  const iconNode = [
    ["ellipse", { "cx": "12", "cy": "5", "rx": "9", "ry": "3" }],
    ["path", { "d": "M3 5V19A9 3 0 0 0 15 21.84" }],
    ["path", { "d": "M21 5V8" }],
    ["path", { "d": "M21 12L18 17H22L19 22" }],
    ["path", { "d": "M3 12A9 3 0 0 0 14.59 14.87" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "database-zap" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Database_zap, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Database_zap,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Database_zap = hmr(Database_zap, () => Database_zap[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Database_zap[HMR].source;
    set(Database_zap[HMR].source, module.default[HMR].original);
  });
}
var database_zap_default = Database_zap;

// node_modules/lucide-svelte/dist/icons/database.svelte
Database[FILENAME] = "node_modules/lucide-svelte/dist/icons/database.svelte";
function Database($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Database);
  const iconNode = [
    ["ellipse", { "cx": "12", "cy": "5", "rx": "9", "ry": "3" }],
    ["path", { "d": "M3 5V19A9 3 0 0 0 21 19V5" }],
    ["path", { "d": "M3 12A9 3 0 0 0 21 12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "database" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Database, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Database,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Database = hmr(Database, () => Database[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Database[HMR].source;
    set(Database[HMR].source, module.default[HMR].original);
  });
}
var database_default = Database;

// node_modules/lucide-svelte/dist/icons/decimals-arrow-left.svelte
Decimals_arrow_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/decimals-arrow-left.svelte";
function Decimals_arrow_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Decimals_arrow_left);
  const iconNode = [
    ["path", { "d": "m13 21-3-3 3-3" }],
    ["path", { "d": "M20 18H10" }],
    ["path", { "d": "M3 11h.01" }],
    [
      "rect",
      { "x": "6", "y": "3", "width": "5", "height": "8", "rx": "2.5" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "decimals-arrow-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Decimals_arrow_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Decimals_arrow_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Decimals_arrow_left = hmr(Decimals_arrow_left, () => Decimals_arrow_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Decimals_arrow_left[HMR].source;
    set(Decimals_arrow_left[HMR].source, module.default[HMR].original);
  });
}
var decimals_arrow_left_default = Decimals_arrow_left;

// node_modules/lucide-svelte/dist/icons/decimals-arrow-right.svelte
Decimals_arrow_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/decimals-arrow-right.svelte";
function Decimals_arrow_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Decimals_arrow_right);
  const iconNode = [
    ["path", { "d": "M10 18h10" }],
    ["path", { "d": "m17 21 3-3-3-3" }],
    ["path", { "d": "M3 11h.01" }],
    [
      "rect",
      {
        "x": "15",
        "y": "3",
        "width": "5",
        "height": "8",
        "rx": "2.5"
      }
    ],
    [
      "rect",
      { "x": "6", "y": "3", "width": "5", "height": "8", "rx": "2.5" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "decimals-arrow-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Decimals_arrow_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Decimals_arrow_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Decimals_arrow_right = hmr(Decimals_arrow_right, () => Decimals_arrow_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Decimals_arrow_right[HMR].source;
    set(Decimals_arrow_right[HMR].source, module.default[HMR].original);
  });
}
var decimals_arrow_right_default = Decimals_arrow_right;

// node_modules/lucide-svelte/dist/icons/delete.svelte
Delete[FILENAME] = "node_modules/lucide-svelte/dist/icons/delete.svelte";
function Delete($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Delete);
  const iconNode = [
    [
      "path",
      {
        "d": "M10 5a2 2 0 0 0-1.344.519l-6.328 5.74a1 1 0 0 0 0 1.481l6.328 5.741A2 2 0 0 0 10 19h10a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2z"
      }
    ],
    ["path", { "d": "m12 9 6 6" }],
    ["path", { "d": "m18 9-6 6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "delete" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Delete, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Delete,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Delete = hmr(Delete, () => Delete[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Delete[HMR].source;
    set(Delete[HMR].source, module.default[HMR].original);
  });
}
var delete_default = Delete;

// node_modules/lucide-svelte/dist/icons/dessert.svelte
Dessert[FILENAME] = "node_modules/lucide-svelte/dist/icons/dessert.svelte";
function Dessert($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Dessert);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.162 3.167A10 10 0 0 0 2 13a2 2 0 0 0 4 0v-1a2 2 0 0 1 4 0v4a2 2 0 0 0 4 0v-4a2 2 0 0 1 4 0v1a2 2 0 0 0 4-.006 10 10 0 0 0-8.161-9.826"
      }
    ],
    ["path", { "d": "M20.804 14.869a9 9 0 0 1-17.608 0" }],
    ["circle", { "cx": "12", "cy": "4", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "dessert" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Dessert, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Dessert,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dessert = hmr(Dessert, () => Dessert[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dessert[HMR].source;
    set(Dessert[HMR].source, module.default[HMR].original);
  });
}
var dessert_default = Dessert;

// node_modules/lucide-svelte/dist/icons/diameter.svelte
Diameter[FILENAME] = "node_modules/lucide-svelte/dist/icons/diameter.svelte";
function Diameter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Diameter);
  const iconNode = [
    ["circle", { "cx": "19", "cy": "19", "r": "2" }],
    ["circle", { "cx": "5", "cy": "5", "r": "2" }],
    ["path", { "d": "M6.48 3.66a10 10 0 0 1 13.86 13.86" }],
    ["path", { "d": "m6.41 6.41 11.18 11.18" }],
    ["path", { "d": "M3.66 6.48a10 10 0 0 0 13.86 13.86" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "diameter" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Diameter, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Diameter,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Diameter = hmr(Diameter, () => Diameter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Diameter[HMR].source;
    set(Diameter[HMR].source, module.default[HMR].original);
  });
}
var diameter_default = Diameter;

// node_modules/lucide-svelte/dist/icons/diamond-minus.svelte
Diamond_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/diamond-minus.svelte";
function Diamond_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Diamond_minus);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0z"
      }
    ],
    ["path", { "d": "M8 12h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "diamond-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Diamond_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Diamond_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Diamond_minus = hmr(Diamond_minus, () => Diamond_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Diamond_minus[HMR].source;
    set(Diamond_minus[HMR].source, module.default[HMR].original);
  });
}
var diamond_minus_default = Diamond_minus;

// node_modules/lucide-svelte/dist/icons/diamond-percent.svelte
Diamond_percent[FILENAME] = "node_modules/lucide-svelte/dist/icons/diamond-percent.svelte";
function Diamond_percent($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Diamond_percent);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0Z"
      }
    ],
    ["path", { "d": "M9.2 9.2h.01" }],
    ["path", { "d": "m14.5 9.5-5 5" }],
    ["path", { "d": "M14.7 14.8h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "diamond-percent" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Diamond_percent, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Diamond_percent,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Diamond_percent = hmr(Diamond_percent, () => Diamond_percent[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Diamond_percent[HMR].source;
    set(Diamond_percent[HMR].source, module.default[HMR].original);
  });
}
var diamond_percent_default = Diamond_percent;

// node_modules/lucide-svelte/dist/icons/diamond-plus.svelte
Diamond_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/diamond-plus.svelte";
function Diamond_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Diamond_plus);
  const iconNode = [
    ["path", { "d": "M12 8v8" }],
    [
      "path",
      {
        "d": "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0z"
      }
    ],
    ["path", { "d": "M8 12h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "diamond-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Diamond_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Diamond_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Diamond_plus = hmr(Diamond_plus, () => Diamond_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Diamond_plus[HMR].source;
    set(Diamond_plus[HMR].source, module.default[HMR].original);
  });
}
var diamond_plus_default = Diamond_plus;

// node_modules/lucide-svelte/dist/icons/diamond.svelte
Diamond[FILENAME] = "node_modules/lucide-svelte/dist/icons/diamond.svelte";
function Diamond($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Diamond);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41l-7.59-7.59a2.41 2.41 0 0 0-3.41 0Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "diamond" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Diamond, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Diamond,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Diamond = hmr(Diamond, () => Diamond[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Diamond[HMR].source;
    set(Diamond[HMR].source, module.default[HMR].original);
  });
}
var diamond_default = Diamond;

// node_modules/lucide-svelte/dist/icons/dice-1.svelte
Dice_1[FILENAME] = "node_modules/lucide-svelte/dist/icons/dice-1.svelte";
function Dice_1($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Dice_1);
  const iconNode = [
    [
      "rect",
      {
        "width": "18",
        "height": "18",
        "x": "3",
        "y": "3",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["path", { "d": "M12 12h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "dice-1" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Dice_1, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Dice_1,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dice_1 = hmr(Dice_1, () => Dice_1[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dice_1[HMR].source;
    set(Dice_1[HMR].source, module.default[HMR].original);
  });
}
var dice_1_default = Dice_1;

// node_modules/lucide-svelte/dist/icons/dice-2.svelte
Dice_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/dice-2.svelte";
function Dice_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Dice_2);
  const iconNode = [
    [
      "rect",
      {
        "width": "18",
        "height": "18",
        "x": "3",
        "y": "3",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["path", { "d": "M15 9h.01" }],
    ["path", { "d": "M9 15h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "dice-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Dice_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Dice_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dice_2 = hmr(Dice_2, () => Dice_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dice_2[HMR].source;
    set(Dice_2[HMR].source, module.default[HMR].original);
  });
}
var dice_2_default = Dice_2;

// node_modules/lucide-svelte/dist/icons/dice-3.svelte
Dice_3[FILENAME] = "node_modules/lucide-svelte/dist/icons/dice-3.svelte";
function Dice_3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Dice_3);
  const iconNode = [
    [
      "rect",
      {
        "width": "18",
        "height": "18",
        "x": "3",
        "y": "3",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["path", { "d": "M16 8h.01" }],
    ["path", { "d": "M12 12h.01" }],
    ["path", { "d": "M8 16h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "dice-3" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Dice_3, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Dice_3,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dice_3 = hmr(Dice_3, () => Dice_3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dice_3[HMR].source;
    set(Dice_3[HMR].source, module.default[HMR].original);
  });
}
var dice_3_default = Dice_3;

// node_modules/lucide-svelte/dist/icons/dice-4.svelte
Dice_4[FILENAME] = "node_modules/lucide-svelte/dist/icons/dice-4.svelte";
function Dice_4($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Dice_4);
  const iconNode = [
    [
      "rect",
      {
        "width": "18",
        "height": "18",
        "x": "3",
        "y": "3",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["path", { "d": "M16 8h.01" }],
    ["path", { "d": "M8 8h.01" }],
    ["path", { "d": "M8 16h.01" }],
    ["path", { "d": "M16 16h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "dice-4" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Dice_4, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Dice_4,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dice_4 = hmr(Dice_4, () => Dice_4[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dice_4[HMR].source;
    set(Dice_4[HMR].source, module.default[HMR].original);
  });
}
var dice_4_default = Dice_4;

// node_modules/lucide-svelte/dist/icons/dice-5.svelte
Dice_5[FILENAME] = "node_modules/lucide-svelte/dist/icons/dice-5.svelte";
function Dice_5($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Dice_5);
  const iconNode = [
    [
      "rect",
      {
        "width": "18",
        "height": "18",
        "x": "3",
        "y": "3",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["path", { "d": "M16 8h.01" }],
    ["path", { "d": "M8 8h.01" }],
    ["path", { "d": "M8 16h.01" }],
    ["path", { "d": "M16 16h.01" }],
    ["path", { "d": "M12 12h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "dice-5" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Dice_5, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Dice_5,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dice_5 = hmr(Dice_5, () => Dice_5[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dice_5[HMR].source;
    set(Dice_5[HMR].source, module.default[HMR].original);
  });
}
var dice_5_default = Dice_5;

// node_modules/lucide-svelte/dist/icons/dice-6.svelte
Dice_6[FILENAME] = "node_modules/lucide-svelte/dist/icons/dice-6.svelte";
function Dice_6($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Dice_6);
  const iconNode = [
    [
      "rect",
      {
        "width": "18",
        "height": "18",
        "x": "3",
        "y": "3",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["path", { "d": "M16 8h.01" }],
    ["path", { "d": "M16 12h.01" }],
    ["path", { "d": "M16 16h.01" }],
    ["path", { "d": "M8 8h.01" }],
    ["path", { "d": "M8 12h.01" }],
    ["path", { "d": "M8 16h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "dice-6" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Dice_6, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Dice_6,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dice_6 = hmr(Dice_6, () => Dice_6[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dice_6[HMR].source;
    set(Dice_6[HMR].source, module.default[HMR].original);
  });
}
var dice_6_default = Dice_6;

// node_modules/lucide-svelte/dist/icons/dices.svelte
Dices[FILENAME] = "node_modules/lucide-svelte/dist/icons/dices.svelte";
function Dices($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Dices);
  const iconNode = [
    [
      "rect",
      {
        "width": "12",
        "height": "12",
        "x": "2",
        "y": "10",
        "rx": "2",
        "ry": "2"
      }
    ],
    [
      "path",
      {
        "d": "m17.92 14 3.5-3.5a2.24 2.24 0 0 0 0-3l-5-4.92a2.24 2.24 0 0 0-3 0L10 6"
      }
    ],
    ["path", { "d": "M6 18h.01" }],
    ["path", { "d": "M10 14h.01" }],
    ["path", { "d": "M15 6h.01" }],
    ["path", { "d": "M18 9h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "dices" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Dices, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Dices,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dices = hmr(Dices, () => Dices[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dices[HMR].source;
    set(Dices[HMR].source, module.default[HMR].original);
  });
}
var dices_default = Dices;

// node_modules/lucide-svelte/dist/icons/diff.svelte
Diff[FILENAME] = "node_modules/lucide-svelte/dist/icons/diff.svelte";
function Diff($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Diff);
  const iconNode = [
    ["path", { "d": "M12 3v14" }],
    ["path", { "d": "M5 10h14" }],
    ["path", { "d": "M5 21h14" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "diff" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Diff, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Diff,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Diff = hmr(Diff, () => Diff[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Diff[HMR].source;
    set(Diff[HMR].source, module.default[HMR].original);
  });
}
var diff_default = Diff;

// node_modules/lucide-svelte/dist/icons/disc-2.svelte
Disc_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/disc-2.svelte";
function Disc_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Disc_2);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["circle", { "cx": "12", "cy": "12", "r": "4" }],
    ["path", { "d": "M12 12h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "disc-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Disc_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Disc_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Disc_2 = hmr(Disc_2, () => Disc_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Disc_2[HMR].source;
    set(Disc_2[HMR].source, module.default[HMR].original);
  });
}
var disc_2_default = Disc_2;

// node_modules/lucide-svelte/dist/icons/disc-3.svelte
Disc_3[FILENAME] = "node_modules/lucide-svelte/dist/icons/disc-3.svelte";
function Disc_3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Disc_3);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M6 12c0-1.7.7-3.2 1.8-4.2" }],
    ["circle", { "cx": "12", "cy": "12", "r": "2" }],
    ["path", { "d": "M18 12c0 1.7-.7 3.2-1.8 4.2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "disc-3" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Disc_3, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Disc_3,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Disc_3 = hmr(Disc_3, () => Disc_3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Disc_3[HMR].source;
    set(Disc_3[HMR].source, module.default[HMR].original);
  });
}
var disc_3_default = Disc_3;

// node_modules/lucide-svelte/dist/icons/disc-album.svelte
Disc_album[FILENAME] = "node_modules/lucide-svelte/dist/icons/disc-album.svelte";
function Disc_album($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Disc_album);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["circle", { "cx": "12", "cy": "12", "r": "5" }],
    ["path", { "d": "M12 12h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "disc-album" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Disc_album, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Disc_album,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Disc_album = hmr(Disc_album, () => Disc_album[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Disc_album[HMR].source;
    set(Disc_album[HMR].source, module.default[HMR].original);
  });
}
var disc_album_default = Disc_album;

// node_modules/lucide-svelte/dist/icons/disc.svelte
Disc[FILENAME] = "node_modules/lucide-svelte/dist/icons/disc.svelte";
function Disc($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Disc);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["circle", { "cx": "12", "cy": "12", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "disc" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Disc, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Disc,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Disc = hmr(Disc, () => Disc[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Disc[HMR].source;
    set(Disc[HMR].source, module.default[HMR].original);
  });
}
var disc_default = Disc;

// node_modules/lucide-svelte/dist/icons/divide.svelte
Divide[FILENAME] = "node_modules/lucide-svelte/dist/icons/divide.svelte";
function Divide($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Divide);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "6", "r": "1" }],
    ["line", { "x1": "5", "x2": "19", "y1": "12", "y2": "12" }],
    ["circle", { "cx": "12", "cy": "18", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "divide" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Divide, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Divide,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Divide = hmr(Divide, () => Divide[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Divide[HMR].source;
    set(Divide[HMR].source, module.default[HMR].original);
  });
}
var divide_default = Divide;

// node_modules/lucide-svelte/dist/icons/dna-off.svelte
Dna_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/dna-off.svelte";
function Dna_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Dna_off);
  const iconNode = [
    ["path", { "d": "M15 2c-1.35 1.5-2.092 3-2.5 4.5L14 8" }],
    ["path", { "d": "m17 6-2.891-2.891" }],
    ["path", { "d": "M2 15c3.333-3 6.667-3 10-3" }],
    ["path", { "d": "m2 2 20 20" }],
    ["path", { "d": "m20 9 .891.891" }],
    ["path", { "d": "M22 9c-1.5 1.35-3 2.092-4.5 2.5l-1-1" }],
    ["path", { "d": "M3.109 14.109 4 15" }],
    ["path", { "d": "m6.5 12.5 1 1" }],
    ["path", { "d": "m7 18 2.891 2.891" }],
    ["path", { "d": "M9 22c1.35-1.5 2.092-3 2.5-4.5L10 16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "dna-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Dna_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Dna_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dna_off = hmr(Dna_off, () => Dna_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dna_off[HMR].source;
    set(Dna_off[HMR].source, module.default[HMR].original);
  });
}
var dna_off_default = Dna_off;

// node_modules/lucide-svelte/dist/icons/dna.svelte
Dna[FILENAME] = "node_modules/lucide-svelte/dist/icons/dna.svelte";
function Dna($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Dna);
  const iconNode = [
    ["path", { "d": "m10 16 1.5 1.5" }],
    ["path", { "d": "m14 8-1.5-1.5" }],
    [
      "path",
      { "d": "M15 2c-1.798 1.998-2.518 3.995-2.807 5.993" }
    ],
    ["path", { "d": "m16.5 10.5 1 1" }],
    ["path", { "d": "m17 6-2.891-2.891" }],
    ["path", { "d": "M2 15c6.667-6 13.333 0 20-6" }],
    ["path", { "d": "m20 9 .891.891" }],
    ["path", { "d": "M3.109 14.109 4 15" }],
    ["path", { "d": "m6.5 12.5 1 1" }],
    ["path", { "d": "m7 18 2.891 2.891" }],
    ["path", { "d": "M9 22c1.798-1.998 2.518-3.995 2.807-5.993" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "dna" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Dna, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Dna,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dna = hmr(Dna, () => Dna[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dna[HMR].source;
    set(Dna[HMR].source, module.default[HMR].original);
  });
}
var dna_default = Dna;

// node_modules/lucide-svelte/dist/icons/dock.svelte
Dock[FILENAME] = "node_modules/lucide-svelte/dist/icons/dock.svelte";
function Dock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Dock);
  const iconNode = [
    ["path", { "d": "M2 8h20" }],
    [
      "rect",
      { "width": "20", "height": "16", "x": "2", "y": "4", "rx": "2" }
    ],
    ["path", { "d": "M6 16h12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "dock" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Dock, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Dock,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dock = hmr(Dock, () => Dock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dock[HMR].source;
    set(Dock[HMR].source, module.default[HMR].original);
  });
}
var dock_default = Dock;

// node_modules/lucide-svelte/dist/icons/dog.svelte
Dog[FILENAME] = "node_modules/lucide-svelte/dist/icons/dog.svelte";
function Dog($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Dog);
  const iconNode = [
    ["path", { "d": "M11.25 16.25h1.5L12 17z" }],
    ["path", { "d": "M16 14v.5" }],
    [
      "path",
      {
        "d": "M4.42 11.247A13.152 13.152 0 0 0 4 14.556C4 18.728 7.582 21 12 21s8-2.272 8-6.444a11.702 11.702 0 0 0-.493-3.309"
      }
    ],
    ["path", { "d": "M8 14v.5" }],
    [
      "path",
      {
        "d": "M8.5 8.5c-.384 1.05-1.083 2.028-2.344 2.5-1.931.722-3.576-.297-3.656-1-.113-.994 1.177-6.53 4-7 1.923-.321 3.651.845 3.651 2.235A7.497 7.497 0 0 1 14 5.277c0-1.39 1.844-2.598 3.767-2.277 2.823.47 4.113 6.006 4 7-.08.703-1.725 1.722-3.656 1-1.261-.472-1.855-1.45-2.239-2.5"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "dog" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Dog, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Dog,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dog = hmr(Dog, () => Dog[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dog[HMR].source;
    set(Dog[HMR].source, module.default[HMR].original);
  });
}
var dog_default = Dog;

// node_modules/lucide-svelte/dist/icons/dollar-sign.svelte
Dollar_sign[FILENAME] = "node_modules/lucide-svelte/dist/icons/dollar-sign.svelte";
function Dollar_sign($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Dollar_sign);
  const iconNode = [
    ["line", { "x1": "12", "x2": "12", "y1": "2", "y2": "22" }],
    [
      "path",
      { "d": "M17 5H9.5a3.5 3.5 0 0 0 0 7h5a3.5 3.5 0 0 1 0 7H6" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "dollar-sign" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Dollar_sign, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Dollar_sign,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dollar_sign = hmr(Dollar_sign, () => Dollar_sign[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dollar_sign[HMR].source;
    set(Dollar_sign[HMR].source, module.default[HMR].original);
  });
}
var dollar_sign_default = Dollar_sign;

// node_modules/lucide-svelte/dist/icons/donut.svelte
Donut[FILENAME] = "node_modules/lucide-svelte/dist/icons/donut.svelte";
function Donut($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Donut);
  const iconNode = [
    [
      "path",
      {
        "d": "M20.5 10a2.5 2.5 0 0 1-2.4-3H18a2.95 2.95 0 0 1-2.6-4.4 10 10 0 1 0 6.3 7.1c-.3.2-.8.3-1.2.3"
      }
    ],
    ["circle", { "cx": "12", "cy": "12", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "donut" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Donut, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Donut,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Donut = hmr(Donut, () => Donut[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Donut[HMR].source;
    set(Donut[HMR].source, module.default[HMR].original);
  });
}
var donut_default = Donut;

// node_modules/lucide-svelte/dist/icons/door-closed-locked.svelte
Door_closed_locked[FILENAME] = "node_modules/lucide-svelte/dist/icons/door-closed-locked.svelte";
function Door_closed_locked($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Door_closed_locked);
  const iconNode = [
    ["path", { "d": "M10 12h.01" }],
    ["path", { "d": "M18 9V6a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v14" }],
    ["path", { "d": "M2 20h8" }],
    ["path", { "d": "M20 17v-2a2 2 0 1 0-4 0v2" }],
    [
      "rect",
      { "x": "14", "y": "17", "width": "8", "height": "5", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "door-closed-locked" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Door_closed_locked, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Door_closed_locked,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Door_closed_locked = hmr(Door_closed_locked, () => Door_closed_locked[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Door_closed_locked[HMR].source;
    set(Door_closed_locked[HMR].source, module.default[HMR].original);
  });
}
var door_closed_locked_default = Door_closed_locked;

// node_modules/lucide-svelte/dist/icons/door-closed.svelte
Door_closed[FILENAME] = "node_modules/lucide-svelte/dist/icons/door-closed.svelte";
function Door_closed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Door_closed);
  const iconNode = [
    ["path", { "d": "M10 12h.01" }],
    ["path", { "d": "M18 20V6a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v14" }],
    ["path", { "d": "M2 20h20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "door-closed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Door_closed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Door_closed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Door_closed = hmr(Door_closed, () => Door_closed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Door_closed[HMR].source;
    set(Door_closed[HMR].source, module.default[HMR].original);
  });
}
var door_closed_default = Door_closed;

// node_modules/lucide-svelte/dist/icons/door-open.svelte
Door_open[FILENAME] = "node_modules/lucide-svelte/dist/icons/door-open.svelte";
function Door_open($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Door_open);
  const iconNode = [
    ["path", { "d": "M11 20H2" }],
    [
      "path",
      {
        "d": "M11 4.562v16.157a1 1 0 0 0 1.242.97L19 20V5.562a2 2 0 0 0-1.515-1.94l-4-1A2 2 0 0 0 11 4.561z"
      }
    ],
    ["path", { "d": "M11 4H8a2 2 0 0 0-2 2v14" }],
    ["path", { "d": "M14 12h.01" }],
    ["path", { "d": "M22 20h-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "door-open" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Door_open, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Door_open,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Door_open = hmr(Door_open, () => Door_open[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Door_open[HMR].source;
    set(Door_open[HMR].source, module.default[HMR].original);
  });
}
var door_open_default = Door_open;

// node_modules/lucide-svelte/dist/icons/dot.svelte
Dot[FILENAME] = "node_modules/lucide-svelte/dist/icons/dot.svelte";
function Dot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Dot);
  const iconNode = [["circle", { "cx": "12.1", "cy": "12.1", "r": "1" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "dot" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Dot, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Dot,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dot = hmr(Dot, () => Dot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dot[HMR].source;
    set(Dot[HMR].source, module.default[HMR].original);
  });
}
var dot_default = Dot;

// node_modules/lucide-svelte/dist/icons/download.svelte
Download[FILENAME] = "node_modules/lucide-svelte/dist/icons/download.svelte";
function Download($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Download);
  const iconNode = [
    ["path", { "d": "M12 15V3" }],
    ["path", { "d": "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" }],
    ["path", { "d": "m7 10 5 5 5-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "download" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Download, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Download,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Download = hmr(Download, () => Download[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Download[HMR].source;
    set(Download[HMR].source, module.default[HMR].original);
  });
}
var download_default = Download;

// node_modules/lucide-svelte/dist/icons/drafting-compass.svelte
Drafting_compass[FILENAME] = "node_modules/lucide-svelte/dist/icons/drafting-compass.svelte";
function Drafting_compass($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Drafting_compass);
  const iconNode = [
    ["path", { "d": "m12.99 6.74 1.93 3.44" }],
    ["path", { "d": "M19.136 12a10 10 0 0 1-14.271 0" }],
    ["path", { "d": "m21 21-2.16-3.84" }],
    ["path", { "d": "m3 21 8.02-14.26" }],
    ["circle", { "cx": "12", "cy": "5", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "drafting-compass" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Drafting_compass, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Drafting_compass,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Drafting_compass = hmr(Drafting_compass, () => Drafting_compass[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Drafting_compass[HMR].source;
    set(Drafting_compass[HMR].source, module.default[HMR].original);
  });
}
var drafting_compass_default = Drafting_compass;

// node_modules/lucide-svelte/dist/icons/drama.svelte
Drama[FILENAME] = "node_modules/lucide-svelte/dist/icons/drama.svelte";
function Drama($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Drama);
  const iconNode = [
    ["path", { "d": "M10 11h.01" }],
    ["path", { "d": "M14 6h.01" }],
    ["path", { "d": "M18 6h.01" }],
    ["path", { "d": "M6.5 13.1h.01" }],
    [
      "path",
      { "d": "M22 5c0 9-4 12-6 12s-6-3-6-12c0-2 2-3 6-3s6 1 6 3" }
    ],
    ["path", { "d": "M17.4 9.9c-.8.8-2 .8-2.8 0" }],
    [
      "path",
      {
        "d": "M10.1 7.1C9 7.2 7.7 7.7 6 8.6c-3.5 2-4.7 3.9-3.7 5.6 4.5 7.8 9.5 8.4 11.2 7.4.9-.5 1.9-2.1 1.9-4.7"
      }
    ],
    ["path", { "d": "M9.1 16.5c.3-1.1 1.4-1.7 2.4-1.4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "drama" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Drama, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Drama,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Drama = hmr(Drama, () => Drama[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Drama[HMR].source;
    set(Drama[HMR].source, module.default[HMR].original);
  });
}
var drama_default = Drama;

// node_modules/lucide-svelte/dist/icons/dribbble.svelte
Dribbble[FILENAME] = "node_modules/lucide-svelte/dist/icons/dribbble.svelte";
function Dribbble($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Dribbble);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    [
      "path",
      { "d": "M19.13 5.09C15.22 9.14 10 10.44 2.25 10.94" }
    ],
    [
      "path",
      { "d": "M21.75 12.84c-6.62-1.41-12.14 1-16.38 6.32" }
    ],
    ["path", { "d": "M8.56 2.75c4.37 6 6 9.42 8 17.72" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "dribbble" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Dribbble, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Dribbble,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dribbble = hmr(Dribbble, () => Dribbble[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dribbble[HMR].source;
    set(Dribbble[HMR].source, module.default[HMR].original);
  });
}
var dribbble_default = Dribbble;

// node_modules/lucide-svelte/dist/icons/drill.svelte
Drill[FILENAME] = "node_modules/lucide-svelte/dist/icons/drill.svelte";
function Drill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Drill);
  const iconNode = [
    [
      "path",
      {
        "d": "M10 18a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H5a3 3 0 0 1-3-3 1 1 0 0 1 1-1z"
      }
    ],
    [
      "path",
      {
        "d": "M13 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1l-.81 3.242a1 1 0 0 1-.97.758H8"
      }
    ],
    ["path", { "d": "M14 4h3a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-3" }],
    ["path", { "d": "M18 6h4" }],
    ["path", { "d": "m5 10-2 8" }],
    ["path", { "d": "m7 18 2-8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "drill" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Drill, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Drill,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Drill = hmr(Drill, () => Drill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Drill[HMR].source;
    set(Drill[HMR].source, module.default[HMR].original);
  });
}
var drill_default = Drill;

// node_modules/lucide-svelte/dist/icons/drone.svelte
Drone[FILENAME] = "node_modules/lucide-svelte/dist/icons/drone.svelte";
function Drone($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Drone);
  const iconNode = [
    ["path", { "d": "M10 10 7 7" }],
    ["path", { "d": "m10 14-3 3" }],
    ["path", { "d": "m14 10 3-3" }],
    ["path", { "d": "m14 14 3 3" }],
    ["path", { "d": "M14.205 4.139a4 4 0 1 1 5.439 5.863" }],
    ["path", { "d": "M19.637 14a4 4 0 1 1-5.432 5.868" }],
    ["path", { "d": "M4.367 10a4 4 0 1 1 5.438-5.862" }],
    ["path", { "d": "M9.795 19.862a4 4 0 1 1-5.429-5.873" }],
    [
      "rect",
      { "x": "10", "y": "8", "width": "4", "height": "8", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "drone" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Drone, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Drone,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Drone = hmr(Drone, () => Drone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Drone[HMR].source;
    set(Drone[HMR].source, module.default[HMR].original);
  });
}
var drone_default = Drone;

// node_modules/lucide-svelte/dist/icons/droplet-off.svelte
Droplet_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/droplet-off.svelte";
function Droplet_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Droplet_off);
  const iconNode = [
    [
      "path",
      {
        "d": "M18.715 13.186C18.29 11.858 17.384 10.607 16 9.5c-2-1.6-3.5-4-4-6.5a10.7 10.7 0 0 1-.884 2.586"
      }
    ],
    ["path", { "d": "m2 2 20 20" }],
    [
      "path",
      {
        "d": "M8.795 8.797A11 11 0 0 1 8 9.5C6 11.1 5 13 5 15a7 7 0 0 0 13.222 3.208"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "droplet-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Droplet_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Droplet_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Droplet_off = hmr(Droplet_off, () => Droplet_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Droplet_off[HMR].source;
    set(Droplet_off[HMR].source, module.default[HMR].original);
  });
}
var droplet_off_default = Droplet_off;

// node_modules/lucide-svelte/dist/icons/droplet.svelte
Droplet[FILENAME] = "node_modules/lucide-svelte/dist/icons/droplet.svelte";
function Droplet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Droplet);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 22a7 7 0 0 0 7-7c0-2-1-3.9-3-5.5s-3.5-4-4-6.5c-.5 2.5-2 4.9-4 6.5C6 11.1 5 13 5 15a7 7 0 0 0 7 7z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "droplet" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Droplet, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Droplet,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Droplet = hmr(Droplet, () => Droplet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Droplet[HMR].source;
    set(Droplet[HMR].source, module.default[HMR].original);
  });
}
var droplet_default = Droplet;

// node_modules/lucide-svelte/dist/icons/droplets.svelte
Droplets[FILENAME] = "node_modules/lucide-svelte/dist/icons/droplets.svelte";
function Droplets($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Droplets);
  const iconNode = [
    [
      "path",
      {
        "d": "M7 16.3c2.2 0 4-1.83 4-4.05 0-1.16-.57-2.26-1.71-3.19S7.29 6.75 7 5.3c-.29 1.45-1.14 2.84-2.29 3.76S3 11.1 3 12.25c0 2.22 1.8 4.05 4 4.05z"
      }
    ],
    [
      "path",
      {
        "d": "M12.56 6.6A10.97 10.97 0 0 0 14 3.02c.5 2.5 2 4.9 4 6.5s3 3.5 3 5.5a6.98 6.98 0 0 1-11.91 4.97"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "droplets" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Droplets, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Droplets,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Droplets = hmr(Droplets, () => Droplets[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Droplets[HMR].source;
    set(Droplets[HMR].source, module.default[HMR].original);
  });
}
var droplets_default = Droplets;

// node_modules/lucide-svelte/dist/icons/drum.svelte
Drum[FILENAME] = "node_modules/lucide-svelte/dist/icons/drum.svelte";
function Drum($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Drum);
  const iconNode = [
    ["path", { "d": "m2 2 8 8" }],
    ["path", { "d": "m22 2-8 8" }],
    ["ellipse", { "cx": "12", "cy": "9", "rx": "10", "ry": "5" }],
    ["path", { "d": "M7 13.4v7.9" }],
    ["path", { "d": "M12 14v8" }],
    ["path", { "d": "M17 13.4v7.9" }],
    ["path", { "d": "M2 9v8a10 5 0 0 0 20 0V9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "drum" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Drum, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Drum,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Drum = hmr(Drum, () => Drum[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Drum[HMR].source;
    set(Drum[HMR].source, module.default[HMR].original);
  });
}
var drum_default = Drum;

// node_modules/lucide-svelte/dist/icons/drumstick.svelte
Drumstick[FILENAME] = "node_modules/lucide-svelte/dist/icons/drumstick.svelte";
function Drumstick($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Drumstick);
  const iconNode = [
    [
      "path",
      {
        "d": "M15.4 15.63a7.875 6 135 1 1 6.23-6.23 4.5 3.43 135 0 0-6.23 6.23"
      }
    ],
    [
      "path",
      {
        "d": "m8.29 12.71-2.6 2.6a2.5 2.5 0 1 0-1.65 4.65A2.5 2.5 0 1 0 8.7 18.3l2.59-2.59"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "drumstick" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Drumstick, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Drumstick,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Drumstick = hmr(Drumstick, () => Drumstick[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Drumstick[HMR].source;
    set(Drumstick[HMR].source, module.default[HMR].original);
  });
}
var drumstick_default = Drumstick;

// node_modules/lucide-svelte/dist/icons/dumbbell.svelte
Dumbbell[FILENAME] = "node_modules/lucide-svelte/dist/icons/dumbbell.svelte";
function Dumbbell($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Dumbbell);
  const iconNode = [
    [
      "path",
      {
        "d": "M17.596 12.768a2 2 0 1 0 2.829-2.829l-1.768-1.767a2 2 0 0 0 2.828-2.829l-2.828-2.828a2 2 0 0 0-2.829 2.828l-1.767-1.768a2 2 0 1 0-2.829 2.829z"
      }
    ],
    ["path", { "d": "m2.5 21.5 1.4-1.4" }],
    ["path", { "d": "m20.1 3.9 1.4-1.4" }],
    [
      "path",
      {
        "d": "M5.343 21.485a2 2 0 1 0 2.829-2.828l1.767 1.768a2 2 0 1 0 2.829-2.829l-6.364-6.364a2 2 0 1 0-2.829 2.829l1.768 1.767a2 2 0 0 0-2.828 2.829z"
      }
    ],
    ["path", { "d": "m9.6 14.4 4.8-4.8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "dumbbell" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Dumbbell, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Dumbbell,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Dumbbell = hmr(Dumbbell, () => Dumbbell[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dumbbell[HMR].source;
    set(Dumbbell[HMR].source, module.default[HMR].original);
  });
}
var dumbbell_default = Dumbbell;

// node_modules/lucide-svelte/dist/icons/ear-off.svelte
Ear_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/ear-off.svelte";
function Ear_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ear_off);
  const iconNode = [
    [
      "path",
      { "d": "M6 18.5a3.5 3.5 0 1 0 7 0c0-1.57.92-2.52 2.04-3.46" }
    ],
    ["path", { "d": "M6 8.5c0-.75.13-1.47.36-2.14" }],
    [
      "path",
      {
        "d": "M8.8 3.15A6.5 6.5 0 0 1 19 8.5c0 1.63-.44 2.81-1.09 3.76"
      }
    ],
    [
      "path",
      {
        "d": "M12.5 6A2.5 2.5 0 0 1 15 8.5M10 13a2 2 0 0 0 1.82-1.18"
      }
    ],
    ["line", { "x1": "2", "x2": "22", "y1": "2", "y2": "22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ear-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ear_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ear_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ear_off = hmr(Ear_off, () => Ear_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ear_off[HMR].source;
    set(Ear_off[HMR].source, module.default[HMR].original);
  });
}
var ear_off_default = Ear_off;

// node_modules/lucide-svelte/dist/icons/ear.svelte
Ear[FILENAME] = "node_modules/lucide-svelte/dist/icons/ear.svelte";
function Ear($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ear);
  const iconNode = [
    [
      "path",
      {
        "d": "M6 8.5a6.5 6.5 0 1 1 13 0c0 6-6 6-6 10a3.5 3.5 0 1 1-7 0"
      }
    ],
    ["path", { "d": "M15 8.5a2.5 2.5 0 0 0-5 0v1a2 2 0 1 1 0 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ear" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ear, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ear,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ear = hmr(Ear, () => Ear[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ear[HMR].source;
    set(Ear[HMR].source, module.default[HMR].original);
  });
}
var ear_default = Ear;

// node_modules/lucide-svelte/dist/icons/earth-lock.svelte
Earth_lock[FILENAME] = "node_modules/lucide-svelte/dist/icons/earth-lock.svelte";
function Earth_lock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Earth_lock);
  const iconNode = [
    ["path", { "d": "M7 3.34V5a3 3 0 0 0 3 3" }],
    [
      "path",
      {
        "d": "M11 21.95V18a2 2 0 0 0-2-2 2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05"
      }
    ],
    ["path", { "d": "M21.54 15H17a2 2 0 0 0-2 2v4.54" }],
    ["path", { "d": "M12 2a10 10 0 1 0 9.54 13" }],
    ["path", { "d": "M20 6V4a2 2 0 1 0-4 0v2" }],
    [
      "rect",
      { "width": "8", "height": "5", "x": "14", "y": "6", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "earth-lock" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Earth_lock, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Earth_lock,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Earth_lock = hmr(Earth_lock, () => Earth_lock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Earth_lock[HMR].source;
    set(Earth_lock[HMR].source, module.default[HMR].original);
  });
}
var earth_lock_default = Earth_lock;

// node_modules/lucide-svelte/dist/icons/earth.svelte
Earth[FILENAME] = "node_modules/lucide-svelte/dist/icons/earth.svelte";
function Earth($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Earth);
  const iconNode = [
    ["path", { "d": "M21.54 15H17a2 2 0 0 0-2 2v4.54" }],
    [
      "path",
      {
        "d": "M7 3.34V5a3 3 0 0 0 3 3a2 2 0 0 1 2 2c0 1.1.9 2 2 2a2 2 0 0 0 2-2c0-1.1.9-2 2-2h3.17"
      }
    ],
    [
      "path",
      {
        "d": "M11 21.95V18a2 2 0 0 0-2-2a2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05"
      }
    ],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "earth" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Earth, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Earth,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Earth = hmr(Earth, () => Earth[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Earth[HMR].source;
    set(Earth[HMR].source, module.default[HMR].original);
  });
}
var earth_default = Earth;

// node_modules/lucide-svelte/dist/icons/eclipse.svelte
Eclipse[FILENAME] = "node_modules/lucide-svelte/dist/icons/eclipse.svelte";
function Eclipse($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Eclipse);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M12 2a7 7 0 1 0 10 10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "eclipse" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Eclipse, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Eclipse,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Eclipse = hmr(Eclipse, () => Eclipse[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Eclipse[HMR].source;
    set(Eclipse[HMR].source, module.default[HMR].original);
  });
}
var eclipse_default = Eclipse;

// node_modules/lucide-svelte/dist/icons/egg-fried.svelte
Egg_fried[FILENAME] = "node_modules/lucide-svelte/dist/icons/egg-fried.svelte";
function Egg_fried($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Egg_fried);
  const iconNode = [
    ["circle", { "cx": "11.5", "cy": "12.5", "r": "3.5" }],
    [
      "path",
      {
        "d": "M3 8c0-3.5 2.5-6 6.5-6 5 0 4.83 3 7.5 5s5 2 5 6c0 4.5-2.5 6.5-7 6.5-2.5 0-2.5 2.5-6 2.5s-7-2-7-5.5c0-3 1.5-3 1.5-5C3.5 10 3 9 3 8Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "egg-fried" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Egg_fried, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Egg_fried,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Egg_fried = hmr(Egg_fried, () => Egg_fried[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Egg_fried[HMR].source;
    set(Egg_fried[HMR].source, module.default[HMR].original);
  });
}
var egg_fried_default = Egg_fried;

// node_modules/lucide-svelte/dist/icons/egg-off.svelte
Egg_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/egg-off.svelte";
function Egg_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Egg_off);
  const iconNode = [
    ["path", { "d": "m2 2 20 20" }],
    [
      "path",
      {
        "d": "M20 14.347V14c0-6-4-12-8-12-1.078 0-2.157.436-3.157 1.19"
      }
    ],
    [
      "path",
      {
        "d": "M6.206 6.21C4.871 8.4 4 11.2 4 14a8 8 0 0 0 14.568 4.568"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "egg-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Egg_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Egg_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Egg_off = hmr(Egg_off, () => Egg_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Egg_off[HMR].source;
    set(Egg_off[HMR].source, module.default[HMR].original);
  });
}
var egg_off_default = Egg_off;

// node_modules/lucide-svelte/dist/icons/egg.svelte
Egg[FILENAME] = "node_modules/lucide-svelte/dist/icons/egg.svelte";
function Egg($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Egg);
  const iconNode = [
    [
      "path",
      { "d": "M12 2C8 2 4 8 4 14a8 8 0 0 0 16 0c0-6-4-12-8-12" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "egg" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Egg, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Egg,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Egg = hmr(Egg, () => Egg[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Egg[HMR].source;
    set(Egg[HMR].source, module.default[HMR].original);
  });
}
var egg_default = Egg;

// node_modules/lucide-svelte/dist/icons/ellipsis-vertical.svelte
Ellipsis_vertical[FILENAME] = "node_modules/lucide-svelte/dist/icons/ellipsis-vertical.svelte";
function Ellipsis_vertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ellipsis_vertical);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "1" }],
    ["circle", { "cx": "12", "cy": "5", "r": "1" }],
    ["circle", { "cx": "12", "cy": "19", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ellipsis-vertical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ellipsis_vertical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ellipsis_vertical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ellipsis_vertical = hmr(Ellipsis_vertical, () => Ellipsis_vertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ellipsis_vertical[HMR].source;
    set(Ellipsis_vertical[HMR].source, module.default[HMR].original);
  });
}
var ellipsis_vertical_default = Ellipsis_vertical;

// node_modules/lucide-svelte/dist/icons/ellipsis.svelte
Ellipsis[FILENAME] = "node_modules/lucide-svelte/dist/icons/ellipsis.svelte";
function Ellipsis($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ellipsis);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "1" }],
    ["circle", { "cx": "19", "cy": "12", "r": "1" }],
    ["circle", { "cx": "5", "cy": "12", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ellipsis" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ellipsis, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ellipsis,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ellipsis = hmr(Ellipsis, () => Ellipsis[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ellipsis[HMR].source;
    set(Ellipsis[HMR].source, module.default[HMR].original);
  });
}
var ellipsis_default = Ellipsis;

// node_modules/lucide-svelte/dist/icons/equal-approximately.svelte
Equal_approximately[FILENAME] = "node_modules/lucide-svelte/dist/icons/equal-approximately.svelte";
function Equal_approximately($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Equal_approximately);
  const iconNode = [
    ["path", { "d": "M5 15a6.5 6.5 0 0 1 7 0 6.5 6.5 0 0 0 7 0" }],
    ["path", { "d": "M5 9a6.5 6.5 0 0 1 7 0 6.5 6.5 0 0 0 7 0" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "equal-approximately" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Equal_approximately, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Equal_approximately,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Equal_approximately = hmr(Equal_approximately, () => Equal_approximately[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Equal_approximately[HMR].source;
    set(Equal_approximately[HMR].source, module.default[HMR].original);
  });
}
var equal_approximately_default = Equal_approximately;

// node_modules/lucide-svelte/dist/icons/equal-not.svelte
Equal_not[FILENAME] = "node_modules/lucide-svelte/dist/icons/equal-not.svelte";
function Equal_not($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Equal_not);
  const iconNode = [
    ["line", { "x1": "5", "x2": "19", "y1": "9", "y2": "9" }],
    ["line", { "x1": "5", "x2": "19", "y1": "15", "y2": "15" }],
    ["line", { "x1": "19", "x2": "5", "y1": "5", "y2": "19" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "equal-not" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Equal_not, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Equal_not,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Equal_not = hmr(Equal_not, () => Equal_not[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Equal_not[HMR].source;
    set(Equal_not[HMR].source, module.default[HMR].original);
  });
}
var equal_not_default = Equal_not;

// node_modules/lucide-svelte/dist/icons/equal.svelte
Equal[FILENAME] = "node_modules/lucide-svelte/dist/icons/equal.svelte";
function Equal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Equal);
  const iconNode = [
    ["line", { "x1": "5", "x2": "19", "y1": "9", "y2": "9" }],
    ["line", { "x1": "5", "x2": "19", "y1": "15", "y2": "15" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "equal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Equal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Equal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Equal = hmr(Equal, () => Equal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Equal[HMR].source;
    set(Equal[HMR].source, module.default[HMR].original);
  });
}
var equal_default = Equal;

// node_modules/lucide-svelte/dist/icons/eraser.svelte
Eraser[FILENAME] = "node_modules/lucide-svelte/dist/icons/eraser.svelte";
function Eraser($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Eraser);
  const iconNode = [
    [
      "path",
      {
        "d": "M21 21H8a2 2 0 0 1-1.42-.587l-3.994-3.999a2 2 0 0 1 0-2.828l10-10a2 2 0 0 1 2.829 0l5.999 6a2 2 0 0 1 0 2.828L12.834 21"
      }
    ],
    ["path", { "d": "m5.082 11.09 8.828 8.828" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "eraser" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Eraser, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Eraser,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Eraser = hmr(Eraser, () => Eraser[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Eraser[HMR].source;
    set(Eraser[HMR].source, module.default[HMR].original);
  });
}
var eraser_default = Eraser;

// node_modules/lucide-svelte/dist/icons/ethernet-port.svelte
Ethernet_port[FILENAME] = "node_modules/lucide-svelte/dist/icons/ethernet-port.svelte";
function Ethernet_port($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ethernet_port);
  const iconNode = [
    [
      "path",
      {
        "d": "m15 20 3-3h2a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v9a2 2 0 0 0 2 2h2l3 3z"
      }
    ],
    ["path", { "d": "M6 8v1" }],
    ["path", { "d": "M10 8v1" }],
    ["path", { "d": "M14 8v1" }],
    ["path", { "d": "M18 8v1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ethernet-port" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ethernet_port, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ethernet_port,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ethernet_port = hmr(Ethernet_port, () => Ethernet_port[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ethernet_port[HMR].source;
    set(Ethernet_port[HMR].source, module.default[HMR].original);
  });
}
var ethernet_port_default = Ethernet_port;

// node_modules/lucide-svelte/dist/icons/expand.svelte
Expand[FILENAME] = "node_modules/lucide-svelte/dist/icons/expand.svelte";
function Expand($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Expand);
  const iconNode = [
    ["path", { "d": "m15 15 6 6" }],
    ["path", { "d": "m15 9 6-6" }],
    ["path", { "d": "M21 16v5h-5" }],
    ["path", { "d": "M21 8V3h-5" }],
    ["path", { "d": "M3 16v5h5" }],
    ["path", { "d": "m3 21 6-6" }],
    ["path", { "d": "M3 8V3h5" }],
    ["path", { "d": "M9 9 3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "expand" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Expand, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Expand,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Expand = hmr(Expand, () => Expand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Expand[HMR].source;
    set(Expand[HMR].source, module.default[HMR].original);
  });
}
var expand_default = Expand;

// node_modules/lucide-svelte/dist/icons/euro.svelte
Euro[FILENAME] = "node_modules/lucide-svelte/dist/icons/euro.svelte";
function Euro($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Euro);
  const iconNode = [
    ["path", { "d": "M4 10h12" }],
    ["path", { "d": "M4 14h9" }],
    [
      "path",
      {
        "d": "M19 6a7.7 7.7 0 0 0-5.2-2A7.9 7.9 0 0 0 6 12c0 4.4 3.5 8 7.8 8 2 0 3.8-.8 5.2-2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "euro" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Euro, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Euro,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Euro = hmr(Euro, () => Euro[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Euro[HMR].source;
    set(Euro[HMR].source, module.default[HMR].original);
  });
}
var euro_default = Euro;

// node_modules/lucide-svelte/dist/icons/external-link.svelte
External_link[FILENAME] = "node_modules/lucide-svelte/dist/icons/external-link.svelte";
function External_link($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, External_link);
  const iconNode = [
    ["path", { "d": "M15 3h6v6" }],
    ["path", { "d": "M10 14 21 3" }],
    [
      "path",
      {
        "d": "M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "external-link" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(External_link, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    External_link,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  External_link = hmr(External_link, () => External_link[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = External_link[HMR].source;
    set(External_link[HMR].source, module.default[HMR].original);
  });
}
var external_link_default = External_link;

// node_modules/lucide-svelte/dist/icons/eye-closed.svelte
Eye_closed[FILENAME] = "node_modules/lucide-svelte/dist/icons/eye-closed.svelte";
function Eye_closed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Eye_closed);
  const iconNode = [
    ["path", { "d": "m15 18-.722-3.25" }],
    ["path", { "d": "M2 8a10.645 10.645 0 0 0 20 0" }],
    ["path", { "d": "m20 15-1.726-2.05" }],
    ["path", { "d": "m4 15 1.726-2.05" }],
    ["path", { "d": "m9 18 .722-3.25" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "eye-closed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Eye_closed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Eye_closed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Eye_closed = hmr(Eye_closed, () => Eye_closed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Eye_closed[HMR].source;
    set(Eye_closed[HMR].source, module.default[HMR].original);
  });
}
var eye_closed_default = Eye_closed;

// node_modules/lucide-svelte/dist/icons/eye-off.svelte
Eye_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/eye-off.svelte";
function Eye_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Eye_off);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.733 5.076a10.744 10.744 0 0 1 11.205 6.575 1 1 0 0 1 0 .696 10.747 10.747 0 0 1-1.444 2.49"
      }
    ],
    ["path", { "d": "M14.084 14.158a3 3 0 0 1-4.242-4.242" }],
    [
      "path",
      {
        "d": "M17.479 17.499a10.75 10.75 0 0 1-15.417-5.151 1 1 0 0 1 0-.696 10.75 10.75 0 0 1 4.446-5.143"
      }
    ],
    ["path", { "d": "m2 2 20 20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "eye-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Eye_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Eye_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Eye_off = hmr(Eye_off, () => Eye_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Eye_off[HMR].source;
    set(Eye_off[HMR].source, module.default[HMR].original);
  });
}
var eye_off_default = Eye_off;

// node_modules/lucide-svelte/dist/icons/eye.svelte
Eye[FILENAME] = "node_modules/lucide-svelte/dist/icons/eye.svelte";
function Eye($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Eye);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0"
      }
    ],
    ["circle", { "cx": "12", "cy": "12", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "eye" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Eye, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Eye,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Eye = hmr(Eye, () => Eye[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Eye[HMR].source;
    set(Eye[HMR].source, module.default[HMR].original);
  });
}
var eye_default = Eye;

// node_modules/lucide-svelte/dist/icons/facebook.svelte
Facebook[FILENAME] = "node_modules/lucide-svelte/dist/icons/facebook.svelte";
function Facebook($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Facebook);
  const iconNode = [
    [
      "path",
      {
        "d": "M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "facebook" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Facebook, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Facebook,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Facebook = hmr(Facebook, () => Facebook[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Facebook[HMR].source;
    set(Facebook[HMR].source, module.default[HMR].original);
  });
}
var facebook_default = Facebook;

// node_modules/lucide-svelte/dist/icons/factory.svelte
Factory[FILENAME] = "node_modules/lucide-svelte/dist/icons/factory.svelte";
function Factory($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Factory);
  const iconNode = [
    ["path", { "d": "M12 16h.01" }],
    ["path", { "d": "M16 16h.01" }],
    [
      "path",
      {
        "d": "M3 19a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V8.5a.5.5 0 0 0-.769-.422l-4.462 2.844A.5.5 0 0 1 15 10.5v-2a.5.5 0 0 0-.769-.422L9.77 10.922A.5.5 0 0 1 9 10.5V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2z"
      }
    ],
    ["path", { "d": "M8 16h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "factory" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Factory, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Factory,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Factory = hmr(Factory, () => Factory[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Factory[HMR].source;
    set(Factory[HMR].source, module.default[HMR].original);
  });
}
var factory_default = Factory;

// node_modules/lucide-svelte/dist/icons/fan.svelte
Fan[FILENAME] = "node_modules/lucide-svelte/dist/icons/fan.svelte";
function Fan($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Fan);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.827 16.379a6.082 6.082 0 0 1-8.618-7.002l5.412 1.45a6.082 6.082 0 0 1 7.002-8.618l-1.45 5.412a6.082 6.082 0 0 1 8.618 7.002l-5.412-1.45a6.082 6.082 0 0 1-7.002 8.618l1.45-5.412Z"
      }
    ],
    ["path", { "d": "M12 12v.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "fan" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Fan, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Fan,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Fan = hmr(Fan, () => Fan[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fan[HMR].source;
    set(Fan[HMR].source, module.default[HMR].original);
  });
}
var fan_default = Fan;

// node_modules/lucide-svelte/dist/icons/fast-forward.svelte
Fast_forward[FILENAME] = "node_modules/lucide-svelte/dist/icons/fast-forward.svelte";
function Fast_forward($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Fast_forward);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 6a2 2 0 0 1 3.414-1.414l6 6a2 2 0 0 1 0 2.828l-6 6A2 2 0 0 1 12 18z"
      }
    ],
    [
      "path",
      {
        "d": "M2 6a2 2 0 0 1 3.414-1.414l6 6a2 2 0 0 1 0 2.828l-6 6A2 2 0 0 1 2 18z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "fast-forward" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Fast_forward, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Fast_forward,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Fast_forward = hmr(Fast_forward, () => Fast_forward[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fast_forward[HMR].source;
    set(Fast_forward[HMR].source, module.default[HMR].original);
  });
}
var fast_forward_default = Fast_forward;

// node_modules/lucide-svelte/dist/icons/feather.svelte
Feather[FILENAME] = "node_modules/lucide-svelte/dist/icons/feather.svelte";
function Feather($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Feather);
  const iconNode = [
    [
      "path",
      {
        "d": "M12.67 19a2 2 0 0 0 1.416-.588l6.154-6.172a6 6 0 0 0-8.49-8.49L5.586 9.914A2 2 0 0 0 5 11.328V18a1 1 0 0 0 1 1z"
      }
    ],
    ["path", { "d": "M16 8 2 22" }],
    ["path", { "d": "M17.5 15H9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "feather" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Feather, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Feather,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Feather = hmr(Feather, () => Feather[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Feather[HMR].source;
    set(Feather[HMR].source, module.default[HMR].original);
  });
}
var feather_default = Feather;

// node_modules/lucide-svelte/dist/icons/fence.svelte
Fence[FILENAME] = "node_modules/lucide-svelte/dist/icons/fence.svelte";
function Fence($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Fence);
  const iconNode = [
    [
      "path",
      { "d": "M4 3 2 5v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z" }
    ],
    ["path", { "d": "M6 8h4" }],
    ["path", { "d": "M6 18h4" }],
    [
      "path",
      { "d": "m12 3-2 2v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z" }
    ],
    ["path", { "d": "M14 8h4" }],
    ["path", { "d": "M14 18h4" }],
    [
      "path",
      { "d": "m20 3-2 2v15c0 .6.4 1 1 1h2c.6 0 1-.4 1-1V5Z" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "fence" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Fence, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Fence,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Fence = hmr(Fence, () => Fence[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fence[HMR].source;
    set(Fence[HMR].source, module.default[HMR].original);
  });
}
var fence_default = Fence;

// node_modules/lucide-svelte/dist/icons/ferris-wheel.svelte
Ferris_wheel[FILENAME] = "node_modules/lucide-svelte/dist/icons/ferris-wheel.svelte";
function Ferris_wheel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ferris_wheel);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "2" }],
    ["path", { "d": "M12 2v4" }],
    ["path", { "d": "m6.8 15-3.5 2" }],
    ["path", { "d": "m20.7 7-3.5 2" }],
    ["path", { "d": "M6.8 9 3.3 7" }],
    ["path", { "d": "m20.7 17-3.5-2" }],
    ["path", { "d": "m9 22 3-8 3 8" }],
    ["path", { "d": "M8 22h8" }],
    ["path", { "d": "M18 18.7a9 9 0 1 0-12 0" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ferris-wheel" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ferris_wheel, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ferris_wheel,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ferris_wheel = hmr(Ferris_wheel, () => Ferris_wheel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ferris_wheel[HMR].source;
    set(Ferris_wheel[HMR].source, module.default[HMR].original);
  });
}
var ferris_wheel_default = Ferris_wheel;

// node_modules/lucide-svelte/dist/icons/figma.svelte
Figma[FILENAME] = "node_modules/lucide-svelte/dist/icons/figma.svelte";
function Figma($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Figma);
  const iconNode = [
    [
      "path",
      {
        "d": "M5 5.5A3.5 3.5 0 0 1 8.5 2H12v7H8.5A3.5 3.5 0 0 1 5 5.5z"
      }
    ],
    ["path", { "d": "M12 2h3.5a3.5 3.5 0 1 1 0 7H12V2z" }],
    [
      "path",
      { "d": "M12 12.5a3.5 3.5 0 1 1 7 0 3.5 3.5 0 1 1-7 0z" }
    ],
    [
      "path",
      {
        "d": "M5 19.5A3.5 3.5 0 0 1 8.5 16H12v3.5a3.5 3.5 0 1 1-7 0z"
      }
    ],
    [
      "path",
      {
        "d": "M5 12.5A3.5 3.5 0 0 1 8.5 9H12v7H8.5A3.5 3.5 0 0 1 5 12.5z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "figma" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Figma, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Figma,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Figma = hmr(Figma, () => Figma[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Figma[HMR].source;
    set(Figma[HMR].source, module.default[HMR].original);
  });
}
var figma_default = Figma;

// node_modules/lucide-svelte/dist/icons/file-archive.svelte
File_archive[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-archive.svelte";
function File_archive($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_archive);
  const iconNode = [
    ["path", { "d": "M10 12v-1" }],
    ["path", { "d": "M10 18v-2" }],
    ["path", { "d": "M10 7V6" }],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    [
      "path",
      {
        "d": "M15.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v16a2 2 0 0 0 .274 1.01"
      }
    ],
    ["circle", { "cx": "10", "cy": "20", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-archive" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_archive, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_archive,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_archive = hmr(File_archive, () => File_archive[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_archive[HMR].source;
    set(File_archive[HMR].source, module.default[HMR].original);
  });
}
var file_archive_default = File_archive;

// node_modules/lucide-svelte/dist/icons/file-audio-2.svelte
File_audio_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-audio-2.svelte";
function File_audio_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_audio_2);
  const iconNode = [
    [
      "path",
      { "d": "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2" }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["circle", { "cx": "3", "cy": "17", "r": "1" }],
    ["path", { "d": "M2 17v-3a4 4 0 0 1 8 0v3" }],
    ["circle", { "cx": "9", "cy": "17", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-audio-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_audio_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_audio_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_audio_2 = hmr(File_audio_2, () => File_audio_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_audio_2[HMR].source;
    set(File_audio_2[HMR].source, module.default[HMR].original);
  });
}
var file_audio_2_default = File_audio_2;

// node_modules/lucide-svelte/dist/icons/file-audio.svelte
File_audio[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-audio.svelte";
function File_audio($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_audio);
  const iconNode = [
    [
      "path",
      { "d": "M17.5 22h.5a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3" }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    [
      "path",
      {
        "d": "M2 19a2 2 0 1 1 4 0v1a2 2 0 1 1-4 0v-4a6 6 0 0 1 12 0v4a2 2 0 1 1-4 0v-1a2 2 0 1 1 4 0"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-audio" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_audio, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_audio,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_audio = hmr(File_audio, () => File_audio[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_audio[HMR].source;
    set(File_audio[HMR].source, module.default[HMR].original);
  });
}
var file_audio_default = File_audio;

// node_modules/lucide-svelte/dist/icons/file-axis-3d.svelte
File_axis_3d[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-axis-3d.svelte";
function File_axis_3d($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_axis_3d);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "m8 18 4-4" }],
    ["path", { "d": "M8 10v8h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-axis-3d" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_axis_3d, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_axis_3d,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_axis_3d = hmr(File_axis_3d, () => File_axis_3d[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_axis_3d[HMR].source;
    set(File_axis_3d[HMR].source, module.default[HMR].original);
  });
}
var file_axis_3d_default = File_axis_3d;

// node_modules/lucide-svelte/dist/icons/file-badge-2.svelte
File_badge_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-badge-2.svelte";
function File_badge_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_badge_2);
  const iconNode = [
    [
      "path",
      {
        "d": "m13.69 12.479 1.29 4.88a.5.5 0 0 1-.697.591l-1.844-.849a1 1 0 0 0-.88.001l-1.846.85a.5.5 0 0 1-.693-.593l1.29-4.88"
      }
    ],
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z"
      }
    ],
    ["circle", { "cx": "12", "cy": "10", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-badge-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_badge_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_badge_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_badge_2 = hmr(File_badge_2, () => File_badge_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_badge_2[HMR].source;
    set(File_badge_2[HMR].source, module.default[HMR].original);
  });
}
var file_badge_2_default = File_badge_2;

// node_modules/lucide-svelte/dist/icons/file-badge.svelte
File_badge[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-badge.svelte";
function File_badge($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_badge);
  const iconNode = [
    [
      "path",
      { "d": "M12 22h6a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3.072" }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    [
      "path",
      {
        "d": "m6.69 16.479 1.29 4.88a.5.5 0 0 1-.698.591l-1.843-.849a1 1 0 0 0-.88.001l-1.846.85a.5.5 0 0 1-.693-.593l1.29-4.88"
      }
    ],
    ["circle", { "cx": "5", "cy": "14", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-badge" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_badge, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_badge,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_badge = hmr(File_badge, () => File_badge[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_badge[HMR].source;
    set(File_badge[HMR].source, module.default[HMR].original);
  });
}
var file_badge_default = File_badge;

// node_modules/lucide-svelte/dist/icons/file-box.svelte
File_box[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-box.svelte";
function File_box($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_box);
  const iconNode = [
    [
      "path",
      { "d": "M14.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    [
      "path",
      {
        "d": "M3 13.1a2 2 0 0 0-1 1.76v3.24a2 2 0 0 0 .97 1.78L6 21.7a2 2 0 0 0 2.03.01L11 19.9a2 2 0 0 0 1-1.76V14.9a2 2 0 0 0-.97-1.78L8 11.3a2 2 0 0 0-2.03-.01Z"
      }
    ],
    ["path", { "d": "M7 17v5" }],
    ["path", { "d": "M11.7 14.2 7 17l-4.7-2.8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-box" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_box, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_box,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_box = hmr(File_box, () => File_box[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_box[HMR].source;
    set(File_box[HMR].source, module.default[HMR].original);
  });
}
var file_box_default = File_box;

// node_modules/lucide-svelte/dist/icons/file-chart-column-increasing.svelte
File_chart_column_increasing[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-chart-column-increasing.svelte";
function File_chart_column_increasing($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_chart_column_increasing);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M8 18v-2" }],
    ["path", { "d": "M12 18v-4" }],
    ["path", { "d": "M16 18v-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-chart-column-increasing" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_chart_column_increasing, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_chart_column_increasing,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_chart_column_increasing = hmr(File_chart_column_increasing, () => File_chart_column_increasing[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_chart_column_increasing[HMR].source;
    set(File_chart_column_increasing[HMR].source, module.default[HMR].original);
  });
}
var file_chart_column_increasing_default = File_chart_column_increasing;

// node_modules/lucide-svelte/dist/icons/file-chart-column.svelte
File_chart_column[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-chart-column.svelte";
function File_chart_column($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_chart_column);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M8 18v-1" }],
    ["path", { "d": "M12 18v-6" }],
    ["path", { "d": "M16 18v-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-chart-column" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_chart_column, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_chart_column,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_chart_column = hmr(File_chart_column, () => File_chart_column[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_chart_column[HMR].source;
    set(File_chart_column[HMR].source, module.default[HMR].original);
  });
}
var file_chart_column_default = File_chart_column;

// node_modules/lucide-svelte/dist/icons/file-chart-line.svelte
File_chart_line[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-chart-line.svelte";
function File_chart_line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_chart_line);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "m16 13-3.5 3.5-2-2L8 17" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-chart-line" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_chart_line, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_chart_line,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_chart_line = hmr(File_chart_line, () => File_chart_line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_chart_line[HMR].source;
    set(File_chart_line[HMR].source, module.default[HMR].original);
  });
}
var file_chart_line_default = File_chart_line;

// node_modules/lucide-svelte/dist/icons/file-chart-pie.svelte
File_chart_pie[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-chart-pie.svelte";
function File_chart_pie($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_chart_pie);
  const iconNode = [
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    [
      "path",
      { "d": "M16 22h2a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3.5" }
    ],
    ["path", { "d": "M4.017 11.512a6 6 0 1 0 8.466 8.475" }],
    [
      "path",
      {
        "d": "M9 16a1 1 0 0 1-1-1v-4c0-.552.45-1.008.995-.917a6 6 0 0 1 4.922 4.922c.091.544-.365.995-.917.995z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-chart-pie" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_chart_pie, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_chart_pie,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_chart_pie = hmr(File_chart_pie, () => File_chart_pie[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_chart_pie[HMR].source;
    set(File_chart_pie[HMR].source, module.default[HMR].original);
  });
}
var file_chart_pie_default = File_chart_pie;

// node_modules/lucide-svelte/dist/icons/file-check-2.svelte
File_check_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-check-2.svelte";
function File_check_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_check_2);
  const iconNode = [
    [
      "path",
      { "d": "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "m3 15 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-check-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_check_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_check_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_check_2 = hmr(File_check_2, () => File_check_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_check_2[HMR].source;
    set(File_check_2[HMR].source, module.default[HMR].original);
  });
}
var file_check_2_default = File_check_2;

// node_modules/lucide-svelte/dist/icons/file-check.svelte
File_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-check.svelte";
function File_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_check);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "m9 15 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_check = hmr(File_check, () => File_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_check[HMR].source;
    set(File_check[HMR].source, module.default[HMR].original);
  });
}
var file_check_default = File_check;

// node_modules/lucide-svelte/dist/icons/file-clock.svelte
File_clock[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-clock.svelte";
function File_clock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_clock);
  const iconNode = [
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    [
      "path",
      { "d": "M16 22h2a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3" }
    ],
    ["path", { "d": "M8 14v2.2l1.6 1" }],
    ["circle", { "cx": "8", "cy": "16", "r": "6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-clock" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_clock, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_clock,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_clock = hmr(File_clock, () => File_clock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_clock[HMR].source;
    set(File_clock[HMR].source, module.default[HMR].original);
  });
}
var file_clock_default = File_clock;

// node_modules/lucide-svelte/dist/icons/file-code-2.svelte
File_code_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-code-2.svelte";
function File_code_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_code_2);
  const iconNode = [
    [
      "path",
      { "d": "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "m5 12-3 3 3 3" }],
    ["path", { "d": "m9 18 3-3-3-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-code-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_code_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_code_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_code_2 = hmr(File_code_2, () => File_code_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_code_2[HMR].source;
    set(File_code_2[HMR].source, module.default[HMR].original);
  });
}
var file_code_2_default = File_code_2;

// node_modules/lucide-svelte/dist/icons/file-code.svelte
File_code[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-code.svelte";
function File_code($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_code);
  const iconNode = [
    ["path", { "d": "M10 12.5 8 15l2 2.5" }],
    ["path", { "d": "m14 12.5 2 2.5-2 2.5" }],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-code" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_code, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_code,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_code = hmr(File_code, () => File_code[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_code[HMR].source;
    set(File_code[HMR].source, module.default[HMR].original);
  });
}
var file_code_default = File_code;

// node_modules/lucide-svelte/dist/icons/file-cog.svelte
File_cog[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-cog.svelte";
function File_cog($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_cog);
  const iconNode = [
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "m2.305 15.53.923-.382" }],
    ["path", { "d": "m3.228 12.852-.924-.383" }],
    [
      "path",
      {
        "d": "M4.677 21.5a2 2 0 0 0 1.313.5H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v2.5"
      }
    ],
    ["path", { "d": "m4.852 11.228-.383-.923" }],
    ["path", { "d": "m4.852 16.772-.383.924" }],
    ["path", { "d": "m7.148 11.228.383-.923" }],
    ["path", { "d": "m7.53 17.696-.382-.924" }],
    ["path", { "d": "m8.772 12.852.923-.383" }],
    ["path", { "d": "m8.772 15.148.923.383" }],
    ["circle", { "cx": "6", "cy": "14", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-cog" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_cog, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_cog,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_cog = hmr(File_cog, () => File_cog[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_cog[HMR].source;
    set(File_cog[HMR].source, module.default[HMR].original);
  });
}
var file_cog_default = File_cog;

// node_modules/lucide-svelte/dist/icons/file-diff.svelte
File_diff[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-diff.svelte";
function File_diff($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_diff);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M9 10h6" }],
    ["path", { "d": "M12 13V7" }],
    ["path", { "d": "M9 17h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-diff" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_diff, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_diff,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_diff = hmr(File_diff, () => File_diff[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_diff[HMR].source;
    set(File_diff[HMR].source, module.default[HMR].original);
  });
}
var file_diff_default = File_diff;

// node_modules/lucide-svelte/dist/icons/file-digit.svelte
File_digit[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-digit.svelte";
function File_digit($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_digit);
  const iconNode = [
    [
      "path",
      { "d": "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    [
      "rect",
      { "width": "4", "height": "6", "x": "2", "y": "12", "rx": "2" }
    ],
    ["path", { "d": "M10 12h2v6" }],
    ["path", { "d": "M10 18h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-digit" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_digit, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_digit,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_digit = hmr(File_digit, () => File_digit[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_digit[HMR].source;
    set(File_digit[HMR].source, module.default[HMR].original);
  });
}
var file_digit_default = File_digit;

// node_modules/lucide-svelte/dist/icons/file-down.svelte
File_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-down.svelte";
function File_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_down);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M12 18v-6" }],
    ["path", { "d": "m9 15 3 3 3-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_down = hmr(File_down, () => File_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_down[HMR].source;
    set(File_down[HMR].source, module.default[HMR].original);
  });
}
var file_down_default = File_down;

// node_modules/lucide-svelte/dist/icons/file-heart.svelte
File_heart[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-heart.svelte";
function File_heart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_heart);
  const iconNode = [
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    [
      "path",
      {
        "d": "M2.62 13.8A2.25 2.25 0 1 1 6 10.836a2.25 2.25 0 1 1 3.38 2.966l-2.626 2.856a.998.998 0 0 1-1.507 0z"
      }
    ],
    [
      "path",
      {
        "d": "M4 6.005V4a2 2 0 0 1 2-2h9l5 5v13a2 2 0 0 1-2 2H6a2 2 0 0 1-1.9-1.376"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-heart" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_heart, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_heart,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_heart = hmr(File_heart, () => File_heart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_heart[HMR].source;
    set(File_heart[HMR].source, module.default[HMR].original);
  });
}
var file_heart_default = File_heart;

// node_modules/lucide-svelte/dist/icons/file-image.svelte
File_image[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-image.svelte";
function File_image($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_image);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["circle", { "cx": "10", "cy": "12", "r": "2" }],
    [
      "path",
      { "d": "m20 17-1.296-1.296a2.41 2.41 0 0 0-3.408 0L9 22" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-image" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_image, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_image,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_image = hmr(File_image, () => File_image[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_image[HMR].source;
    set(File_image[HMR].source, module.default[HMR].original);
  });
}
var file_image_default = File_image;

// node_modules/lucide-svelte/dist/icons/file-input.svelte
File_input[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-input.svelte";
function File_input($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_input);
  const iconNode = [
    [
      "path",
      { "d": "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M2 15h10" }],
    ["path", { "d": "m9 18 3-3-3-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-input" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_input, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_input,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_input = hmr(File_input, () => File_input[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_input[HMR].source;
    set(File_input[HMR].source, module.default[HMR].original);
  });
}
var file_input_default = File_input;

// node_modules/lucide-svelte/dist/icons/file-json-2.svelte
File_json_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-json-2.svelte";
function File_json_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_json_2);
  const iconNode = [
    [
      "path",
      { "d": "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    [
      "path",
      {
        "d": "M4 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1"
      }
    ],
    [
      "path",
      {
        "d": "M8 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-json-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_json_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_json_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_json_2 = hmr(File_json_2, () => File_json_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_json_2[HMR].source;
    set(File_json_2[HMR].source, module.default[HMR].original);
  });
}
var file_json_2_default = File_json_2;

// node_modules/lucide-svelte/dist/icons/file-json.svelte
File_json[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-json.svelte";
function File_json($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_json);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    [
      "path",
      {
        "d": "M10 12a1 1 0 0 0-1 1v1a1 1 0 0 1-1 1 1 1 0 0 1 1 1v1a1 1 0 0 0 1 1"
      }
    ],
    [
      "path",
      {
        "d": "M14 18a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1 1 1 0 0 1-1-1v-1a1 1 0 0 0-1-1"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-json" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_json, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_json,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_json = hmr(File_json, () => File_json[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_json[HMR].source;
    set(File_json[HMR].source, module.default[HMR].original);
  });
}
var file_json_default = File_json;

// node_modules/lucide-svelte/dist/icons/file-key-2.svelte
File_key_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-key-2.svelte";
function File_key_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_key_2);
  const iconNode = [
    [
      "path",
      { "d": "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v6" }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["circle", { "cx": "4", "cy": "16", "r": "2" }],
    ["path", { "d": "m10 10-4.5 4.5" }],
    ["path", { "d": "m9 11 1 1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-key-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_key_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_key_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_key_2 = hmr(File_key_2, () => File_key_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_key_2[HMR].source;
    set(File_key_2[HMR].source, module.default[HMR].original);
  });
}
var file_key_2_default = File_key_2;

// node_modules/lucide-svelte/dist/icons/file-key.svelte
File_key[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-key.svelte";
function File_key($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_key);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["circle", { "cx": "10", "cy": "16", "r": "2" }],
    ["path", { "d": "m16 10-4.5 4.5" }],
    ["path", { "d": "m15 11 1 1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-key" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_key, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_key,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_key = hmr(File_key, () => File_key[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_key[HMR].source;
    set(File_key[HMR].source, module.default[HMR].original);
  });
}
var file_key_default = File_key;

// node_modules/lucide-svelte/dist/icons/file-lock-2.svelte
File_lock_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-lock-2.svelte";
function File_lock_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_lock_2);
  const iconNode = [
    [
      "path",
      { "d": "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v1" }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    [
      "rect",
      { "width": "8", "height": "5", "x": "2", "y": "13", "rx": "1" }
    ],
    ["path", { "d": "M8 13v-2a2 2 0 1 0-4 0v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-lock-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_lock_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_lock_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_lock_2 = hmr(File_lock_2, () => File_lock_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_lock_2[HMR].source;
    set(File_lock_2[HMR].source, module.default[HMR].original);
  });
}
var file_lock_2_default = File_lock_2;

// node_modules/lucide-svelte/dist/icons/file-lock.svelte
File_lock[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-lock.svelte";
function File_lock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_lock);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    [
      "rect",
      { "width": "8", "height": "6", "x": "8", "y": "12", "rx": "1" }
    ],
    ["path", { "d": "M10 12v-2a2 2 0 1 1 4 0v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-lock" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_lock, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_lock,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_lock = hmr(File_lock, () => File_lock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_lock[HMR].source;
    set(File_lock[HMR].source, module.default[HMR].original);
  });
}
var file_lock_default = File_lock;

// node_modules/lucide-svelte/dist/icons/file-minus-2.svelte
File_minus_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-minus-2.svelte";
function File_minus_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_minus_2);
  const iconNode = [
    [
      "path",
      { "d": "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M3 15h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-minus-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_minus_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_minus_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_minus_2 = hmr(File_minus_2, () => File_minus_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_minus_2[HMR].source;
    set(File_minus_2[HMR].source, module.default[HMR].original);
  });
}
var file_minus_2_default = File_minus_2;

// node_modules/lucide-svelte/dist/icons/file-minus.svelte
File_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-minus.svelte";
function File_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_minus);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M9 15h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_minus = hmr(File_minus, () => File_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_minus[HMR].source;
    set(File_minus[HMR].source, module.default[HMR].original);
  });
}
var file_minus_default = File_minus;

// node_modules/lucide-svelte/dist/icons/file-music.svelte
File_music[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-music.svelte";
function File_music($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_music);
  const iconNode = [
    [
      "path",
      { "d": "M10.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v8.4" }
    ],
    ["path", { "d": "M8 18v-7.7L16 9v7" }],
    ["circle", { "cx": "14", "cy": "16", "r": "2" }],
    ["circle", { "cx": "6", "cy": "18", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-music" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_music, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_music,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_music = hmr(File_music, () => File_music[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_music[HMR].source;
    set(File_music[HMR].source, module.default[HMR].original);
  });
}
var file_music_default = File_music;

// node_modules/lucide-svelte/dist/icons/file-output.svelte
File_output[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-output.svelte";
function File_output($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_output);
  const iconNode = [
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M4 7V4a2 2 0 0 1 2-2 2 2 0 0 0-2 2" }],
    [
      "path",
      {
        "d": "M4.063 20.999a2 2 0 0 0 2 1L18 22a2 2 0 0 0 2-2V7l-5-5H6"
      }
    ],
    ["path", { "d": "m5 11-3 3" }],
    ["path", { "d": "m5 17-3-3h10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-output" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_output, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_output,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_output = hmr(File_output, () => File_output[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_output[HMR].source;
    set(File_output[HMR].source, module.default[HMR].original);
  });
}
var file_output_default = File_output;

// node_modules/lucide-svelte/dist/icons/file-pen-line.svelte
File_pen_line[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-pen-line.svelte";
function File_pen_line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_pen_line);
  const iconNode = [
    [
      "path",
      {
        "d": "m18 5-2.414-2.414A2 2 0 0 0 14.172 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2"
      }
    ],
    [
      "path",
      {
        "d": "M21.378 12.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"
      }
    ],
    ["path", { "d": "M8 18h1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-pen-line" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_pen_line, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_pen_line,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_pen_line = hmr(File_pen_line, () => File_pen_line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_pen_line[HMR].source;
    set(File_pen_line[HMR].source, module.default[HMR].original);
  });
}
var file_pen_line_default = File_pen_line;

// node_modules/lucide-svelte/dist/icons/file-pen.svelte
File_pen[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-pen.svelte";
function File_pen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_pen);
  const iconNode = [
    [
      "path",
      { "d": "M12.5 22H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v9.5" }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    [
      "path",
      {
        "d": "M13.378 15.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-pen" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_pen, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_pen,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_pen = hmr(File_pen, () => File_pen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_pen[HMR].source;
    set(File_pen[HMR].source, module.default[HMR].original);
  });
}
var file_pen_default = File_pen;

// node_modules/lucide-svelte/dist/icons/file-play.svelte
File_play[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-play.svelte";
function File_play($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_play);
  const iconNode = [
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z"
      }
    ],
    [
      "path",
      {
        "d": "M15.033 13.44a.647.647 0 0 1 0 1.12l-4.065 2.352a.645.645 0 0 1-.968-.56v-4.704a.645.645 0 0 1 .967-.56z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-play" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_play, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_play,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_play = hmr(File_play, () => File_play[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_play[HMR].source;
    set(File_play[HMR].source, module.default[HMR].original);
  });
}
var file_play_default = File_play;

// node_modules/lucide-svelte/dist/icons/file-plus-2.svelte
File_plus_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-plus-2.svelte";
function File_plus_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_plus_2);
  const iconNode = [
    [
      "path",
      { "d": "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M3 15h6" }],
    ["path", { "d": "M6 12v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-plus-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_plus_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_plus_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_plus_2 = hmr(File_plus_2, () => File_plus_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_plus_2[HMR].source;
    set(File_plus_2[HMR].source, module.default[HMR].original);
  });
}
var file_plus_2_default = File_plus_2;

// node_modules/lucide-svelte/dist/icons/file-plus.svelte
File_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-plus.svelte";
function File_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_plus);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M9 15h6" }],
    ["path", { "d": "M12 18v-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_plus = hmr(File_plus, () => File_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_plus[HMR].source;
    set(File_plus[HMR].source, module.default[HMR].original);
  });
}
var file_plus_default = File_plus;

// node_modules/lucide-svelte/dist/icons/file-question-mark.svelte
File_question_mark[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-question-mark.svelte";
function File_question_mark($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_question_mark);
  const iconNode = [
    ["path", { "d": "M12 17h.01" }],
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z"
      }
    ],
    ["path", { "d": "M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-question-mark" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_question_mark, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_question_mark,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_question_mark = hmr(File_question_mark, () => File_question_mark[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_question_mark[HMR].source;
    set(File_question_mark[HMR].source, module.default[HMR].original);
  });
}
var file_question_mark_default = File_question_mark;

// node_modules/lucide-svelte/dist/icons/file-scan.svelte
File_scan[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-scan.svelte";
function File_scan($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_scan);
  const iconNode = [
    [
      "path",
      { "d": "M20 10V7l-5-5H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h4" }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M16 14a2 2 0 0 0-2 2" }],
    ["path", { "d": "M20 14a2 2 0 0 1 2 2" }],
    ["path", { "d": "M20 22a2 2 0 0 0 2-2" }],
    ["path", { "d": "M16 22a2 2 0 0 1-2-2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-scan" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_scan, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_scan,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_scan = hmr(File_scan, () => File_scan[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_scan[HMR].source;
    set(File_scan[HMR].source, module.default[HMR].original);
  });
}
var file_scan_default = File_scan;

// node_modules/lucide-svelte/dist/icons/file-search-2.svelte
File_search_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-search-2.svelte";
function File_search_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_search_2);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["circle", { "cx": "11.5", "cy": "14.5", "r": "2.5" }],
    ["path", { "d": "M13.3 16.3 15 18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-search-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_search_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_search_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_search_2 = hmr(File_search_2, () => File_search_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_search_2[HMR].source;
    set(File_search_2[HMR].source, module.default[HMR].original);
  });
}
var file_search_2_default = File_search_2;

// node_modules/lucide-svelte/dist/icons/file-search.svelte
File_search[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-search.svelte";
function File_search($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_search);
  const iconNode = [
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    [
      "path",
      {
        "d": "M4.268 21a2 2 0 0 0 1.727 1H18a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v3"
      }
    ],
    ["path", { "d": "m9 18-1.5-1.5" }],
    ["circle", { "cx": "5", "cy": "14", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-search" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_search, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_search,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_search = hmr(File_search, () => File_search[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_search[HMR].source;
    set(File_search[HMR].source, module.default[HMR].original);
  });
}
var file_search_default = File_search;

// node_modules/lucide-svelte/dist/icons/file-sliders.svelte
File_sliders[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-sliders.svelte";
function File_sliders($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_sliders);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M8 12h8" }],
    ["path", { "d": "M10 11v2" }],
    ["path", { "d": "M8 17h8" }],
    ["path", { "d": "M14 16v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-sliders" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_sliders, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_sliders,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_sliders = hmr(File_sliders, () => File_sliders[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_sliders[HMR].source;
    set(File_sliders[HMR].source, module.default[HMR].original);
  });
}
var file_sliders_default = File_sliders;

// node_modules/lucide-svelte/dist/icons/file-spreadsheet.svelte
File_spreadsheet[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-spreadsheet.svelte";
function File_spreadsheet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_spreadsheet);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M8 13h2" }],
    ["path", { "d": "M14 13h2" }],
    ["path", { "d": "M8 17h2" }],
    ["path", { "d": "M14 17h2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-spreadsheet" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_spreadsheet, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_spreadsheet,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_spreadsheet = hmr(File_spreadsheet, () => File_spreadsheet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_spreadsheet[HMR].source;
    set(File_spreadsheet[HMR].source, module.default[HMR].original);
  });
}
var file_spreadsheet_default = File_spreadsheet;

// node_modules/lucide-svelte/dist/icons/file-stack.svelte
File_stack[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-stack.svelte";
function File_stack($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_stack);
  const iconNode = [
    [
      "path",
      { "d": "M11 21a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1v-8a1 1 0 0 1 1-1" }
    ],
    [
      "path",
      { "d": "M16 16a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1" }
    ],
    [
      "path",
      {
        "d": "M21 6a2 2 0 0 0-.586-1.414l-2-2A2 2 0 0 0 17 2h-3a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-stack" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_stack, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_stack,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_stack = hmr(File_stack, () => File_stack[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_stack[HMR].source;
    set(File_stack[HMR].source, module.default[HMR].original);
  });
}
var file_stack_default = File_stack;

// node_modules/lucide-svelte/dist/icons/file-symlink.svelte
File_symlink[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-symlink.svelte";
function File_symlink($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_symlink);
  const iconNode = [
    ["path", { "d": "m10 18 3-3-3-3" }],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    [
      "path",
      {
        "d": "M4 11V4a2 2 0 0 1 2-2h9l5 5v13a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h7"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-symlink" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_symlink, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_symlink,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_symlink = hmr(File_symlink, () => File_symlink[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_symlink[HMR].source;
    set(File_symlink[HMR].source, module.default[HMR].original);
  });
}
var file_symlink_default = File_symlink;

// node_modules/lucide-svelte/dist/icons/file-terminal.svelte
File_terminal[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-terminal.svelte";
function File_terminal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_terminal);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "m8 16 2-2-2-2" }],
    ["path", { "d": "M12 18h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-terminal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_terminal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_terminal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_terminal = hmr(File_terminal, () => File_terminal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_terminal[HMR].source;
    set(File_terminal[HMR].source, module.default[HMR].original);
  });
}
var file_terminal_default = File_terminal;

// node_modules/lucide-svelte/dist/icons/file-text.svelte
File_text[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-text.svelte";
function File_text($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_text);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M10 9H8" }],
    ["path", { "d": "M16 13H8" }],
    ["path", { "d": "M16 17H8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-text" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_text, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_text,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_text = hmr(File_text, () => File_text[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_text[HMR].source;
    set(File_text[HMR].source, module.default[HMR].original);
  });
}
var file_text_default = File_text;

// node_modules/lucide-svelte/dist/icons/file-type-2.svelte
File_type_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-type-2.svelte";
function File_type_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_type_2);
  const iconNode = [
    [
      "path",
      { "d": "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M2 13v-1h6v1" }],
    ["path", { "d": "M5 12v6" }],
    ["path", { "d": "M4 18h2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-type-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_type_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_type_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_type_2 = hmr(File_type_2, () => File_type_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_type_2[HMR].source;
    set(File_type_2[HMR].source, module.default[HMR].original);
  });
}
var file_type_2_default = File_type_2;

// node_modules/lucide-svelte/dist/icons/file-type.svelte
File_type[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-type.svelte";
function File_type($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_type);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M9 13v-1h6v1" }],
    ["path", { "d": "M12 12v6" }],
    ["path", { "d": "M11 18h2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-type" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_type, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_type,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_type = hmr(File_type, () => File_type[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_type[HMR].source;
    set(File_type[HMR].source, module.default[HMR].original);
  });
}
var file_type_default = File_type;

// node_modules/lucide-svelte/dist/icons/file-user.svelte
File_user[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-user.svelte";
function File_user($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_user);
  const iconNode = [
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M15 18a3 3 0 1 0-6 0" }],
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7z"
      }
    ],
    ["circle", { "cx": "12", "cy": "13", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-user" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_user, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_user,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_user = hmr(File_user, () => File_user[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_user[HMR].source;
    set(File_user[HMR].source, module.default[HMR].original);
  });
}
var file_user_default = File_user;

// node_modules/lucide-svelte/dist/icons/file-up.svelte
File_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-up.svelte";
function File_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_up);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M12 12v6" }],
    ["path", { "d": "m15 15-3-3-3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_up = hmr(File_up, () => File_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_up[HMR].source;
    set(File_up[HMR].source, module.default[HMR].original);
  });
}
var file_up_default = File_up;

// node_modules/lucide-svelte/dist/icons/file-video-camera.svelte
File_video_camera[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-video-camera.svelte";
function File_video_camera($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_video_camera);
  const iconNode = [
    [
      "path",
      { "d": "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    [
      "rect",
      { "width": "8", "height": "6", "x": "2", "y": "12", "rx": "1" }
    ],
    [
      "path",
      {
        "d": "m10 13.843 3.033-1.755a.645.645 0 0 1 .967.56v4.704a.645.645 0 0 1-.967.56L10 16.157"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-video-camera" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_video_camera, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_video_camera,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_video_camera = hmr(File_video_camera, () => File_video_camera[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_video_camera[HMR].source;
    set(File_video_camera[HMR].source, module.default[HMR].original);
  });
}
var file_video_camera_default = File_video_camera;

// node_modules/lucide-svelte/dist/icons/file-volume-2.svelte
File_volume_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-volume-2.svelte";
function File_volume_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_volume_2);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M8 15h.01" }],
    ["path", { "d": "M11.5 13.5a2.5 2.5 0 0 1 0 3" }],
    ["path", { "d": "M15 12a5 5 0 0 1 0 6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-volume-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_volume_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_volume_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_volume_2 = hmr(File_volume_2, () => File_volume_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_volume_2[HMR].source;
    set(File_volume_2[HMR].source, module.default[HMR].original);
  });
}
var file_volume_2_default = File_volume_2;

// node_modules/lucide-svelte/dist/icons/file-volume.svelte
File_volume[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-volume.svelte";
function File_volume($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_volume);
  const iconNode = [
    ["path", { "d": "M11 11a5 5 0 0 1 0 6" }],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    [
      "path",
      {
        "d": "M4 6.765V4a2 2 0 0 1 2-2h9l5 5v13a2 2 0 0 1-2 2H6a2 2 0 0 1-.93-.23"
      }
    ],
    [
      "path",
      {
        "d": "M7 10.51a.5.5 0 0 0-.826-.38l-1.893 1.628A1 1 0 0 1 3.63 12H2.5a.5.5 0 0 0-.5.5v3a.5.5 0 0 0 .5.5h1.129a1 1 0 0 1 .652.242l1.893 1.63a.5.5 0 0 0 .826-.38z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-volume" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_volume, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_volume,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_volume = hmr(File_volume, () => File_volume[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_volume[HMR].source;
    set(File_volume[HMR].source, module.default[HMR].original);
  });
}
var file_volume_default = File_volume;

// node_modules/lucide-svelte/dist/icons/file-warning.svelte
File_warning[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-warning.svelte";
function File_warning($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_warning);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M12 9v4" }],
    ["path", { "d": "M12 17h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-warning" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_warning, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_warning,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_warning = hmr(File_warning, () => File_warning[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_warning[HMR].source;
    set(File_warning[HMR].source, module.default[HMR].original);
  });
}
var file_warning_default = File_warning;

// node_modules/lucide-svelte/dist/icons/file-x.svelte
File_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-x.svelte";
function File_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_x);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "m14.5 12.5-5 5" }],
    ["path", { "d": "m9.5 12.5 5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_x = hmr(File_x, () => File_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_x[HMR].source;
    set(File_x[HMR].source, module.default[HMR].original);
  });
}
var file_x_default = File_x;

// node_modules/lucide-svelte/dist/icons/file-x-2.svelte
File_x_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/file-x-2.svelte";
function File_x_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File_x_2);
  const iconNode = [
    [
      "path",
      { "d": "M4 22h14a2 2 0 0 0 2-2V7l-5-5H6a2 2 0 0 0-2 2v4" }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "m8 12.5-5 5" }],
    ["path", { "d": "m3 12.5 5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file-x-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File_x_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File_x_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File_x_2 = hmr(File_x_2, () => File_x_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File_x_2[HMR].source;
    set(File_x_2[HMR].source, module.default[HMR].original);
  });
}
var file_x_2_default = File_x_2;

// node_modules/lucide-svelte/dist/icons/file.svelte
File[FILENAME] = "node_modules/lucide-svelte/dist/icons/file.svelte";
function File($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, File);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7Z"
      }
    ],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "file" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(File, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    File,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  File = hmr(File, () => File[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = File[HMR].source;
    set(File[HMR].source, module.default[HMR].original);
  });
}
var file_default = File;

// node_modules/lucide-svelte/dist/icons/files.svelte
Files[FILENAME] = "node_modules/lucide-svelte/dist/icons/files.svelte";
function Files($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Files);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 2a2 2 0 0 1 1.414.586l4 4A2 2 0 0 1 21 8v7a2 2 0 0 1-2 2h-8a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2z"
      }
    ],
    ["path", { "d": "M15 2v4a2 2 0 0 0 2 2h4" }],
    [
      "path",
      {
        "d": "M5 7a2 2 0 0 0-2 2v11a2 2 0 0 0 2 2h8a2 2 0 0 0 1.732-1"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "files" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Files, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Files,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Files = hmr(Files, () => Files[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Files[HMR].source;
    set(Files[HMR].source, module.default[HMR].original);
  });
}
var files_default = Files;

// node_modules/lucide-svelte/dist/icons/film.svelte
Film[FILENAME] = "node_modules/lucide-svelte/dist/icons/film.svelte";
function Film($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Film);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M7 3v18" }],
    ["path", { "d": "M3 7.5h4" }],
    ["path", { "d": "M3 12h18" }],
    ["path", { "d": "M3 16.5h4" }],
    ["path", { "d": "M17 3v18" }],
    ["path", { "d": "M17 7.5h4" }],
    ["path", { "d": "M17 16.5h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "film" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Film, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Film,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Film = hmr(Film, () => Film[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Film[HMR].source;
    set(Film[HMR].source, module.default[HMR].original);
  });
}
var film_default = Film;

// node_modules/lucide-svelte/dist/icons/fingerprint.svelte
Fingerprint[FILENAME] = "node_modules/lucide-svelte/dist/icons/fingerprint.svelte";
function Fingerprint($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Fingerprint);
  const iconNode = [
    ["path", { "d": "M12 10a2 2 0 0 0-2 2c0 1.02-.1 2.51-.26 4" }],
    ["path", { "d": "M14 13.12c0 2.38 0 6.38-1 8.88" }],
    ["path", { "d": "M17.29 21.02c.12-.6.43-2.3.5-3.02" }],
    ["path", { "d": "M2 12a10 10 0 0 1 18-6" }],
    ["path", { "d": "M2 16h.01" }],
    ["path", { "d": "M21.8 16c.2-2 .131-5.354 0-6" }],
    ["path", { "d": "M5 19.5C5.5 18 6 15 6 12a6 6 0 0 1 .34-2" }],
    ["path", { "d": "M8.65 22c.21-.66.45-1.32.57-2" }],
    ["path", { "d": "M9 6.8a6 6 0 0 1 9 5.2v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "fingerprint" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Fingerprint, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Fingerprint,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Fingerprint = hmr(Fingerprint, () => Fingerprint[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fingerprint[HMR].source;
    set(Fingerprint[HMR].source, module.default[HMR].original);
  });
}
var fingerprint_default = Fingerprint;

// node_modules/lucide-svelte/dist/icons/fire-extinguisher.svelte
Fire_extinguisher[FILENAME] = "node_modules/lucide-svelte/dist/icons/fire-extinguisher.svelte";
function Fire_extinguisher($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Fire_extinguisher);
  const iconNode = [
    [
      "path",
      { "d": "M15 6.5V3a1 1 0 0 0-1-1h-2a1 1 0 0 0-1 1v3.5" }
    ],
    ["path", { "d": "M9 18h8" }],
    ["path", { "d": "M18 3h-3" }],
    ["path", { "d": "M11 3a6 6 0 0 0-6 6v11" }],
    ["path", { "d": "M5 13h4" }],
    [
      "path",
      {
        "d": "M17 10a4 4 0 0 0-8 0v10a2 2 0 0 0 2 2h4a2 2 0 0 0 2-2Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "fire-extinguisher" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Fire_extinguisher, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Fire_extinguisher,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Fire_extinguisher = hmr(Fire_extinguisher, () => Fire_extinguisher[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fire_extinguisher[HMR].source;
    set(Fire_extinguisher[HMR].source, module.default[HMR].original);
  });
}
var fire_extinguisher_default = Fire_extinguisher;

// node_modules/lucide-svelte/dist/icons/fish-off.svelte
Fish_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/fish-off.svelte";
function Fish_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Fish_off);
  const iconNode = [
    [
      "path",
      {
        "d": "M18 12.47v.03m0-.5v.47m-.475 5.056A6.744 6.744 0 0 1 15 18c-3.56 0-7.56-2.53-8.5-6 .348-1.28 1.114-2.433 2.121-3.38m3.444-2.088A8.802 8.802 0 0 1 15 6c3.56 0 6.06 2.54 7 6-.309 1.14-.786 2.177-1.413 3.058"
      }
    ],
    [
      "path",
      {
        "d": "M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33m7.48-4.372A9.77 9.77 0 0 1 16 6.07m0 11.86a9.77 9.77 0 0 1-1.728-3.618"
      }
    ],
    [
      "path",
      {
        "d": "m16.01 17.93-.23 1.4A2 2 0 0 1 13.8 21H9.5a5.96 5.96 0 0 0 1.49-3.98M8.53 3h5.27a2 2 0 0 1 1.98 1.67l.23 1.4M2 2l20 20"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "fish-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Fish_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Fish_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Fish_off = hmr(Fish_off, () => Fish_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fish_off[HMR].source;
    set(Fish_off[HMR].source, module.default[HMR].original);
  });
}
var fish_off_default = Fish_off;

// node_modules/lucide-svelte/dist/icons/fish-symbol.svelte
Fish_symbol[FILENAME] = "node_modules/lucide-svelte/dist/icons/fish-symbol.svelte";
function Fish_symbol($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Fish_symbol);
  const iconNode = [["path", { "d": "M2 16s9-15 20-4C11 23 2 8 2 8" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "fish-symbol" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Fish_symbol, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Fish_symbol,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Fish_symbol = hmr(Fish_symbol, () => Fish_symbol[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fish_symbol[HMR].source;
    set(Fish_symbol[HMR].source, module.default[HMR].original);
  });
}
var fish_symbol_default = Fish_symbol;

// node_modules/lucide-svelte/dist/icons/fish.svelte
Fish[FILENAME] = "node_modules/lucide-svelte/dist/icons/fish.svelte";
function Fish($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Fish);
  const iconNode = [
    [
      "path",
      {
        "d": "M6.5 12c.94-3.46 4.94-6 8.5-6 3.56 0 6.06 2.54 7 6-.94 3.47-3.44 6-7 6s-7.56-2.53-8.5-6Z"
      }
    ],
    ["path", { "d": "M18 12v.5" }],
    ["path", { "d": "M16 17.93a9.77 9.77 0 0 1 0-11.86" }],
    [
      "path",
      {
        "d": "M7 10.67C7 8 5.58 5.97 2.73 5.5c-1 1.5-1 5 .23 6.5-1.24 1.5-1.24 5-.23 6.5C5.58 18.03 7 16 7 13.33"
      }
    ],
    [
      "path",
      {
        "d": "M10.46 7.26C10.2 5.88 9.17 4.24 8 3h5.8a2 2 0 0 1 1.98 1.67l.23 1.4"
      }
    ],
    [
      "path",
      {
        "d": "m16.01 17.93-.23 1.4A2 2 0 0 1 13.8 21H9.5a5.96 5.96 0 0 0 1.49-3.98"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "fish" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Fish, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Fish,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Fish = hmr(Fish, () => Fish[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fish[HMR].source;
    set(Fish[HMR].source, module.default[HMR].original);
  });
}
var fish_default = Fish;

// node_modules/lucide-svelte/dist/icons/flag-off.svelte
Flag_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/flag-off.svelte";
function Flag_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Flag_off);
  const iconNode = [
    ["path", { "d": "M16 16c-3 0-5-2-8-2a6 6 0 0 0-4 1.528" }],
    ["path", { "d": "m2 2 20 20" }],
    ["path", { "d": "M4 22V4" }],
    [
      "path",
      {
        "d": "M7.656 2H8c3 0 5 2 7.333 2q2 0 3.067-.8A1 1 0 0 1 20 4v10.347"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "flag-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Flag_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Flag_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flag_off = hmr(Flag_off, () => Flag_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flag_off[HMR].source;
    set(Flag_off[HMR].source, module.default[HMR].original);
  });
}
var flag_off_default = Flag_off;

// node_modules/lucide-svelte/dist/icons/flag-triangle-left.svelte
Flag_triangle_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/flag-triangle-left.svelte";
function Flag_triangle_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Flag_triangle_left);
  const iconNode = [
    [
      "path",
      {
        "d": "M18 22V2.8a.8.8 0 0 0-1.17-.71L5.45 7.78a.8.8 0 0 0 0 1.44L18 15.5"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "flag-triangle-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Flag_triangle_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Flag_triangle_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flag_triangle_left = hmr(Flag_triangle_left, () => Flag_triangle_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flag_triangle_left[HMR].source;
    set(Flag_triangle_left[HMR].source, module.default[HMR].original);
  });
}
var flag_triangle_left_default = Flag_triangle_left;

// node_modules/lucide-svelte/dist/icons/flag-triangle-right.svelte
Flag_triangle_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/flag-triangle-right.svelte";
function Flag_triangle_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Flag_triangle_right);
  const iconNode = [
    [
      "path",
      {
        "d": "M6 22V2.8a.8.8 0 0 1 1.17-.71l11.38 5.69a.8.8 0 0 1 0 1.44L6 15.5"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "flag-triangle-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Flag_triangle_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Flag_triangle_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flag_triangle_right = hmr(Flag_triangle_right, () => Flag_triangle_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flag_triangle_right[HMR].source;
    set(Flag_triangle_right[HMR].source, module.default[HMR].original);
  });
}
var flag_triangle_right_default = Flag_triangle_right;

// node_modules/lucide-svelte/dist/icons/flame-kindling.svelte
Flame_kindling[FILENAME] = "node_modules/lucide-svelte/dist/icons/flame-kindling.svelte";
function Flame_kindling($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Flame_kindling);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 2c1 3 2.5 3.5 3.5 4.5A5 5 0 0 1 17 10a5 5 0 1 1-10 0c0-.3 0-.6.1-.9a2 2 0 1 0 3.3-2C8 4.5 11 2 12 2Z"
      }
    ],
    ["path", { "d": "m5 22 14-4" }],
    ["path", { "d": "m5 18 14 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "flame-kindling" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Flame_kindling, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Flame_kindling,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flame_kindling = hmr(Flame_kindling, () => Flame_kindling[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flame_kindling[HMR].source;
    set(Flame_kindling[HMR].source, module.default[HMR].original);
  });
}
var flame_kindling_default = Flame_kindling;

// node_modules/lucide-svelte/dist/icons/flag.svelte
Flag[FILENAME] = "node_modules/lucide-svelte/dist/icons/flag.svelte";
function Flag($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Flag);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 22V4a1 1 0 0 1 .4-.8A6 6 0 0 1 8 2c3 0 5 2 7.333 2q2 0 3.067-.8A1 1 0 0 1 20 4v10a1 1 0 0 1-.4.8A6 6 0 0 1 16 16c-3 0-5-2-8-2a6 6 0 0 0-4 1.528"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "flag" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Flag, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Flag,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flag = hmr(Flag, () => Flag[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flag[HMR].source;
    set(Flag[HMR].source, module.default[HMR].original);
  });
}
var flag_default = Flag;

// node_modules/lucide-svelte/dist/icons/flame.svelte
Flame[FILENAME] = "node_modules/lucide-svelte/dist/icons/flame.svelte";
function Flame($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Flame);
  const iconNode = [
    [
      "path",
      {
        "d": "M8.5 14.5A2.5 2.5 0 0 0 11 12c0-1.38-.5-2-1-3-1.072-2.143-.224-4.054 2-6 .5 2.5 2 4.9 4 6.5 2 1.6 3 3.5 3 5.5a7 7 0 1 1-14 0c0-1.153.433-2.294 1-3a2.5 2.5 0 0 0 2.5 2.5z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "flame" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Flame, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Flame,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flame = hmr(Flame, () => Flame[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flame[HMR].source;
    set(Flame[HMR].source, module.default[HMR].original);
  });
}
var flame_default = Flame;

// node_modules/lucide-svelte/dist/icons/flashlight-off.svelte
Flashlight_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/flashlight-off.svelte";
function Flashlight_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Flashlight_off);
  const iconNode = [
    [
      "path",
      {
        "d": "M16 16v4a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4"
      }
    ],
    ["path", { "d": "M7 2h11v4c0 2-2 2-2 4v1" }],
    ["line", { "x1": "11", "x2": "18", "y1": "6", "y2": "6" }],
    ["line", { "x1": "2", "x2": "22", "y1": "2", "y2": "22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "flashlight-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Flashlight_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Flashlight_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flashlight_off = hmr(Flashlight_off, () => Flashlight_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flashlight_off[HMR].source;
    set(Flashlight_off[HMR].source, module.default[HMR].original);
  });
}
var flashlight_off_default = Flashlight_off;

// node_modules/lucide-svelte/dist/icons/flashlight.svelte
Flashlight[FILENAME] = "node_modules/lucide-svelte/dist/icons/flashlight.svelte";
function Flashlight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Flashlight);
  const iconNode = [
    [
      "path",
      {
        "d": "M18 6c0 2-2 2-2 4v10a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2V10c0-2-2-2-2-4V2h12z"
      }
    ],
    ["line", { "x1": "6", "x2": "18", "y1": "6", "y2": "6" }],
    ["line", { "x1": "12", "x2": "12", "y1": "12", "y2": "12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "flashlight" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Flashlight, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Flashlight,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flashlight = hmr(Flashlight, () => Flashlight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flashlight[HMR].source;
    set(Flashlight[HMR].source, module.default[HMR].original);
  });
}
var flashlight_default = Flashlight;

// node_modules/lucide-svelte/dist/icons/flask-conical-off.svelte
Flask_conical_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/flask-conical-off.svelte";
function Flask_conical_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Flask_conical_off);
  const iconNode = [
    ["path", { "d": "M10 2v2.343" }],
    ["path", { "d": "M14 2v6.343" }],
    ["path", { "d": "m2 2 20 20" }],
    [
      "path",
      {
        "d": "M20 20a2 2 0 0 1-2 2H6a2 2 0 0 1-1.755-2.96l5.227-9.563"
      }
    ],
    ["path", { "d": "M6.453 15H15" }],
    ["path", { "d": "M8.5 2h7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "flask-conical-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Flask_conical_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Flask_conical_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flask_conical_off = hmr(Flask_conical_off, () => Flask_conical_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flask_conical_off[HMR].source;
    set(Flask_conical_off[HMR].source, module.default[HMR].original);
  });
}
var flask_conical_off_default = Flask_conical_off;

// node_modules/lucide-svelte/dist/icons/flask-round.svelte
Flask_round[FILENAME] = "node_modules/lucide-svelte/dist/icons/flask-round.svelte";
function Flask_round($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Flask_round);
  const iconNode = [
    ["path", { "d": "M10 2v6.292a7 7 0 1 0 4 0V2" }],
    ["path", { "d": "M5 15h14" }],
    ["path", { "d": "M8.5 2h7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "flask-round" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Flask_round, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Flask_round,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flask_round = hmr(Flask_round, () => Flask_round[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flask_round[HMR].source;
    set(Flask_round[HMR].source, module.default[HMR].original);
  });
}
var flask_round_default = Flask_round;

// node_modules/lucide-svelte/dist/icons/flask-conical.svelte
Flask_conical[FILENAME] = "node_modules/lucide-svelte/dist/icons/flask-conical.svelte";
function Flask_conical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Flask_conical);
  const iconNode = [
    [
      "path",
      {
        "d": "M14 2v6a2 2 0 0 0 .245.96l5.51 10.08A2 2 0 0 1 18 22H6a2 2 0 0 1-1.755-2.96l5.51-10.08A2 2 0 0 0 10 8V2"
      }
    ],
    ["path", { "d": "M6.453 15h11.094" }],
    ["path", { "d": "M8.5 2h7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "flask-conical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Flask_conical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Flask_conical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flask_conical = hmr(Flask_conical, () => Flask_conical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flask_conical[HMR].source;
    set(Flask_conical[HMR].source, module.default[HMR].original);
  });
}
var flask_conical_default = Flask_conical;

// node_modules/lucide-svelte/dist/icons/flip-horizontal-2.svelte
Flip_horizontal_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/flip-horizontal-2.svelte";
function Flip_horizontal_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Flip_horizontal_2);
  const iconNode = [
    ["path", { "d": "m3 7 5 5-5 5V7" }],
    ["path", { "d": "m21 7-5 5 5 5V7" }],
    ["path", { "d": "M12 20v2" }],
    ["path", { "d": "M12 14v2" }],
    ["path", { "d": "M12 8v2" }],
    ["path", { "d": "M12 2v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "flip-horizontal-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Flip_horizontal_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Flip_horizontal_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flip_horizontal_2 = hmr(Flip_horizontal_2, () => Flip_horizontal_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flip_horizontal_2[HMR].source;
    set(Flip_horizontal_2[HMR].source, module.default[HMR].original);
  });
}
var flip_horizontal_2_default = Flip_horizontal_2;

// node_modules/lucide-svelte/dist/icons/flip-horizontal.svelte
Flip_horizontal[FILENAME] = "node_modules/lucide-svelte/dist/icons/flip-horizontal.svelte";
function Flip_horizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Flip_horizontal);
  const iconNode = [
    ["path", { "d": "M8 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h3" }],
    ["path", { "d": "M16 3h3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-3" }],
    ["path", { "d": "M12 20v2" }],
    ["path", { "d": "M12 14v2" }],
    ["path", { "d": "M12 8v2" }],
    ["path", { "d": "M12 2v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "flip-horizontal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Flip_horizontal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Flip_horizontal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flip_horizontal = hmr(Flip_horizontal, () => Flip_horizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flip_horizontal[HMR].source;
    set(Flip_horizontal[HMR].source, module.default[HMR].original);
  });
}
var flip_horizontal_default = Flip_horizontal;

// node_modules/lucide-svelte/dist/icons/flip-vertical-2.svelte
Flip_vertical_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/flip-vertical-2.svelte";
function Flip_vertical_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Flip_vertical_2);
  const iconNode = [
    ["path", { "d": "m17 3-5 5-5-5h10" }],
    ["path", { "d": "m17 21-5-5-5 5h10" }],
    ["path", { "d": "M4 12H2" }],
    ["path", { "d": "M10 12H8" }],
    ["path", { "d": "M16 12h-2" }],
    ["path", { "d": "M22 12h-2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "flip-vertical-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Flip_vertical_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Flip_vertical_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flip_vertical_2 = hmr(Flip_vertical_2, () => Flip_vertical_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flip_vertical_2[HMR].source;
    set(Flip_vertical_2[HMR].source, module.default[HMR].original);
  });
}
var flip_vertical_2_default = Flip_vertical_2;

// node_modules/lucide-svelte/dist/icons/flip-vertical.svelte
Flip_vertical[FILENAME] = "node_modules/lucide-svelte/dist/icons/flip-vertical.svelte";
function Flip_vertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Flip_vertical);
  const iconNode = [
    ["path", { "d": "M21 8V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v3" }],
    ["path", { "d": "M21 16v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-3" }],
    ["path", { "d": "M4 12H2" }],
    ["path", { "d": "M10 12H8" }],
    ["path", { "d": "M16 12h-2" }],
    ["path", { "d": "M22 12h-2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "flip-vertical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Flip_vertical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Flip_vertical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flip_vertical = hmr(Flip_vertical, () => Flip_vertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flip_vertical[HMR].source;
    set(Flip_vertical[HMR].source, module.default[HMR].original);
  });
}
var flip_vertical_default = Flip_vertical;

// node_modules/lucide-svelte/dist/icons/flower-2.svelte
Flower_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/flower-2.svelte";
function Flower_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Flower_2);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 5a3 3 0 1 1 3 3m-3-3a3 3 0 1 0-3 3m3-3v1M9 8a3 3 0 1 0 3 3M9 8h1m5 0a3 3 0 1 1-3 3m3-3h-1m-2 3v-1"
      }
    ],
    ["circle", { "cx": "12", "cy": "8", "r": "2" }],
    ["path", { "d": "M12 10v12" }],
    [
      "path",
      { "d": "M12 22c4.2 0 7-1.667 7-5-4.2 0-7 1.667-7 5Z" }
    ],
    [
      "path",
      { "d": "M12 22c-4.2 0-7-1.667-7-5 4.2 0 7 1.667 7 5Z" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "flower-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Flower_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Flower_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flower_2 = hmr(Flower_2, () => Flower_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flower_2[HMR].source;
    set(Flower_2[HMR].source, module.default[HMR].original);
  });
}
var flower_2_default = Flower_2;

// node_modules/lucide-svelte/dist/icons/flower.svelte
Flower[FILENAME] = "node_modules/lucide-svelte/dist/icons/flower.svelte";
function Flower($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Flower);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "3" }],
    [
      "path",
      {
        "d": "M12 16.5A4.5 4.5 0 1 1 7.5 12 4.5 4.5 0 1 1 12 7.5a4.5 4.5 0 1 1 4.5 4.5 4.5 4.5 0 1 1-4.5 4.5"
      }
    ],
    ["path", { "d": "M12 7.5V9" }],
    ["path", { "d": "M7.5 12H9" }],
    ["path", { "d": "M16.5 12H15" }],
    ["path", { "d": "M12 16.5V15" }],
    ["path", { "d": "m8 8 1.88 1.88" }],
    ["path", { "d": "M14.12 9.88 16 8" }],
    ["path", { "d": "m8 16 1.88-1.88" }],
    ["path", { "d": "M14.12 14.12 16 16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "flower" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Flower, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Flower,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Flower = hmr(Flower, () => Flower[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Flower[HMR].source;
    set(Flower[HMR].source, module.default[HMR].original);
  });
}
var flower_default = Flower;

// node_modules/lucide-svelte/dist/icons/focus.svelte
Focus[FILENAME] = "node_modules/lucide-svelte/dist/icons/focus.svelte";
function Focus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Focus);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "3" }],
    ["path", { "d": "M3 7V5a2 2 0 0 1 2-2h2" }],
    ["path", { "d": "M17 3h2a2 2 0 0 1 2 2v2" }],
    ["path", { "d": "M21 17v2a2 2 0 0 1-2 2h-2" }],
    ["path", { "d": "M7 21H5a2 2 0 0 1-2-2v-2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "focus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Focus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Focus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Focus = hmr(Focus, () => Focus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Focus[HMR].source;
    set(Focus[HMR].source, module.default[HMR].original);
  });
}
var focus_default = Focus;

// node_modules/lucide-svelte/dist/icons/fold-horizontal.svelte
Fold_horizontal[FILENAME] = "node_modules/lucide-svelte/dist/icons/fold-horizontal.svelte";
function Fold_horizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Fold_horizontal);
  const iconNode = [
    ["path", { "d": "M2 12h6" }],
    ["path", { "d": "M22 12h-6" }],
    ["path", { "d": "M12 2v2" }],
    ["path", { "d": "M12 8v2" }],
    ["path", { "d": "M12 14v2" }],
    ["path", { "d": "M12 20v2" }],
    ["path", { "d": "m19 9-3 3 3 3" }],
    ["path", { "d": "m5 15 3-3-3-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "fold-horizontal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Fold_horizontal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Fold_horizontal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Fold_horizontal = hmr(Fold_horizontal, () => Fold_horizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fold_horizontal[HMR].source;
    set(Fold_horizontal[HMR].source, module.default[HMR].original);
  });
}
var fold_horizontal_default = Fold_horizontal;

// node_modules/lucide-svelte/dist/icons/fold-vertical.svelte
Fold_vertical[FILENAME] = "node_modules/lucide-svelte/dist/icons/fold-vertical.svelte";
function Fold_vertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Fold_vertical);
  const iconNode = [
    ["path", { "d": "M12 22v-6" }],
    ["path", { "d": "M12 8V2" }],
    ["path", { "d": "M4 12H2" }],
    ["path", { "d": "M10 12H8" }],
    ["path", { "d": "M16 12h-2" }],
    ["path", { "d": "M22 12h-2" }],
    ["path", { "d": "m15 19-3-3-3 3" }],
    ["path", { "d": "m15 5-3 3-3-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "fold-vertical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Fold_vertical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Fold_vertical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Fold_vertical = hmr(Fold_vertical, () => Fold_vertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fold_vertical[HMR].source;
    set(Fold_vertical[HMR].source, module.default[HMR].original);
  });
}
var fold_vertical_default = Fold_vertical;

// node_modules/lucide-svelte/dist/icons/folder-archive.svelte
Folder_archive[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-archive.svelte";
function Folder_archive($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_archive);
  const iconNode = [
    ["circle", { "cx": "15", "cy": "19", "r": "2" }],
    [
      "path",
      {
        "d": "M20.9 19.8A2 2 0 0 0 22 18V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2h5.1"
      }
    ],
    ["path", { "d": "M15 11v-1" }],
    ["path", { "d": "M15 17v-2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-archive" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_archive, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_archive,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_archive = hmr(Folder_archive, () => Folder_archive[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_archive[HMR].source;
    set(Folder_archive[HMR].source, module.default[HMR].original);
  });
}
var folder_archive_default = Folder_archive;

// node_modules/lucide-svelte/dist/icons/folder-check.svelte
Folder_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-check.svelte";
function Folder_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_check);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
      }
    ],
    ["path", { "d": "m9 13 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_check = hmr(Folder_check, () => Folder_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_check[HMR].source;
    set(Folder_check[HMR].source, module.default[HMR].original);
  });
}
var folder_check_default = Folder_check;

// node_modules/lucide-svelte/dist/icons/folder-clock.svelte
Folder_clock[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-clock.svelte";
function Folder_clock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_clock);
  const iconNode = [
    ["path", { "d": "M16 14v2.2l1.6 1" }],
    [
      "path",
      {
        "d": "M7 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2"
      }
    ],
    ["circle", { "cx": "16", "cy": "16", "r": "6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-clock" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_clock, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_clock,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_clock = hmr(Folder_clock, () => Folder_clock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_clock[HMR].source;
    set(Folder_clock[HMR].source, module.default[HMR].original);
  });
}
var folder_clock_default = Folder_clock;

// node_modules/lucide-svelte/dist/icons/folder-closed.svelte
Folder_closed[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-closed.svelte";
function Folder_closed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_closed);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
      }
    ],
    ["path", { "d": "M2 10h20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-closed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_closed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_closed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_closed = hmr(Folder_closed, () => Folder_closed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_closed[HMR].source;
    set(Folder_closed[HMR].source, module.default[HMR].original);
  });
}
var folder_closed_default = Folder_closed;

// node_modules/lucide-svelte/dist/icons/folder-code.svelte
Folder_code[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-code.svelte";
function Folder_code($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_code);
  const iconNode = [
    ["path", { "d": "M10 10.5 8 13l2 2.5" }],
    ["path", { "d": "m14 10.5 2 2.5-2 2.5" }],
    [
      "path",
      {
        "d": "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-code" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_code, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_code,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_code = hmr(Folder_code, () => Folder_code[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_code[HMR].source;
    set(Folder_code[HMR].source, module.default[HMR].original);
  });
}
var folder_code_default = Folder_code;

// node_modules/lucide-svelte/dist/icons/folder-cog.svelte
Folder_cog[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-cog.svelte";
function Folder_cog($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_cog);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.3 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.98a2 2 0 0 1 1.69.9l.66 1.2A2 2 0 0 0 12 6h8a2 2 0 0 1 2 2v3.3"
      }
    ],
    ["path", { "d": "m14.305 19.53.923-.382" }],
    ["path", { "d": "m15.228 16.852-.923-.383" }],
    ["path", { "d": "m16.852 15.228-.383-.923" }],
    ["path", { "d": "m16.852 20.772-.383.924" }],
    ["path", { "d": "m19.148 15.228.383-.923" }],
    ["path", { "d": "m19.53 21.696-.382-.924" }],
    ["path", { "d": "m20.772 16.852.924-.383" }],
    ["path", { "d": "m20.772 19.148.924.383" }],
    ["circle", { "cx": "18", "cy": "18", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-cog" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_cog, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_cog,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_cog = hmr(Folder_cog, () => Folder_cog[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_cog[HMR].source;
    set(Folder_cog[HMR].source, module.default[HMR].original);
  });
}
var folder_cog_default = Folder_cog;

// node_modules/lucide-svelte/dist/icons/folder-dot.svelte
Folder_dot[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-dot.svelte";
function Folder_dot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_dot);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z"
      }
    ],
    ["circle", { "cx": "12", "cy": "13", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-dot" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_dot, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_dot,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_dot = hmr(Folder_dot, () => Folder_dot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_dot[HMR].source;
    set(Folder_dot[HMR].source, module.default[HMR].original);
  });
}
var folder_dot_default = Folder_dot;

// node_modules/lucide-svelte/dist/icons/folder-down.svelte
Folder_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-down.svelte";
function Folder_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_down);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
      }
    ],
    ["path", { "d": "M12 10v6" }],
    ["path", { "d": "m15 13-3 3-3-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_down = hmr(Folder_down, () => Folder_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_down[HMR].source;
    set(Folder_down[HMR].source, module.default[HMR].original);
  });
}
var folder_down_default = Folder_down;

// node_modules/lucide-svelte/dist/icons/folder-git-2.svelte
Folder_git_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-git-2.svelte";
function Folder_git_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_git_2);
  const iconNode = [
    [
      "path",
      {
        "d": "M9 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v5"
      }
    ],
    ["circle", { "cx": "13", "cy": "12", "r": "2" }],
    ["path", { "d": "M18 19c-2.8 0-5-2.2-5-5v8" }],
    ["circle", { "cx": "20", "cy": "19", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-git-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_git_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_git_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_git_2 = hmr(Folder_git_2, () => Folder_git_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_git_2[HMR].source;
    set(Folder_git_2[HMR].source, module.default[HMR].original);
  });
}
var folder_git_2_default = Folder_git_2;

// node_modules/lucide-svelte/dist/icons/folder-heart.svelte
Folder_heart[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-heart.svelte";
function Folder_heart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_heart);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.638 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v3.417"
      }
    ],
    [
      "path",
      {
        "d": "M14.62 18.8A2.25 2.25 0 1 1 18 15.836a2.25 2.25 0 1 1 3.38 2.966l-2.626 2.856a.998.998 0 0 1-1.507 0z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-heart" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_heart, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_heart,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_heart = hmr(Folder_heart, () => Folder_heart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_heart[HMR].source;
    set(Folder_heart[HMR].source, module.default[HMR].original);
  });
}
var folder_heart_default = Folder_heart;

// node_modules/lucide-svelte/dist/icons/folder-git.svelte
Folder_git[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-git.svelte";
function Folder_git($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_git);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "13", "r": "2" }],
    [
      "path",
      {
        "d": "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
      }
    ],
    ["path", { "d": "M14 13h3" }],
    ["path", { "d": "M7 13h3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-git" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_git, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_git,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_git = hmr(Folder_git, () => Folder_git[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_git[HMR].source;
    set(Folder_git[HMR].source, module.default[HMR].original);
  });
}
var folder_git_default = Folder_git;

// node_modules/lucide-svelte/dist/icons/folder-input.svelte
Folder_input[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-input.svelte";
function Folder_input($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_input);
  const iconNode = [
    [
      "path",
      {
        "d": "M2 9V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-1"
      }
    ],
    ["path", { "d": "M2 13h10" }],
    ["path", { "d": "m9 16 3-3-3-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-input" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_input, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_input,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_input = hmr(Folder_input, () => Folder_input[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_input[HMR].source;
    set(Folder_input[HMR].source, module.default[HMR].original);
  });
}
var folder_input_default = Folder_input;

// node_modules/lucide-svelte/dist/icons/folder-kanban.svelte
Folder_kanban[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-kanban.svelte";
function Folder_kanban($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_kanban);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z"
      }
    ],
    ["path", { "d": "M8 10v4" }],
    ["path", { "d": "M12 10v2" }],
    ["path", { "d": "M16 10v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-kanban" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_kanban, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_kanban,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_kanban = hmr(Folder_kanban, () => Folder_kanban[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_kanban[HMR].source;
    set(Folder_kanban[HMR].source, module.default[HMR].original);
  });
}
var folder_kanban_default = Folder_kanban;

// node_modules/lucide-svelte/dist/icons/folder-key.svelte
Folder_key[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-key.svelte";
function Folder_key($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_key);
  const iconNode = [
    ["circle", { "cx": "16", "cy": "20", "r": "2" }],
    [
      "path",
      {
        "d": "M10 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v2"
      }
    ],
    ["path", { "d": "m22 14-4.5 4.5" }],
    ["path", { "d": "m21 15 1 1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-key" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_key, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_key,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_key = hmr(Folder_key, () => Folder_key[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_key[HMR].source;
    set(Folder_key[HMR].source, module.default[HMR].original);
  });
}
var folder_key_default = Folder_key;

// node_modules/lucide-svelte/dist/icons/folder-lock.svelte
Folder_lock[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-lock.svelte";
function Folder_lock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_lock);
  const iconNode = [
    [
      "rect",
      { "width": "8", "height": "5", "x": "14", "y": "17", "rx": "1" }
    ],
    [
      "path",
      {
        "d": "M10 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v2.5"
      }
    ],
    ["path", { "d": "M20 17v-2a2 2 0 1 0-4 0v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-lock" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_lock, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_lock,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_lock = hmr(Folder_lock, () => Folder_lock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_lock[HMR].source;
    set(Folder_lock[HMR].source, module.default[HMR].original);
  });
}
var folder_lock_default = Folder_lock;

// node_modules/lucide-svelte/dist/icons/folder-minus.svelte
Folder_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-minus.svelte";
function Folder_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_minus);
  const iconNode = [
    ["path", { "d": "M9 13h6" }],
    [
      "path",
      {
        "d": "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_minus = hmr(Folder_minus, () => Folder_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_minus[HMR].source;
    set(Folder_minus[HMR].source, module.default[HMR].original);
  });
}
var folder_minus_default = Folder_minus;

// node_modules/lucide-svelte/dist/icons/folder-open-dot.svelte
Folder_open_dot[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-open-dot.svelte";
function Folder_open_dot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_open_dot);
  const iconNode = [
    [
      "path",
      {
        "d": "m6 14 1.45-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.55 6a2 2 0 0 1-1.94 1.5H4a2 2 0 0 1-2-2V5c0-1.1.9-2 2-2h3.93a2 2 0 0 1 1.66.9l.82 1.2a2 2 0 0 0 1.66.9H18a2 2 0 0 1 2 2v2"
      }
    ],
    ["circle", { "cx": "14", "cy": "15", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-open-dot" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_open_dot, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_open_dot,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_open_dot = hmr(Folder_open_dot, () => Folder_open_dot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_open_dot[HMR].source;
    set(Folder_open_dot[HMR].source, module.default[HMR].original);
  });
}
var folder_open_dot_default = Folder_open_dot;

// node_modules/lucide-svelte/dist/icons/folder-open.svelte
Folder_open[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-open.svelte";
function Folder_open($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_open);
  const iconNode = [
    [
      "path",
      {
        "d": "m6 14 1.5-2.9A2 2 0 0 1 9.24 10H20a2 2 0 0 1 1.94 2.5l-1.54 6a2 2 0 0 1-1.95 1.5H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H18a2 2 0 0 1 2 2v2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-open" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_open, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_open,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_open = hmr(Folder_open, () => Folder_open[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_open[HMR].source;
    set(Folder_open[HMR].source, module.default[HMR].original);
  });
}
var folder_open_default = Folder_open;

// node_modules/lucide-svelte/dist/icons/folder-output.svelte
Folder_output[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-output.svelte";
function Folder_output($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_output);
  const iconNode = [
    [
      "path",
      {
        "d": "M2 7.5V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-1.5"
      }
    ],
    ["path", { "d": "M2 13h10" }],
    ["path", { "d": "m5 10-3 3 3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-output" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_output, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_output,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_output = hmr(Folder_output, () => Folder_output[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_output[HMR].source;
    set(Folder_output[HMR].source, module.default[HMR].original);
  });
}
var folder_output_default = Folder_output;

// node_modules/lucide-svelte/dist/icons/folder-pen.svelte
Folder_pen[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-pen.svelte";
function Folder_pen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_pen);
  const iconNode = [
    [
      "path",
      {
        "d": "M2 11.5V5a2 2 0 0 1 2-2h3.9c.7 0 1.3.3 1.7.9l.8 1.2c.4.6 1 .9 1.7.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-9.5"
      }
    ],
    [
      "path",
      {
        "d": "M11.378 13.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-pen" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_pen, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_pen,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_pen = hmr(Folder_pen, () => Folder_pen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_pen[HMR].source;
    set(Folder_pen[HMR].source, module.default[HMR].original);
  });
}
var folder_pen_default = Folder_pen;

// node_modules/lucide-svelte/dist/icons/folder-plus.svelte
Folder_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-plus.svelte";
function Folder_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_plus);
  const iconNode = [
    ["path", { "d": "M12 10v6" }],
    ["path", { "d": "M9 13h6" }],
    [
      "path",
      {
        "d": "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_plus = hmr(Folder_plus, () => Folder_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_plus[HMR].source;
    set(Folder_plus[HMR].source, module.default[HMR].original);
  });
}
var folder_plus_default = Folder_plus;

// node_modules/lucide-svelte/dist/icons/folder-root.svelte
Folder_root[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-root.svelte";
function Folder_root($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_root);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 20h16a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.93a2 2 0 0 1-1.66-.9l-.82-1.2A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13c0 1.1.9 2 2 2Z"
      }
    ],
    ["circle", { "cx": "12", "cy": "13", "r": "2" }],
    ["path", { "d": "M12 15v5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-root" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_root, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_root,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_root = hmr(Folder_root, () => Folder_root[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_root[HMR].source;
    set(Folder_root[HMR].source, module.default[HMR].original);
  });
}
var folder_root_default = Folder_root;

// node_modules/lucide-svelte/dist/icons/folder-search-2.svelte
Folder_search_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-search-2.svelte";
function Folder_search_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_search_2);
  const iconNode = [
    ["circle", { "cx": "11.5", "cy": "12.5", "r": "2.5" }],
    [
      "path",
      {
        "d": "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
      }
    ],
    ["path", { "d": "M13.3 14.3 15 16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-search-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_search_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_search_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_search_2 = hmr(Folder_search_2, () => Folder_search_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_search_2[HMR].source;
    set(Folder_search_2[HMR].source, module.default[HMR].original);
  });
}
var folder_search_2_default = Folder_search_2;

// node_modules/lucide-svelte/dist/icons/folder-search.svelte
Folder_search[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-search.svelte";
function Folder_search($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_search);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.7 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v4.1"
      }
    ],
    ["path", { "d": "m21 21-1.9-1.9" }],
    ["circle", { "cx": "17", "cy": "17", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-search" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_search, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_search,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_search = hmr(Folder_search, () => Folder_search[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_search[HMR].source;
    set(Folder_search[HMR].source, module.default[HMR].original);
  });
}
var folder_search_default = Folder_search;

// node_modules/lucide-svelte/dist/icons/folder-symlink.svelte
Folder_symlink[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-symlink.svelte";
function Folder_symlink($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_symlink);
  const iconNode = [
    [
      "path",
      {
        "d": "M2 9.35V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h7"
      }
    ],
    ["path", { "d": "m8 16 3-3-3-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-symlink" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_symlink, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_symlink,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_symlink = hmr(Folder_symlink, () => Folder_symlink[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_symlink[HMR].source;
    set(Folder_symlink[HMR].source, module.default[HMR].original);
  });
}
var folder_symlink_default = Folder_symlink;

// node_modules/lucide-svelte/dist/icons/folder-sync.svelte
Folder_sync[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-sync.svelte";
function Folder_sync($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_sync);
  const iconNode = [
    [
      "path",
      {
        "d": "M9 20H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h3.9a2 2 0 0 1 1.69.9l.81 1.2a2 2 0 0 0 1.67.9H20a2 2 0 0 1 2 2v.5"
      }
    ],
    ["path", { "d": "M12 10v4h4" }],
    ["path", { "d": "m12 14 1.535-1.605a5 5 0 0 1 8 1.5" }],
    ["path", { "d": "M22 22v-4h-4" }],
    ["path", { "d": "m22 18-1.535 1.605a5 5 0 0 1-8-1.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-sync" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_sync, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_sync,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_sync = hmr(Folder_sync, () => Folder_sync[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_sync[HMR].source;
    set(Folder_sync[HMR].source, module.default[HMR].original);
  });
}
var folder_sync_default = Folder_sync;

// node_modules/lucide-svelte/dist/icons/folder-tree.svelte
Folder_tree[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-tree.svelte";
function Folder_tree($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_tree);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 10a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-2.5a1 1 0 0 1-.8-.4l-.9-1.2A1 1 0 0 0 15 3h-2a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z"
      }
    ],
    [
      "path",
      {
        "d": "M20 21a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1h-2.9a1 1 0 0 1-.88-.55l-.42-.85a1 1 0 0 0-.92-.6H13a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z"
      }
    ],
    ["path", { "d": "M3 5a2 2 0 0 0 2 2h3" }],
    ["path", { "d": "M3 3v13a2 2 0 0 0 2 2h3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-tree" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_tree, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_tree,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_tree = hmr(Folder_tree, () => Folder_tree[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_tree[HMR].source;
    set(Folder_tree[HMR].source, module.default[HMR].original);
  });
}
var folder_tree_default = Folder_tree;

// node_modules/lucide-svelte/dist/icons/folder-up.svelte
Folder_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-up.svelte";
function Folder_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_up);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
      }
    ],
    ["path", { "d": "M12 10v6" }],
    ["path", { "d": "m9 13 3-3 3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_up = hmr(Folder_up, () => Folder_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_up[HMR].source;
    set(Folder_up[HMR].source, module.default[HMR].original);
  });
}
var folder_up_default = Folder_up;

// node_modules/lucide-svelte/dist/icons/folder-x.svelte
Folder_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder-x.svelte";
function Folder_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder_x);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
      }
    ],
    ["path", { "d": "m9.5 10.5 5 5" }],
    ["path", { "d": "m14.5 10.5-5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder_x = hmr(Folder_x, () => Folder_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder_x[HMR].source;
    set(Folder_x[HMR].source, module.default[HMR].original);
  });
}
var folder_x_default = Folder_x;

// node_modules/lucide-svelte/dist/icons/folder.svelte
Folder[FILENAME] = "node_modules/lucide-svelte/dist/icons/folder.svelte";
function Folder($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folder);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folder" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folder, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folder,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folder = hmr(Folder, () => Folder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folder[HMR].source;
    set(Folder[HMR].source, module.default[HMR].original);
  });
}
var folder_default = Folder;

// node_modules/lucide-svelte/dist/icons/folders.svelte
Folders[FILENAME] = "node_modules/lucide-svelte/dist/icons/folders.svelte";
function Folders($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Folders);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 5a2 2 0 0 1 2 2v7a2 2 0 0 1-2 2H9a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h2.5a1.5 1.5 0 0 1 1.2.6l.6.8a1.5 1.5 0 0 0 1.2.6z"
      }
    ],
    [
      "path",
      {
        "d": "M3 8.268a2 2 0 0 0-1 1.738V19a2 2 0 0 0 2 2h11a2 2 0 0 0 1.732-1"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "folders" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Folders, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Folders,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Folders = hmr(Folders, () => Folders[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Folders[HMR].source;
    set(Folders[HMR].source, module.default[HMR].original);
  });
}
var folders_default = Folders;

// node_modules/lucide-svelte/dist/icons/footprints.svelte
Footprints[FILENAME] = "node_modules/lucide-svelte/dist/icons/footprints.svelte";
function Footprints($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Footprints);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 16v-2.38C4 11.5 2.97 10.5 3 8c.03-2.72 1.49-6 4.5-6C9.37 2 10 3.8 10 5.5c0 3.11-2 5.66-2 8.68V16a2 2 0 1 1-4 0Z"
      }
    ],
    [
      "path",
      {
        "d": "M20 20v-2.38c0-2.12 1.03-3.12 1-5.62-.03-2.72-1.49-6-4.5-6C14.63 6 14 7.8 14 9.5c0 3.11 2 5.66 2 8.68V20a2 2 0 1 0 4 0Z"
      }
    ],
    ["path", { "d": "M16 17h4" }],
    ["path", { "d": "M4 13h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "footprints" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Footprints, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Footprints,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Footprints = hmr(Footprints, () => Footprints[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Footprints[HMR].source;
    set(Footprints[HMR].source, module.default[HMR].original);
  });
}
var footprints_default = Footprints;

// node_modules/lucide-svelte/dist/icons/forklift.svelte
Forklift[FILENAME] = "node_modules/lucide-svelte/dist/icons/forklift.svelte";
function Forklift($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Forklift);
  const iconNode = [
    ["path", { "d": "M12 12H5a2 2 0 0 0-2 2v5" }],
    ["circle", { "cx": "13", "cy": "19", "r": "2" }],
    ["circle", { "cx": "5", "cy": "19", "r": "2" }],
    [
      "path",
      { "d": "M8 19h3m5-17v17h6M6 12V7c0-1.1.9-2 2-2h3l5 5" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "forklift" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Forklift, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Forklift,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Forklift = hmr(Forklift, () => Forklift[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Forklift[HMR].source;
    set(Forklift[HMR].source, module.default[HMR].original);
  });
}
var forklift_default = Forklift;

// node_modules/lucide-svelte/dist/icons/forward.svelte
Forward[FILENAME] = "node_modules/lucide-svelte/dist/icons/forward.svelte";
function Forward($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Forward);
  const iconNode = [
    ["path", { "d": "m15 17 5-5-5-5" }],
    ["path", { "d": "M4 18v-2a4 4 0 0 1 4-4h12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "forward" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Forward, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Forward,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Forward = hmr(Forward, () => Forward[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Forward[HMR].source;
    set(Forward[HMR].source, module.default[HMR].original);
  });
}
var forward_default = Forward;

// node_modules/lucide-svelte/dist/icons/frame.svelte
Frame[FILENAME] = "node_modules/lucide-svelte/dist/icons/frame.svelte";
function Frame($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Frame);
  const iconNode = [
    ["line", { "x1": "22", "x2": "2", "y1": "6", "y2": "6" }],
    ["line", { "x1": "22", "x2": "2", "y1": "18", "y2": "18" }],
    ["line", { "x1": "6", "x2": "6", "y1": "2", "y2": "22" }],
    ["line", { "x1": "18", "x2": "18", "y1": "2", "y2": "22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "frame" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Frame, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Frame,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Frame = hmr(Frame, () => Frame[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Frame[HMR].source;
    set(Frame[HMR].source, module.default[HMR].original);
  });
}
var frame_default = Frame;

// node_modules/lucide-svelte/dist/icons/framer.svelte
Framer[FILENAME] = "node_modules/lucide-svelte/dist/icons/framer.svelte";
function Framer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Framer);
  const iconNode = [
    [
      "path",
      { "d": "M5 16V9h14V2H5l14 14h-7m-7 0 7 7v-7m-7 0h7" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "framer" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Framer, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Framer,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Framer = hmr(Framer, () => Framer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Framer[HMR].source;
    set(Framer[HMR].source, module.default[HMR].original);
  });
}
var framer_default = Framer;

// node_modules/lucide-svelte/dist/icons/frown.svelte
Frown[FILENAME] = "node_modules/lucide-svelte/dist/icons/frown.svelte";
function Frown($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Frown);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M16 16s-1.5-2-4-2-4 2-4 2" }],
    ["line", { "x1": "9", "x2": "9.01", "y1": "9", "y2": "9" }],
    ["line", { "x1": "15", "x2": "15.01", "y1": "9", "y2": "9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "frown" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Frown, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Frown,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Frown = hmr(Frown, () => Frown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Frown[HMR].source;
    set(Frown[HMR].source, module.default[HMR].original);
  });
}
var frown_default = Frown;

// node_modules/lucide-svelte/dist/icons/fuel.svelte
Fuel[FILENAME] = "node_modules/lucide-svelte/dist/icons/fuel.svelte";
function Fuel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Fuel);
  const iconNode = [
    ["line", { "x1": "3", "x2": "15", "y1": "22", "y2": "22" }],
    ["line", { "x1": "4", "x2": "14", "y1": "9", "y2": "9" }],
    ["path", { "d": "M14 22V4a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v18" }],
    [
      "path",
      {
        "d": "M14 13h2a2 2 0 0 1 2 2v2a2 2 0 0 0 2 2a2 2 0 0 0 2-2V9.83a2 2 0 0 0-.59-1.42L18 5"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "fuel" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Fuel, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Fuel,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Fuel = hmr(Fuel, () => Fuel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fuel[HMR].source;
    set(Fuel[HMR].source, module.default[HMR].original);
  });
}
var fuel_default = Fuel;

// node_modules/lucide-svelte/dist/icons/fullscreen.svelte
Fullscreen[FILENAME] = "node_modules/lucide-svelte/dist/icons/fullscreen.svelte";
function Fullscreen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Fullscreen);
  const iconNode = [
    ["path", { "d": "M3 7V5a2 2 0 0 1 2-2h2" }],
    ["path", { "d": "M17 3h2a2 2 0 0 1 2 2v2" }],
    ["path", { "d": "M21 17v2a2 2 0 0 1-2 2h-2" }],
    ["path", { "d": "M7 21H5a2 2 0 0 1-2-2v-2" }],
    [
      "rect",
      { "width": "10", "height": "8", "x": "7", "y": "8", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "fullscreen" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Fullscreen, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Fullscreen,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Fullscreen = hmr(Fullscreen, () => Fullscreen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fullscreen[HMR].source;
    set(Fullscreen[HMR].source, module.default[HMR].original);
  });
}
var fullscreen_default = Fullscreen;

// node_modules/lucide-svelte/dist/icons/funnel-plus.svelte
Funnel_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/funnel-plus.svelte";
function Funnel_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Funnel_plus);
  const iconNode = [
    [
      "path",
      {
        "d": "M13.354 3H3a1 1 0 0 0-.742 1.67l7.225 7.989A2 2 0 0 1 10 14v6a1 1 0 0 0 .553.895l2 1A1 1 0 0 0 14 21v-7a2 2 0 0 1 .517-1.341l1.218-1.348"
      }
    ],
    ["path", { "d": "M16 6h6" }],
    ["path", { "d": "M19 3v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "funnel-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Funnel_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Funnel_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Funnel_plus = hmr(Funnel_plus, () => Funnel_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Funnel_plus[HMR].source;
    set(Funnel_plus[HMR].source, module.default[HMR].original);
  });
}
var funnel_plus_default = Funnel_plus;

// node_modules/lucide-svelte/dist/icons/funnel-x.svelte
Funnel_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/funnel-x.svelte";
function Funnel_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Funnel_x);
  const iconNode = [
    [
      "path",
      {
        "d": "M12.531 3H3a1 1 0 0 0-.742 1.67l7.225 7.989A2 2 0 0 1 10 14v6a1 1 0 0 0 .553.895l2 1A1 1 0 0 0 14 21v-7a2 2 0 0 1 .517-1.341l.427-.473"
      }
    ],
    ["path", { "d": "m16.5 3.5 5 5" }],
    ["path", { "d": "m21.5 3.5-5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "funnel-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Funnel_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Funnel_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Funnel_x = hmr(Funnel_x, () => Funnel_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Funnel_x[HMR].source;
    set(Funnel_x[HMR].source, module.default[HMR].original);
  });
}
var funnel_x_default = Funnel_x;

// node_modules/lucide-svelte/dist/icons/funnel.svelte
Funnel[FILENAME] = "node_modules/lucide-svelte/dist/icons/funnel.svelte";
function Funnel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Funnel);
  const iconNode = [
    [
      "path",
      {
        "d": "M10 20a1 1 0 0 0 .553.895l2 1A1 1 0 0 0 14 21v-7a2 2 0 0 1 .517-1.341L21.74 4.67A1 1 0 0 0 21 3H3a1 1 0 0 0-.742 1.67l7.225 7.989A2 2 0 0 1 10 14z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "funnel" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Funnel, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Funnel,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Funnel = hmr(Funnel, () => Funnel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Funnel[HMR].source;
    set(Funnel[HMR].source, module.default[HMR].original);
  });
}
var funnel_default = Funnel;

// node_modules/lucide-svelte/dist/icons/gallery-horizontal-end.svelte
Gallery_horizontal_end[FILENAME] = "node_modules/lucide-svelte/dist/icons/gallery-horizontal-end.svelte";
function Gallery_horizontal_end($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Gallery_horizontal_end);
  const iconNode = [
    ["path", { "d": "M2 7v10" }],
    ["path", { "d": "M6 5v14" }],
    [
      "rect",
      {
        "width": "12",
        "height": "18",
        "x": "10",
        "y": "3",
        "rx": "2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "gallery-horizontal-end" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Gallery_horizontal_end, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Gallery_horizontal_end,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gallery_horizontal_end = hmr(Gallery_horizontal_end, () => Gallery_horizontal_end[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gallery_horizontal_end[HMR].source;
    set(Gallery_horizontal_end[HMR].source, module.default[HMR].original);
  });
}
var gallery_horizontal_end_default = Gallery_horizontal_end;

// node_modules/lucide-svelte/dist/icons/gallery-horizontal.svelte
Gallery_horizontal[FILENAME] = "node_modules/lucide-svelte/dist/icons/gallery-horizontal.svelte";
function Gallery_horizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Gallery_horizontal);
  const iconNode = [
    ["path", { "d": "M2 3v18" }],
    [
      "rect",
      { "width": "12", "height": "18", "x": "6", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M22 3v18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "gallery-horizontal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Gallery_horizontal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Gallery_horizontal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gallery_horizontal = hmr(Gallery_horizontal, () => Gallery_horizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gallery_horizontal[HMR].source;
    set(Gallery_horizontal[HMR].source, module.default[HMR].original);
  });
}
var gallery_horizontal_default = Gallery_horizontal;

// node_modules/lucide-svelte/dist/icons/gallery-thumbnails.svelte
Gallery_thumbnails[FILENAME] = "node_modules/lucide-svelte/dist/icons/gallery-thumbnails.svelte";
function Gallery_thumbnails($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Gallery_thumbnails);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "14", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M4 21h1" }],
    ["path", { "d": "M9 21h1" }],
    ["path", { "d": "M14 21h1" }],
    ["path", { "d": "M19 21h1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "gallery-thumbnails" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Gallery_thumbnails, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Gallery_thumbnails,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gallery_thumbnails = hmr(Gallery_thumbnails, () => Gallery_thumbnails[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gallery_thumbnails[HMR].source;
    set(Gallery_thumbnails[HMR].source, module.default[HMR].original);
  });
}
var gallery_thumbnails_default = Gallery_thumbnails;

// node_modules/lucide-svelte/dist/icons/gallery-vertical-end.svelte
Gallery_vertical_end[FILENAME] = "node_modules/lucide-svelte/dist/icons/gallery-vertical-end.svelte";
function Gallery_vertical_end($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Gallery_vertical_end);
  const iconNode = [
    ["path", { "d": "M7 2h10" }],
    ["path", { "d": "M5 6h14" }],
    [
      "rect",
      {
        "width": "18",
        "height": "12",
        "x": "3",
        "y": "10",
        "rx": "2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "gallery-vertical-end" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Gallery_vertical_end, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Gallery_vertical_end,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gallery_vertical_end = hmr(Gallery_vertical_end, () => Gallery_vertical_end[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gallery_vertical_end[HMR].source;
    set(Gallery_vertical_end[HMR].source, module.default[HMR].original);
  });
}
var gallery_vertical_end_default = Gallery_vertical_end;

// node_modules/lucide-svelte/dist/icons/gallery-vertical.svelte
Gallery_vertical[FILENAME] = "node_modules/lucide-svelte/dist/icons/gallery-vertical.svelte";
function Gallery_vertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Gallery_vertical);
  const iconNode = [
    ["path", { "d": "M3 2h18" }],
    [
      "rect",
      { "width": "18", "height": "12", "x": "3", "y": "6", "rx": "2" }
    ],
    ["path", { "d": "M3 22h18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "gallery-vertical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Gallery_vertical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Gallery_vertical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gallery_vertical = hmr(Gallery_vertical, () => Gallery_vertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gallery_vertical[HMR].source;
    set(Gallery_vertical[HMR].source, module.default[HMR].original);
  });
}
var gallery_vertical_default = Gallery_vertical;

// node_modules/lucide-svelte/dist/icons/gamepad-2.svelte
Gamepad_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/gamepad-2.svelte";
function Gamepad_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Gamepad_2);
  const iconNode = [
    ["line", { "x1": "6", "x2": "10", "y1": "11", "y2": "11" }],
    ["line", { "x1": "8", "x2": "8", "y1": "9", "y2": "13" }],
    [
      "line",
      { "x1": "15", "x2": "15.01", "y1": "12", "y2": "12" }
    ],
    [
      "line",
      { "x1": "18", "x2": "18.01", "y1": "10", "y2": "10" }
    ],
    [
      "path",
      {
        "d": "M17.32 5H6.68a4 4 0 0 0-3.978 3.59c-.006.052-.01.101-.017.152C2.604 9.416 2 14.456 2 16a3 3 0 0 0 3 3c1 0 1.5-.5 2-1l1.414-1.414A2 2 0 0 1 9.828 16h4.344a2 2 0 0 1 1.414.586L17 18c.5.5 1 1 2 1a3 3 0 0 0 3-3c0-1.545-.604-6.584-.685-7.258-.007-.05-.011-.1-.017-.151A4 4 0 0 0 17.32 5z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "gamepad-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Gamepad_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Gamepad_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gamepad_2 = hmr(Gamepad_2, () => Gamepad_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gamepad_2[HMR].source;
    set(Gamepad_2[HMR].source, module.default[HMR].original);
  });
}
var gamepad_2_default = Gamepad_2;

// node_modules/lucide-svelte/dist/icons/gamepad.svelte
Gamepad[FILENAME] = "node_modules/lucide-svelte/dist/icons/gamepad.svelte";
function Gamepad($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Gamepad);
  const iconNode = [
    ["line", { "x1": "6", "x2": "10", "y1": "12", "y2": "12" }],
    ["line", { "x1": "8", "x2": "8", "y1": "10", "y2": "14" }],
    [
      "line",
      { "x1": "15", "x2": "15.01", "y1": "13", "y2": "13" }
    ],
    [
      "line",
      { "x1": "18", "x2": "18.01", "y1": "11", "y2": "11" }
    ],
    [
      "rect",
      { "width": "20", "height": "12", "x": "2", "y": "6", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "gamepad" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Gamepad, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Gamepad,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gamepad = hmr(Gamepad, () => Gamepad[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gamepad[HMR].source;
    set(Gamepad[HMR].source, module.default[HMR].original);
  });
}
var gamepad_default = Gamepad;

// node_modules/lucide-svelte/dist/icons/gauge.svelte
Gauge[FILENAME] = "node_modules/lucide-svelte/dist/icons/gauge.svelte";
function Gauge($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Gauge);
  const iconNode = [
    ["path", { "d": "m12 14 4-4" }],
    ["path", { "d": "M3.34 19a10 10 0 1 1 17.32 0" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "gauge" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Gauge, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Gauge,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gauge = hmr(Gauge, () => Gauge[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gauge[HMR].source;
    set(Gauge[HMR].source, module.default[HMR].original);
  });
}
var gauge_default = Gauge;

// node_modules/lucide-svelte/dist/icons/gavel.svelte
Gavel[FILENAME] = "node_modules/lucide-svelte/dist/icons/gavel.svelte";
function Gavel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Gavel);
  const iconNode = [
    [
      "path",
      { "d": "m14 13-8.381 8.38a1 1 0 0 1-3.001-3l8.384-8.381" }
    ],
    ["path", { "d": "m16 16 6-6" }],
    ["path", { "d": "m21.5 10.5-8-8" }],
    ["path", { "d": "m8 8 6-6" }],
    ["path", { "d": "m8.5 7.5 8 8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "gavel" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Gavel, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Gavel,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gavel = hmr(Gavel, () => Gavel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gavel[HMR].source;
    set(Gavel[HMR].source, module.default[HMR].original);
  });
}
var gavel_default = Gavel;

// node_modules/lucide-svelte/dist/icons/gem.svelte
Gem[FILENAME] = "node_modules/lucide-svelte/dist/icons/gem.svelte";
function Gem($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Gem);
  const iconNode = [
    ["path", { "d": "M10.5 3 8 9l4 13 4-13-2.5-6" }],
    [
      "path",
      {
        "d": "M17 3a2 2 0 0 1 1.6.8l3 4a2 2 0 0 1 .013 2.382l-7.99 10.986a2 2 0 0 1-3.247 0l-7.99-10.986A2 2 0 0 1 2.4 7.8l2.998-3.997A2 2 0 0 1 7 3z"
      }
    ],
    ["path", { "d": "M2 9h20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "gem" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Gem, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Gem,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gem = hmr(Gem, () => Gem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gem[HMR].source;
    set(Gem[HMR].source, module.default[HMR].original);
  });
}
var gem_default = Gem;

// node_modules/lucide-svelte/dist/icons/georgian-lari.svelte
Georgian_lari[FILENAME] = "node_modules/lucide-svelte/dist/icons/georgian-lari.svelte";
function Georgian_lari($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Georgian_lari);
  const iconNode = [
    ["path", { "d": "M11.5 21a7.5 7.5 0 1 1 7.35-9" }],
    ["path", { "d": "M13 12V3" }],
    ["path", { "d": "M4 21h16" }],
    ["path", { "d": "M9 12V3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "georgian-lari" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Georgian_lari, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Georgian_lari,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Georgian_lari = hmr(Georgian_lari, () => Georgian_lari[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Georgian_lari[HMR].source;
    set(Georgian_lari[HMR].source, module.default[HMR].original);
  });
}
var georgian_lari_default = Georgian_lari;

// node_modules/lucide-svelte/dist/icons/ghost.svelte
Ghost[FILENAME] = "node_modules/lucide-svelte/dist/icons/ghost.svelte";
function Ghost($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ghost);
  const iconNode = [
    ["path", { "d": "M9 10h.01" }],
    ["path", { "d": "M15 10h.01" }],
    [
      "path",
      {
        "d": "M12 2a8 8 0 0 0-8 8v12l3-3 2.5 2.5L12 19l2.5 2.5L17 19l3 3V10a8 8 0 0 0-8-8z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ghost" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ghost, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ghost,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ghost = hmr(Ghost, () => Ghost[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ghost[HMR].source;
    set(Ghost[HMR].source, module.default[HMR].original);
  });
}
var ghost_default = Ghost;

// node_modules/lucide-svelte/dist/icons/gift.svelte
Gift[FILENAME] = "node_modules/lucide-svelte/dist/icons/gift.svelte";
function Gift($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Gift);
  const iconNode = [
    [
      "rect",
      { "x": "3", "y": "8", "width": "18", "height": "4", "rx": "1" }
    ],
    ["path", { "d": "M12 8v13" }],
    ["path", { "d": "M19 12v7a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-7" }],
    [
      "path",
      {
        "d": "M7.5 8a2.5 2.5 0 0 1 0-5A4.8 8 0 0 1 12 8a4.8 8 0 0 1 4.5-5 2.5 2.5 0 0 1 0 5"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "gift" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Gift, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Gift,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gift = hmr(Gift, () => Gift[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gift[HMR].source;
    set(Gift[HMR].source, module.default[HMR].original);
  });
}
var gift_default = Gift;

// node_modules/lucide-svelte/dist/icons/git-branch.svelte
Git_branch[FILENAME] = "node_modules/lucide-svelte/dist/icons/git-branch.svelte";
function Git_branch($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Git_branch);
  const iconNode = [
    ["line", { "x1": "6", "x2": "6", "y1": "3", "y2": "15" }],
    ["circle", { "cx": "18", "cy": "6", "r": "3" }],
    ["circle", { "cx": "6", "cy": "18", "r": "3" }],
    ["path", { "d": "M18 9a9 9 0 0 1-9 9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "git-branch" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Git_branch, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Git_branch,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Git_branch = hmr(Git_branch, () => Git_branch[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Git_branch[HMR].source;
    set(Git_branch[HMR].source, module.default[HMR].original);
  });
}
var git_branch_default = Git_branch;

// node_modules/lucide-svelte/dist/icons/git-branch-plus.svelte
Git_branch_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/git-branch-plus.svelte";
function Git_branch_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Git_branch_plus);
  const iconNode = [
    ["path", { "d": "M6 3v12" }],
    ["path", { "d": "M18 9a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" }],
    ["path", { "d": "M6 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6z" }],
    ["path", { "d": "M15 6a9 9 0 0 0-9 9" }],
    ["path", { "d": "M18 15v6" }],
    ["path", { "d": "M21 18h-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "git-branch-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Git_branch_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Git_branch_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Git_branch_plus = hmr(Git_branch_plus, () => Git_branch_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Git_branch_plus[HMR].source;
    set(Git_branch_plus[HMR].source, module.default[HMR].original);
  });
}
var git_branch_plus_default = Git_branch_plus;

// node_modules/lucide-svelte/dist/icons/git-commit-horizontal.svelte
Git_commit_horizontal[FILENAME] = "node_modules/lucide-svelte/dist/icons/git-commit-horizontal.svelte";
function Git_commit_horizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Git_commit_horizontal);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "3" }],
    ["line", { "x1": "3", "x2": "9", "y1": "12", "y2": "12" }],
    ["line", { "x1": "15", "x2": "21", "y1": "12", "y2": "12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "git-commit-horizontal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Git_commit_horizontal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Git_commit_horizontal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Git_commit_horizontal = hmr(Git_commit_horizontal, () => Git_commit_horizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Git_commit_horizontal[HMR].source;
    set(Git_commit_horizontal[HMR].source, module.default[HMR].original);
  });
}
var git_commit_horizontal_default = Git_commit_horizontal;

// node_modules/lucide-svelte/dist/icons/git-commit-vertical.svelte
Git_commit_vertical[FILENAME] = "node_modules/lucide-svelte/dist/icons/git-commit-vertical.svelte";
function Git_commit_vertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Git_commit_vertical);
  const iconNode = [
    ["path", { "d": "M12 3v6" }],
    ["circle", { "cx": "12", "cy": "12", "r": "3" }],
    ["path", { "d": "M12 15v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "git-commit-vertical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Git_commit_vertical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Git_commit_vertical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Git_commit_vertical = hmr(Git_commit_vertical, () => Git_commit_vertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Git_commit_vertical[HMR].source;
    set(Git_commit_vertical[HMR].source, module.default[HMR].original);
  });
}
var git_commit_vertical_default = Git_commit_vertical;

// node_modules/lucide-svelte/dist/icons/git-compare-arrows.svelte
Git_compare_arrows[FILENAME] = "node_modules/lucide-svelte/dist/icons/git-compare-arrows.svelte";
function Git_compare_arrows($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Git_compare_arrows);
  const iconNode = [
    ["circle", { "cx": "5", "cy": "6", "r": "3" }],
    ["path", { "d": "M12 6h5a2 2 0 0 1 2 2v7" }],
    ["path", { "d": "m15 9-3-3 3-3" }],
    ["circle", { "cx": "19", "cy": "18", "r": "3" }],
    ["path", { "d": "M12 18H7a2 2 0 0 1-2-2V9" }],
    ["path", { "d": "m9 15 3 3-3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "git-compare-arrows" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Git_compare_arrows, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Git_compare_arrows,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Git_compare_arrows = hmr(Git_compare_arrows, () => Git_compare_arrows[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Git_compare_arrows[HMR].source;
    set(Git_compare_arrows[HMR].source, module.default[HMR].original);
  });
}
var git_compare_arrows_default = Git_compare_arrows;

// node_modules/lucide-svelte/dist/icons/git-compare.svelte
Git_compare[FILENAME] = "node_modules/lucide-svelte/dist/icons/git-compare.svelte";
function Git_compare($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Git_compare);
  const iconNode = [
    ["circle", { "cx": "18", "cy": "18", "r": "3" }],
    ["circle", { "cx": "6", "cy": "6", "r": "3" }],
    ["path", { "d": "M13 6h3a2 2 0 0 1 2 2v7" }],
    ["path", { "d": "M11 18H8a2 2 0 0 1-2-2V9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "git-compare" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Git_compare, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Git_compare,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Git_compare = hmr(Git_compare, () => Git_compare[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Git_compare[HMR].source;
    set(Git_compare[HMR].source, module.default[HMR].original);
  });
}
var git_compare_default = Git_compare;

// node_modules/lucide-svelte/dist/icons/git-fork.svelte
Git_fork[FILENAME] = "node_modules/lucide-svelte/dist/icons/git-fork.svelte";
function Git_fork($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Git_fork);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "18", "r": "3" }],
    ["circle", { "cx": "6", "cy": "6", "r": "3" }],
    ["circle", { "cx": "18", "cy": "6", "r": "3" }],
    ["path", { "d": "M18 9v2c0 .6-.4 1-1 1H7c-.6 0-1-.4-1-1V9" }],
    ["path", { "d": "M12 12v3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "git-fork" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Git_fork, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Git_fork,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Git_fork = hmr(Git_fork, () => Git_fork[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Git_fork[HMR].source;
    set(Git_fork[HMR].source, module.default[HMR].original);
  });
}
var git_fork_default = Git_fork;

// node_modules/lucide-svelte/dist/icons/git-graph.svelte
Git_graph[FILENAME] = "node_modules/lucide-svelte/dist/icons/git-graph.svelte";
function Git_graph($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Git_graph);
  const iconNode = [
    ["circle", { "cx": "5", "cy": "6", "r": "3" }],
    ["path", { "d": "M5 9v6" }],
    ["circle", { "cx": "5", "cy": "18", "r": "3" }],
    ["path", { "d": "M12 3v18" }],
    ["circle", { "cx": "19", "cy": "6", "r": "3" }],
    ["path", { "d": "M16 15.7A9 9 0 0 0 19 9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "git-graph" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Git_graph, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Git_graph,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Git_graph = hmr(Git_graph, () => Git_graph[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Git_graph[HMR].source;
    set(Git_graph[HMR].source, module.default[HMR].original);
  });
}
var git_graph_default = Git_graph;

// node_modules/lucide-svelte/dist/icons/git-merge.svelte
Git_merge[FILENAME] = "node_modules/lucide-svelte/dist/icons/git-merge.svelte";
function Git_merge($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Git_merge);
  const iconNode = [
    ["circle", { "cx": "18", "cy": "18", "r": "3" }],
    ["circle", { "cx": "6", "cy": "6", "r": "3" }],
    ["path", { "d": "M6 21V9a9 9 0 0 0 9 9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "git-merge" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Git_merge, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Git_merge,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Git_merge = hmr(Git_merge, () => Git_merge[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Git_merge[HMR].source;
    set(Git_merge[HMR].source, module.default[HMR].original);
  });
}
var git_merge_default = Git_merge;

// node_modules/lucide-svelte/dist/icons/git-pull-request-arrow.svelte
Git_pull_request_arrow[FILENAME] = "node_modules/lucide-svelte/dist/icons/git-pull-request-arrow.svelte";
function Git_pull_request_arrow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Git_pull_request_arrow);
  const iconNode = [
    ["circle", { "cx": "5", "cy": "6", "r": "3" }],
    ["path", { "d": "M5 9v12" }],
    ["circle", { "cx": "19", "cy": "18", "r": "3" }],
    ["path", { "d": "m15 9-3-3 3-3" }],
    ["path", { "d": "M12 6h5a2 2 0 0 1 2 2v7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "git-pull-request-arrow" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Git_pull_request_arrow, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Git_pull_request_arrow,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Git_pull_request_arrow = hmr(Git_pull_request_arrow, () => Git_pull_request_arrow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Git_pull_request_arrow[HMR].source;
    set(Git_pull_request_arrow[HMR].source, module.default[HMR].original);
  });
}
var git_pull_request_arrow_default = Git_pull_request_arrow;

// node_modules/lucide-svelte/dist/icons/git-pull-request-closed.svelte
Git_pull_request_closed[FILENAME] = "node_modules/lucide-svelte/dist/icons/git-pull-request-closed.svelte";
function Git_pull_request_closed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Git_pull_request_closed);
  const iconNode = [
    ["circle", { "cx": "6", "cy": "6", "r": "3" }],
    ["path", { "d": "M6 9v12" }],
    ["path", { "d": "m21 3-6 6" }],
    ["path", { "d": "m21 9-6-6" }],
    ["path", { "d": "M18 11.5V15" }],
    ["circle", { "cx": "18", "cy": "18", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "git-pull-request-closed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Git_pull_request_closed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Git_pull_request_closed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Git_pull_request_closed = hmr(Git_pull_request_closed, () => Git_pull_request_closed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Git_pull_request_closed[HMR].source;
    set(Git_pull_request_closed[HMR].source, module.default[HMR].original);
  });
}
var git_pull_request_closed_default = Git_pull_request_closed;

// node_modules/lucide-svelte/dist/icons/git-pull-request-create.svelte
Git_pull_request_create[FILENAME] = "node_modules/lucide-svelte/dist/icons/git-pull-request-create.svelte";
function Git_pull_request_create($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Git_pull_request_create);
  const iconNode = [
    ["circle", { "cx": "6", "cy": "6", "r": "3" }],
    ["path", { "d": "M6 9v12" }],
    ["path", { "d": "M13 6h3a2 2 0 0 1 2 2v3" }],
    ["path", { "d": "M18 15v6" }],
    ["path", { "d": "M21 18h-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "git-pull-request-create" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Git_pull_request_create, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Git_pull_request_create,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Git_pull_request_create = hmr(Git_pull_request_create, () => Git_pull_request_create[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Git_pull_request_create[HMR].source;
    set(Git_pull_request_create[HMR].source, module.default[HMR].original);
  });
}
var git_pull_request_create_default = Git_pull_request_create;

// node_modules/lucide-svelte/dist/icons/git-pull-request-create-arrow.svelte
Git_pull_request_create_arrow[FILENAME] = "node_modules/lucide-svelte/dist/icons/git-pull-request-create-arrow.svelte";
function Git_pull_request_create_arrow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Git_pull_request_create_arrow);
  const iconNode = [
    ["circle", { "cx": "5", "cy": "6", "r": "3" }],
    ["path", { "d": "M5 9v12" }],
    ["path", { "d": "m15 9-3-3 3-3" }],
    ["path", { "d": "M12 6h5a2 2 0 0 1 2 2v3" }],
    ["path", { "d": "M19 15v6" }],
    ["path", { "d": "M22 18h-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "git-pull-request-create-arrow" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Git_pull_request_create_arrow, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Git_pull_request_create_arrow,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Git_pull_request_create_arrow = hmr(Git_pull_request_create_arrow, () => Git_pull_request_create_arrow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Git_pull_request_create_arrow[HMR].source;
    set(Git_pull_request_create_arrow[HMR].source, module.default[HMR].original);
  });
}
var git_pull_request_create_arrow_default = Git_pull_request_create_arrow;

// node_modules/lucide-svelte/dist/icons/git-pull-request-draft.svelte
Git_pull_request_draft[FILENAME] = "node_modules/lucide-svelte/dist/icons/git-pull-request-draft.svelte";
function Git_pull_request_draft($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Git_pull_request_draft);
  const iconNode = [
    ["circle", { "cx": "18", "cy": "18", "r": "3" }],
    ["circle", { "cx": "6", "cy": "6", "r": "3" }],
    ["path", { "d": "M18 6V5" }],
    ["path", { "d": "M18 11v-1" }],
    ["line", { "x1": "6", "x2": "6", "y1": "9", "y2": "21" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "git-pull-request-draft" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Git_pull_request_draft, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Git_pull_request_draft,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Git_pull_request_draft = hmr(Git_pull_request_draft, () => Git_pull_request_draft[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Git_pull_request_draft[HMR].source;
    set(Git_pull_request_draft[HMR].source, module.default[HMR].original);
  });
}
var git_pull_request_draft_default = Git_pull_request_draft;

// node_modules/lucide-svelte/dist/icons/git-pull-request.svelte
Git_pull_request[FILENAME] = "node_modules/lucide-svelte/dist/icons/git-pull-request.svelte";
function Git_pull_request($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Git_pull_request);
  const iconNode = [
    ["circle", { "cx": "18", "cy": "18", "r": "3" }],
    ["circle", { "cx": "6", "cy": "6", "r": "3" }],
    ["path", { "d": "M13 6h3a2 2 0 0 1 2 2v7" }],
    ["line", { "x1": "6", "x2": "6", "y1": "9", "y2": "21" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "git-pull-request" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Git_pull_request, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Git_pull_request,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Git_pull_request = hmr(Git_pull_request, () => Git_pull_request[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Git_pull_request[HMR].source;
    set(Git_pull_request[HMR].source, module.default[HMR].original);
  });
}
var git_pull_request_default = Git_pull_request;

// node_modules/lucide-svelte/dist/icons/github.svelte
Github[FILENAME] = "node_modules/lucide-svelte/dist/icons/github.svelte";
function Github($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Github);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4"
      }
    ],
    ["path", { "d": "M9 18c-4.51 2-5-2-7-2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "github" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Github, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Github,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Github = hmr(Github, () => Github[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Github[HMR].source;
    set(Github[HMR].source, module.default[HMR].original);
  });
}
var github_default = Github;

// node_modules/lucide-svelte/dist/icons/gitlab.svelte
Gitlab[FILENAME] = "node_modules/lucide-svelte/dist/icons/gitlab.svelte";
function Gitlab($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Gitlab);
  const iconNode = [
    [
      "path",
      {
        "d": "m22 13.29-3.33-10a.42.42 0 0 0-.14-.18.38.38 0 0 0-.22-.11.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18l-2.26 6.67H8.32L6.1 3.26a.42.42 0 0 0-.1-.18.38.38 0 0 0-.26-.08.39.39 0 0 0-.23.07.42.42 0 0 0-.14.18L2 13.29a.74.74 0 0 0 .27.83L12 21l9.69-6.88a.71.71 0 0 0 .31-.83Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "gitlab" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Gitlab, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Gitlab,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gitlab = hmr(Gitlab, () => Gitlab[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gitlab[HMR].source;
    set(Gitlab[HMR].source, module.default[HMR].original);
  });
}
var gitlab_default = Gitlab;

// node_modules/lucide-svelte/dist/icons/glass-water.svelte
Glass_water[FILENAME] = "node_modules/lucide-svelte/dist/icons/glass-water.svelte";
function Glass_water($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Glass_water);
  const iconNode = [
    [
      "path",
      {
        "d": "M5.116 4.104A1 1 0 0 1 6.11 3h11.78a1 1 0 0 1 .994 1.105L17.19 20.21A2 2 0 0 1 15.2 22H8.8a2 2 0 0 1-2-1.79z"
      }
    ],
    ["path", { "d": "M6 12a5 5 0 0 1 6 0 5 5 0 0 0 6 0" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "glass-water" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Glass_water, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Glass_water,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Glass_water = hmr(Glass_water, () => Glass_water[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Glass_water[HMR].source;
    set(Glass_water[HMR].source, module.default[HMR].original);
  });
}
var glass_water_default = Glass_water;

// node_modules/lucide-svelte/dist/icons/glasses.svelte
Glasses[FILENAME] = "node_modules/lucide-svelte/dist/icons/glasses.svelte";
function Glasses($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Glasses);
  const iconNode = [
    ["circle", { "cx": "6", "cy": "15", "r": "4" }],
    ["circle", { "cx": "18", "cy": "15", "r": "4" }],
    ["path", { "d": "M14 15a2 2 0 0 0-2-2 2 2 0 0 0-2 2" }],
    ["path", { "d": "M2.5 13 5 7c.7-1.3 1.4-2 3-2" }],
    ["path", { "d": "M21.5 13 19 7c-.7-1.3-1.5-2-3-2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "glasses" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Glasses, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Glasses,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Glasses = hmr(Glasses, () => Glasses[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Glasses[HMR].source;
    set(Glasses[HMR].source, module.default[HMR].original);
  });
}
var glasses_default = Glasses;

// node_modules/lucide-svelte/dist/icons/globe-lock.svelte
Globe_lock[FILENAME] = "node_modules/lucide-svelte/dist/icons/globe-lock.svelte";
function Globe_lock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Globe_lock);
  const iconNode = [
    [
      "path",
      {
        "d": "M15.686 15A14.5 14.5 0 0 1 12 22a14.5 14.5 0 0 1 0-20 10 10 0 1 0 9.542 13"
      }
    ],
    ["path", { "d": "M2 12h8.5" }],
    ["path", { "d": "M20 6V4a2 2 0 1 0-4 0v2" }],
    [
      "rect",
      { "width": "8", "height": "5", "x": "14", "y": "6", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "globe-lock" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Globe_lock, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Globe_lock,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Globe_lock = hmr(Globe_lock, () => Globe_lock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Globe_lock[HMR].source;
    set(Globe_lock[HMR].source, module.default[HMR].original);
  });
}
var globe_lock_default = Globe_lock;

// node_modules/lucide-svelte/dist/icons/globe.svelte
Globe[FILENAME] = "node_modules/lucide-svelte/dist/icons/globe.svelte";
function Globe($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Globe);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    [
      "path",
      { "d": "M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20" }
    ],
    ["path", { "d": "M2 12h20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "globe" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Globe, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Globe,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Globe = hmr(Globe, () => Globe[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Globe[HMR].source;
    set(Globe[HMR].source, module.default[HMR].original);
  });
}
var globe_default = Globe;

// node_modules/lucide-svelte/dist/icons/goal.svelte
Goal[FILENAME] = "node_modules/lucide-svelte/dist/icons/goal.svelte";
function Goal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Goal);
  const iconNode = [
    ["path", { "d": "M12 13V2l8 4-8 4" }],
    ["path", { "d": "M20.561 10.222a9 9 0 1 1-12.55-5.29" }],
    ["path", { "d": "M8.002 9.997a5 5 0 1 0 8.9 2.02" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "goal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Goal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Goal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Goal = hmr(Goal, () => Goal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Goal[HMR].source;
    set(Goal[HMR].source, module.default[HMR].original);
  });
}
var goal_default = Goal;

// node_modules/lucide-svelte/dist/icons/gpu.svelte
Gpu[FILENAME] = "node_modules/lucide-svelte/dist/icons/gpu.svelte";
function Gpu($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Gpu);
  const iconNode = [
    ["path", { "d": "M2 21V3" }],
    [
      "path",
      { "d": "M2 5h18a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2H2.26" }
    ],
    ["path", { "d": "M7 17v3a1 1 0 0 0 1 1h5a1 1 0 0 0 1-1v-3" }],
    ["circle", { "cx": "16", "cy": "11", "r": "2" }],
    ["circle", { "cx": "8", "cy": "11", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "gpu" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Gpu, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Gpu,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Gpu = hmr(Gpu, () => Gpu[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gpu[HMR].source;
    set(Gpu[HMR].source, module.default[HMR].original);
  });
}
var gpu_default = Gpu;

// node_modules/lucide-svelte/dist/icons/graduation-cap.svelte
Graduation_cap[FILENAME] = "node_modules/lucide-svelte/dist/icons/graduation-cap.svelte";
function Graduation_cap($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Graduation_cap);
  const iconNode = [
    [
      "path",
      {
        "d": "M21.42 10.922a1 1 0 0 0-.019-1.838L12.83 5.18a2 2 0 0 0-1.66 0L2.6 9.08a1 1 0 0 0 0 1.832l8.57 3.908a2 2 0 0 0 1.66 0z"
      }
    ],
    ["path", { "d": "M22 10v6" }],
    ["path", { "d": "M6 12.5V16a6 3 0 0 0 12 0v-3.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "graduation-cap" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Graduation_cap, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Graduation_cap,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Graduation_cap = hmr(Graduation_cap, () => Graduation_cap[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Graduation_cap[HMR].source;
    set(Graduation_cap[HMR].source, module.default[HMR].original);
  });
}
var graduation_cap_default = Graduation_cap;

// node_modules/lucide-svelte/dist/icons/grape.svelte
Grape[FILENAME] = "node_modules/lucide-svelte/dist/icons/grape.svelte";
function Grape($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Grape);
  const iconNode = [
    ["path", { "d": "M22 5V2l-5.89 5.89" }],
    ["circle", { "cx": "16.6", "cy": "15.89", "r": "3" }],
    ["circle", { "cx": "8.11", "cy": "7.4", "r": "3" }],
    ["circle", { "cx": "12.35", "cy": "11.65", "r": "3" }],
    ["circle", { "cx": "13.91", "cy": "5.85", "r": "3" }],
    ["circle", { "cx": "18.15", "cy": "10.09", "r": "3" }],
    ["circle", { "cx": "6.56", "cy": "13.2", "r": "3" }],
    ["circle", { "cx": "10.8", "cy": "17.44", "r": "3" }],
    ["circle", { "cx": "5", "cy": "19", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "grape" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Grape, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Grape,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grape = hmr(Grape, () => Grape[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grape[HMR].source;
    set(Grape[HMR].source, module.default[HMR].original);
  });
}
var grape_default = Grape;

// node_modules/lucide-svelte/dist/icons/grid-2x2-check.svelte
Grid_2x2_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/grid-2x2-check.svelte";
function Grid_2x2_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Grid_2x2_check);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3"
      }
    ],
    ["path", { "d": "m16 19 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "grid-2x2-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Grid_2x2_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Grid_2x2_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grid_2x2_check = hmr(Grid_2x2_check, () => Grid_2x2_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grid_2x2_check[HMR].source;
    set(Grid_2x2_check[HMR].source, module.default[HMR].original);
  });
}
var grid_2x2_check_default = Grid_2x2_check;

// node_modules/lucide-svelte/dist/icons/grid-2x2-plus.svelte
Grid_2x2_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/grid-2x2-plus.svelte";
function Grid_2x2_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Grid_2x2_plus);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3"
      }
    ],
    ["path", { "d": "M16 19h6" }],
    ["path", { "d": "M19 22v-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "grid-2x2-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Grid_2x2_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Grid_2x2_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grid_2x2_plus = hmr(Grid_2x2_plus, () => Grid_2x2_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grid_2x2_plus[HMR].source;
    set(Grid_2x2_plus[HMR].source, module.default[HMR].original);
  });
}
var grid_2x2_plus_default = Grid_2x2_plus;

// node_modules/lucide-svelte/dist/icons/grid-2x2-x.svelte
Grid_2x2_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/grid-2x2-x.svelte";
function Grid_2x2_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Grid_2x2_x);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 3v17a1 1 0 0 1-1 1H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v6a1 1 0 0 1-1 1H3"
      }
    ],
    ["path", { "d": "m16 16 5 5" }],
    ["path", { "d": "m16 21 5-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "grid-2x2-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Grid_2x2_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Grid_2x2_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grid_2x2_x = hmr(Grid_2x2_x, () => Grid_2x2_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grid_2x2_x[HMR].source;
    set(Grid_2x2_x[HMR].source, module.default[HMR].original);
  });
}
var grid_2x2_x_default = Grid_2x2_x;

// node_modules/lucide-svelte/dist/icons/grid-2x2.svelte
Grid_2x2[FILENAME] = "node_modules/lucide-svelte/dist/icons/grid-2x2.svelte";
function Grid_2x2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Grid_2x2);
  const iconNode = [
    ["path", { "d": "M12 3v18" }],
    ["path", { "d": "M3 12h18" }],
    [
      "rect",
      { "x": "3", "y": "3", "width": "18", "height": "18", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "grid-2x2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Grid_2x2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Grid_2x2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grid_2x2 = hmr(Grid_2x2, () => Grid_2x2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grid_2x2[HMR].source;
    set(Grid_2x2[HMR].source, module.default[HMR].original);
  });
}
var grid_2x2_default = Grid_2x2;

// node_modules/lucide-svelte/dist/icons/grid-3x2.svelte
Grid_3x2[FILENAME] = "node_modules/lucide-svelte/dist/icons/grid-3x2.svelte";
function Grid_3x2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Grid_3x2);
  const iconNode = [
    ["path", { "d": "M15 3v18" }],
    ["path", { "d": "M3 12h18" }],
    ["path", { "d": "M9 3v18" }],
    [
      "rect",
      { "x": "3", "y": "3", "width": "18", "height": "18", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "grid-3x2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Grid_3x2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Grid_3x2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grid_3x2 = hmr(Grid_3x2, () => Grid_3x2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grid_3x2[HMR].source;
    set(Grid_3x2[HMR].source, module.default[HMR].original);
  });
}
var grid_3x2_default = Grid_3x2;

// node_modules/lucide-svelte/dist/icons/grid-3x3.svelte
Grid_3x3[FILENAME] = "node_modules/lucide-svelte/dist/icons/grid-3x3.svelte";
function Grid_3x3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Grid_3x3);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M3 9h18" }],
    ["path", { "d": "M3 15h18" }],
    ["path", { "d": "M9 3v18" }],
    ["path", { "d": "M15 3v18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "grid-3x3" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Grid_3x3, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Grid_3x3,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grid_3x3 = hmr(Grid_3x3, () => Grid_3x3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grid_3x3[HMR].source;
    set(Grid_3x3[HMR].source, module.default[HMR].original);
  });
}
var grid_3x3_default = Grid_3x3;

// node_modules/lucide-svelte/dist/icons/grip-horizontal.svelte
Grip_horizontal[FILENAME] = "node_modules/lucide-svelte/dist/icons/grip-horizontal.svelte";
function Grip_horizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Grip_horizontal);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "9", "r": "1" }],
    ["circle", { "cx": "19", "cy": "9", "r": "1" }],
    ["circle", { "cx": "5", "cy": "9", "r": "1" }],
    ["circle", { "cx": "12", "cy": "15", "r": "1" }],
    ["circle", { "cx": "19", "cy": "15", "r": "1" }],
    ["circle", { "cx": "5", "cy": "15", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "grip-horizontal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Grip_horizontal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Grip_horizontal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grip_horizontal = hmr(Grip_horizontal, () => Grip_horizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grip_horizontal[HMR].source;
    set(Grip_horizontal[HMR].source, module.default[HMR].original);
  });
}
var grip_horizontal_default = Grip_horizontal;

// node_modules/lucide-svelte/dist/icons/grip-vertical.svelte
Grip_vertical[FILENAME] = "node_modules/lucide-svelte/dist/icons/grip-vertical.svelte";
function Grip_vertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Grip_vertical);
  const iconNode = [
    ["circle", { "cx": "9", "cy": "12", "r": "1" }],
    ["circle", { "cx": "9", "cy": "5", "r": "1" }],
    ["circle", { "cx": "9", "cy": "19", "r": "1" }],
    ["circle", { "cx": "15", "cy": "12", "r": "1" }],
    ["circle", { "cx": "15", "cy": "5", "r": "1" }],
    ["circle", { "cx": "15", "cy": "19", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "grip-vertical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Grip_vertical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Grip_vertical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grip_vertical = hmr(Grip_vertical, () => Grip_vertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grip_vertical[HMR].source;
    set(Grip_vertical[HMR].source, module.default[HMR].original);
  });
}
var grip_vertical_default = Grip_vertical;

// node_modules/lucide-svelte/dist/icons/grip.svelte
Grip[FILENAME] = "node_modules/lucide-svelte/dist/icons/grip.svelte";
function Grip($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Grip);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "5", "r": "1" }],
    ["circle", { "cx": "19", "cy": "5", "r": "1" }],
    ["circle", { "cx": "5", "cy": "5", "r": "1" }],
    ["circle", { "cx": "12", "cy": "12", "r": "1" }],
    ["circle", { "cx": "19", "cy": "12", "r": "1" }],
    ["circle", { "cx": "5", "cy": "12", "r": "1" }],
    ["circle", { "cx": "12", "cy": "19", "r": "1" }],
    ["circle", { "cx": "19", "cy": "19", "r": "1" }],
    ["circle", { "cx": "5", "cy": "19", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "grip" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Grip, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Grip,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Grip = hmr(Grip, () => Grip[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Grip[HMR].source;
    set(Grip[HMR].source, module.default[HMR].original);
  });
}
var grip_default = Grip;

// node_modules/lucide-svelte/dist/icons/group.svelte
Group[FILENAME] = "node_modules/lucide-svelte/dist/icons/group.svelte";
function Group($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Group);
  const iconNode = [
    ["path", { "d": "M3 7V5c0-1.1.9-2 2-2h2" }],
    ["path", { "d": "M17 3h2c1.1 0 2 .9 2 2v2" }],
    ["path", { "d": "M21 17v2c0 1.1-.9 2-2 2h-2" }],
    ["path", { "d": "M7 21H5c-1.1 0-2-.9-2-2v-2" }],
    [
      "rect",
      { "width": "7", "height": "5", "x": "7", "y": "7", "rx": "1" }
    ],
    [
      "rect",
      { "width": "7", "height": "5", "x": "10", "y": "12", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "group" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Group, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Group,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Group = hmr(Group, () => Group[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Group[HMR].source;
    set(Group[HMR].source, module.default[HMR].original);
  });
}
var group_default = Group;

// node_modules/lucide-svelte/dist/icons/guitar.svelte
Guitar[FILENAME] = "node_modules/lucide-svelte/dist/icons/guitar.svelte";
function Guitar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Guitar);
  const iconNode = [
    ["path", { "d": "m11.9 12.1 4.514-4.514" }],
    [
      "path",
      {
        "d": "M20.1 2.3a1 1 0 0 0-1.4 0l-1.114 1.114A2 2 0 0 0 17 4.828v1.344a2 2 0 0 1-.586 1.414A2 2 0 0 1 17.828 7h1.344a2 2 0 0 0 1.414-.586L21.7 5.3a1 1 0 0 0 0-1.4z"
      }
    ],
    ["path", { "d": "m6 16 2 2" }],
    [
      "path",
      {
        "d": "M8.23 9.85A3 3 0 0 1 11 8a5 5 0 0 1 5 5 3 3 0 0 1-1.85 2.77l-.92.38A2 2 0 0 0 12 18a4 4 0 0 1-4 4 6 6 0 0 1-6-6 4 4 0 0 1 4-4 2 2 0 0 0 1.85-1.23z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "guitar" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Guitar, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Guitar,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Guitar = hmr(Guitar, () => Guitar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Guitar[HMR].source;
    set(Guitar[HMR].source, module.default[HMR].original);
  });
}
var guitar_default = Guitar;

// node_modules/lucide-svelte/dist/icons/ham.svelte
Ham[FILENAME] = "node_modules/lucide-svelte/dist/icons/ham.svelte";
function Ham($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ham);
  const iconNode = [
    [
      "path",
      { "d": "M13.144 21.144A7.274 10.445 45 1 0 2.856 10.856" }
    ],
    [
      "path",
      {
        "d": "M13.144 21.144A7.274 4.365 45 0 0 2.856 10.856a7.274 4.365 45 0 0 10.288 10.288"
      }
    ],
    [
      "path",
      {
        "d": "M16.565 10.435 18.6 8.4a2.501 2.501 0 1 0 1.65-4.65 2.5 2.5 0 1 0-4.66 1.66l-2.024 2.025"
      }
    ],
    ["path", { "d": "m8.5 16.5-1-1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ham" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ham, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ham,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ham = hmr(Ham, () => Ham[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ham[HMR].source;
    set(Ham[HMR].source, module.default[HMR].original);
  });
}
var ham_default = Ham;

// node_modules/lucide-svelte/dist/icons/hamburger.svelte
Hamburger[FILENAME] = "node_modules/lucide-svelte/dist/icons/hamburger.svelte";
function Hamburger($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hamburger);
  const iconNode = [
    [
      "path",
      { "d": "M12 16H4a2 2 0 1 1 0-4h16a2 2 0 1 1 0 4h-4.25" }
    ],
    [
      "path",
      { "d": "M5 12a2 2 0 0 1-2-2 9 7 0 0 1 18 0 2 2 0 0 1-2 2" }
    ],
    [
      "path",
      {
        "d": "M5 16a2 2 0 0 0-2 2 3 3 0 0 0 3 3h12a3 3 0 0 0 3-3 2 2 0 0 0-2-2q0 0 0 0"
      }
    ],
    [
      "path",
      { "d": "m6.67 12 6.13 4.6a2 2 0 0 0 2.8-.4l3.15-4.2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hamburger" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hamburger, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hamburger,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hamburger = hmr(Hamburger, () => Hamburger[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hamburger[HMR].source;
    set(Hamburger[HMR].source, module.default[HMR].original);
  });
}
var hamburger_default = Hamburger;

// node_modules/lucide-svelte/dist/icons/hammer.svelte
Hammer[FILENAME] = "node_modules/lucide-svelte/dist/icons/hammer.svelte";
function Hammer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hammer);
  const iconNode = [
    ["path", { "d": "m15 12-9.373 9.373a1 1 0 0 1-3.001-3L12 9" }],
    ["path", { "d": "m18 15 4-4" }],
    [
      "path",
      {
        "d": "m21.5 11.5-1.914-1.914A2 2 0 0 1 19 8.172v-.344a2 2 0 0 0-.586-1.414l-1.657-1.657A6 6 0 0 0 12.516 3H9l1.243 1.243A6 6 0 0 1 12 8.485V10l2 2h1.172a2 2 0 0 1 1.414.586L18.5 14.5"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hammer" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hammer, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hammer,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hammer = hmr(Hammer, () => Hammer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hammer[HMR].source;
    set(Hammer[HMR].source, module.default[HMR].original);
  });
}
var hammer_default = Hammer;

// node_modules/lucide-svelte/dist/icons/hand-coins.svelte
Hand_coins[FILENAME] = "node_modules/lucide-svelte/dist/icons/hand-coins.svelte";
function Hand_coins($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hand_coins);
  const iconNode = [
    [
      "path",
      { "d": "M11 15h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 17" }
    ],
    [
      "path",
      {
        "d": "m7 21 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9"
      }
    ],
    ["path", { "d": "m2 16 6 6" }],
    ["circle", { "cx": "16", "cy": "9", "r": "2.9" }],
    ["circle", { "cx": "6", "cy": "5", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hand-coins" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hand_coins, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hand_coins,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hand_coins = hmr(Hand_coins, () => Hand_coins[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hand_coins[HMR].source;
    set(Hand_coins[HMR].source, module.default[HMR].original);
  });
}
var hand_coins_default = Hand_coins;

// node_modules/lucide-svelte/dist/icons/hand-fist.svelte
Hand_fist[FILENAME] = "node_modules/lucide-svelte/dist/icons/hand-fist.svelte";
function Hand_fist($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hand_fist);
  const iconNode = [
    [
      "path",
      {
        "d": "M12.035 17.012a3 3 0 0 0-3-3l-.311-.002a.72.72 0 0 1-.505-1.229l1.195-1.195A2 2 0 0 1 10.828 11H12a2 2 0 0 0 0-4H9.243a3 3 0 0 0-2.122.879l-2.707 2.707A4.83 4.83 0 0 0 3 14a8 8 0 0 0 8 8h2a8 8 0 0 0 8-8V7a2 2 0 1 0-4 0v2a2 2 0 1 0 4 0"
      }
    ],
    [
      "path",
      { "d": "M13.888 9.662A2 2 0 0 0 17 8V5A2 2 0 1 0 13 5" }
    ],
    ["path", { "d": "M9 5A2 2 0 1 0 5 5V10" }],
    ["path", { "d": "M9 7V4A2 2 0 1 1 13 4V7.268" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hand-fist" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hand_fist, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hand_fist,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hand_fist = hmr(Hand_fist, () => Hand_fist[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hand_fist[HMR].source;
    set(Hand_fist[HMR].source, module.default[HMR].original);
  });
}
var hand_fist_default = Hand_fist;

// node_modules/lucide-svelte/dist/icons/hand-grab.svelte
Hand_grab[FILENAME] = "node_modules/lucide-svelte/dist/icons/hand-grab.svelte";
function Hand_grab($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hand_grab);
  const iconNode = [
    [
      "path",
      { "d": "M18 11.5V9a2 2 0 0 0-2-2a2 2 0 0 0-2 2v1.4" }
    ],
    ["path", { "d": "M14 10V8a2 2 0 0 0-2-2a2 2 0 0 0-2 2v2" }],
    ["path", { "d": "M10 9.9V9a2 2 0 0 0-2-2a2 2 0 0 0-2 2v5" }],
    ["path", { "d": "M6 14a2 2 0 0 0-2-2a2 2 0 0 0-2 2" }],
    [
      "path",
      {
        "d": "M18 11a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-4a8 8 0 0 1-8-8 2 2 0 1 1 4 0"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hand-grab" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hand_grab, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hand_grab,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hand_grab = hmr(Hand_grab, () => Hand_grab[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hand_grab[HMR].source;
    set(Hand_grab[HMR].source, module.default[HMR].original);
  });
}
var hand_grab_default = Hand_grab;

// node_modules/lucide-svelte/dist/icons/hand-heart.svelte
Hand_heart[FILENAME] = "node_modules/lucide-svelte/dist/icons/hand-heart.svelte";
function Hand_heart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hand_heart);
  const iconNode = [
    [
      "path",
      { "d": "M11 14h2a2 2 0 0 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 16" }
    ],
    [
      "path",
      {
        "d": "m14.45 13.39 5.05-4.694C20.196 8 21 6.85 21 5.75a2.75 2.75 0 0 0-4.797-1.837.276.276 0 0 1-.406 0A2.75 2.75 0 0 0 11 5.75c0 1.2.802 2.248 1.5 2.946L16 11.95"
      }
    ],
    ["path", { "d": "m2 15 6 6" }],
    [
      "path",
      {
        "d": "m7 20 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a1 1 0 0 0-2.75-2.91"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hand-heart" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hand_heart, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hand_heart,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hand_heart = hmr(Hand_heart, () => Hand_heart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hand_heart[HMR].source;
    set(Hand_heart[HMR].source, module.default[HMR].original);
  });
}
var hand_heart_default = Hand_heart;

// node_modules/lucide-svelte/dist/icons/hand-helping.svelte
Hand_helping[FILENAME] = "node_modules/lucide-svelte/dist/icons/hand-helping.svelte";
function Hand_helping($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hand_helping);
  const iconNode = [
    [
      "path",
      { "d": "M11 12h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 14" }
    ],
    [
      "path",
      {
        "d": "m7 18 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9"
      }
    ],
    ["path", { "d": "m2 13 6 6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hand-helping" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hand_helping, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hand_helping,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hand_helping = hmr(Hand_helping, () => Hand_helping[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hand_helping[HMR].source;
    set(Hand_helping[HMR].source, module.default[HMR].original);
  });
}
var hand_helping_default = Hand_helping;

// node_modules/lucide-svelte/dist/icons/hand-metal.svelte
Hand_metal[FILENAME] = "node_modules/lucide-svelte/dist/icons/hand-metal.svelte";
function Hand_metal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hand_metal);
  const iconNode = [
    [
      "path",
      { "d": "M18 12.5V10a2 2 0 0 0-2-2a2 2 0 0 0-2 2v1.4" }
    ],
    ["path", { "d": "M14 11V9a2 2 0 1 0-4 0v2" }],
    ["path", { "d": "M10 10.5V5a2 2 0 1 0-4 0v9" }],
    [
      "path",
      {
        "d": "m7 15-1.76-1.76a2 2 0 0 0-2.83 2.82l3.6 3.6C7.5 21.14 9.2 22 12 22h2a8 8 0 0 0 8-8V7a2 2 0 1 0-4 0v5"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hand-metal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hand_metal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hand_metal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hand_metal = hmr(Hand_metal, () => Hand_metal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hand_metal[HMR].source;
    set(Hand_metal[HMR].source, module.default[HMR].original);
  });
}
var hand_metal_default = Hand_metal;

// node_modules/lucide-svelte/dist/icons/hand-platter.svelte
Hand_platter[FILENAME] = "node_modules/lucide-svelte/dist/icons/hand-platter.svelte";
function Hand_platter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hand_platter);
  const iconNode = [
    ["path", { "d": "M12 3V2" }],
    [
      "path",
      {
        "d": "m15.4 17.4 3.2-2.8a2 2 0 1 1 2.8 2.9l-3.6 3.3c-.7.8-1.7 1.2-2.8 1.2h-4c-1.1 0-2.1-.4-2.8-1.2l-1.302-1.464A1 1 0 0 0 6.151 19H5"
      }
    ],
    ["path", { "d": "M2 14h12a2 2 0 0 1 0 4h-2" }],
    ["path", { "d": "M4 10h16" }],
    ["path", { "d": "M5 10a7 7 0 0 1 14 0" }],
    ["path", { "d": "M5 14v6a1 1 0 0 1-1 1H2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hand-platter" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hand_platter, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hand_platter,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hand_platter = hmr(Hand_platter, () => Hand_platter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hand_platter[HMR].source;
    set(Hand_platter[HMR].source, module.default[HMR].original);
  });
}
var hand_platter_default = Hand_platter;

// node_modules/lucide-svelte/dist/icons/hand.svelte
Hand[FILENAME] = "node_modules/lucide-svelte/dist/icons/hand.svelte";
function Hand($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hand);
  const iconNode = [
    ["path", { "d": "M18 11V6a2 2 0 0 0-2-2a2 2 0 0 0-2 2" }],
    ["path", { "d": "M14 10V4a2 2 0 0 0-2-2a2 2 0 0 0-2 2v2" }],
    ["path", { "d": "M10 10.5V6a2 2 0 0 0-2-2a2 2 0 0 0-2 2v8" }],
    [
      "path",
      {
        "d": "M18 8a2 2 0 1 1 4 0v6a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hand" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hand, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hand,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hand = hmr(Hand, () => Hand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hand[HMR].source;
    set(Hand[HMR].source, module.default[HMR].original);
  });
}
var hand_default = Hand;

// node_modules/lucide-svelte/dist/icons/handbag.svelte
Handbag[FILENAME] = "node_modules/lucide-svelte/dist/icons/handbag.svelte";
function Handbag($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Handbag);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.048 18.566A2 2 0 0 0 4 21h16a2 2 0 0 0 1.952-2.434l-2-9A2 2 0 0 0 18 8H6a2 2 0 0 0-1.952 1.566z"
      }
    ],
    ["path", { "d": "M8 11V6a4 4 0 0 1 8 0v5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "handbag" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Handbag, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Handbag,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Handbag = hmr(Handbag, () => Handbag[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Handbag[HMR].source;
    set(Handbag[HMR].source, module.default[HMR].original);
  });
}
var handbag_default = Handbag;

// node_modules/lucide-svelte/dist/icons/handshake.svelte
Handshake[FILENAME] = "node_modules/lucide-svelte/dist/icons/handshake.svelte";
function Handshake($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Handshake);
  const iconNode = [
    ["path", { "d": "m11 17 2 2a1 1 0 1 0 3-3" }],
    [
      "path",
      {
        "d": "m14 14 2.5 2.5a1 1 0 1 0 3-3l-3.88-3.88a3 3 0 0 0-4.24 0l-.88.88a1 1 0 1 1-3-3l2.81-2.81a5.79 5.79 0 0 1 7.06-.87l.47.28a2 2 0 0 0 1.42.25L21 4"
      }
    ],
    ["path", { "d": "m21 3 1 11h-2" }],
    ["path", { "d": "M3 3 2 14l6.5 6.5a1 1 0 1 0 3-3" }],
    ["path", { "d": "M3 4h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "handshake" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Handshake, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Handshake,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Handshake = hmr(Handshake, () => Handshake[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Handshake[HMR].source;
    set(Handshake[HMR].source, module.default[HMR].original);
  });
}
var handshake_default = Handshake;

// node_modules/lucide-svelte/dist/icons/hard-drive-download.svelte
Hard_drive_download[FILENAME] = "node_modules/lucide-svelte/dist/icons/hard-drive-download.svelte";
function Hard_drive_download($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hard_drive_download);
  const iconNode = [
    ["path", { "d": "M12 2v8" }],
    ["path", { "d": "m16 6-4 4-4-4" }],
    [
      "rect",
      { "width": "20", "height": "8", "x": "2", "y": "14", "rx": "2" }
    ],
    ["path", { "d": "M6 18h.01" }],
    ["path", { "d": "M10 18h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hard-drive-download" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hard_drive_download, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hard_drive_download,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hard_drive_download = hmr(Hard_drive_download, () => Hard_drive_download[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hard_drive_download[HMR].source;
    set(Hard_drive_download[HMR].source, module.default[HMR].original);
  });
}
var hard_drive_download_default = Hard_drive_download;

// node_modules/lucide-svelte/dist/icons/hard-drive-upload.svelte
Hard_drive_upload[FILENAME] = "node_modules/lucide-svelte/dist/icons/hard-drive-upload.svelte";
function Hard_drive_upload($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hard_drive_upload);
  const iconNode = [
    ["path", { "d": "m16 6-4-4-4 4" }],
    ["path", { "d": "M12 2v8" }],
    [
      "rect",
      { "width": "20", "height": "8", "x": "2", "y": "14", "rx": "2" }
    ],
    ["path", { "d": "M6 18h.01" }],
    ["path", { "d": "M10 18h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hard-drive-upload" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hard_drive_upload, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hard_drive_upload,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hard_drive_upload = hmr(Hard_drive_upload, () => Hard_drive_upload[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hard_drive_upload[HMR].source;
    set(Hard_drive_upload[HMR].source, module.default[HMR].original);
  });
}
var hard_drive_upload_default = Hard_drive_upload;

// node_modules/lucide-svelte/dist/icons/hard-drive.svelte
Hard_drive[FILENAME] = "node_modules/lucide-svelte/dist/icons/hard-drive.svelte";
function Hard_drive($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hard_drive);
  const iconNode = [
    ["line", { "x1": "22", "x2": "2", "y1": "12", "y2": "12" }],
    [
      "path",
      {
        "d": "M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"
      }
    ],
    ["line", { "x1": "6", "x2": "6.01", "y1": "16", "y2": "16" }],
    [
      "line",
      { "x1": "10", "x2": "10.01", "y1": "16", "y2": "16" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hard-drive" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hard_drive, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hard_drive,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hard_drive = hmr(Hard_drive, () => Hard_drive[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hard_drive[HMR].source;
    set(Hard_drive[HMR].source, module.default[HMR].original);
  });
}
var hard_drive_default = Hard_drive;

// node_modules/lucide-svelte/dist/icons/hard-hat.svelte
Hard_hat[FILENAME] = "node_modules/lucide-svelte/dist/icons/hard-hat.svelte";
function Hard_hat($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hard_hat);
  const iconNode = [
    ["path", { "d": "M10 10V5a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v5" }],
    ["path", { "d": "M14 6a6 6 0 0 1 6 6v3" }],
    ["path", { "d": "M4 15v-3a6 6 0 0 1 6-6" }],
    [
      "rect",
      { "x": "2", "y": "15", "width": "20", "height": "4", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hard-hat" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hard_hat, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hard_hat,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hard_hat = hmr(Hard_hat, () => Hard_hat[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hard_hat[HMR].source;
    set(Hard_hat[HMR].source, module.default[HMR].original);
  });
}
var hard_hat_default = Hard_hat;

// node_modules/lucide-svelte/dist/icons/hash.svelte
Hash[FILENAME] = "node_modules/lucide-svelte/dist/icons/hash.svelte";
function Hash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hash);
  const iconNode = [
    ["line", { "x1": "4", "x2": "20", "y1": "9", "y2": "9" }],
    ["line", { "x1": "4", "x2": "20", "y1": "15", "y2": "15" }],
    ["line", { "x1": "10", "x2": "8", "y1": "3", "y2": "21" }],
    ["line", { "x1": "16", "x2": "14", "y1": "3", "y2": "21" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hash" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hash, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hash,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hash = hmr(Hash, () => Hash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hash[HMR].source;
    set(Hash[HMR].source, module.default[HMR].original);
  });
}
var hash_default = Hash;

// node_modules/lucide-svelte/dist/icons/hat-glasses.svelte
Hat_glasses[FILENAME] = "node_modules/lucide-svelte/dist/icons/hat-glasses.svelte";
function Hat_glasses($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hat_glasses);
  const iconNode = [
    ["path", { "d": "M14 18a2 2 0 0 0-4 0" }],
    [
      "path",
      {
        "d": "m19 11-2.11-6.657a2 2 0 0 0-2.752-1.148l-1.276.61A2 2 0 0 1 12 4H8.5a2 2 0 0 0-1.925 1.456L5 11"
      }
    ],
    ["path", { "d": "M2 11h20" }],
    ["circle", { "cx": "17", "cy": "18", "r": "3" }],
    ["circle", { "cx": "7", "cy": "18", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hat-glasses" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hat_glasses, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hat_glasses,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hat_glasses = hmr(Hat_glasses, () => Hat_glasses[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hat_glasses[HMR].source;
    set(Hat_glasses[HMR].source, module.default[HMR].original);
  });
}
var hat_glasses_default = Hat_glasses;

// node_modules/lucide-svelte/dist/icons/haze.svelte
Haze[FILENAME] = "node_modules/lucide-svelte/dist/icons/haze.svelte";
function Haze($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Haze);
  const iconNode = [
    ["path", { "d": "m5.2 6.2 1.4 1.4" }],
    ["path", { "d": "M2 13h2" }],
    ["path", { "d": "M20 13h2" }],
    ["path", { "d": "m17.4 7.6 1.4-1.4" }],
    ["path", { "d": "M22 17H2" }],
    ["path", { "d": "M22 21H2" }],
    ["path", { "d": "M16 13a4 4 0 0 0-8 0" }],
    ["path", { "d": "M12 5V2.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "haze" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Haze, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Haze,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Haze = hmr(Haze, () => Haze[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Haze[HMR].source;
    set(Haze[HMR].source, module.default[HMR].original);
  });
}
var haze_default = Haze;

// node_modules/lucide-svelte/dist/icons/hdmi-port.svelte
Hdmi_port[FILENAME] = "node_modules/lucide-svelte/dist/icons/hdmi-port.svelte";
function Hdmi_port($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hdmi_port);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 9a1 1 0 0 0-1-1H3a1 1 0 0 0-1 1v4a1 1 0 0 0 1 1h1l2 2h12l2-2h1a1 1 0 0 0 1-1Z"
      }
    ],
    ["path", { "d": "M7.5 12h9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hdmi-port" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hdmi_port, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hdmi_port,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hdmi_port = hmr(Hdmi_port, () => Hdmi_port[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hdmi_port[HMR].source;
    set(Hdmi_port[HMR].source, module.default[HMR].original);
  });
}
var hdmi_port_default = Hdmi_port;

// node_modules/lucide-svelte/dist/icons/heading-1.svelte
Heading_1[FILENAME] = "node_modules/lucide-svelte/dist/icons/heading-1.svelte";
function Heading_1($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Heading_1);
  const iconNode = [
    ["path", { "d": "M4 12h8" }],
    ["path", { "d": "M4 18V6" }],
    ["path", { "d": "M12 18V6" }],
    ["path", { "d": "m17 12 3-2v8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "heading-1" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Heading_1, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Heading_1,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heading_1 = hmr(Heading_1, () => Heading_1[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heading_1[HMR].source;
    set(Heading_1[HMR].source, module.default[HMR].original);
  });
}
var heading_1_default = Heading_1;

// node_modules/lucide-svelte/dist/icons/heading-2.svelte
Heading_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/heading-2.svelte";
function Heading_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Heading_2);
  const iconNode = [
    ["path", { "d": "M4 12h8" }],
    ["path", { "d": "M4 18V6" }],
    ["path", { "d": "M12 18V6" }],
    ["path", { "d": "M21 18h-4c0-4 4-3 4-6 0-1.5-2-2.5-4-1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "heading-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Heading_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Heading_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heading_2 = hmr(Heading_2, () => Heading_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heading_2[HMR].source;
    set(Heading_2[HMR].source, module.default[HMR].original);
  });
}
var heading_2_default = Heading_2;

// node_modules/lucide-svelte/dist/icons/heading-3.svelte
Heading_3[FILENAME] = "node_modules/lucide-svelte/dist/icons/heading-3.svelte";
function Heading_3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Heading_3);
  const iconNode = [
    ["path", { "d": "M4 12h8" }],
    ["path", { "d": "M4 18V6" }],
    ["path", { "d": "M12 18V6" }],
    [
      "path",
      { "d": "M17.5 10.5c1.7-1 3.5 0 3.5 1.5a2 2 0 0 1-2 2" }
    ],
    ["path", { "d": "M17 17.5c2 1.5 4 .3 4-1.5a2 2 0 0 0-2-2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "heading-3" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Heading_3, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Heading_3,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heading_3 = hmr(Heading_3, () => Heading_3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heading_3[HMR].source;
    set(Heading_3[HMR].source, module.default[HMR].original);
  });
}
var heading_3_default = Heading_3;

// node_modules/lucide-svelte/dist/icons/heading-4.svelte
Heading_4[FILENAME] = "node_modules/lucide-svelte/dist/icons/heading-4.svelte";
function Heading_4($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Heading_4);
  const iconNode = [
    ["path", { "d": "M12 18V6" }],
    ["path", { "d": "M17 10v3a1 1 0 0 0 1 1h3" }],
    ["path", { "d": "M21 10v8" }],
    ["path", { "d": "M4 12h8" }],
    ["path", { "d": "M4 18V6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "heading-4" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Heading_4, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Heading_4,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heading_4 = hmr(Heading_4, () => Heading_4[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heading_4[HMR].source;
    set(Heading_4[HMR].source, module.default[HMR].original);
  });
}
var heading_4_default = Heading_4;

// node_modules/lucide-svelte/dist/icons/heading-5.svelte
Heading_5[FILENAME] = "node_modules/lucide-svelte/dist/icons/heading-5.svelte";
function Heading_5($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Heading_5);
  const iconNode = [
    ["path", { "d": "M4 12h8" }],
    ["path", { "d": "M4 18V6" }],
    ["path", { "d": "M12 18V6" }],
    ["path", { "d": "M17 13v-3h4" }],
    [
      "path",
      {
        "d": "M17 17.7c.4.2.8.3 1.3.3 1.5 0 2.7-1.1 2.7-2.5S19.8 13 18.3 13H17"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "heading-5" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Heading_5, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Heading_5,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heading_5 = hmr(Heading_5, () => Heading_5[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heading_5[HMR].source;
    set(Heading_5[HMR].source, module.default[HMR].original);
  });
}
var heading_5_default = Heading_5;

// node_modules/lucide-svelte/dist/icons/heading-6.svelte
Heading_6[FILENAME] = "node_modules/lucide-svelte/dist/icons/heading-6.svelte";
function Heading_6($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Heading_6);
  const iconNode = [
    ["path", { "d": "M4 12h8" }],
    ["path", { "d": "M4 18V6" }],
    ["path", { "d": "M12 18V6" }],
    ["circle", { "cx": "19", "cy": "16", "r": "2" }],
    ["path", { "d": "M20 10c-2 2-3 3.5-3 6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "heading-6" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Heading_6, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Heading_6,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heading_6 = hmr(Heading_6, () => Heading_6[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heading_6[HMR].source;
    set(Heading_6[HMR].source, module.default[HMR].original);
  });
}
var heading_6_default = Heading_6;

// node_modules/lucide-svelte/dist/icons/heading.svelte
Heading[FILENAME] = "node_modules/lucide-svelte/dist/icons/heading.svelte";
function Heading($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Heading);
  const iconNode = [
    ["path", { "d": "M6 12h12" }],
    ["path", { "d": "M6 20V4" }],
    ["path", { "d": "M18 20V4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "heading" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Heading, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Heading,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heading = hmr(Heading, () => Heading[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heading[HMR].source;
    set(Heading[HMR].source, module.default[HMR].original);
  });
}
var heading_default = Heading;

// node_modules/lucide-svelte/dist/icons/headphone-off.svelte
Headphone_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/headphone-off.svelte";
function Headphone_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Headphone_off);
  const iconNode = [
    ["path", { "d": "M21 14h-1.343" }],
    ["path", { "d": "M9.128 3.47A9 9 0 0 1 21 12v3.343" }],
    ["path", { "d": "m2 2 20 20" }],
    [
      "path",
      { "d": "M20.414 20.414A2 2 0 0 1 19 21h-1a2 2 0 0 1-2-2v-3" }
    ],
    [
      "path",
      {
        "d": "M3 14h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a9 9 0 0 1 2.636-6.364"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "headphone-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Headphone_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Headphone_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Headphone_off = hmr(Headphone_off, () => Headphone_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Headphone_off[HMR].source;
    set(Headphone_off[HMR].source, module.default[HMR].original);
  });
}
var headphone_off_default = Headphone_off;

// node_modules/lucide-svelte/dist/icons/headphones.svelte
Headphones[FILENAME] = "node_modules/lucide-svelte/dist/icons/headphones.svelte";
function Headphones($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Headphones);
  const iconNode = [
    [
      "path",
      {
        "d": "M3 14h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-7a9 9 0 0 1 18 0v7a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "headphones" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Headphones, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Headphones,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Headphones = hmr(Headphones, () => Headphones[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Headphones[HMR].source;
    set(Headphones[HMR].source, module.default[HMR].original);
  });
}
var headphones_default = Headphones;

// node_modules/lucide-svelte/dist/icons/headset.svelte
Headset[FILENAME] = "node_modules/lucide-svelte/dist/icons/headset.svelte";
function Headset($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Headset);
  const iconNode = [
    [
      "path",
      {
        "d": "M3 11h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-5Zm0 0a9 9 0 1 1 18 0m0 0v5a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3Z"
      }
    ],
    ["path", { "d": "M21 16v2a4 4 0 0 1-4 4h-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "headset" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Headset, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Headset,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Headset = hmr(Headset, () => Headset[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Headset[HMR].source;
    set(Headset[HMR].source, module.default[HMR].original);
  });
}
var headset_default = Headset;

// node_modules/lucide-svelte/dist/icons/heart-crack.svelte
Heart_crack[FILENAME] = "node_modules/lucide-svelte/dist/icons/heart-crack.svelte";
function Heart_crack($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Heart_crack);
  const iconNode = [
    [
      "path",
      {
        "d": "M12.409 5.824c-.702.792-1.15 1.496-1.415 2.166l2.153 2.156a.5.5 0 0 1 0 .707l-2.293 2.293a.5.5 0 0 0 0 .707L12 15"
      }
    ],
    [
      "path",
      {
        "d": "M13.508 20.313a2 2 0 0 1-3 .019L5 15c-1.5-1.5-3-3.2-3-5.5a5.5 5.5 0 0 1 9.591-3.677.6.6 0 0 0 .818.001A5.5 5.5 0 0 1 22 9.5c0 2.29-1.5 4-3 5.5z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "heart-crack" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Heart_crack, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Heart_crack,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heart_crack = hmr(Heart_crack, () => Heart_crack[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heart_crack[HMR].source;
    set(Heart_crack[HMR].source, module.default[HMR].original);
  });
}
var heart_crack_default = Heart_crack;

// node_modules/lucide-svelte/dist/icons/heart-handshake.svelte
Heart_handshake[FILENAME] = "node_modules/lucide-svelte/dist/icons/heart-handshake.svelte";
function Heart_handshake($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Heart_handshake);
  const iconNode = [
    [
      "path",
      {
        "d": "M19.414 14.414C21 12.828 22 11.5 22 9.5a5.5 5.5 0 0 0-9.591-3.676.6.6 0 0 1-.818.001A5.5 5.5 0 0 0 2 9.5c0 2.3 1.5 4 3 5.5l5.535 5.362a2 2 0 0 0 2.879.052 2.12 2.12 0 0 0-.004-3 2.124 2.124 0 1 0 3-3 2.124 2.124 0 0 0 3.004 0 2 2 0 0 0 0-2.828l-1.881-1.882a2.41 2.41 0 0 0-3.409 0l-1.71 1.71a2 2 0 0 1-2.828 0 2 2 0 0 1 0-2.828l2.823-2.762"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "heart-handshake" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Heart_handshake, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Heart_handshake,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heart_handshake = hmr(Heart_handshake, () => Heart_handshake[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heart_handshake[HMR].source;
    set(Heart_handshake[HMR].source, module.default[HMR].original);
  });
}
var heart_handshake_default = Heart_handshake;

// node_modules/lucide-svelte/dist/icons/heart-minus.svelte
Heart_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/heart-minus.svelte";
function Heart_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Heart_minus);
  const iconNode = [
    [
      "path",
      {
        "d": "m14.876 18.99-1.368 1.323a2 2 0 0 1-3 .019L5 15c-1.5-1.5-3-3.2-3-5.5a5.5 5.5 0 0 1 9.591-3.676.56.56 0 0 0 .818 0A5.49 5.49 0 0 1 22 9.5a5.2 5.2 0 0 1-.244 1.572"
      }
    ],
    ["path", { "d": "M15 15h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "heart-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Heart_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Heart_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heart_minus = hmr(Heart_minus, () => Heart_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heart_minus[HMR].source;
    set(Heart_minus[HMR].source, module.default[HMR].original);
  });
}
var heart_minus_default = Heart_minus;

// node_modules/lucide-svelte/dist/icons/heart-off.svelte
Heart_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/heart-off.svelte";
function Heart_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Heart_off);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.5 4.893a5.5 5.5 0 0 1 1.091.931.56.56 0 0 0 .818 0A5.49 5.49 0 0 1 22 9.5c0 1.872-1.002 3.356-2.187 4.655"
      }
    ],
    [
      "path",
      {
        "d": "m16.967 16.967-3.459 3.346a2 2 0 0 1-3 .019L5 15c-1.5-1.5-3-3.2-3-5.5a5.5 5.5 0 0 1 2.747-4.761"
      }
    ],
    ["path", { "d": "m2 2 20 20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "heart-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Heart_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Heart_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heart_off = hmr(Heart_off, () => Heart_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heart_off[HMR].source;
    set(Heart_off[HMR].source, module.default[HMR].original);
  });
}
var heart_off_default = Heart_off;

// node_modules/lucide-svelte/dist/icons/heart-plus.svelte
Heart_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/heart-plus.svelte";
function Heart_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Heart_plus);
  const iconNode = [
    [
      "path",
      {
        "d": "m14.479 19.374-.971.939a2 2 0 0 1-3 .019L5 15c-1.5-1.5-3-3.2-3-5.5a5.5 5.5 0 0 1 9.591-3.676.56.56 0 0 0 .818 0A5.49 5.49 0 0 1 22 9.5a5.2 5.2 0 0 1-.219 1.49"
      }
    ],
    ["path", { "d": "M15 15h6" }],
    ["path", { "d": "M18 12v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "heart-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Heart_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Heart_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heart_plus = hmr(Heart_plus, () => Heart_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heart_plus[HMR].source;
    set(Heart_plus[HMR].source, module.default[HMR].original);
  });
}
var heart_plus_default = Heart_plus;

// node_modules/lucide-svelte/dist/icons/heart-pulse.svelte
Heart_pulse[FILENAME] = "node_modules/lucide-svelte/dist/icons/heart-pulse.svelte";
function Heart_pulse($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Heart_pulse);
  const iconNode = [
    [
      "path",
      {
        "d": "M2 9.5a5.5 5.5 0 0 1 9.591-3.676.56.56 0 0 0 .818 0A5.49 5.49 0 0 1 22 9.5c0 2.29-1.5 4-3 5.5l-5.492 5.313a2 2 0 0 1-3 .019L5 15c-1.5-1.5-3-3.2-3-5.5"
      }
    ],
    ["path", { "d": "M3.22 13H9.5l.5-1 2 4.5 2-7 1.5 3.5h5.27" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "heart-pulse" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Heart_pulse, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Heart_pulse,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heart_pulse = hmr(Heart_pulse, () => Heart_pulse[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heart_pulse[HMR].source;
    set(Heart_pulse[HMR].source, module.default[HMR].original);
  });
}
var heart_pulse_default = Heart_pulse;

// node_modules/lucide-svelte/dist/icons/heart.svelte
Heart[FILENAME] = "node_modules/lucide-svelte/dist/icons/heart.svelte";
function Heart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Heart);
  const iconNode = [
    [
      "path",
      {
        "d": "M2 9.5a5.5 5.5 0 0 1 9.591-3.676.56.56 0 0 0 .818 0A5.49 5.49 0 0 1 22 9.5c0 2.29-1.5 4-3 5.5l-5.492 5.313a2 2 0 0 1-3 .019L5 15c-1.5-1.5-3-3.2-3-5.5"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "heart" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Heart, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Heart,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heart = hmr(Heart, () => Heart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heart[HMR].source;
    set(Heart[HMR].source, module.default[HMR].original);
  });
}
var heart_default = Heart;

// node_modules/lucide-svelte/dist/icons/heater.svelte
Heater[FILENAME] = "node_modules/lucide-svelte/dist/icons/heater.svelte";
function Heater($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Heater);
  const iconNode = [
    ["path", { "d": "M11 8c2-3-2-3 0-6" }],
    ["path", { "d": "M15.5 8c2-3-2-3 0-6" }],
    ["path", { "d": "M6 10h.01" }],
    ["path", { "d": "M6 14h.01" }],
    ["path", { "d": "M10 16v-4" }],
    ["path", { "d": "M14 16v-4" }],
    ["path", { "d": "M18 16v-4" }],
    [
      "path",
      {
        "d": "M20 6a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h3"
      }
    ],
    ["path", { "d": "M5 20v2" }],
    ["path", { "d": "M19 20v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "heater" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Heater, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Heater,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Heater = hmr(Heater, () => Heater[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heater[HMR].source;
    set(Heater[HMR].source, module.default[HMR].original);
  });
}
var heater_default = Heater;

// node_modules/lucide-svelte/dist/icons/hexagon.svelte
Hexagon[FILENAME] = "node_modules/lucide-svelte/dist/icons/hexagon.svelte";
function Hexagon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hexagon);
  const iconNode = [
    [
      "path",
      {
        "d": "M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hexagon" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hexagon, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hexagon,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hexagon = hmr(Hexagon, () => Hexagon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hexagon[HMR].source;
    set(Hexagon[HMR].source, module.default[HMR].original);
  });
}
var hexagon_default = Hexagon;

// node_modules/lucide-svelte/dist/icons/highlighter.svelte
Highlighter[FILENAME] = "node_modules/lucide-svelte/dist/icons/highlighter.svelte";
function Highlighter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Highlighter);
  const iconNode = [
    ["path", { "d": "m9 11-6 6v3h9l3-3" }],
    [
      "path",
      {
        "d": "m22 12-4.6 4.6a2 2 0 0 1-2.8 0l-5.2-5.2a2 2 0 0 1 0-2.8L14 4"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "highlighter" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Highlighter, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Highlighter,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Highlighter = hmr(Highlighter, () => Highlighter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Highlighter[HMR].source;
    set(Highlighter[HMR].source, module.default[HMR].original);
  });
}
var highlighter_default = Highlighter;

// node_modules/lucide-svelte/dist/icons/history.svelte
History[FILENAME] = "node_modules/lucide-svelte/dist/icons/history.svelte";
function History($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, History);
  const iconNode = [
    [
      "path",
      { "d": "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" }
    ],
    ["path", { "d": "M3 3v5h5" }],
    ["path", { "d": "M12 7v5l4 2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "history" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(History, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    History,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  History = hmr(History, () => History[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = History[HMR].source;
    set(History[HMR].source, module.default[HMR].original);
  });
}
var history_default = History;

// node_modules/lucide-svelte/dist/icons/hop-off.svelte
Hop_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/hop-off.svelte";
function Hop_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hop_off);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.82 16.12c1.69.6 3.91.79 5.18.85.28.01.53-.09.7-.27"
      }
    ],
    [
      "path",
      {
        "d": "M11.14 20.57c.52.24 2.44 1.12 4.08 1.37.46.06.86-.25.9-.71.12-1.52-.3-3.43-.5-4.28"
      }
    ],
    [
      "path",
      {
        "d": "M16.13 21.05c1.65.63 3.68.84 4.87.91a.9.9 0 0 0 .7-.26"
      }
    ],
    [
      "path",
      {
        "d": "M17.99 5.52a20.83 20.83 0 0 1 3.15 4.5.8.8 0 0 1-.68 1.13c-1.17.1-2.5.02-3.9-.25"
      }
    ],
    [
      "path",
      {
        "d": "M20.57 11.14c.24.52 1.12 2.44 1.37 4.08.04.3-.08.59-.31.75"
      }
    ],
    [
      "path",
      {
        "d": "M4.93 4.93a10 10 0 0 0-.67 13.4c.35.43.96.4 1.17-.12.69-1.71 1.07-5.07 1.07-6.71 1.34.45 3.1.9 4.88.62a.85.85 0 0 0 .48-.24"
      }
    ],
    [
      "path",
      {
        "d": "M5.52 17.99c1.05.95 2.91 2.42 4.5 3.15a.8.8 0 0 0 1.13-.68c.2-2.34-.33-5.3-1.57-8.28"
      }
    ],
    [
      "path",
      {
        "d": "M8.35 2.68a10 10 0 0 1 9.98 1.58c.43.35.4.96-.12 1.17-1.5.6-4.3.98-6.07 1.05"
      }
    ],
    ["path", { "d": "m2 2 20 20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hop-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hop_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hop_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hop_off = hmr(Hop_off, () => Hop_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hop_off[HMR].source;
    set(Hop_off[HMR].source, module.default[HMR].original);
  });
}
var hop_off_default = Hop_off;

// node_modules/lucide-svelte/dist/icons/hop.svelte
Hop[FILENAME] = "node_modules/lucide-svelte/dist/icons/hop.svelte";
function Hop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hop);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.82 16.12c1.69.6 3.91.79 5.18.85.55.03 1-.42.97-.97-.06-1.27-.26-3.5-.85-5.18"
      }
    ],
    [
      "path",
      {
        "d": "M11.5 6.5c1.64 0 5-.38 6.71-1.07.52-.2.55-.82.12-1.17A10 10 0 0 0 4.26 18.33c.35.43.96.4 1.17-.12.69-1.71 1.07-5.07 1.07-6.71 1.34.45 3.1.9 4.88.62a.88.88 0 0 0 .73-.74c.3-2.14-.15-3.5-.61-4.88"
      }
    ],
    [
      "path",
      {
        "d": "M15.62 16.95c.2.85.62 2.76.5 4.28a.77.77 0 0 1-.9.7 16.64 16.64 0 0 1-4.08-1.36"
      }
    ],
    [
      "path",
      {
        "d": "M16.13 21.05c1.65.63 3.68.84 4.87.91a.9.9 0 0 0 .96-.96 17.68 17.68 0 0 0-.9-4.87"
      }
    ],
    [
      "path",
      {
        "d": "M16.94 15.62c.86.2 2.77.62 4.29.5a.77.77 0 0 0 .7-.9 16.64 16.64 0 0 0-1.36-4.08"
      }
    ],
    [
      "path",
      {
        "d": "M17.99 5.52a20.82 20.82 0 0 1 3.15 4.5.8.8 0 0 1-.68 1.13c-2.33.2-5.3-.32-8.27-1.57"
      }
    ],
    ["path", { "d": "M4.93 4.93 3 3a.7.7 0 0 1 0-1" }],
    [
      "path",
      {
        "d": "M9.58 12.18c1.24 2.98 1.77 5.95 1.57 8.28a.8.8 0 0 1-1.13.68 20.82 20.82 0 0 1-4.5-3.15"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hop" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hop, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hop,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hop = hmr(Hop, () => Hop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hop[HMR].source;
    set(Hop[HMR].source, module.default[HMR].original);
  });
}
var hop_default = Hop;

// node_modules/lucide-svelte/dist/icons/hospital.svelte
Hospital[FILENAME] = "node_modules/lucide-svelte/dist/icons/hospital.svelte";
function Hospital($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hospital);
  const iconNode = [
    ["path", { "d": "M12 7v4" }],
    ["path", { "d": "M14 21v-3a2 2 0 0 0-4 0v3" }],
    ["path", { "d": "M14 9h-4" }],
    [
      "path",
      {
        "d": "M18 11h2a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-9a2 2 0 0 1 2-2h2"
      }
    ],
    ["path", { "d": "M18 21V5a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hospital" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hospital, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hospital,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hospital = hmr(Hospital, () => Hospital[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hospital[HMR].source;
    set(Hospital[HMR].source, module.default[HMR].original);
  });
}
var hospital_default = Hospital;

// node_modules/lucide-svelte/dist/icons/hotel.svelte
Hotel[FILENAME] = "node_modules/lucide-svelte/dist/icons/hotel.svelte";
function Hotel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hotel);
  const iconNode = [
    ["path", { "d": "M10 22v-6.57" }],
    ["path", { "d": "M12 11h.01" }],
    ["path", { "d": "M12 7h.01" }],
    ["path", { "d": "M14 15.43V22" }],
    ["path", { "d": "M15 16a5 5 0 0 0-6 0" }],
    ["path", { "d": "M16 11h.01" }],
    ["path", { "d": "M16 7h.01" }],
    ["path", { "d": "M8 11h.01" }],
    ["path", { "d": "M8 7h.01" }],
    [
      "rect",
      { "x": "4", "y": "2", "width": "16", "height": "20", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hotel" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hotel, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hotel,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hotel = hmr(Hotel, () => Hotel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hotel[HMR].source;
    set(Hotel[HMR].source, module.default[HMR].original);
  });
}
var hotel_default = Hotel;

// node_modules/lucide-svelte/dist/icons/hourglass.svelte
Hourglass[FILENAME] = "node_modules/lucide-svelte/dist/icons/hourglass.svelte";
function Hourglass($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Hourglass);
  const iconNode = [
    ["path", { "d": "M5 22h14" }],
    ["path", { "d": "M5 2h14" }],
    [
      "path",
      {
        "d": "M17 22v-4.172a2 2 0 0 0-.586-1.414L12 12l-4.414 4.414A2 2 0 0 0 7 17.828V22"
      }
    ],
    [
      "path",
      {
        "d": "M7 2v4.172a2 2 0 0 0 .586 1.414L12 12l4.414-4.414A2 2 0 0 0 17 6.172V2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "hourglass" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Hourglass, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Hourglass,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Hourglass = hmr(Hourglass, () => Hourglass[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hourglass[HMR].source;
    set(Hourglass[HMR].source, module.default[HMR].original);
  });
}
var hourglass_default = Hourglass;

// node_modules/lucide-svelte/dist/icons/house-plug.svelte
House_plug[FILENAME] = "node_modules/lucide-svelte/dist/icons/house-plug.svelte";
function House_plug($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, House_plug);
  const iconNode = [
    ["path", { "d": "M10 12V8.964" }],
    ["path", { "d": "M14 12V8.964" }],
    [
      "path",
      {
        "d": "M15 12a1 1 0 0 1 1 1v2a2 2 0 0 1-2 2h-4a2 2 0 0 1-2-2v-2a1 1 0 0 1 1-1z"
      }
    ],
    [
      "path",
      {
        "d": "M8.5 21H5a2 2 0 0 1-2-2v-9a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2h-5a2 2 0 0 1-2-2v-2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "house-plug" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(House_plug, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    House_plug,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  House_plug = hmr(House_plug, () => House_plug[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = House_plug[HMR].source;
    set(House_plug[HMR].source, module.default[HMR].original);
  });
}
var house_plug_default = House_plug;

// node_modules/lucide-svelte/dist/icons/house-plus.svelte
House_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/house-plus.svelte";
function House_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, House_plus);
  const iconNode = [
    [
      "path",
      {
        "d": "M12.662 21H5a2 2 0 0 1-2-2v-9a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v2.475"
      }
    ],
    [
      "path",
      { "d": "M14.959 12.717A1 1 0 0 0 14 12h-4a1 1 0 0 0-1 1v8" }
    ],
    ["path", { "d": "M15 18h6" }],
    ["path", { "d": "M18 15v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "house-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(House_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    House_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  House_plus = hmr(House_plus, () => House_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = House_plus[HMR].source;
    set(House_plus[HMR].source, module.default[HMR].original);
  });
}
var house_plus_default = House_plus;

// node_modules/lucide-svelte/dist/icons/house.svelte
House[FILENAME] = "node_modules/lucide-svelte/dist/icons/house.svelte";
function House($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, House);
  const iconNode = [
    [
      "path",
      { "d": "M15 21v-8a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1v8" }
    ],
    [
      "path",
      {
        "d": "M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "house" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(House, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    House,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  House = hmr(House, () => House[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = House[HMR].source;
    set(House[HMR].source, module.default[HMR].original);
  });
}
var house_default = House;

// node_modules/lucide-svelte/dist/icons/house-wifi.svelte
House_wifi[FILENAME] = "node_modules/lucide-svelte/dist/icons/house-wifi.svelte";
function House_wifi($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, House_wifi);
  const iconNode = [
    ["path", { "d": "M9.5 13.866a4 4 0 0 1 5 .01" }],
    ["path", { "d": "M12 17h.01" }],
    [
      "path",
      {
        "d": "M3 10a2 2 0 0 1 .709-1.528l7-5.999a2 2 0 0 1 2.582 0l7 5.999A2 2 0 0 1 21 10v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"
      }
    ],
    ["path", { "d": "M7 10.754a8 8 0 0 1 10 0" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "house-wifi" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(House_wifi, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    House_wifi,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  House_wifi = hmr(House_wifi, () => House_wifi[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = House_wifi[HMR].source;
    set(House_wifi[HMR].source, module.default[HMR].original);
  });
}
var house_wifi_default = House_wifi;

// node_modules/lucide-svelte/dist/icons/ice-cream-bowl.svelte
Ice_cream_bowl[FILENAME] = "node_modules/lucide-svelte/dist/icons/ice-cream-bowl.svelte";
function Ice_cream_bowl($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ice_cream_bowl);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 17c5 0 8-2.69 8-6H4c0 3.31 3 6 8 6m-4 4h8m-4-3v3M5.14 11a3.5 3.5 0 1 1 6.71 0"
      }
    ],
    ["path", { "d": "M12.14 11a3.5 3.5 0 1 1 6.71 0" }],
    ["path", { "d": "M15.5 6.5a3.5 3.5 0 1 0-7 0" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ice-cream-bowl" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ice_cream_bowl, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ice_cream_bowl,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ice_cream_bowl = hmr(Ice_cream_bowl, () => Ice_cream_bowl[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ice_cream_bowl[HMR].source;
    set(Ice_cream_bowl[HMR].source, module.default[HMR].original);
  });
}
var ice_cream_bowl_default = Ice_cream_bowl;

// node_modules/lucide-svelte/dist/icons/ice-cream-cone.svelte
Ice_cream_cone[FILENAME] = "node_modules/lucide-svelte/dist/icons/ice-cream-cone.svelte";
function Ice_cream_cone($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ice_cream_cone);
  const iconNode = [
    ["path", { "d": "m7 11 4.08 10.35a1 1 0 0 0 1.84 0L17 11" }],
    ["path", { "d": "M17 7A5 5 0 0 0 7 7" }],
    ["path", { "d": "M17 7a2 2 0 0 1 0 4H7a2 2 0 0 1 0-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ice-cream-cone" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ice_cream_cone, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ice_cream_cone,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ice_cream_cone = hmr(Ice_cream_cone, () => Ice_cream_cone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ice_cream_cone[HMR].source;
    set(Ice_cream_cone[HMR].source, module.default[HMR].original);
  });
}
var ice_cream_cone_default = Ice_cream_cone;

// node_modules/lucide-svelte/dist/icons/id-card-lanyard.svelte
Id_card_lanyard[FILENAME] = "node_modules/lucide-svelte/dist/icons/id-card-lanyard.svelte";
function Id_card_lanyard($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Id_card_lanyard);
  const iconNode = [
    ["path", { "d": "M13.5 8h-3" }],
    [
      "path",
      {
        "d": "m15 2-1 2h3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h3"
      }
    ],
    ["path", { "d": "M16.899 22A5 5 0 0 0 7.1 22" }],
    ["path", { "d": "m9 2 3 6" }],
    ["circle", { "cx": "12", "cy": "15", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "id-card-lanyard" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Id_card_lanyard, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Id_card_lanyard,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Id_card_lanyard = hmr(Id_card_lanyard, () => Id_card_lanyard[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Id_card_lanyard[HMR].source;
    set(Id_card_lanyard[HMR].source, module.default[HMR].original);
  });
}
var id_card_lanyard_default = Id_card_lanyard;

// node_modules/lucide-svelte/dist/icons/id-card.svelte
Id_card[FILENAME] = "node_modules/lucide-svelte/dist/icons/id-card.svelte";
function Id_card($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Id_card);
  const iconNode = [
    ["path", { "d": "M16 10h2" }],
    ["path", { "d": "M16 14h2" }],
    ["path", { "d": "M6.17 15a3 3 0 0 1 5.66 0" }],
    ["circle", { "cx": "9", "cy": "11", "r": "2" }],
    [
      "rect",
      { "x": "2", "y": "5", "width": "20", "height": "14", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "id-card" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Id_card, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Id_card,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Id_card = hmr(Id_card, () => Id_card[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Id_card[HMR].source;
    set(Id_card[HMR].source, module.default[HMR].original);
  });
}
var id_card_default = Id_card;

// node_modules/lucide-svelte/dist/icons/image-down.svelte
Image_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/image-down.svelte";
function Image_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Image_down);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.3 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10l-3.1-3.1a2 2 0 0 0-2.814.014L6 21"
      }
    ],
    ["path", { "d": "m14 19 3 3v-5.5" }],
    ["path", { "d": "m17 22 3-3" }],
    ["circle", { "cx": "9", "cy": "9", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "image-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Image_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Image_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Image_down = hmr(Image_down, () => Image_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Image_down[HMR].source;
    set(Image_down[HMR].source, module.default[HMR].original);
  });
}
var image_down_default = Image_down;

// node_modules/lucide-svelte/dist/icons/image-minus.svelte
Image_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/image-minus.svelte";
function Image_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Image_minus);
  const iconNode = [
    [
      "path",
      {
        "d": "M21 9v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7"
      }
    ],
    ["line", { "x1": "16", "x2": "22", "y1": "5", "y2": "5" }],
    ["circle", { "cx": "9", "cy": "9", "r": "2" }],
    ["path", { "d": "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "image-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Image_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Image_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Image_minus = hmr(Image_minus, () => Image_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Image_minus[HMR].source;
    set(Image_minus[HMR].source, module.default[HMR].original);
  });
}
var image_minus_default = Image_minus;

// node_modules/lucide-svelte/dist/icons/image-off.svelte
Image_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/image-off.svelte";
function Image_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Image_off);
  const iconNode = [
    ["line", { "x1": "2", "x2": "22", "y1": "2", "y2": "22" }],
    ["path", { "d": "M10.41 10.41a2 2 0 1 1-2.83-2.83" }],
    [
      "line",
      { "x1": "13.5", "x2": "6", "y1": "13.5", "y2": "21" }
    ],
    ["line", { "x1": "18", "x2": "21", "y1": "12", "y2": "15" }],
    [
      "path",
      {
        "d": "M3.59 3.59A1.99 1.99 0 0 0 3 5v14a2 2 0 0 0 2 2h14c.55 0 1.052-.22 1.41-.59"
      }
    ],
    ["path", { "d": "M21 15V5a2 2 0 0 0-2-2H9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "image-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Image_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Image_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Image_off = hmr(Image_off, () => Image_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Image_off[HMR].source;
    set(Image_off[HMR].source, module.default[HMR].original);
  });
}
var image_off_default = Image_off;

// node_modules/lucide-svelte/dist/icons/image-play.svelte
Image_play[FILENAME] = "node_modules/lucide-svelte/dist/icons/image-play.svelte";
function Image_play($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Image_play);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 15.003a1 1 0 0 1 1.517-.859l4.997 2.997a1 1 0 0 1 0 1.718l-4.997 2.997a1 1 0 0 1-1.517-.86z"
      }
    ],
    [
      "path",
      {
        "d": "M21 12.17V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6"
      }
    ],
    ["path", { "d": "m6 21 5-5" }],
    ["circle", { "cx": "9", "cy": "9", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "image-play" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Image_play, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Image_play,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Image_play = hmr(Image_play, () => Image_play[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Image_play[HMR].source;
    set(Image_play[HMR].source, module.default[HMR].original);
  });
}
var image_play_default = Image_play;

// node_modules/lucide-svelte/dist/icons/image-plus.svelte
Image_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/image-plus.svelte";
function Image_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Image_plus);
  const iconNode = [
    ["path", { "d": "M16 5h6" }],
    ["path", { "d": "M19 2v6" }],
    [
      "path",
      {
        "d": "M21 11.5V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7.5"
      }
    ],
    ["path", { "d": "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" }],
    ["circle", { "cx": "9", "cy": "9", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "image-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Image_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Image_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Image_plus = hmr(Image_plus, () => Image_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Image_plus[HMR].source;
    set(Image_plus[HMR].source, module.default[HMR].original);
  });
}
var image_plus_default = Image_plus;

// node_modules/lucide-svelte/dist/icons/image-up.svelte
Image_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/image-up.svelte";
function Image_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Image_up);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.3 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v10l-3.1-3.1a2 2 0 0 0-2.814.014L6 21"
      }
    ],
    ["path", { "d": "m14 19.5 3-3 3 3" }],
    ["path", { "d": "M17 22v-5.5" }],
    ["circle", { "cx": "9", "cy": "9", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "image-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Image_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Image_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Image_up = hmr(Image_up, () => Image_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Image_up[HMR].source;
    set(Image_up[HMR].source, module.default[HMR].original);
  });
}
var image_up_default = Image_up;

// node_modules/lucide-svelte/dist/icons/image-upscale.svelte
Image_upscale[FILENAME] = "node_modules/lucide-svelte/dist/icons/image-upscale.svelte";
function Image_upscale($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Image_upscale);
  const iconNode = [
    ["path", { "d": "M16 3h5v5" }],
    ["path", { "d": "M17 21h2a2 2 0 0 0 2-2" }],
    ["path", { "d": "M21 12v3" }],
    ["path", { "d": "m21 3-5 5" }],
    ["path", { "d": "M3 7V5a2 2 0 0 1 2-2" }],
    [
      "path",
      { "d": "m5 21 4.144-4.144a1.21 1.21 0 0 1 1.712 0L13 19" }
    ],
    ["path", { "d": "M9 3h3" }],
    [
      "rect",
      {
        "x": "3",
        "y": "11",
        "width": "10",
        "height": "10",
        "rx": "1"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "image-upscale" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Image_upscale, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Image_upscale,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Image_upscale = hmr(Image_upscale, () => Image_upscale[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Image_upscale[HMR].source;
    set(Image_upscale[HMR].source, module.default[HMR].original);
  });
}
var image_upscale_default = Image_upscale;

// node_modules/lucide-svelte/dist/icons/image.svelte
Image[FILENAME] = "node_modules/lucide-svelte/dist/icons/image.svelte";
function Image($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Image);
  const iconNode = [
    [
      "rect",
      {
        "width": "18",
        "height": "18",
        "x": "3",
        "y": "3",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["circle", { "cx": "9", "cy": "9", "r": "2" }],
    ["path", { "d": "m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "image" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Image, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Image,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Image = hmr(Image, () => Image[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Image[HMR].source;
    set(Image[HMR].source, module.default[HMR].original);
  });
}
var image_default = Image;

// node_modules/lucide-svelte/dist/icons/images.svelte
Images[FILENAME] = "node_modules/lucide-svelte/dist/icons/images.svelte";
function Images($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Images);
  const iconNode = [
    [
      "path",
      { "d": "m22 11-1.296-1.296a2.4 2.4 0 0 0-3.408 0L11 16" }
    ],
    [
      "path",
      { "d": "M4 8a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2" }
    ],
    [
      "circle",
      { "cx": "13", "cy": "7", "r": "1", "fill": "currentColor" }
    ],
    [
      "rect",
      { "x": "8", "y": "2", "width": "14", "height": "14", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "images" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Images, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Images,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Images = hmr(Images, () => Images[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Images[HMR].source;
    set(Images[HMR].source, module.default[HMR].original);
  });
}
var images_default = Images;

// node_modules/lucide-svelte/dist/icons/import.svelte
Import[FILENAME] = "node_modules/lucide-svelte/dist/icons/import.svelte";
function Import($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Import);
  const iconNode = [
    ["path", { "d": "M12 3v12" }],
    ["path", { "d": "m8 11 4 4 4-4" }],
    [
      "path",
      {
        "d": "M8 5H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-4"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "import" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Import, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Import,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Import = hmr(Import, () => Import[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Import[HMR].source;
    set(Import[HMR].source, module.default[HMR].original);
  });
}
var import_default = Import;

// node_modules/lucide-svelte/dist/icons/inbox.svelte
Inbox[FILENAME] = "node_modules/lucide-svelte/dist/icons/inbox.svelte";
function Inbox($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Inbox);
  const iconNode = [
    [
      "polyline",
      { "points": "22 12 16 12 14 15 10 15 8 12 2 12" }
    ],
    [
      "path",
      {
        "d": "M5.45 5.11 2 12v6a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-6l-3.45-6.89A2 2 0 0 0 16.76 4H7.24a2 2 0 0 0-1.79 1.11z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "inbox" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Inbox, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Inbox,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Inbox = hmr(Inbox, () => Inbox[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Inbox[HMR].source;
    set(Inbox[HMR].source, module.default[HMR].original);
  });
}
var inbox_default = Inbox;

// node_modules/lucide-svelte/dist/icons/indent-decrease.svelte
Indent_decrease[FILENAME] = "node_modules/lucide-svelte/dist/icons/indent-decrease.svelte";
function Indent_decrease($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Indent_decrease);
  const iconNode = [
    ["path", { "d": "M21 12H11" }],
    ["path", { "d": "M21 18H11" }],
    ["path", { "d": "M21 6H11" }],
    ["path", { "d": "m7 8-4 4 4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "indent-decrease" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Indent_decrease, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Indent_decrease,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Indent_decrease = hmr(Indent_decrease, () => Indent_decrease[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Indent_decrease[HMR].source;
    set(Indent_decrease[HMR].source, module.default[HMR].original);
  });
}
var indent_decrease_default = Indent_decrease;

// node_modules/lucide-svelte/dist/icons/indent-increase.svelte
Indent_increase[FILENAME] = "node_modules/lucide-svelte/dist/icons/indent-increase.svelte";
function Indent_increase($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Indent_increase);
  const iconNode = [
    ["path", { "d": "M21 12H11" }],
    ["path", { "d": "M21 18H11" }],
    ["path", { "d": "M21 6H11" }],
    ["path", { "d": "m3 8 4 4-4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "indent-increase" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Indent_increase, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Indent_increase,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Indent_increase = hmr(Indent_increase, () => Indent_increase[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Indent_increase[HMR].source;
    set(Indent_increase[HMR].source, module.default[HMR].original);
  });
}
var indent_increase_default = Indent_increase;

// node_modules/lucide-svelte/dist/icons/indian-rupee.svelte
Indian_rupee[FILENAME] = "node_modules/lucide-svelte/dist/icons/indian-rupee.svelte";
function Indian_rupee($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Indian_rupee);
  const iconNode = [
    ["path", { "d": "M6 3h12" }],
    ["path", { "d": "M6 8h12" }],
    ["path", { "d": "m6 13 8.5 8" }],
    ["path", { "d": "M6 13h3" }],
    ["path", { "d": "M9 13c6.667 0 6.667-10 0-10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "indian-rupee" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Indian_rupee, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Indian_rupee,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Indian_rupee = hmr(Indian_rupee, () => Indian_rupee[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Indian_rupee[HMR].source;
    set(Indian_rupee[HMR].source, module.default[HMR].original);
  });
}
var indian_rupee_default = Indian_rupee;

// node_modules/lucide-svelte/dist/icons/info.svelte
Info[FILENAME] = "node_modules/lucide-svelte/dist/icons/info.svelte";
function Info($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Info);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M12 16v-4" }],
    ["path", { "d": "M12 8h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "info" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Info, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Info,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Info = hmr(Info, () => Info[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Info[HMR].source;
    set(Info[HMR].source, module.default[HMR].original);
  });
}
var info_default = Info;

// node_modules/lucide-svelte/dist/icons/infinity.svelte
Infinity[FILENAME] = "node_modules/lucide-svelte/dist/icons/infinity.svelte";
function Infinity($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Infinity);
  const iconNode = [
    [
      "path",
      {
        "d": "M6 16c5 0 7-8 12-8a4 4 0 0 1 0 8c-5 0-7-8-12-8a4 4 0 1 0 0 8"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "infinity" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Infinity, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Infinity,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Infinity = hmr(Infinity, () => Infinity[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Infinity[HMR].source;
    set(Infinity[HMR].source, module.default[HMR].original);
  });
}
var infinity_default = Infinity;

// node_modules/lucide-svelte/dist/icons/inspection-panel.svelte
Inspection_panel[FILENAME] = "node_modules/lucide-svelte/dist/icons/inspection-panel.svelte";
function Inspection_panel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Inspection_panel);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M7 7h.01" }],
    ["path", { "d": "M17 7h.01" }],
    ["path", { "d": "M7 17h.01" }],
    ["path", { "d": "M17 17h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "inspection-panel" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Inspection_panel, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Inspection_panel,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Inspection_panel = hmr(Inspection_panel, () => Inspection_panel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Inspection_panel[HMR].source;
    set(Inspection_panel[HMR].source, module.default[HMR].original);
  });
}
var inspection_panel_default = Inspection_panel;

// node_modules/lucide-svelte/dist/icons/instagram.svelte
Instagram[FILENAME] = "node_modules/lucide-svelte/dist/icons/instagram.svelte";
function Instagram($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Instagram);
  const iconNode = [
    [
      "rect",
      {
        "width": "20",
        "height": "20",
        "x": "2",
        "y": "2",
        "rx": "5",
        "ry": "5"
      }
    ],
    [
      "path",
      { "d": "M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z" }
    ],
    [
      "line",
      { "x1": "17.5", "x2": "17.51", "y1": "6.5", "y2": "6.5" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "instagram" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Instagram, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Instagram,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Instagram = hmr(Instagram, () => Instagram[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Instagram[HMR].source;
    set(Instagram[HMR].source, module.default[HMR].original);
  });
}
var instagram_default = Instagram;

// node_modules/lucide-svelte/dist/icons/italic.svelte
Italic[FILENAME] = "node_modules/lucide-svelte/dist/icons/italic.svelte";
function Italic($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Italic);
  const iconNode = [
    ["line", { "x1": "19", "x2": "10", "y1": "4", "y2": "4" }],
    ["line", { "x1": "14", "x2": "5", "y1": "20", "y2": "20" }],
    ["line", { "x1": "15", "x2": "9", "y1": "4", "y2": "20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "italic" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Italic, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Italic,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Italic = hmr(Italic, () => Italic[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Italic[HMR].source;
    set(Italic[HMR].source, module.default[HMR].original);
  });
}
var italic_default = Italic;

// node_modules/lucide-svelte/dist/icons/iteration-ccw.svelte
Iteration_ccw[FILENAME] = "node_modules/lucide-svelte/dist/icons/iteration-ccw.svelte";
function Iteration_ccw($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Iteration_ccw);
  const iconNode = [
    ["path", { "d": "m16 14 4 4-4 4" }],
    ["path", { "d": "M20 10a8 8 0 1 0-8 8h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "iteration-ccw" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Iteration_ccw, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Iteration_ccw,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Iteration_ccw = hmr(Iteration_ccw, () => Iteration_ccw[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Iteration_ccw[HMR].source;
    set(Iteration_ccw[HMR].source, module.default[HMR].original);
  });
}
var iteration_ccw_default = Iteration_ccw;

// node_modules/lucide-svelte/dist/icons/iteration-cw.svelte
Iteration_cw[FILENAME] = "node_modules/lucide-svelte/dist/icons/iteration-cw.svelte";
function Iteration_cw($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Iteration_cw);
  const iconNode = [
    ["path", { "d": "M4 10a8 8 0 1 1 8 8H4" }],
    ["path", { "d": "m8 22-4-4 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "iteration-cw" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Iteration_cw, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Iteration_cw,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Iteration_cw = hmr(Iteration_cw, () => Iteration_cw[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Iteration_cw[HMR].source;
    set(Iteration_cw[HMR].source, module.default[HMR].original);
  });
}
var iteration_cw_default = Iteration_cw;

// node_modules/lucide-svelte/dist/icons/japanese-yen.svelte
Japanese_yen[FILENAME] = "node_modules/lucide-svelte/dist/icons/japanese-yen.svelte";
function Japanese_yen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Japanese_yen);
  const iconNode = [
    ["path", { "d": "M12 9.5V21m0-11.5L6 3m6 6.5L18 3" }],
    ["path", { "d": "M6 15h12" }],
    ["path", { "d": "M6 11h12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "japanese-yen" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Japanese_yen, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Japanese_yen,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Japanese_yen = hmr(Japanese_yen, () => Japanese_yen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Japanese_yen[HMR].source;
    set(Japanese_yen[HMR].source, module.default[HMR].original);
  });
}
var japanese_yen_default = Japanese_yen;

// node_modules/lucide-svelte/dist/icons/joystick.svelte
Joystick[FILENAME] = "node_modules/lucide-svelte/dist/icons/joystick.svelte";
function Joystick($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Joystick);
  const iconNode = [
    [
      "path",
      {
        "d": "M21 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-2Z"
      }
    ],
    ["path", { "d": "M6 15v-2" }],
    ["path", { "d": "M12 15V9" }],
    ["circle", { "cx": "12", "cy": "6", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "joystick" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Joystick, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Joystick,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Joystick = hmr(Joystick, () => Joystick[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Joystick[HMR].source;
    set(Joystick[HMR].source, module.default[HMR].original);
  });
}
var joystick_default = Joystick;

// node_modules/lucide-svelte/dist/icons/kanban.svelte
Kanban[FILENAME] = "node_modules/lucide-svelte/dist/icons/kanban.svelte";
function Kanban($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Kanban);
  const iconNode = [
    ["path", { "d": "M6 5v11" }],
    ["path", { "d": "M12 5v6" }],
    ["path", { "d": "M18 5v14" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "kanban" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Kanban, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Kanban,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Kanban = hmr(Kanban, () => Kanban[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Kanban[HMR].source;
    set(Kanban[HMR].source, module.default[HMR].original);
  });
}
var kanban_default = Kanban;

// node_modules/lucide-svelte/dist/icons/key-round.svelte
Key_round[FILENAME] = "node_modules/lucide-svelte/dist/icons/key-round.svelte";
function Key_round($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Key_round);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.586 17.414A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814a6.5 6.5 0 1 0-4-4z"
      }
    ],
    [
      "circle",
      { "cx": "16.5", "cy": "7.5", "r": ".5", "fill": "currentColor" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "key-round" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Key_round, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Key_round,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Key_round = hmr(Key_round, () => Key_round[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Key_round[HMR].source;
    set(Key_round[HMR].source, module.default[HMR].original);
  });
}
var key_round_default = Key_round;

// node_modules/lucide-svelte/dist/icons/key-square.svelte
Key_square[FILENAME] = "node_modules/lucide-svelte/dist/icons/key-square.svelte";
function Key_square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Key_square);
  const iconNode = [
    [
      "path",
      {
        "d": "M12.4 2.7a2.5 2.5 0 0 1 3.4 0l5.5 5.5a2.5 2.5 0 0 1 0 3.4l-3.7 3.7a2.5 2.5 0 0 1-3.4 0L8.7 9.8a2.5 2.5 0 0 1 0-3.4z"
      }
    ],
    ["path", { "d": "m14 7 3 3" }],
    [
      "path",
      {
        "d": "m9.4 10.6-6.814 6.814A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "key-square" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Key_square, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Key_square,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Key_square = hmr(Key_square, () => Key_square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Key_square[HMR].source;
    set(Key_square[HMR].source, module.default[HMR].original);
  });
}
var key_square_default = Key_square;

// node_modules/lucide-svelte/dist/icons/key.svelte
Key[FILENAME] = "node_modules/lucide-svelte/dist/icons/key.svelte";
function Key($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Key);
  const iconNode = [
    [
      "path",
      {
        "d": "m15.5 7.5 2.3 2.3a1 1 0 0 0 1.4 0l2.1-2.1a1 1 0 0 0 0-1.4L19 4"
      }
    ],
    ["path", { "d": "m21 2-9.6 9.6" }],
    ["circle", { "cx": "7.5", "cy": "15.5", "r": "5.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "key" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Key, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Key,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Key = hmr(Key, () => Key[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Key[HMR].source;
    set(Key[HMR].source, module.default[HMR].original);
  });
}
var key_default = Key;

// node_modules/lucide-svelte/dist/icons/keyboard-music.svelte
Keyboard_music[FILENAME] = "node_modules/lucide-svelte/dist/icons/keyboard-music.svelte";
function Keyboard_music($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Keyboard_music);
  const iconNode = [
    [
      "rect",
      { "width": "20", "height": "16", "x": "2", "y": "4", "rx": "2" }
    ],
    ["path", { "d": "M6 8h4" }],
    ["path", { "d": "M14 8h.01" }],
    ["path", { "d": "M18 8h.01" }],
    ["path", { "d": "M2 12h20" }],
    ["path", { "d": "M6 12v4" }],
    ["path", { "d": "M10 12v4" }],
    ["path", { "d": "M14 12v4" }],
    ["path", { "d": "M18 12v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "keyboard-music" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Keyboard_music, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Keyboard_music,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Keyboard_music = hmr(Keyboard_music, () => Keyboard_music[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Keyboard_music[HMR].source;
    set(Keyboard_music[HMR].source, module.default[HMR].original);
  });
}
var keyboard_music_default = Keyboard_music;

// node_modules/lucide-svelte/dist/icons/keyboard-off.svelte
Keyboard_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/keyboard-off.svelte";
function Keyboard_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Keyboard_off);
  const iconNode = [
    ["path", { "d": "M 20 4 A2 2 0 0 1 22 6" }],
    ["path", { "d": "M 22 6 L 22 16.41" }],
    ["path", { "d": "M 7 16 L 16 16" }],
    ["path", { "d": "M 9.69 4 L 20 4" }],
    ["path", { "d": "M14 8h.01" }],
    ["path", { "d": "M18 8h.01" }],
    ["path", { "d": "m2 2 20 20" }],
    ["path", { "d": "M20 20H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2" }],
    ["path", { "d": "M6 8h.01" }],
    ["path", { "d": "M8 12h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "keyboard-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Keyboard_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Keyboard_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Keyboard_off = hmr(Keyboard_off, () => Keyboard_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Keyboard_off[HMR].source;
    set(Keyboard_off[HMR].source, module.default[HMR].original);
  });
}
var keyboard_off_default = Keyboard_off;

// node_modules/lucide-svelte/dist/icons/keyboard.svelte
Keyboard[FILENAME] = "node_modules/lucide-svelte/dist/icons/keyboard.svelte";
function Keyboard($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Keyboard);
  const iconNode = [
    ["path", { "d": "M10 8h.01" }],
    ["path", { "d": "M12 12h.01" }],
    ["path", { "d": "M14 8h.01" }],
    ["path", { "d": "M16 12h.01" }],
    ["path", { "d": "M18 8h.01" }],
    ["path", { "d": "M6 8h.01" }],
    ["path", { "d": "M7 16h10" }],
    ["path", { "d": "M8 12h.01" }],
    [
      "rect",
      { "width": "20", "height": "16", "x": "2", "y": "4", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "keyboard" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Keyboard, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Keyboard,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Keyboard = hmr(Keyboard, () => Keyboard[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Keyboard[HMR].source;
    set(Keyboard[HMR].source, module.default[HMR].original);
  });
}
var keyboard_default = Keyboard;

// node_modules/lucide-svelte/dist/icons/lamp-ceiling.svelte
Lamp_ceiling[FILENAME] = "node_modules/lucide-svelte/dist/icons/lamp-ceiling.svelte";
function Lamp_ceiling($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Lamp_ceiling);
  const iconNode = [
    ["path", { "d": "M12 2v5" }],
    ["path", { "d": "M14.829 15.998a3 3 0 1 1-5.658 0" }],
    [
      "path",
      {
        "d": "M20.92 14.606A1 1 0 0 1 20 16H4a1 1 0 0 1-.92-1.394l3-7A1 1 0 0 1 7 7h10a1 1 0 0 1 .92.606z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "lamp-ceiling" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Lamp_ceiling, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Lamp_ceiling,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lamp_ceiling = hmr(Lamp_ceiling, () => Lamp_ceiling[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lamp_ceiling[HMR].source;
    set(Lamp_ceiling[HMR].source, module.default[HMR].original);
  });
}
var lamp_ceiling_default = Lamp_ceiling;

// node_modules/lucide-svelte/dist/icons/lamp-desk.svelte
Lamp_desk[FILENAME] = "node_modules/lucide-svelte/dist/icons/lamp-desk.svelte";
function Lamp_desk($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Lamp_desk);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.293 2.293a1 1 0 0 1 1.414 0l2.5 2.5 5.994 1.227a1 1 0 0 1 .506 1.687l-7 7a1 1 0 0 1-1.687-.506l-1.227-5.994-2.5-2.5a1 1 0 0 1 0-1.414z"
      }
    ],
    ["path", { "d": "m14.207 4.793-3.414 3.414" }],
    [
      "path",
      {
        "d": "M3 20a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1z"
      }
    ],
    [
      "path",
      { "d": "m9.086 6.5-4.793 4.793a1 1 0 0 0-.18 1.17L7 18" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "lamp-desk" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Lamp_desk, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Lamp_desk,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lamp_desk = hmr(Lamp_desk, () => Lamp_desk[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lamp_desk[HMR].source;
    set(Lamp_desk[HMR].source, module.default[HMR].original);
  });
}
var lamp_desk_default = Lamp_desk;

// node_modules/lucide-svelte/dist/icons/lamp-floor.svelte
Lamp_floor[FILENAME] = "node_modules/lucide-svelte/dist/icons/lamp-floor.svelte";
function Lamp_floor($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Lamp_floor);
  const iconNode = [
    ["path", { "d": "M12 10v12" }],
    [
      "path",
      {
        "d": "M17.929 7.629A1 1 0 0 1 17 9H7a1 1 0 0 1-.928-1.371l2-5A1 1 0 0 1 9 2h6a1 1 0 0 1 .928.629z"
      }
    ],
    ["path", { "d": "M9 22h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "lamp-floor" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Lamp_floor, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Lamp_floor,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lamp_floor = hmr(Lamp_floor, () => Lamp_floor[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lamp_floor[HMR].source;
    set(Lamp_floor[HMR].source, module.default[HMR].original);
  });
}
var lamp_floor_default = Lamp_floor;

// node_modules/lucide-svelte/dist/icons/lamp-wall-down.svelte
Lamp_wall_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/lamp-wall-down.svelte";
function Lamp_wall_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Lamp_wall_down);
  const iconNode = [
    [
      "path",
      {
        "d": "M19.929 18.629A1 1 0 0 1 19 20H9a1 1 0 0 1-.928-1.371l2-5A1 1 0 0 1 11 13h6a1 1 0 0 1 .928.629z"
      }
    ],
    [
      "path",
      {
        "d": "M6 3a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H5a1 1 0 0 1-1-1V4a1 1 0 0 1 1-1z"
      }
    ],
    ["path", { "d": "M8 6h4a2 2 0 0 1 2 2v5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "lamp-wall-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Lamp_wall_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Lamp_wall_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lamp_wall_down = hmr(Lamp_wall_down, () => Lamp_wall_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lamp_wall_down[HMR].source;
    set(Lamp_wall_down[HMR].source, module.default[HMR].original);
  });
}
var lamp_wall_down_default = Lamp_wall_down;

// node_modules/lucide-svelte/dist/icons/lamp-wall-up.svelte
Lamp_wall_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/lamp-wall-up.svelte";
function Lamp_wall_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Lamp_wall_up);
  const iconNode = [
    [
      "path",
      {
        "d": "M19.929 9.629A1 1 0 0 1 19 11H9a1 1 0 0 1-.928-1.371l2-5A1 1 0 0 1 11 4h6a1 1 0 0 1 .928.629z"
      }
    ],
    [
      "path",
      {
        "d": "M6 15a2 2 0 0 1 2 2v2a2 2 0 0 1-2 2H5a1 1 0 0 1-1-1v-4a1 1 0 0 1 1-1z"
      }
    ],
    ["path", { "d": "M8 18h4a2 2 0 0 0 2-2v-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "lamp-wall-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Lamp_wall_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Lamp_wall_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lamp_wall_up = hmr(Lamp_wall_up, () => Lamp_wall_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lamp_wall_up[HMR].source;
    set(Lamp_wall_up[HMR].source, module.default[HMR].original);
  });
}
var lamp_wall_up_default = Lamp_wall_up;

// node_modules/lucide-svelte/dist/icons/lamp.svelte
Lamp[FILENAME] = "node_modules/lucide-svelte/dist/icons/lamp.svelte";
function Lamp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Lamp);
  const iconNode = [
    ["path", { "d": "M12 12v6" }],
    [
      "path",
      {
        "d": "M4.077 10.615A1 1 0 0 0 5 12h14a1 1 0 0 0 .923-1.385l-3.077-7.384A2 2 0 0 0 15 2H9a2 2 0 0 0-1.846 1.23Z"
      }
    ],
    [
      "path",
      {
        "d": "M8 20a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1a1 1 0 0 1-1 1H9a1 1 0 0 1-1-1z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "lamp" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Lamp, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Lamp,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lamp = hmr(Lamp, () => Lamp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lamp[HMR].source;
    set(Lamp[HMR].source, module.default[HMR].original);
  });
}
var lamp_default = Lamp;

// node_modules/lucide-svelte/dist/icons/land-plot.svelte
Land_plot[FILENAME] = "node_modules/lucide-svelte/dist/icons/land-plot.svelte";
function Land_plot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Land_plot);
  const iconNode = [
    ["path", { "d": "m12 8 6-3-6-3v10" }],
    [
      "path",
      {
        "d": "m8 11.99-5.5 3.14a1 1 0 0 0 0 1.74l8.5 4.86a2 2 0 0 0 2 0l8.5-4.86a1 1 0 0 0 0-1.74L16 12"
      }
    ],
    ["path", { "d": "m6.49 12.85 11.02 6.3" }],
    ["path", { "d": "M17.51 12.85 6.5 19.15" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "land-plot" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Land_plot, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Land_plot,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Land_plot = hmr(Land_plot, () => Land_plot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Land_plot[HMR].source;
    set(Land_plot[HMR].source, module.default[HMR].original);
  });
}
var land_plot_default = Land_plot;

// node_modules/lucide-svelte/dist/icons/landmark.svelte
Landmark[FILENAME] = "node_modules/lucide-svelte/dist/icons/landmark.svelte";
function Landmark($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Landmark);
  const iconNode = [
    ["path", { "d": "M10 18v-7" }],
    [
      "path",
      {
        "d": "M11.12 2.198a2 2 0 0 1 1.76.006l7.866 3.847c.476.233.31.949-.22.949H3.474c-.53 0-.695-.716-.22-.949z"
      }
    ],
    ["path", { "d": "M14 18v-7" }],
    ["path", { "d": "M18 18v-7" }],
    ["path", { "d": "M3 22h18" }],
    ["path", { "d": "M6 18v-7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "landmark" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Landmark, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Landmark,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Landmark = hmr(Landmark, () => Landmark[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Landmark[HMR].source;
    set(Landmark[HMR].source, module.default[HMR].original);
  });
}
var landmark_default = Landmark;

// node_modules/lucide-svelte/dist/icons/languages.svelte
Languages[FILENAME] = "node_modules/lucide-svelte/dist/icons/languages.svelte";
function Languages($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Languages);
  const iconNode = [
    ["path", { "d": "m5 8 6 6" }],
    ["path", { "d": "m4 14 6-6 2-3" }],
    ["path", { "d": "M2 5h12" }],
    ["path", { "d": "M7 2h1" }],
    ["path", { "d": "m22 22-5-10-5 10" }],
    ["path", { "d": "M14 18h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "languages" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Languages, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Languages,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Languages = hmr(Languages, () => Languages[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Languages[HMR].source;
    set(Languages[HMR].source, module.default[HMR].original);
  });
}
var languages_default = Languages;

// node_modules/lucide-svelte/dist/icons/laptop-minimal-check.svelte
Laptop_minimal_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/laptop-minimal-check.svelte";
function Laptop_minimal_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Laptop_minimal_check);
  const iconNode = [
    ["path", { "d": "M2 20h20" }],
    ["path", { "d": "m9 10 2 2 4-4" }],
    [
      "rect",
      { "x": "3", "y": "4", "width": "18", "height": "12", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "laptop-minimal-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Laptop_minimal_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Laptop_minimal_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Laptop_minimal_check = hmr(Laptop_minimal_check, () => Laptop_minimal_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Laptop_minimal_check[HMR].source;
    set(Laptop_minimal_check[HMR].source, module.default[HMR].original);
  });
}
var laptop_minimal_check_default = Laptop_minimal_check;

// node_modules/lucide-svelte/dist/icons/laptop-minimal.svelte
Laptop_minimal[FILENAME] = "node_modules/lucide-svelte/dist/icons/laptop-minimal.svelte";
function Laptop_minimal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Laptop_minimal);
  const iconNode = [
    [
      "rect",
      {
        "width": "18",
        "height": "12",
        "x": "3",
        "y": "4",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["line", { "x1": "2", "x2": "22", "y1": "20", "y2": "20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "laptop-minimal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Laptop_minimal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Laptop_minimal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Laptop_minimal = hmr(Laptop_minimal, () => Laptop_minimal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Laptop_minimal[HMR].source;
    set(Laptop_minimal[HMR].source, module.default[HMR].original);
  });
}
var laptop_minimal_default = Laptop_minimal;

// node_modules/lucide-svelte/dist/icons/laptop.svelte
Laptop[FILENAME] = "node_modules/lucide-svelte/dist/icons/laptop.svelte";
function Laptop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Laptop);
  const iconNode = [
    [
      "path",
      {
        "d": "M18 5a2 2 0 0 1 2 2v8.526a2 2 0 0 0 .212.897l1.068 2.127a1 1 0 0 1-.9 1.45H3.62a1 1 0 0 1-.9-1.45l1.068-2.127A2 2 0 0 0 4 15.526V7a2 2 0 0 1 2-2z"
      }
    ],
    ["path", { "d": "M20.054 15.987H3.946" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "laptop" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Laptop, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Laptop,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Laptop = hmr(Laptop, () => Laptop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Laptop[HMR].source;
    set(Laptop[HMR].source, module.default[HMR].original);
  });
}
var laptop_default = Laptop;

// node_modules/lucide-svelte/dist/icons/lasso-select.svelte
Lasso_select[FILENAME] = "node_modules/lucide-svelte/dist/icons/lasso-select.svelte";
function Lasso_select($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Lasso_select);
  const iconNode = [
    ["path", { "d": "M7 22a5 5 0 0 1-2-4" }],
    ["path", { "d": "M7 16.93c.96.43 1.96.74 2.99.91" }],
    [
      "path",
      {
        "d": "M3.34 14A6.8 6.8 0 0 1 2 10c0-4.42 4.48-8 10-8s10 3.58 10 8a7.19 7.19 0 0 1-.33 2"
      }
    ],
    ["path", { "d": "M5 18a2 2 0 1 0 0-4 2 2 0 0 0 0 4z" }],
    [
      "path",
      {
        "d": "M14.33 22h-.09a.35.35 0 0 1-.24-.32v-10a.34.34 0 0 1 .33-.34c.08 0 .15.03.21.08l7.34 6a.33.33 0 0 1-.21.59h-4.49l-2.57 3.85a.35.35 0 0 1-.28.14z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "lasso-select" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Lasso_select, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Lasso_select,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lasso_select = hmr(Lasso_select, () => Lasso_select[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lasso_select[HMR].source;
    set(Lasso_select[HMR].source, module.default[HMR].original);
  });
}
var lasso_select_default = Lasso_select;

// node_modules/lucide-svelte/dist/icons/lasso.svelte
Lasso[FILENAME] = "node_modules/lucide-svelte/dist/icons/lasso.svelte";
function Lasso($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Lasso);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.704 14.467A10 8 0 0 1 2 10a10 8 0 0 1 20 0 10 8 0 0 1-10 8 10 8 0 0 1-5.181-1.158"
      }
    ],
    ["path", { "d": "M7 22a5 5 0 0 1-2-3.994" }],
    ["circle", { "cx": "5", "cy": "16", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "lasso" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Lasso, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Lasso,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lasso = hmr(Lasso, () => Lasso[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lasso[HMR].source;
    set(Lasso[HMR].source, module.default[HMR].original);
  });
}
var lasso_default = Lasso;

// node_modules/lucide-svelte/dist/icons/laugh.svelte
Laugh[FILENAME] = "node_modules/lucide-svelte/dist/icons/laugh.svelte";
function Laugh($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Laugh);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M18 13a6 6 0 0 1-6 5 6 6 0 0 1-6-5h12Z" }],
    ["line", { "x1": "9", "x2": "9.01", "y1": "9", "y2": "9" }],
    ["line", { "x1": "15", "x2": "15.01", "y1": "9", "y2": "9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "laugh" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Laugh, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Laugh,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Laugh = hmr(Laugh, () => Laugh[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Laugh[HMR].source;
    set(Laugh[HMR].source, module.default[HMR].original);
  });
}
var laugh_default = Laugh;

// node_modules/lucide-svelte/dist/icons/layers-2.svelte
Layers_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/layers-2.svelte";
function Layers_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Layers_2);
  const iconNode = [
    [
      "path",
      {
        "d": "M13 13.74a2 2 0 0 1-2 0L2.5 8.87a1 1 0 0 1 0-1.74L11 2.26a2 2 0 0 1 2 0l8.5 4.87a1 1 0 0 1 0 1.74z"
      }
    ],
    [
      "path",
      {
        "d": "m20 14.285 1.5.845a1 1 0 0 1 0 1.74L13 21.74a2 2 0 0 1-2 0l-8.5-4.87a1 1 0 0 1 0-1.74l1.5-.845"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "layers-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Layers_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Layers_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Layers_2 = hmr(Layers_2, () => Layers_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Layers_2[HMR].source;
    set(Layers_2[HMR].source, module.default[HMR].original);
  });
}
var layers_2_default = Layers_2;

// node_modules/lucide-svelte/dist/icons/layers.svelte
Layers[FILENAME] = "node_modules/lucide-svelte/dist/icons/layers.svelte";
function Layers($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Layers);
  const iconNode = [
    [
      "path",
      {
        "d": "M12.83 2.18a2 2 0 0 0-1.66 0L2.6 6.08a1 1 0 0 0 0 1.83l8.58 3.91a2 2 0 0 0 1.66 0l8.58-3.9a1 1 0 0 0 0-1.83z"
      }
    ],
    [
      "path",
      {
        "d": "M2 12a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 12"
      }
    ],
    [
      "path",
      {
        "d": "M2 17a1 1 0 0 0 .58.91l8.6 3.91a2 2 0 0 0 1.65 0l8.58-3.9A1 1 0 0 0 22 17"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "layers" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Layers, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Layers,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Layers = hmr(Layers, () => Layers[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Layers[HMR].source;
    set(Layers[HMR].source, module.default[HMR].original);
  });
}
var layers_default = Layers;

// node_modules/lucide-svelte/dist/icons/layout-dashboard.svelte
Layout_dashboard[FILENAME] = "node_modules/lucide-svelte/dist/icons/layout-dashboard.svelte";
function Layout_dashboard($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Layout_dashboard);
  const iconNode = [
    [
      "rect",
      { "width": "7", "height": "9", "x": "3", "y": "3", "rx": "1" }
    ],
    [
      "rect",
      { "width": "7", "height": "5", "x": "14", "y": "3", "rx": "1" }
    ],
    [
      "rect",
      { "width": "7", "height": "9", "x": "14", "y": "12", "rx": "1" }
    ],
    [
      "rect",
      { "width": "7", "height": "5", "x": "3", "y": "16", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "layout-dashboard" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Layout_dashboard, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Layout_dashboard,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Layout_dashboard = hmr(Layout_dashboard, () => Layout_dashboard[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Layout_dashboard[HMR].source;
    set(Layout_dashboard[HMR].source, module.default[HMR].original);
  });
}
var layout_dashboard_default = Layout_dashboard;

// node_modules/lucide-svelte/dist/icons/layout-grid.svelte
Layout_grid[FILENAME] = "node_modules/lucide-svelte/dist/icons/layout-grid.svelte";
function Layout_grid($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Layout_grid);
  const iconNode = [
    [
      "rect",
      { "width": "7", "height": "7", "x": "3", "y": "3", "rx": "1" }
    ],
    [
      "rect",
      { "width": "7", "height": "7", "x": "14", "y": "3", "rx": "1" }
    ],
    [
      "rect",
      { "width": "7", "height": "7", "x": "14", "y": "14", "rx": "1" }
    ],
    [
      "rect",
      { "width": "7", "height": "7", "x": "3", "y": "14", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "layout-grid" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Layout_grid, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Layout_grid,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Layout_grid = hmr(Layout_grid, () => Layout_grid[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Layout_grid[HMR].source;
    set(Layout_grid[HMR].source, module.default[HMR].original);
  });
}
var layout_grid_default = Layout_grid;

// node_modules/lucide-svelte/dist/icons/layout-list.svelte
Layout_list[FILENAME] = "node_modules/lucide-svelte/dist/icons/layout-list.svelte";
function Layout_list($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Layout_list);
  const iconNode = [
    [
      "rect",
      { "width": "7", "height": "7", "x": "3", "y": "3", "rx": "1" }
    ],
    [
      "rect",
      { "width": "7", "height": "7", "x": "3", "y": "14", "rx": "1" }
    ],
    ["path", { "d": "M14 4h7" }],
    ["path", { "d": "M14 9h7" }],
    ["path", { "d": "M14 15h7" }],
    ["path", { "d": "M14 20h7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "layout-list" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Layout_list, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Layout_list,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Layout_list = hmr(Layout_list, () => Layout_list[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Layout_list[HMR].source;
    set(Layout_list[HMR].source, module.default[HMR].original);
  });
}
var layout_list_default = Layout_list;

// node_modules/lucide-svelte/dist/icons/layout-panel-left.svelte
Layout_panel_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/layout-panel-left.svelte";
function Layout_panel_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Layout_panel_left);
  const iconNode = [
    [
      "rect",
      { "width": "7", "height": "18", "x": "3", "y": "3", "rx": "1" }
    ],
    [
      "rect",
      { "width": "7", "height": "7", "x": "14", "y": "3", "rx": "1" }
    ],
    [
      "rect",
      { "width": "7", "height": "7", "x": "14", "y": "14", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "layout-panel-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Layout_panel_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Layout_panel_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Layout_panel_left = hmr(Layout_panel_left, () => Layout_panel_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Layout_panel_left[HMR].source;
    set(Layout_panel_left[HMR].source, module.default[HMR].original);
  });
}
var layout_panel_left_default = Layout_panel_left;

// node_modules/lucide-svelte/dist/icons/layout-panel-top.svelte
Layout_panel_top[FILENAME] = "node_modules/lucide-svelte/dist/icons/layout-panel-top.svelte";
function Layout_panel_top($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Layout_panel_top);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "7", "x": "3", "y": "3", "rx": "1" }
    ],
    [
      "rect",
      { "width": "7", "height": "7", "x": "3", "y": "14", "rx": "1" }
    ],
    [
      "rect",
      { "width": "7", "height": "7", "x": "14", "y": "14", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "layout-panel-top" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Layout_panel_top, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Layout_panel_top,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Layout_panel_top = hmr(Layout_panel_top, () => Layout_panel_top[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Layout_panel_top[HMR].source;
    set(Layout_panel_top[HMR].source, module.default[HMR].original);
  });
}
var layout_panel_top_default = Layout_panel_top;

// node_modules/lucide-svelte/dist/icons/leaf.svelte
Leaf[FILENAME] = "node_modules/lucide-svelte/dist/icons/leaf.svelte";
function Leaf($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Leaf);
  const iconNode = [
    [
      "path",
      {
        "d": "M11 20A7 7 0 0 1 9.8 6.1C15.5 5 17 4.48 19 2c1 2 2 4.18 2 8 0 5.5-4.78 10-10 10Z"
      }
    ],
    [
      "path",
      { "d": "M2 21c0-3 1.85-5.36 5.08-6C9.5 14.52 12 13 13 12" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "leaf" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Leaf, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Leaf,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Leaf = hmr(Leaf, () => Leaf[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Leaf[HMR].source;
    set(Leaf[HMR].source, module.default[HMR].original);
  });
}
var leaf_default = Leaf;

// node_modules/lucide-svelte/dist/icons/layout-template.svelte
Layout_template[FILENAME] = "node_modules/lucide-svelte/dist/icons/layout-template.svelte";
function Layout_template($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Layout_template);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "7", "x": "3", "y": "3", "rx": "1" }
    ],
    [
      "rect",
      { "width": "9", "height": "7", "x": "3", "y": "14", "rx": "1" }
    ],
    [
      "rect",
      { "width": "5", "height": "7", "x": "16", "y": "14", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "layout-template" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Layout_template, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Layout_template,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Layout_template = hmr(Layout_template, () => Layout_template[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Layout_template[HMR].source;
    set(Layout_template[HMR].source, module.default[HMR].original);
  });
}
var layout_template_default = Layout_template;

// node_modules/lucide-svelte/dist/icons/leafy-green.svelte
Leafy_green[FILENAME] = "node_modules/lucide-svelte/dist/icons/leafy-green.svelte";
function Leafy_green($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Leafy_green);
  const iconNode = [
    [
      "path",
      {
        "d": "M2 22c1.25-.987 2.27-1.975 3.9-2.2a5.56 5.56 0 0 1 3.8 1.5 4 4 0 0 0 6.187-2.353 3.5 3.5 0 0 0 3.69-5.116A3.5 3.5 0 0 0 20.95 8 3.5 3.5 0 1 0 16 3.05a3.5 3.5 0 0 0-5.831 1.373 3.5 3.5 0 0 0-5.116 3.69 4 4 0 0 0-2.348 6.155C3.499 15.42 4.409 16.712 4.2 18.1 3.926 19.743 3.014 20.732 2 22"
      }
    ],
    ["path", { "d": "M2 22 17 7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "leafy-green" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Leafy_green, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Leafy_green,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Leafy_green = hmr(Leafy_green, () => Leafy_green[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Leafy_green[HMR].source;
    set(Leafy_green[HMR].source, module.default[HMR].original);
  });
}
var leafy_green_default = Leafy_green;

// node_modules/lucide-svelte/dist/icons/lectern.svelte
Lectern[FILENAME] = "node_modules/lucide-svelte/dist/icons/lectern.svelte";
function Lectern($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Lectern);
  const iconNode = [
    [
      "path",
      {
        "d": "M16 12h3a2 2 0 0 0 1.902-1.38l1.056-3.333A1 1 0 0 0 21 6H3a1 1 0 0 0-.958 1.287l1.056 3.334A2 2 0 0 0 5 12h3"
      }
    ],
    ["path", { "d": "M18 6V3a1 1 0 0 0-1-1h-3" }],
    [
      "rect",
      { "width": "8", "height": "12", "x": "8", "y": "10", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "lectern" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Lectern, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Lectern,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lectern = hmr(Lectern, () => Lectern[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lectern[HMR].source;
    set(Lectern[HMR].source, module.default[HMR].original);
  });
}
var lectern_default = Lectern;

// node_modules/lucide-svelte/dist/icons/letter-text.svelte
Letter_text[FILENAME] = "node_modules/lucide-svelte/dist/icons/letter-text.svelte";
function Letter_text($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Letter_text);
  const iconNode = [
    ["path", { "d": "M15 12h6" }],
    ["path", { "d": "M15 6h6" }],
    ["path", { "d": "m3 13 3.553-7.724a.5.5 0 0 1 .894 0L11 13" }],
    ["path", { "d": "M3 18h18" }],
    ["path", { "d": "M3.92 11h6.16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "letter-text" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Letter_text, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Letter_text,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Letter_text = hmr(Letter_text, () => Letter_text[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Letter_text[HMR].source;
    set(Letter_text[HMR].source, module.default[HMR].original);
  });
}
var letter_text_default = Letter_text;

// node_modules/lucide-svelte/dist/icons/library-big.svelte
Library_big[FILENAME] = "node_modules/lucide-svelte/dist/icons/library-big.svelte";
function Library_big($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Library_big);
  const iconNode = [
    [
      "rect",
      { "width": "8", "height": "18", "x": "3", "y": "3", "rx": "1" }
    ],
    ["path", { "d": "M7 3v18" }],
    [
      "path",
      {
        "d": "M20.4 18.9c.2.5-.1 1.1-.6 1.3l-1.9.7c-.5.2-1.1-.1-1.3-.6L11.1 5.1c-.2-.5.1-1.1.6-1.3l1.9-.7c.5-.2 1.1.1 1.3.6Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "library-big" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Library_big, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Library_big,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Library_big = hmr(Library_big, () => Library_big[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Library_big[HMR].source;
    set(Library_big[HMR].source, module.default[HMR].original);
  });
}
var library_big_default = Library_big;

// node_modules/lucide-svelte/dist/icons/library.svelte
Library[FILENAME] = "node_modules/lucide-svelte/dist/icons/library.svelte";
function Library($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Library);
  const iconNode = [
    ["path", { "d": "m16 6 4 14" }],
    ["path", { "d": "M12 6v14" }],
    ["path", { "d": "M8 8v12" }],
    ["path", { "d": "M4 4v16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "library" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Library, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Library,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Library = hmr(Library, () => Library[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Library[HMR].source;
    set(Library[HMR].source, module.default[HMR].original);
  });
}
var library_default = Library;

// node_modules/lucide-svelte/dist/icons/life-buoy.svelte
Life_buoy[FILENAME] = "node_modules/lucide-svelte/dist/icons/life-buoy.svelte";
function Life_buoy($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Life_buoy);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "m4.93 4.93 4.24 4.24" }],
    ["path", { "d": "m14.83 9.17 4.24-4.24" }],
    ["path", { "d": "m14.83 14.83 4.24 4.24" }],
    ["path", { "d": "m9.17 14.83-4.24 4.24" }],
    ["circle", { "cx": "12", "cy": "12", "r": "4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "life-buoy" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Life_buoy, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Life_buoy,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Life_buoy = hmr(Life_buoy, () => Life_buoy[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Life_buoy[HMR].source;
    set(Life_buoy[HMR].source, module.default[HMR].original);
  });
}
var life_buoy_default = Life_buoy;

// node_modules/lucide-svelte/dist/icons/ligature.svelte
Ligature[FILENAME] = "node_modules/lucide-svelte/dist/icons/ligature.svelte";
function Ligature($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ligature);
  const iconNode = [
    ["path", { "d": "M14 12h2v8" }],
    ["path", { "d": "M14 20h4" }],
    ["path", { "d": "M6 12h4" }],
    ["path", { "d": "M6 20h4" }],
    ["path", { "d": "M8 20V8a4 4 0 0 1 7.464-2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ligature" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ligature, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ligature,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ligature = hmr(Ligature, () => Ligature[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ligature[HMR].source;
    set(Ligature[HMR].source, module.default[HMR].original);
  });
}
var ligature_default = Ligature;

// node_modules/lucide-svelte/dist/icons/lightbulb-off.svelte
Lightbulb_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/lightbulb-off.svelte";
function Lightbulb_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Lightbulb_off);
  const iconNode = [
    [
      "path",
      { "d": "M16.8 11.2c.8-.9 1.2-2 1.2-3.2a6 6 0 0 0-9.3-5" }
    ],
    ["path", { "d": "m2 2 20 20" }],
    [
      "path",
      { "d": "M6.3 6.3a4.67 4.67 0 0 0 1.2 5.2c.7.7 1.3 1.5 1.5 2.5" }
    ],
    ["path", { "d": "M9 18h6" }],
    ["path", { "d": "M10 22h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "lightbulb-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Lightbulb_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Lightbulb_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lightbulb_off = hmr(Lightbulb_off, () => Lightbulb_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lightbulb_off[HMR].source;
    set(Lightbulb_off[HMR].source, module.default[HMR].original);
  });
}
var lightbulb_off_default = Lightbulb_off;

// node_modules/lucide-svelte/dist/icons/lightbulb.svelte
Lightbulb[FILENAME] = "node_modules/lucide-svelte/dist/icons/lightbulb.svelte";
function Lightbulb($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Lightbulb);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 14c.2-1 .7-1.7 1.5-2.5 1-.9 1.5-2.2 1.5-3.5A6 6 0 0 0 6 8c0 1 .2 2.2 1.5 3.5.7.7 1.3 1.5 1.5 2.5"
      }
    ],
    ["path", { "d": "M9 18h6" }],
    ["path", { "d": "M10 22h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "lightbulb" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Lightbulb, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Lightbulb,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lightbulb = hmr(Lightbulb, () => Lightbulb[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lightbulb[HMR].source;
    set(Lightbulb[HMR].source, module.default[HMR].original);
  });
}
var lightbulb_default = Lightbulb;

// node_modules/lucide-svelte/dist/icons/line-squiggle.svelte
Line_squiggle[FILENAME] = "node_modules/lucide-svelte/dist/icons/line-squiggle.svelte";
function Line_squiggle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Line_squiggle);
  const iconNode = [
    [
      "path",
      {
        "d": "M7 3.5c5-2 7 2.5 3 4C1.5 10 2 15 5 16c5 2 9-10 14-7s.5 13.5-4 12c-5-2.5.5-11 6-2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "line-squiggle" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Line_squiggle, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Line_squiggle,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Line_squiggle = hmr(Line_squiggle, () => Line_squiggle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Line_squiggle[HMR].source;
    set(Line_squiggle[HMR].source, module.default[HMR].original);
  });
}
var line_squiggle_default = Line_squiggle;

// node_modules/lucide-svelte/dist/icons/link-2-off.svelte
Link_2_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/link-2-off.svelte";
function Link_2_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Link_2_off);
  const iconNode = [
    ["path", { "d": "M9 17H7A5 5 0 0 1 7 7" }],
    ["path", { "d": "M15 7h2a5 5 0 0 1 4 8" }],
    ["line", { "x1": "8", "x2": "12", "y1": "12", "y2": "12" }],
    ["line", { "x1": "2", "x2": "22", "y1": "2", "y2": "22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "link-2-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Link_2_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Link_2_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Link_2_off = hmr(Link_2_off, () => Link_2_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Link_2_off[HMR].source;
    set(Link_2_off[HMR].source, module.default[HMR].original);
  });
}
var link_2_off_default = Link_2_off;

// node_modules/lucide-svelte/dist/icons/link-2.svelte
Link_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/link-2.svelte";
function Link_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Link_2);
  const iconNode = [
    ["path", { "d": "M9 17H7A5 5 0 0 1 7 7h2" }],
    ["path", { "d": "M15 7h2a5 5 0 1 1 0 10h-2" }],
    ["line", { "x1": "8", "x2": "16", "y1": "12", "y2": "12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "link-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Link_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Link_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Link_2 = hmr(Link_2, () => Link_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Link_2[HMR].source;
    set(Link_2[HMR].source, module.default[HMR].original);
  });
}
var link_2_default = Link_2;

// node_modules/lucide-svelte/dist/icons/link.svelte
Link[FILENAME] = "node_modules/lucide-svelte/dist/icons/link.svelte";
function Link($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Link);
  const iconNode = [
    [
      "path",
      {
        "d": "M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"
      }
    ],
    [
      "path",
      {
        "d": "M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "link" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Link, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Link,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Link = hmr(Link, () => Link[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Link[HMR].source;
    set(Link[HMR].source, module.default[HMR].original);
  });
}
var link_default = Link;

// node_modules/lucide-svelte/dist/icons/list-check.svelte
List_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/list-check.svelte";
function List_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, List_check);
  const iconNode = [
    ["path", { "d": "M11 18H3" }],
    ["path", { "d": "m15 18 2 2 4-4" }],
    ["path", { "d": "M16 12H3" }],
    ["path", { "d": "M16 6H3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "list-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(List_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    List_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List_check = hmr(List_check, () => List_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List_check[HMR].source;
    set(List_check[HMR].source, module.default[HMR].original);
  });
}
var list_check_default = List_check;

// node_modules/lucide-svelte/dist/icons/linkedin.svelte
Linkedin[FILENAME] = "node_modules/lucide-svelte/dist/icons/linkedin.svelte";
function Linkedin($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Linkedin);
  const iconNode = [
    [
      "path",
      {
        "d": "M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"
      }
    ],
    ["rect", { "width": "4", "height": "12", "x": "2", "y": "9" }],
    ["circle", { "cx": "4", "cy": "4", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "linkedin" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Linkedin, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Linkedin,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Linkedin = hmr(Linkedin, () => Linkedin[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Linkedin[HMR].source;
    set(Linkedin[HMR].source, module.default[HMR].original);
  });
}
var linkedin_default = Linkedin;

// node_modules/lucide-svelte/dist/icons/list-checks.svelte
List_checks[FILENAME] = "node_modules/lucide-svelte/dist/icons/list-checks.svelte";
function List_checks($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, List_checks);
  const iconNode = [
    ["path", { "d": "m3 17 2 2 4-4" }],
    ["path", { "d": "m3 7 2 2 4-4" }],
    ["path", { "d": "M13 6h8" }],
    ["path", { "d": "M13 12h8" }],
    ["path", { "d": "M13 18h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "list-checks" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(List_checks, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    List_checks,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List_checks = hmr(List_checks, () => List_checks[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List_checks[HMR].source;
    set(List_checks[HMR].source, module.default[HMR].original);
  });
}
var list_checks_default = List_checks;

// node_modules/lucide-svelte/dist/icons/list-collapse.svelte
List_collapse[FILENAME] = "node_modules/lucide-svelte/dist/icons/list-collapse.svelte";
function List_collapse($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, List_collapse);
  const iconNode = [
    ["path", { "d": "M10 12h11" }],
    ["path", { "d": "M10 18h11" }],
    ["path", { "d": "M10 6h11" }],
    ["path", { "d": "m3 10 3-3-3-3" }],
    ["path", { "d": "m3 20 3-3-3-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "list-collapse" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(List_collapse, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    List_collapse,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List_collapse = hmr(List_collapse, () => List_collapse[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List_collapse[HMR].source;
    set(List_collapse[HMR].source, module.default[HMR].original);
  });
}
var list_collapse_default = List_collapse;

// node_modules/lucide-svelte/dist/icons/list-end.svelte
List_end[FILENAME] = "node_modules/lucide-svelte/dist/icons/list-end.svelte";
function List_end($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, List_end);
  const iconNode = [
    ["path", { "d": "M16 12H3" }],
    ["path", { "d": "M16 6H3" }],
    ["path", { "d": "M10 18H3" }],
    ["path", { "d": "M21 6v10a2 2 0 0 1-2 2h-5" }],
    ["path", { "d": "m16 16-2 2 2 2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "list-end" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(List_end, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    List_end,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List_end = hmr(List_end, () => List_end[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List_end[HMR].source;
    set(List_end[HMR].source, module.default[HMR].original);
  });
}
var list_end_default = List_end;

// node_modules/lucide-svelte/dist/icons/list-filter-plus.svelte
List_filter_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/list-filter-plus.svelte";
function List_filter_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, List_filter_plus);
  const iconNode = [
    ["path", { "d": "M10 18h4" }],
    ["path", { "d": "M11 6H3" }],
    ["path", { "d": "M15 6h6" }],
    ["path", { "d": "M18 9V3" }],
    ["path", { "d": "M7 12h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "list-filter-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(List_filter_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    List_filter_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List_filter_plus = hmr(List_filter_plus, () => List_filter_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List_filter_plus[HMR].source;
    set(List_filter_plus[HMR].source, module.default[HMR].original);
  });
}
var list_filter_plus_default = List_filter_plus;

// node_modules/lucide-svelte/dist/icons/list-filter.svelte
List_filter[FILENAME] = "node_modules/lucide-svelte/dist/icons/list-filter.svelte";
function List_filter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, List_filter);
  const iconNode = [
    ["path", { "d": "M3 6h18" }],
    ["path", { "d": "M7 12h10" }],
    ["path", { "d": "M10 18h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "list-filter" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(List_filter, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    List_filter,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List_filter = hmr(List_filter, () => List_filter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List_filter[HMR].source;
    set(List_filter[HMR].source, module.default[HMR].original);
  });
}
var list_filter_default = List_filter;

// node_modules/lucide-svelte/dist/icons/list-minus.svelte
List_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/list-minus.svelte";
function List_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, List_minus);
  const iconNode = [
    ["path", { "d": "M11 12H3" }],
    ["path", { "d": "M16 6H3" }],
    ["path", { "d": "M16 18H3" }],
    ["path", { "d": "M21 12h-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "list-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(List_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    List_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List_minus = hmr(List_minus, () => List_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List_minus[HMR].source;
    set(List_minus[HMR].source, module.default[HMR].original);
  });
}
var list_minus_default = List_minus;

// node_modules/lucide-svelte/dist/icons/list-music.svelte
List_music[FILENAME] = "node_modules/lucide-svelte/dist/icons/list-music.svelte";
function List_music($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, List_music);
  const iconNode = [
    ["path", { "d": "M21 15V6" }],
    [
      "path",
      { "d": "M18.5 18a2.5 2.5 0 1 0 0-5 2.5 2.5 0 0 0 0 5Z" }
    ],
    ["path", { "d": "M12 12H3" }],
    ["path", { "d": "M16 6H3" }],
    ["path", { "d": "M12 18H3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "list-music" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(List_music, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    List_music,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List_music = hmr(List_music, () => List_music[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List_music[HMR].source;
    set(List_music[HMR].source, module.default[HMR].original);
  });
}
var list_music_default = List_music;

// node_modules/lucide-svelte/dist/icons/list-ordered.svelte
List_ordered[FILENAME] = "node_modules/lucide-svelte/dist/icons/list-ordered.svelte";
function List_ordered($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, List_ordered);
  const iconNode = [
    ["path", { "d": "M10 12h11" }],
    ["path", { "d": "M10 18h11" }],
    ["path", { "d": "M10 6h11" }],
    ["path", { "d": "M4 10h2" }],
    ["path", { "d": "M4 6h1v4" }],
    ["path", { "d": "M6 18H4c0-1 2-2 2-3s-1-1.5-2-1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "list-ordered" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(List_ordered, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    List_ordered,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List_ordered = hmr(List_ordered, () => List_ordered[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List_ordered[HMR].source;
    set(List_ordered[HMR].source, module.default[HMR].original);
  });
}
var list_ordered_default = List_ordered;

// node_modules/lucide-svelte/dist/icons/list-plus.svelte
List_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/list-plus.svelte";
function List_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, List_plus);
  const iconNode = [
    ["path", { "d": "M11 12H3" }],
    ["path", { "d": "M16 6H3" }],
    ["path", { "d": "M16 18H3" }],
    ["path", { "d": "M18 9v6" }],
    ["path", { "d": "M21 12h-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "list-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(List_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    List_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List_plus = hmr(List_plus, () => List_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List_plus[HMR].source;
    set(List_plus[HMR].source, module.default[HMR].original);
  });
}
var list_plus_default = List_plus;

// node_modules/lucide-svelte/dist/icons/list-restart.svelte
List_restart[FILENAME] = "node_modules/lucide-svelte/dist/icons/list-restart.svelte";
function List_restart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, List_restart);
  const iconNode = [
    ["path", { "d": "M21 6H3" }],
    ["path", { "d": "M7 12H3" }],
    ["path", { "d": "M7 18H3" }],
    [
      "path",
      {
        "d": "M12 18a5 5 0 0 0 9-3 4.5 4.5 0 0 0-4.5-4.5c-1.33 0-2.54.54-3.41 1.41L11 14"
      }
    ],
    ["path", { "d": "M11 10v4h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "list-restart" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(List_restart, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    List_restart,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List_restart = hmr(List_restart, () => List_restart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List_restart[HMR].source;
    set(List_restart[HMR].source, module.default[HMR].original);
  });
}
var list_restart_default = List_restart;

// node_modules/lucide-svelte/dist/icons/list-start.svelte
List_start[FILENAME] = "node_modules/lucide-svelte/dist/icons/list-start.svelte";
function List_start($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, List_start);
  const iconNode = [
    ["path", { "d": "M16 12H3" }],
    ["path", { "d": "M16 18H3" }],
    ["path", { "d": "M10 6H3" }],
    ["path", { "d": "M21 18V8a2 2 0 0 0-2-2h-5" }],
    ["path", { "d": "m16 8-2-2 2-2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "list-start" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(List_start, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    List_start,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List_start = hmr(List_start, () => List_start[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List_start[HMR].source;
    set(List_start[HMR].source, module.default[HMR].original);
  });
}
var list_start_default = List_start;

// node_modules/lucide-svelte/dist/icons/list-tree.svelte
List_tree[FILENAME] = "node_modules/lucide-svelte/dist/icons/list-tree.svelte";
function List_tree($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, List_tree);
  const iconNode = [
    ["path", { "d": "M21 12h-8" }],
    ["path", { "d": "M21 6H8" }],
    ["path", { "d": "M21 18h-8" }],
    ["path", { "d": "M3 6v4c0 1.1.9 2 2 2h3" }],
    ["path", { "d": "M3 10v6c0 1.1.9 2 2 2h3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "list-tree" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(List_tree, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    List_tree,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List_tree = hmr(List_tree, () => List_tree[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List_tree[HMR].source;
    set(List_tree[HMR].source, module.default[HMR].original);
  });
}
var list_tree_default = List_tree;

// node_modules/lucide-svelte/dist/icons/list-todo.svelte
List_todo[FILENAME] = "node_modules/lucide-svelte/dist/icons/list-todo.svelte";
function List_todo($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, List_todo);
  const iconNode = [
    [
      "rect",
      { "x": "3", "y": "5", "width": "6", "height": "6", "rx": "1" }
    ],
    ["path", { "d": "m3 17 2 2 4-4" }],
    ["path", { "d": "M13 6h8" }],
    ["path", { "d": "M13 12h8" }],
    ["path", { "d": "M13 18h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "list-todo" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(List_todo, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    List_todo,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List_todo = hmr(List_todo, () => List_todo[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List_todo[HMR].source;
    set(List_todo[HMR].source, module.default[HMR].original);
  });
}
var list_todo_default = List_todo;

// node_modules/lucide-svelte/dist/icons/list-video.svelte
List_video[FILENAME] = "node_modules/lucide-svelte/dist/icons/list-video.svelte";
function List_video($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, List_video);
  const iconNode = [
    ["path", { "d": "M12 12H3" }],
    ["path", { "d": "M12 18H3" }],
    ["path", { "d": "M16 6H3" }],
    [
      "path",
      {
        "d": "M21.033 14.44a.647.647 0 0 1 0 1.12l-4.065 2.352a.645.645 0 0 1-.968-.56v-4.704a.645.645 0 0 1 .968-.56z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "list-video" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(List_video, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    List_video,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List_video = hmr(List_video, () => List_video[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List_video[HMR].source;
    set(List_video[HMR].source, module.default[HMR].original);
  });
}
var list_video_default = List_video;

// node_modules/lucide-svelte/dist/icons/list-x.svelte
List_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/list-x.svelte";
function List_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, List_x);
  const iconNode = [
    ["path", { "d": "M11 12H3" }],
    ["path", { "d": "M16 6H3" }],
    ["path", { "d": "M16 18H3" }],
    ["path", { "d": "m19 10-4 4" }],
    ["path", { "d": "m15 10 4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "list-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(List_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    List_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List_x = hmr(List_x, () => List_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List_x[HMR].source;
    set(List_x[HMR].source, module.default[HMR].original);
  });
}
var list_x_default = List_x;

// node_modules/lucide-svelte/dist/icons/list.svelte
List[FILENAME] = "node_modules/lucide-svelte/dist/icons/list.svelte";
function List($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, List);
  const iconNode = [
    ["path", { "d": "M3 12h.01" }],
    ["path", { "d": "M3 18h.01" }],
    ["path", { "d": "M3 6h.01" }],
    ["path", { "d": "M8 12h13" }],
    ["path", { "d": "M8 18h13" }],
    ["path", { "d": "M8 6h13" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "list" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(List, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    List,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  List = hmr(List, () => List[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List[HMR].source;
    set(List[HMR].source, module.default[HMR].original);
  });
}
var list_default = List;

// node_modules/lucide-svelte/dist/icons/loader-circle.svelte
Loader_circle[FILENAME] = "node_modules/lucide-svelte/dist/icons/loader-circle.svelte";
function Loader_circle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Loader_circle);
  const iconNode = [["path", { "d": "M21 12a9 9 0 1 1-6.219-8.56" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "loader-circle" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Loader_circle, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Loader_circle,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Loader_circle = hmr(Loader_circle, () => Loader_circle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Loader_circle[HMR].source;
    set(Loader_circle[HMR].source, module.default[HMR].original);
  });
}
var loader_circle_default = Loader_circle;

// node_modules/lucide-svelte/dist/icons/loader-pinwheel.svelte
Loader_pinwheel[FILENAME] = "node_modules/lucide-svelte/dist/icons/loader-pinwheel.svelte";
function Loader_pinwheel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Loader_pinwheel);
  const iconNode = [
    ["path", { "d": "M22 12a1 1 0 0 1-10 0 1 1 0 0 0-10 0" }],
    ["path", { "d": "M7 20.7a1 1 0 1 1 5-8.7 1 1 0 1 0 5-8.6" }],
    ["path", { "d": "M7 3.3a1 1 0 1 1 5 8.6 1 1 0 1 0 5 8.6" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "loader-pinwheel" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Loader_pinwheel, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Loader_pinwheel,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Loader_pinwheel = hmr(Loader_pinwheel, () => Loader_pinwheel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Loader_pinwheel[HMR].source;
    set(Loader_pinwheel[HMR].source, module.default[HMR].original);
  });
}
var loader_pinwheel_default = Loader_pinwheel;

// node_modules/lucide-svelte/dist/icons/loader.svelte
Loader[FILENAME] = "node_modules/lucide-svelte/dist/icons/loader.svelte";
function Loader($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Loader);
  const iconNode = [
    ["path", { "d": "M12 2v4" }],
    ["path", { "d": "m16.2 7.8 2.9-2.9" }],
    ["path", { "d": "M18 12h4" }],
    ["path", { "d": "m16.2 16.2 2.9 2.9" }],
    ["path", { "d": "M12 18v4" }],
    ["path", { "d": "m4.9 19.1 2.9-2.9" }],
    ["path", { "d": "M2 12h4" }],
    ["path", { "d": "m4.9 4.9 2.9 2.9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "loader" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Loader, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Loader,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Loader = hmr(Loader, () => Loader[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Loader[HMR].source;
    set(Loader[HMR].source, module.default[HMR].original);
  });
}
var loader_default = Loader;

// node_modules/lucide-svelte/dist/icons/locate-fixed.svelte
Locate_fixed[FILENAME] = "node_modules/lucide-svelte/dist/icons/locate-fixed.svelte";
function Locate_fixed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Locate_fixed);
  const iconNode = [
    ["line", { "x1": "2", "x2": "5", "y1": "12", "y2": "12" }],
    ["line", { "x1": "19", "x2": "22", "y1": "12", "y2": "12" }],
    ["line", { "x1": "12", "x2": "12", "y1": "2", "y2": "5" }],
    ["line", { "x1": "12", "x2": "12", "y1": "19", "y2": "22" }],
    ["circle", { "cx": "12", "cy": "12", "r": "7" }],
    ["circle", { "cx": "12", "cy": "12", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "locate-fixed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Locate_fixed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Locate_fixed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Locate_fixed = hmr(Locate_fixed, () => Locate_fixed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Locate_fixed[HMR].source;
    set(Locate_fixed[HMR].source, module.default[HMR].original);
  });
}
var locate_fixed_default = Locate_fixed;

// node_modules/lucide-svelte/dist/icons/locate-off.svelte
Locate_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/locate-off.svelte";
function Locate_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Locate_off);
  const iconNode = [
    ["path", { "d": "M12 19v3" }],
    ["path", { "d": "M12 2v3" }],
    ["path", { "d": "M18.89 13.24a7 7 0 0 0-8.13-8.13" }],
    ["path", { "d": "M19 12h3" }],
    ["path", { "d": "M2 12h3" }],
    ["path", { "d": "m2 2 20 20" }],
    ["path", { "d": "M7.05 7.05a7 7 0 0 0 9.9 9.9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "locate-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Locate_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Locate_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Locate_off = hmr(Locate_off, () => Locate_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Locate_off[HMR].source;
    set(Locate_off[HMR].source, module.default[HMR].original);
  });
}
var locate_off_default = Locate_off;

// node_modules/lucide-svelte/dist/icons/locate.svelte
Locate[FILENAME] = "node_modules/lucide-svelte/dist/icons/locate.svelte";
function Locate($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Locate);
  const iconNode = [
    ["line", { "x1": "2", "x2": "5", "y1": "12", "y2": "12" }],
    ["line", { "x1": "19", "x2": "22", "y1": "12", "y2": "12" }],
    ["line", { "x1": "12", "x2": "12", "y1": "2", "y2": "5" }],
    ["line", { "x1": "12", "x2": "12", "y1": "19", "y2": "22" }],
    ["circle", { "cx": "12", "cy": "12", "r": "7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "locate" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Locate, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Locate,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Locate = hmr(Locate, () => Locate[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Locate[HMR].source;
    set(Locate[HMR].source, module.default[HMR].original);
  });
}
var locate_default = Locate;

// node_modules/lucide-svelte/dist/icons/lock-keyhole-open.svelte
Lock_keyhole_open[FILENAME] = "node_modules/lucide-svelte/dist/icons/lock-keyhole-open.svelte";
function Lock_keyhole_open($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Lock_keyhole_open);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "16", "r": "1" }],
    [
      "rect",
      {
        "width": "18",
        "height": "12",
        "x": "3",
        "y": "10",
        "rx": "2"
      }
    ],
    ["path", { "d": "M7 10V7a5 5 0 0 1 9.33-2.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "lock-keyhole-open" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Lock_keyhole_open, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Lock_keyhole_open,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lock_keyhole_open = hmr(Lock_keyhole_open, () => Lock_keyhole_open[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lock_keyhole_open[HMR].source;
    set(Lock_keyhole_open[HMR].source, module.default[HMR].original);
  });
}
var lock_keyhole_open_default = Lock_keyhole_open;

// node_modules/lucide-svelte/dist/icons/lock-keyhole.svelte
Lock_keyhole[FILENAME] = "node_modules/lucide-svelte/dist/icons/lock-keyhole.svelte";
function Lock_keyhole($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Lock_keyhole);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "16", "r": "1" }],
    [
      "rect",
      {
        "x": "3",
        "y": "10",
        "width": "18",
        "height": "12",
        "rx": "2"
      }
    ],
    ["path", { "d": "M7 10V7a5 5 0 0 1 10 0v3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "lock-keyhole" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Lock_keyhole, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Lock_keyhole,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lock_keyhole = hmr(Lock_keyhole, () => Lock_keyhole[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lock_keyhole[HMR].source;
    set(Lock_keyhole[HMR].source, module.default[HMR].original);
  });
}
var lock_keyhole_default = Lock_keyhole;

// node_modules/lucide-svelte/dist/icons/lock-open.svelte
Lock_open[FILENAME] = "node_modules/lucide-svelte/dist/icons/lock-open.svelte";
function Lock_open($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Lock_open);
  const iconNode = [
    [
      "rect",
      {
        "width": "18",
        "height": "11",
        "x": "3",
        "y": "11",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["path", { "d": "M7 11V7a5 5 0 0 1 9.9-1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "lock-open" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Lock_open, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Lock_open,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lock_open = hmr(Lock_open, () => Lock_open[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lock_open[HMR].source;
    set(Lock_open[HMR].source, module.default[HMR].original);
  });
}
var lock_open_default = Lock_open;

// node_modules/lucide-svelte/dist/icons/lock.svelte
Lock[FILENAME] = "node_modules/lucide-svelte/dist/icons/lock.svelte";
function Lock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Lock);
  const iconNode = [
    [
      "rect",
      {
        "width": "18",
        "height": "11",
        "x": "3",
        "y": "11",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["path", { "d": "M7 11V7a5 5 0 0 1 10 0v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "lock" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Lock, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Lock,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lock = hmr(Lock, () => Lock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lock[HMR].source;
    set(Lock[HMR].source, module.default[HMR].original);
  });
}
var lock_default = Lock;

// node_modules/lucide-svelte/dist/icons/log-in.svelte
Log_in[FILENAME] = "node_modules/lucide-svelte/dist/icons/log-in.svelte";
function Log_in($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Log_in);
  const iconNode = [
    ["path", { "d": "m10 17 5-5-5-5" }],
    ["path", { "d": "M15 12H3" }],
    ["path", { "d": "M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "log-in" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Log_in, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Log_in,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Log_in = hmr(Log_in, () => Log_in[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Log_in[HMR].source;
    set(Log_in[HMR].source, module.default[HMR].original);
  });
}
var log_in_default = Log_in;

// node_modules/lucide-svelte/dist/icons/log-out.svelte
Log_out[FILENAME] = "node_modules/lucide-svelte/dist/icons/log-out.svelte";
function Log_out($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Log_out);
  const iconNode = [
    ["path", { "d": "m16 17 5-5-5-5" }],
    ["path", { "d": "M21 12H9" }],
    ["path", { "d": "M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "log-out" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Log_out, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Log_out,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Log_out = hmr(Log_out, () => Log_out[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Log_out[HMR].source;
    set(Log_out[HMR].source, module.default[HMR].original);
  });
}
var log_out_default = Log_out;

// node_modules/lucide-svelte/dist/icons/logs.svelte
Logs[FILENAME] = "node_modules/lucide-svelte/dist/icons/logs.svelte";
function Logs($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Logs);
  const iconNode = [
    ["path", { "d": "M13 12h8" }],
    ["path", { "d": "M13 18h8" }],
    ["path", { "d": "M13 6h8" }],
    ["path", { "d": "M3 12h1" }],
    ["path", { "d": "M3 18h1" }],
    ["path", { "d": "M3 6h1" }],
    ["path", { "d": "M8 12h1" }],
    ["path", { "d": "M8 18h1" }],
    ["path", { "d": "M8 6h1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "logs" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Logs, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Logs,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Logs = hmr(Logs, () => Logs[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Logs[HMR].source;
    set(Logs[HMR].source, module.default[HMR].original);
  });
}
var logs_default = Logs;

// node_modules/lucide-svelte/dist/icons/lollipop.svelte
Lollipop[FILENAME] = "node_modules/lucide-svelte/dist/icons/lollipop.svelte";
function Lollipop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Lollipop);
  const iconNode = [
    ["circle", { "cx": "11", "cy": "11", "r": "8" }],
    ["path", { "d": "m21 21-4.3-4.3" }],
    [
      "path",
      { "d": "M11 11a2 2 0 0 0 4 0 4 4 0 0 0-8 0 6 6 0 0 0 12 0" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "lollipop" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Lollipop, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Lollipop,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Lollipop = hmr(Lollipop, () => Lollipop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Lollipop[HMR].source;
    set(Lollipop[HMR].source, module.default[HMR].original);
  });
}
var lollipop_default = Lollipop;

// node_modules/lucide-svelte/dist/icons/luggage.svelte
Luggage[FILENAME] = "node_modules/lucide-svelte/dist/icons/luggage.svelte";
function Luggage($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Luggage);
  const iconNode = [
    [
      "path",
      {
        "d": "M6 20a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2"
      }
    ],
    ["path", { "d": "M8 18V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v14" }],
    ["path", { "d": "M10 20h4" }],
    ["circle", { "cx": "16", "cy": "20", "r": "2" }],
    ["circle", { "cx": "8", "cy": "20", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "luggage" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Luggage, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Luggage,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Luggage = hmr(Luggage, () => Luggage[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Luggage[HMR].source;
    set(Luggage[HMR].source, module.default[HMR].original);
  });
}
var luggage_default = Luggage;

// node_modules/lucide-svelte/dist/icons/magnet.svelte
Magnet[FILENAME] = "node_modules/lucide-svelte/dist/icons/magnet.svelte";
function Magnet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Magnet);
  const iconNode = [
    ["path", { "d": "m12 15 4 4" }],
    [
      "path",
      {
        "d": "M2.352 10.648a1.205 1.205 0 0 0 0 1.704l2.296 2.296a1.205 1.205 0 0 0 1.704 0l6.029-6.029a1 1 0 1 1 3 3l-6.029 6.029a1.205 1.205 0 0 0 0 1.704l2.296 2.296a1.205 1.205 0 0 0 1.704 0l6.365-6.367A1 1 0 0 0 8.716 4.282z"
      }
    ],
    ["path", { "d": "m5 8 4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "magnet" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Magnet, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Magnet,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Magnet = hmr(Magnet, () => Magnet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Magnet[HMR].source;
    set(Magnet[HMR].source, module.default[HMR].original);
  });
}
var magnet_default = Magnet;

// node_modules/lucide-svelte/dist/icons/mail-check.svelte
Mail_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/mail-check.svelte";
function Mail_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mail_check);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8"
      }
    ],
    ["path", { "d": "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" }],
    ["path", { "d": "m16 19 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mail-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mail_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mail_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mail_check = hmr(Mail_check, () => Mail_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mail_check[HMR].source;
    set(Mail_check[HMR].source, module.default[HMR].original);
  });
}
var mail_check_default = Mail_check;

// node_modules/lucide-svelte/dist/icons/mail-minus.svelte
Mail_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/mail-minus.svelte";
function Mail_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mail_minus);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 15V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8"
      }
    ],
    ["path", { "d": "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" }],
    ["path", { "d": "M16 19h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mail-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mail_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mail_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mail_minus = hmr(Mail_minus, () => Mail_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mail_minus[HMR].source;
    set(Mail_minus[HMR].source, module.default[HMR].original);
  });
}
var mail_minus_default = Mail_minus;

// node_modules/lucide-svelte/dist/icons/mail-plus.svelte
Mail_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/mail-plus.svelte";
function Mail_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mail_plus);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h8"
      }
    ],
    ["path", { "d": "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" }],
    ["path", { "d": "M19 16v6" }],
    ["path", { "d": "M16 19h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mail-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mail_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mail_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mail_plus = hmr(Mail_plus, () => Mail_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mail_plus[HMR].source;
    set(Mail_plus[HMR].source, module.default[HMR].original);
  });
}
var mail_plus_default = Mail_plus;

// node_modules/lucide-svelte/dist/icons/mail-open.svelte
Mail_open[FILENAME] = "node_modules/lucide-svelte/dist/icons/mail-open.svelte";
function Mail_open($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mail_open);
  const iconNode = [
    [
      "path",
      {
        "d": "M21.2 8.4c.5.38.8.97.8 1.6v10a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V10a2 2 0 0 1 .8-1.6l8-6a2 2 0 0 1 2.4 0l8 6Z"
      }
    ],
    [
      "path",
      { "d": "m22 10-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 10" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mail-open" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mail_open, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mail_open,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mail_open = hmr(Mail_open, () => Mail_open[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mail_open[HMR].source;
    set(Mail_open[HMR].source, module.default[HMR].original);
  });
}
var mail_open_default = Mail_open;

// node_modules/lucide-svelte/dist/icons/mail-question-mark.svelte
Mail_question_mark[FILENAME] = "node_modules/lucide-svelte/dist/icons/mail-question-mark.svelte";
function Mail_question_mark($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mail_question_mark);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5"
      }
    ],
    ["path", { "d": "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" }],
    [
      "path",
      {
        "d": "M18 15.28c.2-.4.5-.8.9-1a2.1 2.1 0 0 1 2.6.4c.3.4.5.8.5 1.3 0 1.3-2 2-2 2"
      }
    ],
    ["path", { "d": "M20 22v.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mail-question-mark" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mail_question_mark, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mail_question_mark,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mail_question_mark = hmr(Mail_question_mark, () => Mail_question_mark[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mail_question_mark[HMR].source;
    set(Mail_question_mark[HMR].source, module.default[HMR].original);
  });
}
var mail_question_mark_default = Mail_question_mark;

// node_modules/lucide-svelte/dist/icons/mail-search.svelte
Mail_search[FILENAME] = "node_modules/lucide-svelte/dist/icons/mail-search.svelte";
function Mail_search($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mail_search);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 12.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h7.5"
      }
    ],
    ["path", { "d": "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" }],
    ["path", { "d": "M18 21a3 3 0 1 0 0-6 3 3 0 0 0 0 6Z" }],
    ["circle", { "cx": "18", "cy": "18", "r": "3" }],
    ["path", { "d": "m22 22-1.5-1.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mail-search" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mail_search, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mail_search,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mail_search = hmr(Mail_search, () => Mail_search[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mail_search[HMR].source;
    set(Mail_search[HMR].source, module.default[HMR].original);
  });
}
var mail_search_default = Mail_search;

// node_modules/lucide-svelte/dist/icons/mail-x.svelte
Mail_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/mail-x.svelte";
function Mail_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mail_x);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 13V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h9"
      }
    ],
    ["path", { "d": "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" }],
    ["path", { "d": "m17 17 4 4" }],
    ["path", { "d": "m21 17-4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mail-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mail_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mail_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mail_x = hmr(Mail_x, () => Mail_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mail_x[HMR].source;
    set(Mail_x[HMR].source, module.default[HMR].original);
  });
}
var mail_x_default = Mail_x;

// node_modules/lucide-svelte/dist/icons/mail-warning.svelte
Mail_warning[FILENAME] = "node_modules/lucide-svelte/dist/icons/mail-warning.svelte";
function Mail_warning($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mail_warning);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 10.5V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v12c0 1.1.9 2 2 2h12.5"
      }
    ],
    ["path", { "d": "m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7" }],
    ["path", { "d": "M20 14v4" }],
    ["path", { "d": "M20 22v.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mail-warning" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mail_warning, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mail_warning,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mail_warning = hmr(Mail_warning, () => Mail_warning[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mail_warning[HMR].source;
    set(Mail_warning[HMR].source, module.default[HMR].original);
  });
}
var mail_warning_default = Mail_warning;

// node_modules/lucide-svelte/dist/icons/mail.svelte
Mail[FILENAME] = "node_modules/lucide-svelte/dist/icons/mail.svelte";
function Mail($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mail);
  const iconNode = [
    ["path", { "d": "m22 7-8.991 5.727a2 2 0 0 1-2.009 0L2 7" }],
    [
      "rect",
      { "x": "2", "y": "4", "width": "20", "height": "16", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mail" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mail, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mail,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mail = hmr(Mail, () => Mail[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mail[HMR].source;
    set(Mail[HMR].source, module.default[HMR].original);
  });
}
var mail_default = Mail;

// node_modules/lucide-svelte/dist/icons/mailbox.svelte
Mailbox[FILENAME] = "node_modules/lucide-svelte/dist/icons/mailbox.svelte";
function Mailbox($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mailbox);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9.5C2 7 4 5 6.5 5H18c2.2 0 4 1.8 4 4v8Z"
      }
    ],
    ["polyline", { "points": "15,9 18,9 18,11" }],
    ["path", { "d": "M6.5 5C9 5 11 7 11 9.5V17a2 2 0 0 1-2 2" }],
    ["line", { "x1": "6", "x2": "7", "y1": "10", "y2": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mailbox" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mailbox, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mailbox,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mailbox = hmr(Mailbox, () => Mailbox[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mailbox[HMR].source;
    set(Mailbox[HMR].source, module.default[HMR].original);
  });
}
var mailbox_default = Mailbox;

// node_modules/lucide-svelte/dist/icons/mails.svelte
Mails[FILENAME] = "node_modules/lucide-svelte/dist/icons/mails.svelte";
function Mails($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mails);
  const iconNode = [
    [
      "path",
      {
        "d": "M17 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 1-1.732"
      }
    ],
    [
      "path",
      { "d": "m22 5.5-6.419 4.179a2 2 0 0 1-2.162 0L7 5.5" }
    ],
    [
      "rect",
      { "x": "7", "y": "3", "width": "15", "height": "12", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mails" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mails, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mails,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mails = hmr(Mails, () => Mails[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mails[HMR].source;
    set(Mails[HMR].source, module.default[HMR].original);
  });
}
var mails_default = Mails;

// node_modules/lucide-svelte/dist/icons/map-minus.svelte
Map_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/map-minus.svelte";
function Map_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Map_minus);
  const iconNode = [
    [
      "path",
      {
        "d": "m11 19-1.106-.552a2 2 0 0 0-1.788 0l-3.659 1.83A1 1 0 0 1 3 19.381V6.618a1 1 0 0 1 .553-.894l4.553-2.277a2 2 0 0 1 1.788 0l4.212 2.106a2 2 0 0 0 1.788 0l3.659-1.83A1 1 0 0 1 21 4.619V14"
      }
    ],
    ["path", { "d": "M15 5.764V14" }],
    ["path", { "d": "M21 18h-6" }],
    ["path", { "d": "M9 3.236v15" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "map-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Map_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Map_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Map_minus = hmr(Map_minus, () => Map_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Map_minus[HMR].source;
    set(Map_minus[HMR].source, module.default[HMR].original);
  });
}
var map_minus_default = Map_minus;

// node_modules/lucide-svelte/dist/icons/map-pin-check-inside.svelte
Map_pin_check_inside[FILENAME] = "node_modules/lucide-svelte/dist/icons/map-pin-check-inside.svelte";
function Map_pin_check_inside($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Map_pin_check_inside);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"
      }
    ],
    ["path", { "d": "m9 10 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "map-pin-check-inside" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Map_pin_check_inside, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Map_pin_check_inside,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Map_pin_check_inside = hmr(Map_pin_check_inside, () => Map_pin_check_inside[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Map_pin_check_inside[HMR].source;
    set(Map_pin_check_inside[HMR].source, module.default[HMR].original);
  });
}
var map_pin_check_inside_default = Map_pin_check_inside;

// node_modules/lucide-svelte/dist/icons/map-pin-check.svelte
Map_pin_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/map-pin-check.svelte";
function Map_pin_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Map_pin_check);
  const iconNode = [
    [
      "path",
      {
        "d": "M19.43 12.935c.357-.967.57-1.955.57-2.935a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32.197 32.197 0 0 0 .813-.728"
      }
    ],
    ["circle", { "cx": "12", "cy": "10", "r": "3" }],
    ["path", { "d": "m16 18 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "map-pin-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Map_pin_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Map_pin_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Map_pin_check = hmr(Map_pin_check, () => Map_pin_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Map_pin_check[HMR].source;
    set(Map_pin_check[HMR].source, module.default[HMR].original);
  });
}
var map_pin_check_default = Map_pin_check;

// node_modules/lucide-svelte/dist/icons/map-pin-house.svelte
Map_pin_house[FILENAME] = "node_modules/lucide-svelte/dist/icons/map-pin-house.svelte";
function Map_pin_house($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Map_pin_house);
  const iconNode = [
    [
      "path",
      {
        "d": "M15 22a1 1 0 0 1-1-1v-4a1 1 0 0 1 .445-.832l3-2a1 1 0 0 1 1.11 0l3 2A1 1 0 0 1 22 17v4a1 1 0 0 1-1 1z"
      }
    ],
    [
      "path",
      {
        "d": "M18 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 .601.2"
      }
    ],
    ["path", { "d": "M18 22v-3" }],
    ["circle", { "cx": "10", "cy": "10", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "map-pin-house" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Map_pin_house, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Map_pin_house,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Map_pin_house = hmr(Map_pin_house, () => Map_pin_house[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Map_pin_house[HMR].source;
    set(Map_pin_house[HMR].source, module.default[HMR].original);
  });
}
var map_pin_house_default = Map_pin_house;

// node_modules/lucide-svelte/dist/icons/map-pin-minus-inside.svelte
Map_pin_minus_inside[FILENAME] = "node_modules/lucide-svelte/dist/icons/map-pin-minus-inside.svelte";
function Map_pin_minus_inside($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Map_pin_minus_inside);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"
      }
    ],
    ["path", { "d": "M9 10h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "map-pin-minus-inside" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Map_pin_minus_inside, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Map_pin_minus_inside,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Map_pin_minus_inside = hmr(Map_pin_minus_inside, () => Map_pin_minus_inside[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Map_pin_minus_inside[HMR].source;
    set(Map_pin_minus_inside[HMR].source, module.default[HMR].original);
  });
}
var map_pin_minus_inside_default = Map_pin_minus_inside;

// node_modules/lucide-svelte/dist/icons/map-pin-minus.svelte
Map_pin_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/map-pin-minus.svelte";
function Map_pin_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Map_pin_minus);
  const iconNode = [
    [
      "path",
      {
        "d": "M18.977 14C19.6 12.701 20 11.343 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32 32 0 0 0 .824-.738"
      }
    ],
    ["circle", { "cx": "12", "cy": "10", "r": "3" }],
    ["path", { "d": "M16 18h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "map-pin-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Map_pin_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Map_pin_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Map_pin_minus = hmr(Map_pin_minus, () => Map_pin_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Map_pin_minus[HMR].source;
    set(Map_pin_minus[HMR].source, module.default[HMR].original);
  });
}
var map_pin_minus_default = Map_pin_minus;

// node_modules/lucide-svelte/dist/icons/map-pin-off.svelte
Map_pin_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/map-pin-off.svelte";
function Map_pin_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Map_pin_off);
  const iconNode = [
    ["path", { "d": "M12.75 7.09a3 3 0 0 1 2.16 2.16" }],
    [
      "path",
      {
        "d": "M17.072 17.072c-1.634 2.17-3.527 3.912-4.471 4.727a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 1.432-4.568"
      }
    ],
    ["path", { "d": "m2 2 20 20" }],
    [
      "path",
      {
        "d": "M8.475 2.818A8 8 0 0 1 20 10c0 1.183-.31 2.377-.81 3.533"
      }
    ],
    ["path", { "d": "M9.13 9.13a3 3 0 0 0 3.74 3.74" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "map-pin-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Map_pin_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Map_pin_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Map_pin_off = hmr(Map_pin_off, () => Map_pin_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Map_pin_off[HMR].source;
    set(Map_pin_off[HMR].source, module.default[HMR].original);
  });
}
var map_pin_off_default = Map_pin_off;

// node_modules/lucide-svelte/dist/icons/map-pin-pen.svelte
Map_pin_pen[FILENAME] = "node_modules/lucide-svelte/dist/icons/map-pin-pen.svelte";
function Map_pin_pen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Map_pin_pen);
  const iconNode = [
    [
      "path",
      {
        "d": "M17.97 9.304A8 8 0 0 0 2 10c0 4.69 4.887 9.562 7.022 11.468"
      }
    ],
    [
      "path",
      {
        "d": "M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"
      }
    ],
    ["circle", { "cx": "10", "cy": "10", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "map-pin-pen" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Map_pin_pen, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Map_pin_pen,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Map_pin_pen = hmr(Map_pin_pen, () => Map_pin_pen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Map_pin_pen[HMR].source;
    set(Map_pin_pen[HMR].source, module.default[HMR].original);
  });
}
var map_pin_pen_default = Map_pin_pen;

// node_modules/lucide-svelte/dist/icons/map-pin-plus-inside.svelte
Map_pin_plus_inside[FILENAME] = "node_modules/lucide-svelte/dist/icons/map-pin-plus-inside.svelte";
function Map_pin_plus_inside($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Map_pin_plus_inside);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"
      }
    ],
    ["path", { "d": "M12 7v6" }],
    ["path", { "d": "M9 10h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "map-pin-plus-inside" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Map_pin_plus_inside, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Map_pin_plus_inside,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Map_pin_plus_inside = hmr(Map_pin_plus_inside, () => Map_pin_plus_inside[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Map_pin_plus_inside[HMR].source;
    set(Map_pin_plus_inside[HMR].source, module.default[HMR].original);
  });
}
var map_pin_plus_inside_default = Map_pin_plus_inside;

// node_modules/lucide-svelte/dist/icons/map-pin-plus.svelte
Map_pin_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/map-pin-plus.svelte";
function Map_pin_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Map_pin_plus);
  const iconNode = [
    [
      "path",
      {
        "d": "M19.914 11.105A7.298 7.298 0 0 0 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 32 32 0 0 0 .824-.738"
      }
    ],
    ["circle", { "cx": "12", "cy": "10", "r": "3" }],
    ["path", { "d": "M16 18h6" }],
    ["path", { "d": "M19 15v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "map-pin-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Map_pin_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Map_pin_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Map_pin_plus = hmr(Map_pin_plus, () => Map_pin_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Map_pin_plus[HMR].source;
    set(Map_pin_plus[HMR].source, module.default[HMR].original);
  });
}
var map_pin_plus_default = Map_pin_plus;

// node_modules/lucide-svelte/dist/icons/map-pin-x-inside.svelte
Map_pin_x_inside[FILENAME] = "node_modules/lucide-svelte/dist/icons/map-pin-x-inside.svelte";
function Map_pin_x_inside($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Map_pin_x_inside);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"
      }
    ],
    ["path", { "d": "m14.5 7.5-5 5" }],
    ["path", { "d": "m9.5 7.5 5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "map-pin-x-inside" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Map_pin_x_inside, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Map_pin_x_inside,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Map_pin_x_inside = hmr(Map_pin_x_inside, () => Map_pin_x_inside[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Map_pin_x_inside[HMR].source;
    set(Map_pin_x_inside[HMR].source, module.default[HMR].original);
  });
}
var map_pin_x_inside_default = Map_pin_x_inside;

// node_modules/lucide-svelte/dist/icons/map-pin-x.svelte
Map_pin_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/map-pin-x.svelte";
function Map_pin_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Map_pin_x);
  const iconNode = [
    [
      "path",
      {
        "d": "M19.752 11.901A7.78 7.78 0 0 0 20 10a8 8 0 0 0-16 0c0 4.993 5.539 10.193 7.399 11.799a1 1 0 0 0 1.202 0 19 19 0 0 0 .09-.077"
      }
    ],
    ["circle", { "cx": "12", "cy": "10", "r": "3" }],
    ["path", { "d": "m21.5 15.5-5 5" }],
    ["path", { "d": "m21.5 20.5-5-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "map-pin-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Map_pin_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Map_pin_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Map_pin_x = hmr(Map_pin_x, () => Map_pin_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Map_pin_x[HMR].source;
    set(Map_pin_x[HMR].source, module.default[HMR].original);
  });
}
var map_pin_x_default = Map_pin_x;

// node_modules/lucide-svelte/dist/icons/map-pin.svelte
Map_pin[FILENAME] = "node_modules/lucide-svelte/dist/icons/map-pin.svelte";
function Map_pin($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Map_pin);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 10c0 4.993-5.539 10.193-7.399 11.799a1 1 0 0 1-1.202 0C9.539 20.193 4 14.993 4 10a8 8 0 0 1 16 0"
      }
    ],
    ["circle", { "cx": "12", "cy": "10", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "map-pin" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Map_pin, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Map_pin,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Map_pin = hmr(Map_pin, () => Map_pin[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Map_pin[HMR].source;
    set(Map_pin[HMR].source, module.default[HMR].original);
  });
}
var map_pin_default = Map_pin;

// node_modules/lucide-svelte/dist/icons/map-pinned.svelte
Map_pinned[FILENAME] = "node_modules/lucide-svelte/dist/icons/map-pinned.svelte";
function Map_pinned($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Map_pinned);
  const iconNode = [
    [
      "path",
      {
        "d": "M18 8c0 3.613-3.869 7.429-5.393 8.795a1 1 0 0 1-1.214 0C9.87 15.429 6 11.613 6 8a6 6 0 0 1 12 0"
      }
    ],
    ["circle", { "cx": "12", "cy": "8", "r": "2" }],
    [
      "path",
      {
        "d": "M8.714 14h-3.71a1 1 0 0 0-.948.683l-2.004 6A1 1 0 0 0 3 22h18a1 1 0 0 0 .948-1.316l-2-6a1 1 0 0 0-.949-.684h-3.712"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "map-pinned" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Map_pinned, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Map_pinned,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Map_pinned = hmr(Map_pinned, () => Map_pinned[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Map_pinned[HMR].source;
    set(Map_pinned[HMR].source, module.default[HMR].original);
  });
}
var map_pinned_default = Map_pinned;

// node_modules/lucide-svelte/dist/icons/map-plus.svelte
Map_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/map-plus.svelte";
function Map_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Map_plus);
  const iconNode = [
    [
      "path",
      {
        "d": "m11 19-1.106-.552a2 2 0 0 0-1.788 0l-3.659 1.83A1 1 0 0 1 3 19.381V6.618a1 1 0 0 1 .553-.894l4.553-2.277a2 2 0 0 1 1.788 0l4.212 2.106a2 2 0 0 0 1.788 0l3.659-1.83A1 1 0 0 1 21 4.619V12"
      }
    ],
    ["path", { "d": "M15 5.764V12" }],
    ["path", { "d": "M18 15v6" }],
    ["path", { "d": "M21 18h-6" }],
    ["path", { "d": "M9 3.236v15" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "map-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Map_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Map_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Map_plus = hmr(Map_plus, () => Map_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Map_plus[HMR].source;
    set(Map_plus[HMR].source, module.default[HMR].original);
  });
}
var map_plus_default = Map_plus;

// node_modules/lucide-svelte/dist/icons/map.svelte
Map[FILENAME] = "node_modules/lucide-svelte/dist/icons/map.svelte";
function Map($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Map);
  const iconNode = [
    [
      "path",
      {
        "d": "M14.106 5.553a2 2 0 0 0 1.788 0l3.659-1.83A1 1 0 0 1 21 4.619v12.764a1 1 0 0 1-.553.894l-4.553 2.277a2 2 0 0 1-1.788 0l-4.212-2.106a2 2 0 0 0-1.788 0l-3.659 1.83A1 1 0 0 1 3 19.381V6.618a1 1 0 0 1 .553-.894l4.553-2.277a2 2 0 0 1 1.788 0z"
      }
    ],
    ["path", { "d": "M15 5.764v15" }],
    ["path", { "d": "M9 3.236v15" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "map" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Map, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Map,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Map = hmr(Map, () => Map[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Map[HMR].source;
    set(Map[HMR].source, module.default[HMR].original);
  });
}
var map_default = Map;

// node_modules/lucide-svelte/dist/icons/mars-stroke.svelte
Mars_stroke[FILENAME] = "node_modules/lucide-svelte/dist/icons/mars-stroke.svelte";
function Mars_stroke($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mars_stroke);
  const iconNode = [
    ["path", { "d": "m14 6 4 4" }],
    ["path", { "d": "M17 3h4v4" }],
    ["path", { "d": "m21 3-7.75 7.75" }],
    ["circle", { "cx": "9", "cy": "15", "r": "6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mars-stroke" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mars_stroke, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mars_stroke,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mars_stroke = hmr(Mars_stroke, () => Mars_stroke[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mars_stroke[HMR].source;
    set(Mars_stroke[HMR].source, module.default[HMR].original);
  });
}
var mars_stroke_default = Mars_stroke;

// node_modules/lucide-svelte/dist/icons/mars.svelte
Mars[FILENAME] = "node_modules/lucide-svelte/dist/icons/mars.svelte";
function Mars($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mars);
  const iconNode = [
    ["path", { "d": "M16 3h5v5" }],
    ["path", { "d": "m21 3-6.75 6.75" }],
    ["circle", { "cx": "10", "cy": "14", "r": "6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mars" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mars, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mars,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mars = hmr(Mars, () => Mars[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mars[HMR].source;
    set(Mars[HMR].source, module.default[HMR].original);
  });
}
var mars_default = Mars;

// node_modules/lucide-svelte/dist/icons/martini.svelte
Martini[FILENAME] = "node_modules/lucide-svelte/dist/icons/martini.svelte";
function Martini($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Martini);
  const iconNode = [
    ["path", { "d": "M8 22h8" }],
    ["path", { "d": "M12 11v11" }],
    ["path", { "d": "m19 3-7 8-7-8Z" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "martini" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Martini, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Martini,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Martini = hmr(Martini, () => Martini[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Martini[HMR].source;
    set(Martini[HMR].source, module.default[HMR].original);
  });
}
var martini_default = Martini;

// node_modules/lucide-svelte/dist/icons/maximize-2.svelte
Maximize_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/maximize-2.svelte";
function Maximize_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Maximize_2);
  const iconNode = [
    ["path", { "d": "M15 3h6v6" }],
    ["path", { "d": "m21 3-7 7" }],
    ["path", { "d": "m3 21 7-7" }],
    ["path", { "d": "M9 21H3v-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "maximize-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Maximize_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Maximize_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Maximize_2 = hmr(Maximize_2, () => Maximize_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Maximize_2[HMR].source;
    set(Maximize_2[HMR].source, module.default[HMR].original);
  });
}
var maximize_2_default = Maximize_2;

// node_modules/lucide-svelte/dist/icons/maximize.svelte
Maximize[FILENAME] = "node_modules/lucide-svelte/dist/icons/maximize.svelte";
function Maximize($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Maximize);
  const iconNode = [
    ["path", { "d": "M8 3H5a2 2 0 0 0-2 2v3" }],
    ["path", { "d": "M21 8V5a2 2 0 0 0-2-2h-3" }],
    ["path", { "d": "M3 16v3a2 2 0 0 0 2 2h3" }],
    ["path", { "d": "M16 21h3a2 2 0 0 0 2-2v-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "maximize" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Maximize, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Maximize,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Maximize = hmr(Maximize, () => Maximize[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Maximize[HMR].source;
    set(Maximize[HMR].source, module.default[HMR].original);
  });
}
var maximize_default = Maximize;

// node_modules/lucide-svelte/dist/icons/medal.svelte
Medal[FILENAME] = "node_modules/lucide-svelte/dist/icons/medal.svelte";
function Medal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Medal);
  const iconNode = [
    [
      "path",
      {
        "d": "M7.21 15 2.66 7.14a2 2 0 0 1 .13-2.2L4.4 2.8A2 2 0 0 1 6 2h12a2 2 0 0 1 1.6.8l1.6 2.14a2 2 0 0 1 .14 2.2L16.79 15"
      }
    ],
    ["path", { "d": "M11 12 5.12 2.2" }],
    ["path", { "d": "m13 12 5.88-9.8" }],
    ["path", { "d": "M8 7h8" }],
    ["circle", { "cx": "12", "cy": "17", "r": "5" }],
    ["path", { "d": "M12 18v-2h-.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "medal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Medal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Medal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Medal = hmr(Medal, () => Medal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Medal[HMR].source;
    set(Medal[HMR].source, module.default[HMR].original);
  });
}
var medal_default = Medal;

// node_modules/lucide-svelte/dist/icons/megaphone-off.svelte
Megaphone_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/megaphone-off.svelte";
function Megaphone_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Megaphone_off);
  const iconNode = [
    [
      "path",
      { "d": "M11.636 6A13 13 0 0 0 19.4 3.2 1 1 0 0 1 21 4v11.344" }
    ],
    [
      "path",
      {
        "d": "M14.378 14.357A13 13 0 0 0 11 14H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h1"
      }
    ],
    ["path", { "d": "m2 2 20 20" }],
    [
      "path",
      {
        "d": "M6 14a12 12 0 0 0 2.4 7.2 2 2 0 0 0 3.2-2.4A8 8 0 0 1 10 14"
      }
    ],
    ["path", { "d": "M8 8v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "megaphone-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Megaphone_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Megaphone_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Megaphone_off = hmr(Megaphone_off, () => Megaphone_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Megaphone_off[HMR].source;
    set(Megaphone_off[HMR].source, module.default[HMR].original);
  });
}
var megaphone_off_default = Megaphone_off;

// node_modules/lucide-svelte/dist/icons/megaphone.svelte
Megaphone[FILENAME] = "node_modules/lucide-svelte/dist/icons/megaphone.svelte";
function Megaphone($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Megaphone);
  const iconNode = [
    [
      "path",
      {
        "d": "M11 6a13 13 0 0 0 8.4-2.8A1 1 0 0 1 21 4v12a1 1 0 0 1-1.6.8A13 13 0 0 0 11 14H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2z"
      }
    ],
    [
      "path",
      {
        "d": "M6 14a12 12 0 0 0 2.4 7.2 2 2 0 0 0 3.2-2.4A8 8 0 0 1 10 14"
      }
    ],
    ["path", { "d": "M8 6v8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "megaphone" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Megaphone, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Megaphone,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Megaphone = hmr(Megaphone, () => Megaphone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Megaphone[HMR].source;
    set(Megaphone[HMR].source, module.default[HMR].original);
  });
}
var megaphone_default = Megaphone;

// node_modules/lucide-svelte/dist/icons/meh.svelte
Meh[FILENAME] = "node_modules/lucide-svelte/dist/icons/meh.svelte";
function Meh($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Meh);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["line", { "x1": "8", "x2": "16", "y1": "15", "y2": "15" }],
    ["line", { "x1": "9", "x2": "9.01", "y1": "9", "y2": "9" }],
    ["line", { "x1": "15", "x2": "15.01", "y1": "9", "y2": "9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "meh" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Meh, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Meh,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Meh = hmr(Meh, () => Meh[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Meh[HMR].source;
    set(Meh[HMR].source, module.default[HMR].original);
  });
}
var meh_default = Meh;

// node_modules/lucide-svelte/dist/icons/memory-stick.svelte
Memory_stick[FILENAME] = "node_modules/lucide-svelte/dist/icons/memory-stick.svelte";
function Memory_stick($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Memory_stick);
  const iconNode = [
    ["path", { "d": "M6 19v-3" }],
    ["path", { "d": "M10 19v-3" }],
    ["path", { "d": "M14 19v-3" }],
    ["path", { "d": "M18 19v-3" }],
    ["path", { "d": "M8 11V9" }],
    ["path", { "d": "M16 11V9" }],
    ["path", { "d": "M12 11V9" }],
    ["path", { "d": "M2 15h20" }],
    [
      "path",
      {
        "d": "M2 7a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v1.1a2 2 0 0 0 0 3.837V17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-5.1a2 2 0 0 0 0-3.837Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "memory-stick" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Memory_stick, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Memory_stick,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Memory_stick = hmr(Memory_stick, () => Memory_stick[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Memory_stick[HMR].source;
    set(Memory_stick[HMR].source, module.default[HMR].original);
  });
}
var memory_stick_default = Memory_stick;

// node_modules/lucide-svelte/dist/icons/menu.svelte
Menu[FILENAME] = "node_modules/lucide-svelte/dist/icons/menu.svelte";
function Menu($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Menu);
  const iconNode = [
    ["path", { "d": "M4 12h16" }],
    ["path", { "d": "M4 18h16" }],
    ["path", { "d": "M4 6h16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "menu" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Menu, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Menu,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Menu = hmr(Menu, () => Menu[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Menu[HMR].source;
    set(Menu[HMR].source, module.default[HMR].original);
  });
}
var menu_default = Menu;

// node_modules/lucide-svelte/dist/icons/merge.svelte
Merge[FILENAME] = "node_modules/lucide-svelte/dist/icons/merge.svelte";
function Merge($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Merge);
  const iconNode = [
    ["path", { "d": "m8 6 4-4 4 4" }],
    ["path", { "d": "M12 2v10.3a4 4 0 0 1-1.172 2.872L4 22" }],
    ["path", { "d": "m20 22-5-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "merge" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Merge, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Merge,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Merge = hmr(Merge, () => Merge[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Merge[HMR].source;
    set(Merge[HMR].source, module.default[HMR].original);
  });
}
var merge_default = Merge;

// node_modules/lucide-svelte/dist/icons/message-circle-code.svelte
Message_circle_code[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-circle-code.svelte";
function Message_circle_code($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_circle_code);
  const iconNode = [
    ["path", { "d": "m10 9-3 3 3 3" }],
    ["path", { "d": "m14 15 3-3-3-3" }],
    [
      "path",
      {
        "d": "M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-circle-code" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_circle_code, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_circle_code,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_circle_code = hmr(Message_circle_code, () => Message_circle_code[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_circle_code[HMR].source;
    set(Message_circle_code[HMR].source, module.default[HMR].original);
  });
}
var message_circle_code_default = Message_circle_code;

// node_modules/lucide-svelte/dist/icons/message-circle-dashed.svelte
Message_circle_dashed[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-circle-dashed.svelte";
function Message_circle_dashed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_circle_dashed);
  const iconNode = [
    ["path", { "d": "M10.1 2.182a10 10 0 0 1 3.8 0" }],
    ["path", { "d": "M13.9 21.818a10 10 0 0 1-3.8 0" }],
    ["path", { "d": "M17.609 3.72a10 10 0 0 1 2.69 2.7" }],
    ["path", { "d": "M2.182 13.9a10 10 0 0 1 0-3.8" }],
    ["path", { "d": "M20.28 17.61a10 10 0 0 1-2.7 2.69" }],
    ["path", { "d": "M21.818 10.1a10 10 0 0 1 0 3.8" }],
    ["path", { "d": "M3.721 6.391a10 10 0 0 1 2.7-2.69" }],
    [
      "path",
      {
        "d": "m6.163 21.117-2.906.85a1 1 0 0 1-1.236-1.169l.965-2.98"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-circle-dashed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_circle_dashed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_circle_dashed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_circle_dashed = hmr(Message_circle_dashed, () => Message_circle_dashed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_circle_dashed[HMR].source;
    set(Message_circle_dashed[HMR].source, module.default[HMR].original);
  });
}
var message_circle_dashed_default = Message_circle_dashed;

// node_modules/lucide-svelte/dist/icons/message-circle-heart.svelte
Message_circle_heart[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-circle-heart.svelte";
function Message_circle_heart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_circle_heart);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719"
      }
    ],
    [
      "path",
      {
        "d": "M7.828 13.07A3 3 0 0 1 12 8.764a3 3 0 0 1 5.004 2.224 3 3 0 0 1-.832 2.083l-3.447 3.62a1 1 0 0 1-1.45-.001z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-circle-heart" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_circle_heart, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_circle_heart,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_circle_heart = hmr(Message_circle_heart, () => Message_circle_heart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_circle_heart[HMR].source;
    set(Message_circle_heart[HMR].source, module.default[HMR].original);
  });
}
var message_circle_heart_default = Message_circle_heart;

// node_modules/lucide-svelte/dist/icons/message-circle-more.svelte
Message_circle_more[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-circle-more.svelte";
function Message_circle_more($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_circle_more);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719"
      }
    ],
    ["path", { "d": "M8 12h.01" }],
    ["path", { "d": "M12 12h.01" }],
    ["path", { "d": "M16 12h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-circle-more" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_circle_more, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_circle_more,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_circle_more = hmr(Message_circle_more, () => Message_circle_more[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_circle_more[HMR].source;
    set(Message_circle_more[HMR].source, module.default[HMR].original);
  });
}
var message_circle_more_default = Message_circle_more;

// node_modules/lucide-svelte/dist/icons/message-circle-off.svelte
Message_circle_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-circle-off.svelte";
function Message_circle_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_circle_off);
  const iconNode = [
    ["path", { "d": "m2 2 20 20" }],
    [
      "path",
      {
        "d": "M4.93 4.929a10 10 0 0 0-1.938 11.412 2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 0 0 11.302-1.989"
      }
    ],
    ["path", { "d": "M8.35 2.69A10 10 0 0 1 21.3 15.65" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-circle-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_circle_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_circle_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_circle_off = hmr(Message_circle_off, () => Message_circle_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_circle_off[HMR].source;
    set(Message_circle_off[HMR].source, module.default[HMR].original);
  });
}
var message_circle_off_default = Message_circle_off;

// node_modules/lucide-svelte/dist/icons/message-circle-plus.svelte
Message_circle_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-circle-plus.svelte";
function Message_circle_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_circle_plus);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719"
      }
    ],
    ["path", { "d": "M8 12h8" }],
    ["path", { "d": "M12 8v8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-circle-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_circle_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_circle_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_circle_plus = hmr(Message_circle_plus, () => Message_circle_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_circle_plus[HMR].source;
    set(Message_circle_plus[HMR].source, module.default[HMR].original);
  });
}
var message_circle_plus_default = Message_circle_plus;

// node_modules/lucide-svelte/dist/icons/message-circle-question-mark.svelte
Message_circle_question_mark[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-circle-question-mark.svelte";
function Message_circle_question_mark($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_circle_question_mark);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719"
      }
    ],
    ["path", { "d": "M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3" }],
    ["path", { "d": "M12 17h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-circle-question-mark" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_circle_question_mark, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_circle_question_mark,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_circle_question_mark = hmr(Message_circle_question_mark, () => Message_circle_question_mark[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_circle_question_mark[HMR].source;
    set(Message_circle_question_mark[HMR].source, module.default[HMR].original);
  });
}
var message_circle_question_mark_default = Message_circle_question_mark;

// node_modules/lucide-svelte/dist/icons/message-circle-reply.svelte
Message_circle_reply[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-circle-reply.svelte";
function Message_circle_reply($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_circle_reply);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719"
      }
    ],
    ["path", { "d": "m10 15-3-3 3-3" }],
    ["path", { "d": "M7 12h8a2 2 0 0 1 2 2v1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-circle-reply" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_circle_reply, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_circle_reply,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_circle_reply = hmr(Message_circle_reply, () => Message_circle_reply[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_circle_reply[HMR].source;
    set(Message_circle_reply[HMR].source, module.default[HMR].original);
  });
}
var message_circle_reply_default = Message_circle_reply;

// node_modules/lucide-svelte/dist/icons/message-circle-warning.svelte
Message_circle_warning[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-circle-warning.svelte";
function Message_circle_warning($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_circle_warning);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719"
      }
    ],
    ["path", { "d": "M12 8v4" }],
    ["path", { "d": "M12 16h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-circle-warning" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_circle_warning, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_circle_warning,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_circle_warning = hmr(Message_circle_warning, () => Message_circle_warning[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_circle_warning[HMR].source;
    set(Message_circle_warning[HMR].source, module.default[HMR].original);
  });
}
var message_circle_warning_default = Message_circle_warning;

// node_modules/lucide-svelte/dist/icons/message-circle-x.svelte
Message_circle_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-circle-x.svelte";
function Message_circle_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_circle_x);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719"
      }
    ],
    ["path", { "d": "m15 9-6 6" }],
    ["path", { "d": "m9 9 6 6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-circle-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_circle_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_circle_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_circle_x = hmr(Message_circle_x, () => Message_circle_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_circle_x[HMR].source;
    set(Message_circle_x[HMR].source, module.default[HMR].original);
  });
}
var message_circle_x_default = Message_circle_x;

// node_modules/lucide-svelte/dist/icons/message-circle.svelte
Message_circle[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-circle.svelte";
function Message_circle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_circle);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.992 16.342a2 2 0 0 1 .094 1.167l-1.065 3.29a1 1 0 0 0 1.236 1.168l3.413-.998a2 2 0 0 1 1.099.092 10 10 0 1 0-4.777-4.719"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-circle" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_circle, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_circle,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_circle = hmr(Message_circle, () => Message_circle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_circle[HMR].source;
    set(Message_circle[HMR].source, module.default[HMR].original);
  });
}
var message_circle_default = Message_circle;

// node_modules/lucide-svelte/dist/icons/message-square-dashed.svelte
Message_square_dashed[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-square-dashed.svelte";
function Message_square_dashed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_square_dashed);
  const iconNode = [
    ["path", { "d": "M12 19h.01" }],
    ["path", { "d": "M12 3h.01" }],
    ["path", { "d": "M16 19h.01" }],
    ["path", { "d": "M16 3h.01" }],
    ["path", { "d": "M2 13h.01" }],
    [
      "path",
      {
        "d": "M2 17v4.286a.71.71 0 0 0 1.212.502l2.202-2.202A2 2 0 0 1 6.828 19H8"
      }
    ],
    ["path", { "d": "M2 5a2 2 0 0 1 2-2" }],
    ["path", { "d": "M2 9h.01" }],
    ["path", { "d": "M20 3a2 2 0 0 1 2 2" }],
    ["path", { "d": "M22 13h.01" }],
    ["path", { "d": "M22 17a2 2 0 0 1-2 2" }],
    ["path", { "d": "M22 9h.01" }],
    ["path", { "d": "M8 3h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-square-dashed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_square_dashed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_square_dashed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_square_dashed = hmr(Message_square_dashed, () => Message_square_dashed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_square_dashed[HMR].source;
    set(Message_square_dashed[HMR].source, module.default[HMR].original);
  });
}
var message_square_dashed_default = Message_square_dashed;

// node_modules/lucide-svelte/dist/icons/message-square-code.svelte
Message_square_code[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-square-code.svelte";
function Message_square_code($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_square_code);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z"
      }
    ],
    ["path", { "d": "m10 8-3 3 3 3" }],
    ["path", { "d": "m14 14 3-3-3-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-square-code" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_square_code, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_square_code,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_square_code = hmr(Message_square_code, () => Message_square_code[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_square_code[HMR].source;
    set(Message_square_code[HMR].source, module.default[HMR].original);
  });
}
var message_square_code_default = Message_square_code;

// node_modules/lucide-svelte/dist/icons/message-square-diff.svelte
Message_square_diff[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-square-diff.svelte";
function Message_square_diff($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_square_diff);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z"
      }
    ],
    ["path", { "d": "M10 15h4" }],
    ["path", { "d": "M10 9h4" }],
    ["path", { "d": "M12 7v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-square-diff" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_square_diff, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_square_diff,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_square_diff = hmr(Message_square_diff, () => Message_square_diff[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_square_diff[HMR].source;
    set(Message_square_diff[HMR].source, module.default[HMR].original);
  });
}
var message_square_diff_default = Message_square_diff;

// node_modules/lucide-svelte/dist/icons/message-square-dot.svelte
Message_square_dot[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-square-dot.svelte";
function Message_square_dot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_square_dot);
  const iconNode = [
    [
      "path",
      {
        "d": "M12.7 3H4a2 2 0 0 0-2 2v16.286a.71.71 0 0 0 1.212.502l2.202-2.202A2 2 0 0 1 6.828 19H20a2 2 0 0 0 2-2v-4.7"
      }
    ],
    ["circle", { "cx": "19", "cy": "6", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-square-dot" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_square_dot, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_square_dot,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_square_dot = hmr(Message_square_dot, () => Message_square_dot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_square_dot[HMR].source;
    set(Message_square_dot[HMR].source, module.default[HMR].original);
  });
}
var message_square_dot_default = Message_square_dot;

// node_modules/lucide-svelte/dist/icons/message-square-heart.svelte
Message_square_heart[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-square-heart.svelte";
function Message_square_heart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_square_heart);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z"
      }
    ],
    [
      "path",
      {
        "d": "M7.5 9.5c0 .687.265 1.383.697 1.844l3.009 3.264a1.14 1.14 0 0 0 .407.314 1 1 0 0 0 .783-.004 1.14 1.14 0 0 0 .398-.31l3.008-3.264A2.77 2.77 0 0 0 16.5 9.5 2.5 2.5 0 0 0 12 8a2.5 2.5 0 0 0-4.5 1.5"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-square-heart" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_square_heart, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_square_heart,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_square_heart = hmr(Message_square_heart, () => Message_square_heart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_square_heart[HMR].source;
    set(Message_square_heart[HMR].source, module.default[HMR].original);
  });
}
var message_square_heart_default = Message_square_heart;

// node_modules/lucide-svelte/dist/icons/message-square-lock.svelte
Message_square_lock[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-square-lock.svelte";
function Message_square_lock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_square_lock);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 8.5V5a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v16.286a.71.71 0 0 0 1.212.502l2.202-2.202A2 2 0 0 1 6.828 19H10"
      }
    ],
    ["path", { "d": "M20 15v-2a2 2 0 0 0-4 0v2" }],
    [
      "rect",
      { "x": "14", "y": "15", "width": "8", "height": "5", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-square-lock" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_square_lock, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_square_lock,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_square_lock = hmr(Message_square_lock, () => Message_square_lock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_square_lock[HMR].source;
    set(Message_square_lock[HMR].source, module.default[HMR].original);
  });
}
var message_square_lock_default = Message_square_lock;

// node_modules/lucide-svelte/dist/icons/message-square-more.svelte
Message_square_more[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-square-more.svelte";
function Message_square_more($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_square_more);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z"
      }
    ],
    ["path", { "d": "M12 11h.01" }],
    ["path", { "d": "M16 11h.01" }],
    ["path", { "d": "M8 11h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-square-more" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_square_more, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_square_more,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_square_more = hmr(Message_square_more, () => Message_square_more[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_square_more[HMR].source;
    set(Message_square_more[HMR].source, module.default[HMR].original);
  });
}
var message_square_more_default = Message_square_more;

// node_modules/lucide-svelte/dist/icons/message-square-off.svelte
Message_square_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-square-off.svelte";
function Message_square_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_square_off);
  const iconNode = [
    [
      "path",
      {
        "d": "M19 19H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.7.7 0 0 1 2 21.286V5a2 2 0 0 1 1.184-1.826"
      }
    ],
    ["path", { "d": "m2 2 20 20" }],
    ["path", { "d": "M8.656 3H20a2 2 0 0 1 2 2v11.344" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-square-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_square_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_square_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_square_off = hmr(Message_square_off, () => Message_square_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_square_off[HMR].source;
    set(Message_square_off[HMR].source, module.default[HMR].original);
  });
}
var message_square_off_default = Message_square_off;

// node_modules/lucide-svelte/dist/icons/message-square-plus.svelte
Message_square_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-square-plus.svelte";
function Message_square_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_square_plus);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z"
      }
    ],
    ["path", { "d": "M12 8v6" }],
    ["path", { "d": "M9 11h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-square-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_square_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_square_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_square_plus = hmr(Message_square_plus, () => Message_square_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_square_plus[HMR].source;
    set(Message_square_plus[HMR].source, module.default[HMR].original);
  });
}
var message_square_plus_default = Message_square_plus;

// node_modules/lucide-svelte/dist/icons/message-square-quote.svelte
Message_square_quote[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-square-quote.svelte";
function Message_square_quote($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_square_quote);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z"
      }
    ],
    ["path", { "d": "M14 13a2 2 0 0 0 2-2V9h-2" }],
    ["path", { "d": "M8 13a2 2 0 0 0 2-2V9H8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-square-quote" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_square_quote, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_square_quote,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_square_quote = hmr(Message_square_quote, () => Message_square_quote[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_square_quote[HMR].source;
    set(Message_square_quote[HMR].source, module.default[HMR].original);
  });
}
var message_square_quote_default = Message_square_quote;

// node_modules/lucide-svelte/dist/icons/message-square-reply.svelte
Message_square_reply[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-square-reply.svelte";
function Message_square_reply($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_square_reply);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z"
      }
    ],
    ["path", { "d": "m10 8-3 3 3 3" }],
    ["path", { "d": "M17 14v-1a2 2 0 0 0-2-2H7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-square-reply" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_square_reply, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_square_reply,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_square_reply = hmr(Message_square_reply, () => Message_square_reply[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_square_reply[HMR].source;
    set(Message_square_reply[HMR].source, module.default[HMR].original);
  });
}
var message_square_reply_default = Message_square_reply;

// node_modules/lucide-svelte/dist/icons/message-square-share.svelte
Message_square_share[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-square-share.svelte";
function Message_square_share($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_square_share);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 3H4a2 2 0 0 0-2 2v16.286a.71.71 0 0 0 1.212.502l2.202-2.202A2 2 0 0 1 6.828 19H20a2 2 0 0 0 2-2v-4"
      }
    ],
    ["path", { "d": "M16 3h6v6" }],
    ["path", { "d": "m16 9 6-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-square-share" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_square_share, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_square_share,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_square_share = hmr(Message_square_share, () => Message_square_share[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_square_share[HMR].source;
    set(Message_square_share[HMR].source, module.default[HMR].original);
  });
}
var message_square_share_default = Message_square_share;

// node_modules/lucide-svelte/dist/icons/message-square-text.svelte
Message_square_text[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-square-text.svelte";
function Message_square_text($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_square_text);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z"
      }
    ],
    ["path", { "d": "M7 11h10" }],
    ["path", { "d": "M7 15h6" }],
    ["path", { "d": "M7 7h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-square-text" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_square_text, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_square_text,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_square_text = hmr(Message_square_text, () => Message_square_text[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_square_text[HMR].source;
    set(Message_square_text[HMR].source, module.default[HMR].original);
  });
}
var message_square_text_default = Message_square_text;

// node_modules/lucide-svelte/dist/icons/message-square-warning.svelte
Message_square_warning[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-square-warning.svelte";
function Message_square_warning($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_square_warning);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z"
      }
    ],
    ["path", { "d": "M12 15h.01" }],
    ["path", { "d": "M12 7v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-square-warning" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_square_warning, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_square_warning,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_square_warning = hmr(Message_square_warning, () => Message_square_warning[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_square_warning[HMR].source;
    set(Message_square_warning[HMR].source, module.default[HMR].original);
  });
}
var message_square_warning_default = Message_square_warning;

// node_modules/lucide-svelte/dist/icons/message-square-x.svelte
Message_square_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-square-x.svelte";
function Message_square_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_square_x);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z"
      }
    ],
    ["path", { "d": "m14.5 8.5-5 5" }],
    ["path", { "d": "m9.5 8.5 5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-square-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_square_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_square_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_square_x = hmr(Message_square_x, () => Message_square_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_square_x[HMR].source;
    set(Message_square_x[HMR].source, module.default[HMR].original);
  });
}
var message_square_x_default = Message_square_x;

// node_modules/lucide-svelte/dist/icons/message-square.svelte
Message_square[FILENAME] = "node_modules/lucide-svelte/dist/icons/message-square.svelte";
function Message_square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Message_square);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 17a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 21.286V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "message-square" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Message_square, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Message_square,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Message_square = hmr(Message_square, () => Message_square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Message_square[HMR].source;
    set(Message_square[HMR].source, module.default[HMR].original);
  });
}
var message_square_default = Message_square;

// node_modules/lucide-svelte/dist/icons/messages-square.svelte
Messages_square[FILENAME] = "node_modules/lucide-svelte/dist/icons/messages-square.svelte";
function Messages_square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Messages_square);
  const iconNode = [
    [
      "path",
      {
        "d": "M16 10a2 2 0 0 1-2 2H6.828a2 2 0 0 0-1.414.586l-2.202 2.202A.71.71 0 0 1 2 14.286V4a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"
      }
    ],
    [
      "path",
      {
        "d": "M20 9a2 2 0 0 1 2 2v10.286a.71.71 0 0 1-1.212.502l-2.202-2.202A2 2 0 0 0 17.172 19H10a2 2 0 0 1-2-2v-1"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "messages-square" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Messages_square, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Messages_square,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Messages_square = hmr(Messages_square, () => Messages_square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Messages_square[HMR].source;
    set(Messages_square[HMR].source, module.default[HMR].original);
  });
}
var messages_square_default = Messages_square;

// node_modules/lucide-svelte/dist/icons/mic-off.svelte
Mic_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/mic-off.svelte";
function Mic_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mic_off);
  const iconNode = [
    ["line", { "x1": "2", "x2": "22", "y1": "2", "y2": "22" }],
    ["path", { "d": "M18.89 13.23A7.12 7.12 0 0 0 19 12v-2" }],
    ["path", { "d": "M5 10v2a7 7 0 0 0 12 5" }],
    ["path", { "d": "M15 9.34V5a3 3 0 0 0-5.68-1.33" }],
    ["path", { "d": "M9 9v3a3 3 0 0 0 5.12 2.12" }],
    ["line", { "x1": "12", "x2": "12", "y1": "19", "y2": "22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mic-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mic_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mic_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mic_off = hmr(Mic_off, () => Mic_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mic_off[HMR].source;
    set(Mic_off[HMR].source, module.default[HMR].original);
  });
}
var mic_off_default = Mic_off;

// node_modules/lucide-svelte/dist/icons/mic.svelte
Mic[FILENAME] = "node_modules/lucide-svelte/dist/icons/mic.svelte";
function Mic($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mic);
  const iconNode = [
    ["path", { "d": "M12 19v3" }],
    ["path", { "d": "M19 10v2a7 7 0 0 1-14 0v-2" }],
    [
      "rect",
      { "x": "9", "y": "2", "width": "6", "height": "13", "rx": "3" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mic" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mic, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mic,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mic = hmr(Mic, () => Mic[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mic[HMR].source;
    set(Mic[HMR].source, module.default[HMR].original);
  });
}
var mic_default = Mic;

// node_modules/lucide-svelte/dist/icons/mic-vocal.svelte
Mic_vocal[FILENAME] = "node_modules/lucide-svelte/dist/icons/mic-vocal.svelte";
function Mic_vocal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mic_vocal);
  const iconNode = [
    [
      "path",
      {
        "d": "m11 7.601-5.994 8.19a1 1 0 0 0 .1 1.298l.817.818a1 1 0 0 0 1.314.087L15.09 12"
      }
    ],
    [
      "path",
      {
        "d": "M16.5 21.174C15.5 20.5 14.372 20 13 20c-2.058 0-3.928 2.356-6 2-2.072-.356-2.775-3.369-1.5-4.5"
      }
    ],
    ["circle", { "cx": "16", "cy": "7", "r": "5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mic-vocal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mic_vocal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mic_vocal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mic_vocal = hmr(Mic_vocal, () => Mic_vocal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mic_vocal[HMR].source;
    set(Mic_vocal[HMR].source, module.default[HMR].original);
  });
}
var mic_vocal_default = Mic_vocal;

// node_modules/lucide-svelte/dist/icons/microchip.svelte
Microchip[FILENAME] = "node_modules/lucide-svelte/dist/icons/microchip.svelte";
function Microchip($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Microchip);
  const iconNode = [
    ["path", { "d": "M18 12h2" }],
    ["path", { "d": "M18 16h2" }],
    ["path", { "d": "M18 20h2" }],
    ["path", { "d": "M18 4h2" }],
    ["path", { "d": "M18 8h2" }],
    ["path", { "d": "M4 12h2" }],
    ["path", { "d": "M4 16h2" }],
    ["path", { "d": "M4 20h2" }],
    ["path", { "d": "M4 4h2" }],
    ["path", { "d": "M4 8h2" }],
    [
      "path",
      {
        "d": "M8 2a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2h-1.5c-.276 0-.494.227-.562.495a2 2 0 0 1-3.876 0C9.994 2.227 9.776 2 9.5 2z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "microchip" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Microchip, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Microchip,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Microchip = hmr(Microchip, () => Microchip[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Microchip[HMR].source;
    set(Microchip[HMR].source, module.default[HMR].original);
  });
}
var microchip_default = Microchip;

// node_modules/lucide-svelte/dist/icons/microscope.svelte
Microscope[FILENAME] = "node_modules/lucide-svelte/dist/icons/microscope.svelte";
function Microscope($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Microscope);
  const iconNode = [
    ["path", { "d": "M6 18h8" }],
    ["path", { "d": "M3 22h18" }],
    ["path", { "d": "M14 22a7 7 0 1 0 0-14h-1" }],
    ["path", { "d": "M9 14h2" }],
    ["path", { "d": "M9 12a2 2 0 0 1-2-2V6h6v4a2 2 0 0 1-2 2Z" }],
    ["path", { "d": "M12 6V3a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "microscope" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Microscope, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Microscope,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Microscope = hmr(Microscope, () => Microscope[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Microscope[HMR].source;
    set(Microscope[HMR].source, module.default[HMR].original);
  });
}
var microscope_default = Microscope;

// node_modules/lucide-svelte/dist/icons/microwave.svelte
Microwave[FILENAME] = "node_modules/lucide-svelte/dist/icons/microwave.svelte";
function Microwave($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Microwave);
  const iconNode = [
    [
      "rect",
      { "width": "20", "height": "15", "x": "2", "y": "4", "rx": "2" }
    ],
    [
      "rect",
      { "width": "8", "height": "7", "x": "6", "y": "8", "rx": "1" }
    ],
    ["path", { "d": "M18 8v7" }],
    ["path", { "d": "M6 19v2" }],
    ["path", { "d": "M18 19v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "microwave" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Microwave, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Microwave,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Microwave = hmr(Microwave, () => Microwave[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Microwave[HMR].source;
    set(Microwave[HMR].source, module.default[HMR].original);
  });
}
var microwave_default = Microwave;

// node_modules/lucide-svelte/dist/icons/milestone.svelte
Milestone[FILENAME] = "node_modules/lucide-svelte/dist/icons/milestone.svelte";
function Milestone($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Milestone);
  const iconNode = [
    ["path", { "d": "M12 13v8" }],
    ["path", { "d": "M12 3v3" }],
    [
      "path",
      {
        "d": "M4 6a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h13a2 2 0 0 0 1.152-.365l3.424-2.317a1 1 0 0 0 0-1.635l-3.424-2.318A2 2 0 0 0 17 6z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "milestone" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Milestone, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Milestone,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Milestone = hmr(Milestone, () => Milestone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Milestone[HMR].source;
    set(Milestone[HMR].source, module.default[HMR].original);
  });
}
var milestone_default = Milestone;

// node_modules/lucide-svelte/dist/icons/milk-off.svelte
Milk_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/milk-off.svelte";
function Milk_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Milk_off);
  const iconNode = [
    ["path", { "d": "M8 2h8" }],
    [
      "path",
      {
        "d": "M9 2v1.343M15 2v2.789a4 4 0 0 0 .672 2.219l.656.984a4 4 0 0 1 .672 2.22v1.131M7.8 7.8l-.128.192A4 4 0 0 0 7 10.212V20a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-3"
      }
    ],
    [
      "path",
      { "d": "M7 15a6.47 6.47 0 0 1 5 0 6.472 6.472 0 0 0 3.435.435" }
    ],
    ["line", { "x1": "2", "x2": "22", "y1": "2", "y2": "22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "milk-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Milk_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Milk_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Milk_off = hmr(Milk_off, () => Milk_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Milk_off[HMR].source;
    set(Milk_off[HMR].source, module.default[HMR].original);
  });
}
var milk_off_default = Milk_off;

// node_modules/lucide-svelte/dist/icons/milk.svelte
Milk[FILENAME] = "node_modules/lucide-svelte/dist/icons/milk.svelte";
function Milk($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Milk);
  const iconNode = [
    ["path", { "d": "M8 2h8" }],
    [
      "path",
      {
        "d": "M9 2v2.789a4 4 0 0 1-.672 2.219l-.656.984A4 4 0 0 0 7 10.212V20a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2v-9.789a4 4 0 0 0-.672-2.219l-.656-.984A4 4 0 0 1 15 4.788V2"
      }
    ],
    [
      "path",
      { "d": "M7 15a6.472 6.472 0 0 1 5 0 6.47 6.47 0 0 0 5 0" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "milk" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Milk, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Milk,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Milk = hmr(Milk, () => Milk[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Milk[HMR].source;
    set(Milk[HMR].source, module.default[HMR].original);
  });
}
var milk_default = Milk;

// node_modules/lucide-svelte/dist/icons/minimize-2.svelte
Minimize_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/minimize-2.svelte";
function Minimize_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Minimize_2);
  const iconNode = [
    ["path", { "d": "m14 10 7-7" }],
    ["path", { "d": "M20 10h-6V4" }],
    ["path", { "d": "m3 21 7-7" }],
    ["path", { "d": "M4 14h6v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "minimize-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Minimize_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Minimize_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Minimize_2 = hmr(Minimize_2, () => Minimize_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Minimize_2[HMR].source;
    set(Minimize_2[HMR].source, module.default[HMR].original);
  });
}
var minimize_2_default = Minimize_2;

// node_modules/lucide-svelte/dist/icons/minus.svelte
Minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/minus.svelte";
function Minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Minus);
  const iconNode = [["path", { "d": "M5 12h14" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Minus = hmr(Minus, () => Minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Minus[HMR].source;
    set(Minus[HMR].source, module.default[HMR].original);
  });
}
var minus_default = Minus;

// node_modules/lucide-svelte/dist/icons/minimize.svelte
Minimize[FILENAME] = "node_modules/lucide-svelte/dist/icons/minimize.svelte";
function Minimize($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Minimize);
  const iconNode = [
    ["path", { "d": "M8 3v3a2 2 0 0 1-2 2H3" }],
    ["path", { "d": "M21 8h-3a2 2 0 0 1-2-2V3" }],
    ["path", { "d": "M3 16h3a2 2 0 0 1 2 2v3" }],
    ["path", { "d": "M16 21v-3a2 2 0 0 1 2-2h3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "minimize" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Minimize, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Minimize,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Minimize = hmr(Minimize, () => Minimize[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Minimize[HMR].source;
    set(Minimize[HMR].source, module.default[HMR].original);
  });
}
var minimize_default = Minimize;

// node_modules/lucide-svelte/dist/icons/monitor-check.svelte
Monitor_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/monitor-check.svelte";
function Monitor_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Monitor_check);
  const iconNode = [
    ["path", { "d": "m9 10 2 2 4-4" }],
    [
      "rect",
      { "width": "20", "height": "14", "x": "2", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M12 17v4" }],
    ["path", { "d": "M8 21h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "monitor-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Monitor_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Monitor_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Monitor_check = hmr(Monitor_check, () => Monitor_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Monitor_check[HMR].source;
    set(Monitor_check[HMR].source, module.default[HMR].original);
  });
}
var monitor_check_default = Monitor_check;

// node_modules/lucide-svelte/dist/icons/monitor-cog.svelte
Monitor_cog[FILENAME] = "node_modules/lucide-svelte/dist/icons/monitor-cog.svelte";
function Monitor_cog($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Monitor_cog);
  const iconNode = [
    ["path", { "d": "M12 17v4" }],
    ["path", { "d": "m14.305 7.53.923-.382" }],
    ["path", { "d": "m15.228 4.852-.923-.383" }],
    ["path", { "d": "m16.852 3.228-.383-.924" }],
    ["path", { "d": "m16.852 8.772-.383.923" }],
    ["path", { "d": "m19.148 3.228.383-.924" }],
    ["path", { "d": "m19.53 9.696-.382-.924" }],
    ["path", { "d": "m20.772 4.852.924-.383" }],
    ["path", { "d": "m20.772 7.148.924.383" }],
    [
      "path",
      {
        "d": "M22 13v2a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7"
      }
    ],
    ["path", { "d": "M8 21h8" }],
    ["circle", { "cx": "18", "cy": "6", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "monitor-cog" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Monitor_cog, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Monitor_cog,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Monitor_cog = hmr(Monitor_cog, () => Monitor_cog[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Monitor_cog[HMR].source;
    set(Monitor_cog[HMR].source, module.default[HMR].original);
  });
}
var monitor_cog_default = Monitor_cog;

// node_modules/lucide-svelte/dist/icons/monitor-dot.svelte
Monitor_dot[FILENAME] = "node_modules/lucide-svelte/dist/icons/monitor-dot.svelte";
function Monitor_dot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Monitor_dot);
  const iconNode = [
    ["path", { "d": "M12 17v4" }],
    [
      "path",
      {
        "d": "M22 12.307V15a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h8.693"
      }
    ],
    ["path", { "d": "M8 21h8" }],
    ["circle", { "cx": "19", "cy": "6", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "monitor-dot" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Monitor_dot, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Monitor_dot,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Monitor_dot = hmr(Monitor_dot, () => Monitor_dot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Monitor_dot[HMR].source;
    set(Monitor_dot[HMR].source, module.default[HMR].original);
  });
}
var monitor_dot_default = Monitor_dot;

// node_modules/lucide-svelte/dist/icons/monitor-down.svelte
Monitor_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/monitor-down.svelte";
function Monitor_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Monitor_down);
  const iconNode = [
    ["path", { "d": "M12 13V7" }],
    ["path", { "d": "m15 10-3 3-3-3" }],
    [
      "rect",
      { "width": "20", "height": "14", "x": "2", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M12 17v4" }],
    ["path", { "d": "M8 21h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "monitor-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Monitor_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Monitor_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Monitor_down = hmr(Monitor_down, () => Monitor_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Monitor_down[HMR].source;
    set(Monitor_down[HMR].source, module.default[HMR].original);
  });
}
var monitor_down_default = Monitor_down;

// node_modules/lucide-svelte/dist/icons/monitor-off.svelte
Monitor_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/monitor-off.svelte";
function Monitor_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Monitor_off);
  const iconNode = [
    ["path", { "d": "M17 17H4a2 2 0 0 1-2-2V5c0-1.5 1-2 1-2" }],
    ["path", { "d": "M22 15V5a2 2 0 0 0-2-2H9" }],
    ["path", { "d": "M8 21h8" }],
    ["path", { "d": "M12 17v4" }],
    ["path", { "d": "m2 2 20 20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "monitor-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Monitor_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Monitor_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Monitor_off = hmr(Monitor_off, () => Monitor_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Monitor_off[HMR].source;
    set(Monitor_off[HMR].source, module.default[HMR].original);
  });
}
var monitor_off_default = Monitor_off;

// node_modules/lucide-svelte/dist/icons/monitor-pause.svelte
Monitor_pause[FILENAME] = "node_modules/lucide-svelte/dist/icons/monitor-pause.svelte";
function Monitor_pause($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Monitor_pause);
  const iconNode = [
    ["path", { "d": "M10 13V7" }],
    ["path", { "d": "M14 13V7" }],
    [
      "rect",
      { "width": "20", "height": "14", "x": "2", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M12 17v4" }],
    ["path", { "d": "M8 21h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "monitor-pause" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Monitor_pause, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Monitor_pause,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Monitor_pause = hmr(Monitor_pause, () => Monitor_pause[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Monitor_pause[HMR].source;
    set(Monitor_pause[HMR].source, module.default[HMR].original);
  });
}
var monitor_pause_default = Monitor_pause;

// node_modules/lucide-svelte/dist/icons/monitor-play.svelte
Monitor_play[FILENAME] = "node_modules/lucide-svelte/dist/icons/monitor-play.svelte";
function Monitor_play($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Monitor_play);
  const iconNode = [
    [
      "path",
      {
        "d": "M15.033 9.44a.647.647 0 0 1 0 1.12l-4.065 2.352a.645.645 0 0 1-.968-.56V7.648a.645.645 0 0 1 .967-.56z"
      }
    ],
    ["path", { "d": "M12 17v4" }],
    ["path", { "d": "M8 21h8" }],
    [
      "rect",
      { "x": "2", "y": "3", "width": "20", "height": "14", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "monitor-play" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Monitor_play, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Monitor_play,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Monitor_play = hmr(Monitor_play, () => Monitor_play[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Monitor_play[HMR].source;
    set(Monitor_play[HMR].source, module.default[HMR].original);
  });
}
var monitor_play_default = Monitor_play;

// node_modules/lucide-svelte/dist/icons/monitor-smartphone.svelte
Monitor_smartphone[FILENAME] = "node_modules/lucide-svelte/dist/icons/monitor-smartphone.svelte";
function Monitor_smartphone($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Monitor_smartphone);
  const iconNode = [
    [
      "path",
      {
        "d": "M18 8V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v7a2 2 0 0 0 2 2h8"
      }
    ],
    ["path", { "d": "M10 19v-3.96 3.15" }],
    ["path", { "d": "M7 19h5" }],
    [
      "rect",
      {
        "width": "6",
        "height": "10",
        "x": "16",
        "y": "12",
        "rx": "2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "monitor-smartphone" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Monitor_smartphone, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Monitor_smartphone,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Monitor_smartphone = hmr(Monitor_smartphone, () => Monitor_smartphone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Monitor_smartphone[HMR].source;
    set(Monitor_smartphone[HMR].source, module.default[HMR].original);
  });
}
var monitor_smartphone_default = Monitor_smartphone;

// node_modules/lucide-svelte/dist/icons/monitor-speaker.svelte
Monitor_speaker[FILENAME] = "node_modules/lucide-svelte/dist/icons/monitor-speaker.svelte";
function Monitor_speaker($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Monitor_speaker);
  const iconNode = [
    ["path", { "d": "M5.5 20H8" }],
    ["path", { "d": "M17 9h.01" }],
    [
      "rect",
      {
        "width": "10",
        "height": "16",
        "x": "12",
        "y": "4",
        "rx": "2"
      }
    ],
    ["path", { "d": "M8 6H4a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2h4" }],
    ["circle", { "cx": "17", "cy": "15", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "monitor-speaker" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Monitor_speaker, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Monitor_speaker,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Monitor_speaker = hmr(Monitor_speaker, () => Monitor_speaker[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Monitor_speaker[HMR].source;
    set(Monitor_speaker[HMR].source, module.default[HMR].original);
  });
}
var monitor_speaker_default = Monitor_speaker;

// node_modules/lucide-svelte/dist/icons/monitor-stop.svelte
Monitor_stop[FILENAME] = "node_modules/lucide-svelte/dist/icons/monitor-stop.svelte";
function Monitor_stop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Monitor_stop);
  const iconNode = [
    ["path", { "d": "M12 17v4" }],
    ["path", { "d": "M8 21h8" }],
    [
      "rect",
      { "x": "2", "y": "3", "width": "20", "height": "14", "rx": "2" }
    ],
    [
      "rect",
      { "x": "9", "y": "7", "width": "6", "height": "6", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "monitor-stop" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Monitor_stop, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Monitor_stop,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Monitor_stop = hmr(Monitor_stop, () => Monitor_stop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Monitor_stop[HMR].source;
    set(Monitor_stop[HMR].source, module.default[HMR].original);
  });
}
var monitor_stop_default = Monitor_stop;

// node_modules/lucide-svelte/dist/icons/monitor-up.svelte
Monitor_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/monitor-up.svelte";
function Monitor_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Monitor_up);
  const iconNode = [
    ["path", { "d": "m9 10 3-3 3 3" }],
    ["path", { "d": "M12 13V7" }],
    [
      "rect",
      { "width": "20", "height": "14", "x": "2", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M12 17v4" }],
    ["path", { "d": "M8 21h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "monitor-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Monitor_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Monitor_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Monitor_up = hmr(Monitor_up, () => Monitor_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Monitor_up[HMR].source;
    set(Monitor_up[HMR].source, module.default[HMR].original);
  });
}
var monitor_up_default = Monitor_up;

// node_modules/lucide-svelte/dist/icons/monitor-x.svelte
Monitor_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/monitor-x.svelte";
function Monitor_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Monitor_x);
  const iconNode = [
    ["path", { "d": "m14.5 12.5-5-5" }],
    ["path", { "d": "m9.5 12.5 5-5" }],
    [
      "rect",
      { "width": "20", "height": "14", "x": "2", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M12 17v4" }],
    ["path", { "d": "M8 21h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "monitor-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Monitor_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Monitor_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Monitor_x = hmr(Monitor_x, () => Monitor_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Monitor_x[HMR].source;
    set(Monitor_x[HMR].source, module.default[HMR].original);
  });
}
var monitor_x_default = Monitor_x;

// node_modules/lucide-svelte/dist/icons/monitor.svelte
Monitor[FILENAME] = "node_modules/lucide-svelte/dist/icons/monitor.svelte";
function Monitor($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Monitor);
  const iconNode = [
    [
      "rect",
      { "width": "20", "height": "14", "x": "2", "y": "3", "rx": "2" }
    ],
    ["line", { "x1": "8", "x2": "16", "y1": "21", "y2": "21" }],
    ["line", { "x1": "12", "x2": "12", "y1": "17", "y2": "21" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "monitor" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Monitor, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Monitor,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Monitor = hmr(Monitor, () => Monitor[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Monitor[HMR].source;
    set(Monitor[HMR].source, module.default[HMR].original);
  });
}
var monitor_default = Monitor;

// node_modules/lucide-svelte/dist/icons/moon-star.svelte
Moon_star[FILENAME] = "node_modules/lucide-svelte/dist/icons/moon-star.svelte";
function Moon_star($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Moon_star);
  const iconNode = [
    ["path", { "d": "M18 5h4" }],
    ["path", { "d": "M20 3v4" }],
    [
      "path",
      {
        "d": "M20.985 12.486a9 9 0 1 1-9.473-9.472c.405-.022.617.46.402.803a6 6 0 0 0 8.268 8.268c.344-.215.825-.004.803.401"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "moon-star" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Moon_star, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Moon_star,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Moon_star = hmr(Moon_star, () => Moon_star[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Moon_star[HMR].source;
    set(Moon_star[HMR].source, module.default[HMR].original);
  });
}
var moon_star_default = Moon_star;

// node_modules/lucide-svelte/dist/icons/moon.svelte
Moon[FILENAME] = "node_modules/lucide-svelte/dist/icons/moon.svelte";
function Moon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Moon);
  const iconNode = [
    [
      "path",
      {
        "d": "M20.985 12.486a9 9 0 1 1-9.473-9.472c.405-.022.617.46.402.803a6 6 0 0 0 8.268 8.268c.344-.215.825-.004.803.401"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "moon" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Moon, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Moon,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Moon = hmr(Moon, () => Moon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Moon[HMR].source;
    set(Moon[HMR].source, module.default[HMR].original);
  });
}
var moon_default = Moon;

// node_modules/lucide-svelte/dist/icons/mountain-snow.svelte
Mountain_snow[FILENAME] = "node_modules/lucide-svelte/dist/icons/mountain-snow.svelte";
function Mountain_snow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mountain_snow);
  const iconNode = [
    ["path", { "d": "m8 3 4 8 5-5 5 15H2L8 3z" }],
    [
      "path",
      {
        "d": "M4.14 15.08c2.62-1.57 5.24-1.43 7.86.42 2.74 1.94 5.49 2 8.23.19"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mountain-snow" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mountain_snow, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mountain_snow,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mountain_snow = hmr(Mountain_snow, () => Mountain_snow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mountain_snow[HMR].source;
    set(Mountain_snow[HMR].source, module.default[HMR].original);
  });
}
var mountain_snow_default = Mountain_snow;

// node_modules/lucide-svelte/dist/icons/mouse-off.svelte
Mouse_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/mouse-off.svelte";
function Mouse_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mouse_off);
  const iconNode = [
    ["path", { "d": "M12 6v.343" }],
    [
      "path",
      { "d": "M18.218 18.218A7 7 0 0 1 5 15V9a7 7 0 0 1 .782-3.218" }
    ],
    ["path", { "d": "M19 13.343V9A7 7 0 0 0 8.56 2.902" }],
    ["path", { "d": "M22 22 2 2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mouse-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mouse_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mouse_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mouse_off = hmr(Mouse_off, () => Mouse_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mouse_off[HMR].source;
    set(Mouse_off[HMR].source, module.default[HMR].original);
  });
}
var mouse_off_default = Mouse_off;

// node_modules/lucide-svelte/dist/icons/mountain.svelte
Mountain[FILENAME] = "node_modules/lucide-svelte/dist/icons/mountain.svelte";
function Mountain($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mountain);
  const iconNode = [["path", { "d": "m8 3 4 8 5-5 5 15H2L8 3z" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mountain" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mountain, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mountain,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mountain = hmr(Mountain, () => Mountain[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mountain[HMR].source;
    set(Mountain[HMR].source, module.default[HMR].original);
  });
}
var mountain_default = Mountain;

// node_modules/lucide-svelte/dist/icons/mouse-pointer-2.svelte
Mouse_pointer_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/mouse-pointer-2.svelte";
function Mouse_pointer_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mouse_pointer_2);
  const iconNode = [
    [
      "path",
      {
        "d": "M4.037 4.688a.495.495 0 0 1 .651-.651l16 6.5a.5.5 0 0 1-.063.947l-6.124 1.58a2 2 0 0 0-1.438 1.435l-1.579 6.126a.5.5 0 0 1-.947.063z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mouse-pointer-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mouse_pointer_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mouse_pointer_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mouse_pointer_2 = hmr(Mouse_pointer_2, () => Mouse_pointer_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mouse_pointer_2[HMR].source;
    set(Mouse_pointer_2[HMR].source, module.default[HMR].original);
  });
}
var mouse_pointer_2_default = Mouse_pointer_2;

// node_modules/lucide-svelte/dist/icons/mouse-pointer-ban.svelte
Mouse_pointer_ban[FILENAME] = "node_modules/lucide-svelte/dist/icons/mouse-pointer-ban.svelte";
function Mouse_pointer_ban($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mouse_pointer_ban);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.034 2.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.944L8.204 7.545a1 1 0 0 0-.66.66l-1.066 3.443a.5.5 0 0 1-.944.033z"
      }
    ],
    ["circle", { "cx": "16", "cy": "16", "r": "6" }],
    ["path", { "d": "m11.8 11.8 8.4 8.4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mouse-pointer-ban" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mouse_pointer_ban, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mouse_pointer_ban,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mouse_pointer_ban = hmr(Mouse_pointer_ban, () => Mouse_pointer_ban[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mouse_pointer_ban[HMR].source;
    set(Mouse_pointer_ban[HMR].source, module.default[HMR].original);
  });
}
var mouse_pointer_ban_default = Mouse_pointer_ban;

// node_modules/lucide-svelte/dist/icons/mouse-pointer-click.svelte
Mouse_pointer_click[FILENAME] = "node_modules/lucide-svelte/dist/icons/mouse-pointer-click.svelte";
function Mouse_pointer_click($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mouse_pointer_click);
  const iconNode = [
    ["path", { "d": "M14 4.1 12 6" }],
    ["path", { "d": "m5.1 8-2.9-.8" }],
    ["path", { "d": "m6 12-1.9 2" }],
    ["path", { "d": "M7.2 2.2 8 5.1" }],
    [
      "path",
      {
        "d": "M9.037 9.69a.498.498 0 0 1 .653-.653l11 4.5a.5.5 0 0 1-.074.949l-4.349 1.041a1 1 0 0 0-.74.739l-1.04 4.35a.5.5 0 0 1-.95.074z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mouse-pointer-click" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mouse_pointer_click, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mouse_pointer_click,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mouse_pointer_click = hmr(Mouse_pointer_click, () => Mouse_pointer_click[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mouse_pointer_click[HMR].source;
    set(Mouse_pointer_click[HMR].source, module.default[HMR].original);
  });
}
var mouse_pointer_click_default = Mouse_pointer_click;

// node_modules/lucide-svelte/dist/icons/mouse-pointer.svelte
Mouse_pointer[FILENAME] = "node_modules/lucide-svelte/dist/icons/mouse-pointer.svelte";
function Mouse_pointer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mouse_pointer);
  const iconNode = [
    ["path", { "d": "M12.586 12.586 19 19" }],
    [
      "path",
      {
        "d": "M3.688 3.037a.497.497 0 0 0-.651.651l6.5 15.999a.501.501 0 0 0 .947-.062l1.569-6.083a2 2 0 0 1 1.448-1.479l6.124-1.579a.5.5 0 0 0 .063-.947z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mouse-pointer" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mouse_pointer, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mouse_pointer,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mouse_pointer = hmr(Mouse_pointer, () => Mouse_pointer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mouse_pointer[HMR].source;
    set(Mouse_pointer[HMR].source, module.default[HMR].original);
  });
}
var mouse_pointer_default = Mouse_pointer;

// node_modules/lucide-svelte/dist/icons/mouse.svelte
Mouse[FILENAME] = "node_modules/lucide-svelte/dist/icons/mouse.svelte";
function Mouse($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Mouse);
  const iconNode = [
    [
      "rect",
      { "x": "5", "y": "2", "width": "14", "height": "20", "rx": "7" }
    ],
    ["path", { "d": "M12 6v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "mouse" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Mouse, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Mouse,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Mouse = hmr(Mouse, () => Mouse[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mouse[HMR].source;
    set(Mouse[HMR].source, module.default[HMR].original);
  });
}
var mouse_default = Mouse;

// node_modules/lucide-svelte/dist/icons/move-3d.svelte
Move_3d[FILENAME] = "node_modules/lucide-svelte/dist/icons/move-3d.svelte";
function Move_3d($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Move_3d);
  const iconNode = [
    ["path", { "d": "M5 3v16h16" }],
    ["path", { "d": "m5 19 6-6" }],
    ["path", { "d": "m2 6 3-3 3 3" }],
    ["path", { "d": "m18 16 3 3-3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "move-3d" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Move_3d, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Move_3d,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Move_3d = hmr(Move_3d, () => Move_3d[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Move_3d[HMR].source;
    set(Move_3d[HMR].source, module.default[HMR].original);
  });
}
var move_3d_default = Move_3d;

// node_modules/lucide-svelte/dist/icons/move-diagonal-2.svelte
Move_diagonal_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/move-diagonal-2.svelte";
function Move_diagonal_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Move_diagonal_2);
  const iconNode = [
    ["path", { "d": "M19 13v6h-6" }],
    ["path", { "d": "M5 11V5h6" }],
    ["path", { "d": "m5 5 14 14" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "move-diagonal-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Move_diagonal_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Move_diagonal_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Move_diagonal_2 = hmr(Move_diagonal_2, () => Move_diagonal_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Move_diagonal_2[HMR].source;
    set(Move_diagonal_2[HMR].source, module.default[HMR].original);
  });
}
var move_diagonal_2_default = Move_diagonal_2;

// node_modules/lucide-svelte/dist/icons/move-down-left.svelte
Move_down_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/move-down-left.svelte";
function Move_down_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Move_down_left);
  const iconNode = [
    ["path", { "d": "M11 19H5V13" }],
    ["path", { "d": "M19 5L5 19" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "move-down-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Move_down_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Move_down_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Move_down_left = hmr(Move_down_left, () => Move_down_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Move_down_left[HMR].source;
    set(Move_down_left[HMR].source, module.default[HMR].original);
  });
}
var move_down_left_default = Move_down_left;

// node_modules/lucide-svelte/dist/icons/move-diagonal.svelte
Move_diagonal[FILENAME] = "node_modules/lucide-svelte/dist/icons/move-diagonal.svelte";
function Move_diagonal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Move_diagonal);
  const iconNode = [
    ["path", { "d": "M11 19H5v-6" }],
    ["path", { "d": "M13 5h6v6" }],
    ["path", { "d": "M19 5 5 19" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "move-diagonal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Move_diagonal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Move_diagonal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Move_diagonal = hmr(Move_diagonal, () => Move_diagonal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Move_diagonal[HMR].source;
    set(Move_diagonal[HMR].source, module.default[HMR].original);
  });
}
var move_diagonal_default = Move_diagonal;

// node_modules/lucide-svelte/dist/icons/move-down-right.svelte
Move_down_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/move-down-right.svelte";
function Move_down_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Move_down_right);
  const iconNode = [
    ["path", { "d": "M19 13V19H13" }],
    ["path", { "d": "M5 5L19 19" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "move-down-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Move_down_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Move_down_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Move_down_right = hmr(Move_down_right, () => Move_down_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Move_down_right[HMR].source;
    set(Move_down_right[HMR].source, module.default[HMR].original);
  });
}
var move_down_right_default = Move_down_right;

// node_modules/lucide-svelte/dist/icons/move-down.svelte
Move_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/move-down.svelte";
function Move_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Move_down);
  const iconNode = [
    ["path", { "d": "M8 18L12 22L16 18" }],
    ["path", { "d": "M12 2V22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "move-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Move_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Move_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Move_down = hmr(Move_down, () => Move_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Move_down[HMR].source;
    set(Move_down[HMR].source, module.default[HMR].original);
  });
}
var move_down_default = Move_down;

// node_modules/lucide-svelte/dist/icons/move-horizontal.svelte
Move_horizontal[FILENAME] = "node_modules/lucide-svelte/dist/icons/move-horizontal.svelte";
function Move_horizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Move_horizontal);
  const iconNode = [
    ["path", { "d": "m18 8 4 4-4 4" }],
    ["path", { "d": "M2 12h20" }],
    ["path", { "d": "m6 8-4 4 4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "move-horizontal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Move_horizontal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Move_horizontal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Move_horizontal = hmr(Move_horizontal, () => Move_horizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Move_horizontal[HMR].source;
    set(Move_horizontal[HMR].source, module.default[HMR].original);
  });
}
var move_horizontal_default = Move_horizontal;

// node_modules/lucide-svelte/dist/icons/move-left.svelte
Move_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/move-left.svelte";
function Move_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Move_left);
  const iconNode = [
    ["path", { "d": "M6 8L2 12L6 16" }],
    ["path", { "d": "M2 12H22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "move-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Move_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Move_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Move_left = hmr(Move_left, () => Move_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Move_left[HMR].source;
    set(Move_left[HMR].source, module.default[HMR].original);
  });
}
var move_left_default = Move_left;

// node_modules/lucide-svelte/dist/icons/move-right.svelte
Move_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/move-right.svelte";
function Move_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Move_right);
  const iconNode = [
    ["path", { "d": "M18 8L22 12L18 16" }],
    ["path", { "d": "M2 12H22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "move-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Move_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Move_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Move_right = hmr(Move_right, () => Move_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Move_right[HMR].source;
    set(Move_right[HMR].source, module.default[HMR].original);
  });
}
var move_right_default = Move_right;

// node_modules/lucide-svelte/dist/icons/move-up-left.svelte
Move_up_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/move-up-left.svelte";
function Move_up_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Move_up_left);
  const iconNode = [
    ["path", { "d": "M5 11V5H11" }],
    ["path", { "d": "M5 5L19 19" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "move-up-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Move_up_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Move_up_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Move_up_left = hmr(Move_up_left, () => Move_up_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Move_up_left[HMR].source;
    set(Move_up_left[HMR].source, module.default[HMR].original);
  });
}
var move_up_left_default = Move_up_left;

// node_modules/lucide-svelte/dist/icons/move-up-right.svelte
Move_up_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/move-up-right.svelte";
function Move_up_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Move_up_right);
  const iconNode = [
    ["path", { "d": "M13 5H19V11" }],
    ["path", { "d": "M19 5L5 19" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "move-up-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Move_up_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Move_up_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Move_up_right = hmr(Move_up_right, () => Move_up_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Move_up_right[HMR].source;
    set(Move_up_right[HMR].source, module.default[HMR].original);
  });
}
var move_up_right_default = Move_up_right;

// node_modules/lucide-svelte/dist/icons/move-up.svelte
Move_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/move-up.svelte";
function Move_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Move_up);
  const iconNode = [
    ["path", { "d": "M8 6L12 2L16 6" }],
    ["path", { "d": "M12 2V22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "move-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Move_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Move_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Move_up = hmr(Move_up, () => Move_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Move_up[HMR].source;
    set(Move_up[HMR].source, module.default[HMR].original);
  });
}
var move_up_default = Move_up;

// node_modules/lucide-svelte/dist/icons/move-vertical.svelte
Move_vertical[FILENAME] = "node_modules/lucide-svelte/dist/icons/move-vertical.svelte";
function Move_vertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Move_vertical);
  const iconNode = [
    ["path", { "d": "M12 2v20" }],
    ["path", { "d": "m8 18 4 4 4-4" }],
    ["path", { "d": "m8 6 4-4 4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "move-vertical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Move_vertical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Move_vertical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Move_vertical = hmr(Move_vertical, () => Move_vertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Move_vertical[HMR].source;
    set(Move_vertical[HMR].source, module.default[HMR].original);
  });
}
var move_vertical_default = Move_vertical;

// node_modules/lucide-svelte/dist/icons/move.svelte
Move[FILENAME] = "node_modules/lucide-svelte/dist/icons/move.svelte";
function Move($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Move);
  const iconNode = [
    ["path", { "d": "M12 2v20" }],
    ["path", { "d": "m15 19-3 3-3-3" }],
    ["path", { "d": "m19 9 3 3-3 3" }],
    ["path", { "d": "M2 12h20" }],
    ["path", { "d": "m5 9-3 3 3 3" }],
    ["path", { "d": "m9 5 3-3 3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "move" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Move, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Move,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Move = hmr(Move, () => Move[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Move[HMR].source;
    set(Move[HMR].source, module.default[HMR].original);
  });
}
var move_default = Move;

// node_modules/lucide-svelte/dist/icons/music-2.svelte
Music_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/music-2.svelte";
function Music_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Music_2);
  const iconNode = [
    ["circle", { "cx": "8", "cy": "18", "r": "4" }],
    ["path", { "d": "M12 18V2l7 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "music-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Music_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Music_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Music_2 = hmr(Music_2, () => Music_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Music_2[HMR].source;
    set(Music_2[HMR].source, module.default[HMR].original);
  });
}
var music_2_default = Music_2;

// node_modules/lucide-svelte/dist/icons/music-3.svelte
Music_3[FILENAME] = "node_modules/lucide-svelte/dist/icons/music-3.svelte";
function Music_3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Music_3);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "18", "r": "4" }],
    ["path", { "d": "M16 18V2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "music-3" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Music_3, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Music_3,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Music_3 = hmr(Music_3, () => Music_3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Music_3[HMR].source;
    set(Music_3[HMR].source, module.default[HMR].original);
  });
}
var music_3_default = Music_3;

// node_modules/lucide-svelte/dist/icons/music-4.svelte
Music_4[FILENAME] = "node_modules/lucide-svelte/dist/icons/music-4.svelte";
function Music_4($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Music_4);
  const iconNode = [
    ["path", { "d": "M9 18V5l12-2v13" }],
    ["path", { "d": "m9 9 12-2" }],
    ["circle", { "cx": "6", "cy": "18", "r": "3" }],
    ["circle", { "cx": "18", "cy": "16", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "music-4" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Music_4, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Music_4,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Music_4 = hmr(Music_4, () => Music_4[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Music_4[HMR].source;
    set(Music_4[HMR].source, module.default[HMR].original);
  });
}
var music_4_default = Music_4;

// node_modules/lucide-svelte/dist/icons/music.svelte
Music[FILENAME] = "node_modules/lucide-svelte/dist/icons/music.svelte";
function Music($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Music);
  const iconNode = [
    ["path", { "d": "M9 18V5l12-2v13" }],
    ["circle", { "cx": "6", "cy": "18", "r": "3" }],
    ["circle", { "cx": "18", "cy": "16", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "music" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Music, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Music,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Music = hmr(Music, () => Music[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Music[HMR].source;
    set(Music[HMR].source, module.default[HMR].original);
  });
}
var music_default = Music;

// node_modules/lucide-svelte/dist/icons/navigation-2-off.svelte
Navigation_2_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/navigation-2-off.svelte";
function Navigation_2_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Navigation_2_off);
  const iconNode = [
    ["path", { "d": "M9.31 9.31 5 21l7-4 7 4-1.17-3.17" }],
    ["path", { "d": "M14.53 8.88 12 2l-1.17 3.17" }],
    ["line", { "x1": "2", "x2": "22", "y1": "2", "y2": "22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "navigation-2-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Navigation_2_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Navigation_2_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Navigation_2_off = hmr(Navigation_2_off, () => Navigation_2_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Navigation_2_off[HMR].source;
    set(Navigation_2_off[HMR].source, module.default[HMR].original);
  });
}
var navigation_2_off_default = Navigation_2_off;

// node_modules/lucide-svelte/dist/icons/navigation-2.svelte
Navigation_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/navigation-2.svelte";
function Navigation_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Navigation_2);
  const iconNode = [["polygon", { "points": "12 2 19 21 12 17 5 21 12 2" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "navigation-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Navigation_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Navigation_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Navigation_2 = hmr(Navigation_2, () => Navigation_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Navigation_2[HMR].source;
    set(Navigation_2[HMR].source, module.default[HMR].original);
  });
}
var navigation_2_default = Navigation_2;

// node_modules/lucide-svelte/dist/icons/navigation-off.svelte
Navigation_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/navigation-off.svelte";
function Navigation_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Navigation_off);
  const iconNode = [
    ["path", { "d": "M8.43 8.43 3 11l8 2 2 8 2.57-5.43" }],
    ["path", { "d": "M17.39 11.73 22 2l-9.73 4.61" }],
    ["line", { "x1": "2", "x2": "22", "y1": "2", "y2": "22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "navigation-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Navigation_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Navigation_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Navigation_off = hmr(Navigation_off, () => Navigation_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Navigation_off[HMR].source;
    set(Navigation_off[HMR].source, module.default[HMR].original);
  });
}
var navigation_off_default = Navigation_off;

// node_modules/lucide-svelte/dist/icons/navigation.svelte
Navigation[FILENAME] = "node_modules/lucide-svelte/dist/icons/navigation.svelte";
function Navigation($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Navigation);
  const iconNode = [["polygon", { "points": "3 11 22 2 13 21 11 13 3 11" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "navigation" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Navigation, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Navigation,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Navigation = hmr(Navigation, () => Navigation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Navigation[HMR].source;
    set(Navigation[HMR].source, module.default[HMR].original);
  });
}
var navigation_default = Navigation;

// node_modules/lucide-svelte/dist/icons/network.svelte
Network[FILENAME] = "node_modules/lucide-svelte/dist/icons/network.svelte";
function Network($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Network);
  const iconNode = [
    [
      "rect",
      { "x": "16", "y": "16", "width": "6", "height": "6", "rx": "1" }
    ],
    [
      "rect",
      { "x": "2", "y": "16", "width": "6", "height": "6", "rx": "1" }
    ],
    [
      "rect",
      { "x": "9", "y": "2", "width": "6", "height": "6", "rx": "1" }
    ],
    ["path", { "d": "M5 16v-3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3" }],
    ["path", { "d": "M12 12V8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "network" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Network, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Network,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Network = hmr(Network, () => Network[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Network[HMR].source;
    set(Network[HMR].source, module.default[HMR].original);
  });
}
var network_default = Network;

// node_modules/lucide-svelte/dist/icons/newspaper.svelte
Newspaper[FILENAME] = "node_modules/lucide-svelte/dist/icons/newspaper.svelte";
function Newspaper($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Newspaper);
  const iconNode = [
    ["path", { "d": "M15 18h-5" }],
    ["path", { "d": "M18 14h-8" }],
    [
      "path",
      {
        "d": "M4 22h16a2 2 0 0 0 2-2V4a2 2 0 0 0-2-2H8a2 2 0 0 0-2 2v16a2 2 0 0 1-4 0v-9a2 2 0 0 1 2-2h2"
      }
    ],
    [
      "rect",
      { "width": "8", "height": "4", "x": "10", "y": "6", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "newspaper" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Newspaper, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Newspaper,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Newspaper = hmr(Newspaper, () => Newspaper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Newspaper[HMR].source;
    set(Newspaper[HMR].source, module.default[HMR].original);
  });
}
var newspaper_default = Newspaper;

// node_modules/lucide-svelte/dist/icons/nfc.svelte
Nfc[FILENAME] = "node_modules/lucide-svelte/dist/icons/nfc.svelte";
function Nfc($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Nfc);
  const iconNode = [
    ["path", { "d": "M6 8.32a7.43 7.43 0 0 1 0 7.36" }],
    ["path", { "d": "M9.46 6.21a11.76 11.76 0 0 1 0 11.58" }],
    ["path", { "d": "M12.91 4.1a15.91 15.91 0 0 1 .01 15.8" }],
    ["path", { "d": "M16.37 2a20.16 20.16 0 0 1 0 20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "nfc" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Nfc, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Nfc,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Nfc = hmr(Nfc, () => Nfc[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Nfc[HMR].source;
    set(Nfc[HMR].source, module.default[HMR].original);
  });
}
var nfc_default = Nfc;

// node_modules/lucide-svelte/dist/icons/non-binary.svelte
Non_binary[FILENAME] = "node_modules/lucide-svelte/dist/icons/non-binary.svelte";
function Non_binary($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Non_binary);
  const iconNode = [
    ["path", { "d": "M12 2v10" }],
    ["path", { "d": "m8.5 4 7 4" }],
    ["path", { "d": "m8.5 8 7-4" }],
    ["circle", { "cx": "12", "cy": "17", "r": "5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "non-binary" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Non_binary, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Non_binary,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Non_binary = hmr(Non_binary, () => Non_binary[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Non_binary[HMR].source;
    set(Non_binary[HMR].source, module.default[HMR].original);
  });
}
var non_binary_default = Non_binary;

// node_modules/lucide-svelte/dist/icons/notebook-pen.svelte
Notebook_pen[FILENAME] = "node_modules/lucide-svelte/dist/icons/notebook-pen.svelte";
function Notebook_pen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Notebook_pen);
  const iconNode = [
    [
      "path",
      {
        "d": "M13.4 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-7.4"
      }
    ],
    ["path", { "d": "M2 6h4" }],
    ["path", { "d": "M2 10h4" }],
    ["path", { "d": "M2 14h4" }],
    ["path", { "d": "M2 18h4" }],
    [
      "path",
      {
        "d": "M21.378 5.626a1 1 0 1 0-3.004-3.004l-5.01 5.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "notebook-pen" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Notebook_pen, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Notebook_pen,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Notebook_pen = hmr(Notebook_pen, () => Notebook_pen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Notebook_pen[HMR].source;
    set(Notebook_pen[HMR].source, module.default[HMR].original);
  });
}
var notebook_pen_default = Notebook_pen;

// node_modules/lucide-svelte/dist/icons/notebook-tabs.svelte
Notebook_tabs[FILENAME] = "node_modules/lucide-svelte/dist/icons/notebook-tabs.svelte";
function Notebook_tabs($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Notebook_tabs);
  const iconNode = [
    ["path", { "d": "M2 6h4" }],
    ["path", { "d": "M2 10h4" }],
    ["path", { "d": "M2 14h4" }],
    ["path", { "d": "M2 18h4" }],
    [
      "rect",
      { "width": "16", "height": "20", "x": "4", "y": "2", "rx": "2" }
    ],
    ["path", { "d": "M15 2v20" }],
    ["path", { "d": "M15 7h5" }],
    ["path", { "d": "M15 12h5" }],
    ["path", { "d": "M15 17h5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "notebook-tabs" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Notebook_tabs, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Notebook_tabs,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Notebook_tabs = hmr(Notebook_tabs, () => Notebook_tabs[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Notebook_tabs[HMR].source;
    set(Notebook_tabs[HMR].source, module.default[HMR].original);
  });
}
var notebook_tabs_default = Notebook_tabs;

// node_modules/lucide-svelte/dist/icons/notebook-text.svelte
Notebook_text[FILENAME] = "node_modules/lucide-svelte/dist/icons/notebook-text.svelte";
function Notebook_text($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Notebook_text);
  const iconNode = [
    ["path", { "d": "M2 6h4" }],
    ["path", { "d": "M2 10h4" }],
    ["path", { "d": "M2 14h4" }],
    ["path", { "d": "M2 18h4" }],
    [
      "rect",
      { "width": "16", "height": "20", "x": "4", "y": "2", "rx": "2" }
    ],
    ["path", { "d": "M9.5 8h5" }],
    ["path", { "d": "M9.5 12H16" }],
    ["path", { "d": "M9.5 16H14" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "notebook-text" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Notebook_text, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Notebook_text,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Notebook_text = hmr(Notebook_text, () => Notebook_text[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Notebook_text[HMR].source;
    set(Notebook_text[HMR].source, module.default[HMR].original);
  });
}
var notebook_text_default = Notebook_text;

// node_modules/lucide-svelte/dist/icons/notebook.svelte
Notebook[FILENAME] = "node_modules/lucide-svelte/dist/icons/notebook.svelte";
function Notebook($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Notebook);
  const iconNode = [
    ["path", { "d": "M2 6h4" }],
    ["path", { "d": "M2 10h4" }],
    ["path", { "d": "M2 14h4" }],
    ["path", { "d": "M2 18h4" }],
    [
      "rect",
      { "width": "16", "height": "20", "x": "4", "y": "2", "rx": "2" }
    ],
    ["path", { "d": "M16 2v20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "notebook" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Notebook, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Notebook,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Notebook = hmr(Notebook, () => Notebook[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Notebook[HMR].source;
    set(Notebook[HMR].source, module.default[HMR].original);
  });
}
var notebook_default = Notebook;

// node_modules/lucide-svelte/dist/icons/notepad-text-dashed.svelte
Notepad_text_dashed[FILENAME] = "node_modules/lucide-svelte/dist/icons/notepad-text-dashed.svelte";
function Notepad_text_dashed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Notepad_text_dashed);
  const iconNode = [
    ["path", { "d": "M8 2v4" }],
    ["path", { "d": "M12 2v4" }],
    ["path", { "d": "M16 2v4" }],
    ["path", { "d": "M16 4h2a2 2 0 0 1 2 2v2" }],
    ["path", { "d": "M20 12v2" }],
    ["path", { "d": "M20 18v2a2 2 0 0 1-2 2h-1" }],
    ["path", { "d": "M13 22h-2" }],
    ["path", { "d": "M7 22H6a2 2 0 0 1-2-2v-2" }],
    ["path", { "d": "M4 14v-2" }],
    ["path", { "d": "M4 8V6a2 2 0 0 1 2-2h2" }],
    ["path", { "d": "M8 10h6" }],
    ["path", { "d": "M8 14h8" }],
    ["path", { "d": "M8 18h5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "notepad-text-dashed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Notepad_text_dashed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Notepad_text_dashed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Notepad_text_dashed = hmr(Notepad_text_dashed, () => Notepad_text_dashed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Notepad_text_dashed[HMR].source;
    set(Notepad_text_dashed[HMR].source, module.default[HMR].original);
  });
}
var notepad_text_dashed_default = Notepad_text_dashed;

// node_modules/lucide-svelte/dist/icons/notepad-text.svelte
Notepad_text[FILENAME] = "node_modules/lucide-svelte/dist/icons/notepad-text.svelte";
function Notepad_text($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Notepad_text);
  const iconNode = [
    ["path", { "d": "M8 2v4" }],
    ["path", { "d": "M12 2v4" }],
    ["path", { "d": "M16 2v4" }],
    [
      "rect",
      { "width": "16", "height": "18", "x": "4", "y": "4", "rx": "2" }
    ],
    ["path", { "d": "M8 10h6" }],
    ["path", { "d": "M8 14h8" }],
    ["path", { "d": "M8 18h5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "notepad-text" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Notepad_text, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Notepad_text,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Notepad_text = hmr(Notepad_text, () => Notepad_text[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Notepad_text[HMR].source;
    set(Notepad_text[HMR].source, module.default[HMR].original);
  });
}
var notepad_text_default = Notepad_text;

// node_modules/lucide-svelte/dist/icons/nut-off.svelte
Nut_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/nut-off.svelte";
function Nut_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Nut_off);
  const iconNode = [
    ["path", { "d": "M12 4V2" }],
    [
      "path",
      {
        "d": "M5 10v4a7.004 7.004 0 0 0 5.277 6.787c.412.104.802.292 1.102.592L12 22l.621-.621c.3-.3.69-.488 1.102-.592a7.01 7.01 0 0 0 4.125-2.939"
      }
    ],
    ["path", { "d": "M19 10v3.343" }],
    [
      "path",
      {
        "d": "M12 12c-1.349-.573-1.905-1.005-2.5-2-.546.902-1.048 1.353-2.5 2-1.018-.644-1.46-1.08-2-2-1.028.71-1.69.918-3 1 1.081-1.048 1.757-2.03 2-3 .194-.776.84-1.551 1.79-2.21m11.654 5.997c.887-.457 1.28-.891 1.556-1.787 1.032.916 1.683 1.157 3 1-1.297-1.036-1.758-2.03-2-3-.5-2-4-4-8-4-.74 0-1.461.068-2.15.192"
      }
    ],
    ["line", { "x1": "2", "x2": "22", "y1": "2", "y2": "22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "nut-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Nut_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Nut_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Nut_off = hmr(Nut_off, () => Nut_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Nut_off[HMR].source;
    set(Nut_off[HMR].source, module.default[HMR].original);
  });
}
var nut_off_default = Nut_off;

// node_modules/lucide-svelte/dist/icons/nut.svelte
Nut[FILENAME] = "node_modules/lucide-svelte/dist/icons/nut.svelte";
function Nut($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Nut);
  const iconNode = [
    ["path", { "d": "M12 4V2" }],
    [
      "path",
      {
        "d": "M5 10v4a7.004 7.004 0 0 0 5.277 6.787c.412.104.802.292 1.102.592L12 22l.621-.621c.3-.3.69-.488 1.102-.592A7.003 7.003 0 0 0 19 14v-4"
      }
    ],
    [
      "path",
      {
        "d": "M12 4C8 4 4.5 6 4 8c-.243.97-.919 1.952-2 3 1.31-.082 1.972-.29 3-1 .54.92.982 1.356 2 2 1.452-.647 1.954-1.098 2.5-2 .595.995 1.151 1.427 2.5 2 1.31-.621 1.862-1.058 2.5-2 .629.977 1.162 1.423 2.5 2 1.209-.548 1.68-.967 2-2 1.032.916 1.683 1.157 3 1-1.297-1.036-1.758-2.03-2-3-.5-2-4-4-8-4Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "nut" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Nut, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Nut,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Nut = hmr(Nut, () => Nut[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Nut[HMR].source;
    set(Nut[HMR].source, module.default[HMR].original);
  });
}
var nut_default = Nut;

// node_modules/lucide-svelte/dist/icons/octagon-alert.svelte
Octagon_alert[FILENAME] = "node_modules/lucide-svelte/dist/icons/octagon-alert.svelte";
function Octagon_alert($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Octagon_alert);
  const iconNode = [
    ["path", { "d": "M12 16h.01" }],
    ["path", { "d": "M12 8v4" }],
    [
      "path",
      {
        "d": "M15.312 2a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586l-4.688-4.688A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "octagon-alert" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Octagon_alert, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Octagon_alert,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Octagon_alert = hmr(Octagon_alert, () => Octagon_alert[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Octagon_alert[HMR].source;
    set(Octagon_alert[HMR].source, module.default[HMR].original);
  });
}
var octagon_alert_default = Octagon_alert;

// node_modules/lucide-svelte/dist/icons/octagon-minus.svelte
Octagon_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/octagon-minus.svelte";
function Octagon_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Octagon_minus);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z"
      }
    ],
    ["path", { "d": "M8 12h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "octagon-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Octagon_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Octagon_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Octagon_minus = hmr(Octagon_minus, () => Octagon_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Octagon_minus[HMR].source;
    set(Octagon_minus[HMR].source, module.default[HMR].original);
  });
}
var octagon_minus_default = Octagon_minus;

// node_modules/lucide-svelte/dist/icons/octagon-pause.svelte
Octagon_pause[FILENAME] = "node_modules/lucide-svelte/dist/icons/octagon-pause.svelte";
function Octagon_pause($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Octagon_pause);
  const iconNode = [
    ["path", { "d": "M10 15V9" }],
    ["path", { "d": "M14 15V9" }],
    [
      "path",
      {
        "d": "M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "octagon-pause" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Octagon_pause, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Octagon_pause,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Octagon_pause = hmr(Octagon_pause, () => Octagon_pause[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Octagon_pause[HMR].source;
    set(Octagon_pause[HMR].source, module.default[HMR].original);
  });
}
var octagon_pause_default = Octagon_pause;

// node_modules/lucide-svelte/dist/icons/octagon.svelte
Octagon[FILENAME] = "node_modules/lucide-svelte/dist/icons/octagon.svelte";
function Octagon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Octagon);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "octagon" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Octagon, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Octagon,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Octagon = hmr(Octagon, () => Octagon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Octagon[HMR].source;
    set(Octagon[HMR].source, module.default[HMR].original);
  });
}
var octagon_default = Octagon;

// node_modules/lucide-svelte/dist/icons/omega.svelte
Omega[FILENAME] = "node_modules/lucide-svelte/dist/icons/omega.svelte";
function Omega($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Omega);
  const iconNode = [
    [
      "path",
      {
        "d": "M3 20h4.5a.5.5 0 0 0 .5-.5v-.282a.52.52 0 0 0-.247-.437 8 8 0 1 1 8.494-.001.52.52 0 0 0-.247.438v.282a.5.5 0 0 0 .5.5H21"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "omega" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Omega, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Omega,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Omega = hmr(Omega, () => Omega[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Omega[HMR].source;
    set(Omega[HMR].source, module.default[HMR].original);
  });
}
var omega_default = Omega;

// node_modules/lucide-svelte/dist/icons/octagon-x.svelte
Octagon_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/octagon-x.svelte";
function Octagon_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Octagon_x);
  const iconNode = [
    ["path", { "d": "m15 9-6 6" }],
    [
      "path",
      {
        "d": "M2.586 16.726A2 2 0 0 1 2 15.312V8.688a2 2 0 0 1 .586-1.414l4.688-4.688A2 2 0 0 1 8.688 2h6.624a2 2 0 0 1 1.414.586l4.688 4.688A2 2 0 0 1 22 8.688v6.624a2 2 0 0 1-.586 1.414l-4.688 4.688a2 2 0 0 1-1.414.586H8.688a2 2 0 0 1-1.414-.586z"
      }
    ],
    ["path", { "d": "m9 9 6 6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "octagon-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Octagon_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Octagon_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Octagon_x = hmr(Octagon_x, () => Octagon_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Octagon_x[HMR].source;
    set(Octagon_x[HMR].source, module.default[HMR].original);
  });
}
var octagon_x_default = Octagon_x;

// node_modules/lucide-svelte/dist/icons/option.svelte
Option[FILENAME] = "node_modules/lucide-svelte/dist/icons/option.svelte";
function Option($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Option);
  const iconNode = [
    ["path", { "d": "M3 3h6l6 18h6" }],
    ["path", { "d": "M14 3h7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "option" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Option, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Option,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Option = hmr(Option, () => Option[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Option[HMR].source;
    set(Option[HMR].source, module.default[HMR].original);
  });
}
var option_default = Option;

// node_modules/lucide-svelte/dist/icons/orbit.svelte
Orbit[FILENAME] = "node_modules/lucide-svelte/dist/icons/orbit.svelte";
function Orbit($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Orbit);
  const iconNode = [
    ["path", { "d": "M20.341 6.484A10 10 0 0 1 10.266 21.85" }],
    ["path", { "d": "M3.659 17.516A10 10 0 0 1 13.74 2.152" }],
    ["circle", { "cx": "12", "cy": "12", "r": "3" }],
    ["circle", { "cx": "19", "cy": "5", "r": "2" }],
    ["circle", { "cx": "5", "cy": "19", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "orbit" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Orbit, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Orbit,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Orbit = hmr(Orbit, () => Orbit[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Orbit[HMR].source;
    set(Orbit[HMR].source, module.default[HMR].original);
  });
}
var orbit_default = Orbit;

// node_modules/lucide-svelte/dist/icons/origami.svelte
Origami[FILENAME] = "node_modules/lucide-svelte/dist/icons/origami.svelte";
function Origami($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Origami);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 12V4a1 1 0 0 1 1-1h6.297a1 1 0 0 1 .651 1.759l-4.696 4.025"
      }
    ],
    [
      "path",
      {
        "d": "m12 21-7.414-7.414A2 2 0 0 1 4 12.172V6.415a1.002 1.002 0 0 1 1.707-.707L20 20.009"
      }
    ],
    [
      "path",
      {
        "d": "m12.214 3.381 8.414 14.966a1 1 0 0 1-.167 1.199l-1.168 1.163a1 1 0 0 1-.706.291H6.351a1 1 0 0 1-.625-.219L3.25 18.8a1 1 0 0 1 .631-1.781l4.165.027"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "origami" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Origami, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Origami,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Origami = hmr(Origami, () => Origami[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Origami[HMR].source;
    set(Origami[HMR].source, module.default[HMR].original);
  });
}
var origami_default = Origami;

// node_modules/lucide-svelte/dist/icons/package-2.svelte
Package_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/package-2.svelte";
function Package_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Package_2);
  const iconNode = [
    ["path", { "d": "M12 3v6" }],
    [
      "path",
      {
        "d": "M16.76 3a2 2 0 0 1 1.8 1.1l2.23 4.479a2 2 0 0 1 .21.891V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V9.472a2 2 0 0 1 .211-.894L5.45 4.1A2 2 0 0 1 7.24 3z"
      }
    ],
    ["path", { "d": "M3.054 9.013h17.893" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "package-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Package_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Package_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Package_2 = hmr(Package_2, () => Package_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Package_2[HMR].source;
    set(Package_2[HMR].source, module.default[HMR].original);
  });
}
var package_2_default = Package_2;

// node_modules/lucide-svelte/dist/icons/package-check.svelte
Package_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/package-check.svelte";
function Package_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Package_check);
  const iconNode = [
    ["path", { "d": "m16 16 2 2 4-4" }],
    [
      "path",
      {
        "d": "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"
      }
    ],
    ["path", { "d": "m7.5 4.27 9 5.15" }],
    ["polyline", { "points": "3.29 7 12 12 20.71 7" }],
    ["line", { "x1": "12", "x2": "12", "y1": "22", "y2": "12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "package-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Package_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Package_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Package_check = hmr(Package_check, () => Package_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Package_check[HMR].source;
    set(Package_check[HMR].source, module.default[HMR].original);
  });
}
var package_check_default = Package_check;

// node_modules/lucide-svelte/dist/icons/package-minus.svelte
Package_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/package-minus.svelte";
function Package_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Package_minus);
  const iconNode = [
    ["path", { "d": "M16 16h6" }],
    [
      "path",
      {
        "d": "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"
      }
    ],
    ["path", { "d": "m7.5 4.27 9 5.15" }],
    ["polyline", { "points": "3.29 7 12 12 20.71 7" }],
    ["line", { "x1": "12", "x2": "12", "y1": "22", "y2": "12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "package-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Package_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Package_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Package_minus = hmr(Package_minus, () => Package_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Package_minus[HMR].source;
    set(Package_minus[HMR].source, module.default[HMR].original);
  });
}
var package_minus_default = Package_minus;

// node_modules/lucide-svelte/dist/icons/package-open.svelte
Package_open[FILENAME] = "node_modules/lucide-svelte/dist/icons/package-open.svelte";
function Package_open($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Package_open);
  const iconNode = [
    ["path", { "d": "M12 22v-9" }],
    [
      "path",
      {
        "d": "M15.17 2.21a1.67 1.67 0 0 1 1.63 0L21 4.57a1.93 1.93 0 0 1 0 3.36L8.82 14.79a1.655 1.655 0 0 1-1.64 0L3 12.43a1.93 1.93 0 0 1 0-3.36z"
      }
    ],
    [
      "path",
      {
        "d": "M20 13v3.87a2.06 2.06 0 0 1-1.11 1.83l-6 3.08a1.93 1.93 0 0 1-1.78 0l-6-3.08A2.06 2.06 0 0 1 4 16.87V13"
      }
    ],
    [
      "path",
      {
        "d": "M21 12.43a1.93 1.93 0 0 0 0-3.36L8.83 2.2a1.64 1.64 0 0 0-1.63 0L3 4.57a1.93 1.93 0 0 0 0 3.36l12.18 6.86a1.636 1.636 0 0 0 1.63 0z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "package-open" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Package_open, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Package_open,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Package_open = hmr(Package_open, () => Package_open[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Package_open[HMR].source;
    set(Package_open[HMR].source, module.default[HMR].original);
  });
}
var package_open_default = Package_open;

// node_modules/lucide-svelte/dist/icons/package-plus.svelte
Package_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/package-plus.svelte";
function Package_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Package_plus);
  const iconNode = [
    ["path", { "d": "M16 16h6" }],
    ["path", { "d": "M19 13v6" }],
    [
      "path",
      {
        "d": "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"
      }
    ],
    ["path", { "d": "m7.5 4.27 9 5.15" }],
    ["polyline", { "points": "3.29 7 12 12 20.71 7" }],
    ["line", { "x1": "12", "x2": "12", "y1": "22", "y2": "12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "package-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Package_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Package_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Package_plus = hmr(Package_plus, () => Package_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Package_plus[HMR].source;
    set(Package_plus[HMR].source, module.default[HMR].original);
  });
}
var package_plus_default = Package_plus;

// node_modules/lucide-svelte/dist/icons/package-search.svelte
Package_search[FILENAME] = "node_modules/lucide-svelte/dist/icons/package-search.svelte";
function Package_search($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Package_search);
  const iconNode = [
    [
      "path",
      {
        "d": "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"
      }
    ],
    ["path", { "d": "m7.5 4.27 9 5.15" }],
    ["polyline", { "points": "3.29 7 12 12 20.71 7" }],
    ["line", { "x1": "12", "x2": "12", "y1": "22", "y2": "12" }],
    ["circle", { "cx": "18.5", "cy": "15.5", "r": "2.5" }],
    ["path", { "d": "M20.27 17.27 22 19" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "package-search" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Package_search, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Package_search,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Package_search = hmr(Package_search, () => Package_search[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Package_search[HMR].source;
    set(Package_search[HMR].source, module.default[HMR].original);
  });
}
var package_search_default = Package_search;

// node_modules/lucide-svelte/dist/icons/package-x.svelte
Package_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/package-x.svelte";
function Package_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Package_x);
  const iconNode = [
    [
      "path",
      {
        "d": "M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14"
      }
    ],
    ["path", { "d": "m7.5 4.27 9 5.15" }],
    ["polyline", { "points": "3.29 7 12 12 20.71 7" }],
    ["line", { "x1": "12", "x2": "12", "y1": "22", "y2": "12" }],
    ["path", { "d": "m17 13 5 5m-5 0 5-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "package-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Package_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Package_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Package_x = hmr(Package_x, () => Package_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Package_x[HMR].source;
    set(Package_x[HMR].source, module.default[HMR].original);
  });
}
var package_x_default = Package_x;

// node_modules/lucide-svelte/dist/icons/package.svelte
Package[FILENAME] = "node_modules/lucide-svelte/dist/icons/package.svelte";
function Package($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Package);
  const iconNode = [
    [
      "path",
      {
        "d": "M11 21.73a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73z"
      }
    ],
    ["path", { "d": "M12 22V12" }],
    ["polyline", { "points": "3.29 7 12 12 20.71 7" }],
    ["path", { "d": "m7.5 4.27 9 5.15" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "package" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Package, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Package,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Package = hmr(Package, () => Package[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Package[HMR].source;
    set(Package[HMR].source, module.default[HMR].original);
  });
}
var package_default = Package;

// node_modules/lucide-svelte/dist/icons/paint-bucket.svelte
Paint_bucket[FILENAME] = "node_modules/lucide-svelte/dist/icons/paint-bucket.svelte";
function Paint_bucket($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Paint_bucket);
  const iconNode = [
    [
      "path",
      {
        "d": "m19 11-8-8-8.6 8.6a2 2 0 0 0 0 2.8l5.2 5.2c.8.8 2 .8 2.8 0L19 11Z"
      }
    ],
    ["path", { "d": "m5 2 5 5" }],
    ["path", { "d": "M2 13h15" }],
    [
      "path",
      {
        "d": "M22 20a2 2 0 1 1-4 0c0-1.6 1.7-2.4 2-4 .3 1.6 2 2.4 2 4Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "paint-bucket" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Paint_bucket, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Paint_bucket,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Paint_bucket = hmr(Paint_bucket, () => Paint_bucket[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Paint_bucket[HMR].source;
    set(Paint_bucket[HMR].source, module.default[HMR].original);
  });
}
var paint_bucket_default = Paint_bucket;

// node_modules/lucide-svelte/dist/icons/paint-roller.svelte
Paint_roller[FILENAME] = "node_modules/lucide-svelte/dist/icons/paint-roller.svelte";
function Paint_roller($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Paint_roller);
  const iconNode = [
    [
      "rect",
      { "width": "16", "height": "6", "x": "2", "y": "2", "rx": "2" }
    ],
    [
      "path",
      {
        "d": "M10 16v-2a2 2 0 0 1 2-2h8a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2"
      }
    ],
    [
      "rect",
      { "width": "4", "height": "6", "x": "8", "y": "16", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "paint-roller" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Paint_roller, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Paint_roller,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Paint_roller = hmr(Paint_roller, () => Paint_roller[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Paint_roller[HMR].source;
    set(Paint_roller[HMR].source, module.default[HMR].original);
  });
}
var paint_roller_default = Paint_roller;

// node_modules/lucide-svelte/dist/icons/paintbrush-vertical.svelte
Paintbrush_vertical[FILENAME] = "node_modules/lucide-svelte/dist/icons/paintbrush-vertical.svelte";
function Paintbrush_vertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Paintbrush_vertical);
  const iconNode = [
    ["path", { "d": "M10 2v2" }],
    ["path", { "d": "M14 2v4" }],
    ["path", { "d": "M17 2a1 1 0 0 1 1 1v9H6V3a1 1 0 0 1 1-1z" }],
    [
      "path",
      {
        "d": "M6 12a1 1 0 0 0-1 1v1a2 2 0 0 0 2 2h2a1 1 0 0 1 1 1v2.9a2 2 0 1 0 4 0V17a1 1 0 0 1 1-1h2a2 2 0 0 0 2-2v-1a1 1 0 0 0-1-1"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "paintbrush-vertical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Paintbrush_vertical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Paintbrush_vertical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Paintbrush_vertical = hmr(Paintbrush_vertical, () => Paintbrush_vertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Paintbrush_vertical[HMR].source;
    set(Paintbrush_vertical[HMR].source, module.default[HMR].original);
  });
}
var paintbrush_vertical_default = Paintbrush_vertical;

// node_modules/lucide-svelte/dist/icons/paintbrush.svelte
Paintbrush[FILENAME] = "node_modules/lucide-svelte/dist/icons/paintbrush.svelte";
function Paintbrush($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Paintbrush);
  const iconNode = [
    ["path", { "d": "m14.622 17.897-10.68-2.913" }],
    [
      "path",
      {
        "d": "M18.376 2.622a1 1 0 1 1 3.002 3.002L17.36 9.643a.5.5 0 0 0 0 .707l.944.944a2.41 2.41 0 0 1 0 3.408l-.944.944a.5.5 0 0 1-.707 0L8.354 7.348a.5.5 0 0 1 0-.707l.944-.944a2.41 2.41 0 0 1 3.408 0l.944.944a.5.5 0 0 0 .707 0z"
      }
    ],
    [
      "path",
      {
        "d": "M9 8c-1.804 2.71-3.97 3.46-6.583 3.948a.507.507 0 0 0-.302.819l7.32 8.883a1 1 0 0 0 1.185.204C12.735 20.405 16 16.792 16 15"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "paintbrush" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Paintbrush, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Paintbrush,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Paintbrush = hmr(Paintbrush, () => Paintbrush[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Paintbrush[HMR].source;
    set(Paintbrush[HMR].source, module.default[HMR].original);
  });
}
var paintbrush_default = Paintbrush;

// node_modules/lucide-svelte/dist/icons/palette.svelte
Palette[FILENAME] = "node_modules/lucide-svelte/dist/icons/palette.svelte";
function Palette($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Palette);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 22a1 1 0 0 1 0-20 10 9 0 0 1 10 9 5 5 0 0 1-5 5h-2.25a1.75 1.75 0 0 0-1.4 2.8l.3.4a1.75 1.75 0 0 1-1.4 2.8z"
      }
    ],
    [
      "circle",
      { "cx": "13.5", "cy": "6.5", "r": ".5", "fill": "currentColor" }
    ],
    [
      "circle",
      {
        "cx": "17.5",
        "cy": "10.5",
        "r": ".5",
        "fill": "currentColor"
      }
    ],
    [
      "circle",
      { "cx": "6.5", "cy": "12.5", "r": ".5", "fill": "currentColor" }
    ],
    [
      "circle",
      { "cx": "8.5", "cy": "7.5", "r": ".5", "fill": "currentColor" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "palette" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Palette, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Palette,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Palette = hmr(Palette, () => Palette[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Palette[HMR].source;
    set(Palette[HMR].source, module.default[HMR].original);
  });
}
var palette_default = Palette;

// node_modules/lucide-svelte/dist/icons/panda.svelte
Panda[FILENAME] = "node_modules/lucide-svelte/dist/icons/panda.svelte";
function Panda($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panda);
  const iconNode = [
    ["path", { "d": "M11.25 17.25h1.5L12 18z" }],
    ["path", { "d": "m15 12 2 2" }],
    ["path", { "d": "M18 6.5a.5.5 0 0 0-.5-.5" }],
    [
      "path",
      {
        "d": "M20.69 9.67a4.5 4.5 0 1 0-7.04-5.5 8.35 8.35 0 0 0-3.3 0 4.5 4.5 0 1 0-7.04 5.5C2.49 11.2 2 12.88 2 14.5 2 19.47 6.48 22 12 22s10-2.53 10-7.5c0-1.62-.48-3.3-1.3-4.83"
      }
    ],
    ["path", { "d": "M6 6.5a.495.495 0 0 1 .5-.5" }],
    ["path", { "d": "m9 12-2 2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panda" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panda, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panda,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panda = hmr(Panda, () => Panda[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panda[HMR].source;
    set(Panda[HMR].source, module.default[HMR].original);
  });
}
var panda_default = Panda;

// node_modules/lucide-svelte/dist/icons/panel-bottom-close.svelte
Panel_bottom_close[FILENAME] = "node_modules/lucide-svelte/dist/icons/panel-bottom-close.svelte";
function Panel_bottom_close($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panel_bottom_close);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M3 15h18" }],
    ["path", { "d": "m15 8-3 3-3-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panel-bottom-close" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panel_bottom_close, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panel_bottom_close,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panel_bottom_close = hmr(Panel_bottom_close, () => Panel_bottom_close[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panel_bottom_close[HMR].source;
    set(Panel_bottom_close[HMR].source, module.default[HMR].original);
  });
}
var panel_bottom_close_default = Panel_bottom_close;

// node_modules/lucide-svelte/dist/icons/panel-bottom-dashed.svelte
Panel_bottom_dashed[FILENAME] = "node_modules/lucide-svelte/dist/icons/panel-bottom-dashed.svelte";
function Panel_bottom_dashed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panel_bottom_dashed);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M14 15h1" }],
    ["path", { "d": "M19 15h2" }],
    ["path", { "d": "M3 15h2" }],
    ["path", { "d": "M9 15h1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panel-bottom-dashed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panel_bottom_dashed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panel_bottom_dashed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panel_bottom_dashed = hmr(Panel_bottom_dashed, () => Panel_bottom_dashed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panel_bottom_dashed[HMR].source;
    set(Panel_bottom_dashed[HMR].source, module.default[HMR].original);
  });
}
var panel_bottom_dashed_default = Panel_bottom_dashed;

// node_modules/lucide-svelte/dist/icons/panel-bottom-open.svelte
Panel_bottom_open[FILENAME] = "node_modules/lucide-svelte/dist/icons/panel-bottom-open.svelte";
function Panel_bottom_open($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panel_bottom_open);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M3 15h18" }],
    ["path", { "d": "m9 10 3-3 3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panel-bottom-open" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panel_bottom_open, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panel_bottom_open,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panel_bottom_open = hmr(Panel_bottom_open, () => Panel_bottom_open[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panel_bottom_open[HMR].source;
    set(Panel_bottom_open[HMR].source, module.default[HMR].original);
  });
}
var panel_bottom_open_default = Panel_bottom_open;

// node_modules/lucide-svelte/dist/icons/panel-left-close.svelte
Panel_left_close[FILENAME] = "node_modules/lucide-svelte/dist/icons/panel-left-close.svelte";
function Panel_left_close($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panel_left_close);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M9 3v18" }],
    ["path", { "d": "m16 15-3-3 3-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panel-left-close" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panel_left_close, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panel_left_close,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panel_left_close = hmr(Panel_left_close, () => Panel_left_close[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panel_left_close[HMR].source;
    set(Panel_left_close[HMR].source, module.default[HMR].original);
  });
}
var panel_left_close_default = Panel_left_close;

// node_modules/lucide-svelte/dist/icons/panel-bottom.svelte
Panel_bottom[FILENAME] = "node_modules/lucide-svelte/dist/icons/panel-bottom.svelte";
function Panel_bottom($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panel_bottom);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M3 15h18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panel-bottom" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panel_bottom, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panel_bottom,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panel_bottom = hmr(Panel_bottom, () => Panel_bottom[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panel_bottom[HMR].source;
    set(Panel_bottom[HMR].source, module.default[HMR].original);
  });
}
var panel_bottom_default = Panel_bottom;

// node_modules/lucide-svelte/dist/icons/panel-left-dashed.svelte
Panel_left_dashed[FILENAME] = "node_modules/lucide-svelte/dist/icons/panel-left-dashed.svelte";
function Panel_left_dashed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panel_left_dashed);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M9 14v1" }],
    ["path", { "d": "M9 19v2" }],
    ["path", { "d": "M9 3v2" }],
    ["path", { "d": "M9 9v1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panel-left-dashed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panel_left_dashed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panel_left_dashed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panel_left_dashed = hmr(Panel_left_dashed, () => Panel_left_dashed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panel_left_dashed[HMR].source;
    set(Panel_left_dashed[HMR].source, module.default[HMR].original);
  });
}
var panel_left_dashed_default = Panel_left_dashed;

// node_modules/lucide-svelte/dist/icons/panel-left-open.svelte
Panel_left_open[FILENAME] = "node_modules/lucide-svelte/dist/icons/panel-left-open.svelte";
function Panel_left_open($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panel_left_open);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M9 3v18" }],
    ["path", { "d": "m14 9 3 3-3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panel-left-open" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panel_left_open, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panel_left_open,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panel_left_open = hmr(Panel_left_open, () => Panel_left_open[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panel_left_open[HMR].source;
    set(Panel_left_open[HMR].source, module.default[HMR].original);
  });
}
var panel_left_open_default = Panel_left_open;

// node_modules/lucide-svelte/dist/icons/panel-left.svelte
Panel_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/panel-left.svelte";
function Panel_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panel_left);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M9 3v18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panel-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panel_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panel_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panel_left = hmr(Panel_left, () => Panel_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panel_left[HMR].source;
    set(Panel_left[HMR].source, module.default[HMR].original);
  });
}
var panel_left_default = Panel_left;

// node_modules/lucide-svelte/dist/icons/panel-right-close.svelte
Panel_right_close[FILENAME] = "node_modules/lucide-svelte/dist/icons/panel-right-close.svelte";
function Panel_right_close($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panel_right_close);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M15 3v18" }],
    ["path", { "d": "m8 9 3 3-3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panel-right-close" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panel_right_close, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panel_right_close,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panel_right_close = hmr(Panel_right_close, () => Panel_right_close[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panel_right_close[HMR].source;
    set(Panel_right_close[HMR].source, module.default[HMR].original);
  });
}
var panel_right_close_default = Panel_right_close;

// node_modules/lucide-svelte/dist/icons/panel-right-dashed.svelte
Panel_right_dashed[FILENAME] = "node_modules/lucide-svelte/dist/icons/panel-right-dashed.svelte";
function Panel_right_dashed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panel_right_dashed);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M15 14v1" }],
    ["path", { "d": "M15 19v2" }],
    ["path", { "d": "M15 3v2" }],
    ["path", { "d": "M15 9v1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panel-right-dashed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panel_right_dashed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panel_right_dashed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panel_right_dashed = hmr(Panel_right_dashed, () => Panel_right_dashed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panel_right_dashed[HMR].source;
    set(Panel_right_dashed[HMR].source, module.default[HMR].original);
  });
}
var panel_right_dashed_default = Panel_right_dashed;

// node_modules/lucide-svelte/dist/icons/panel-right-open.svelte
Panel_right_open[FILENAME] = "node_modules/lucide-svelte/dist/icons/panel-right-open.svelte";
function Panel_right_open($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panel_right_open);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M15 3v18" }],
    ["path", { "d": "m10 15-3-3 3-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panel-right-open" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panel_right_open, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panel_right_open,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panel_right_open = hmr(Panel_right_open, () => Panel_right_open[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panel_right_open[HMR].source;
    set(Panel_right_open[HMR].source, module.default[HMR].original);
  });
}
var panel_right_open_default = Panel_right_open;

// node_modules/lucide-svelte/dist/icons/panel-right.svelte
Panel_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/panel-right.svelte";
function Panel_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panel_right);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M15 3v18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panel-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panel_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panel_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panel_right = hmr(Panel_right, () => Panel_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panel_right[HMR].source;
    set(Panel_right[HMR].source, module.default[HMR].original);
  });
}
var panel_right_default = Panel_right;

// node_modules/lucide-svelte/dist/icons/panel-top-close.svelte
Panel_top_close[FILENAME] = "node_modules/lucide-svelte/dist/icons/panel-top-close.svelte";
function Panel_top_close($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panel_top_close);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M3 9h18" }],
    ["path", { "d": "m9 16 3-3 3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panel-top-close" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panel_top_close, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panel_top_close,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panel_top_close = hmr(Panel_top_close, () => Panel_top_close[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panel_top_close[HMR].source;
    set(Panel_top_close[HMR].source, module.default[HMR].original);
  });
}
var panel_top_close_default = Panel_top_close;

// node_modules/lucide-svelte/dist/icons/panel-top-dashed.svelte
Panel_top_dashed[FILENAME] = "node_modules/lucide-svelte/dist/icons/panel-top-dashed.svelte";
function Panel_top_dashed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panel_top_dashed);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M14 9h1" }],
    ["path", { "d": "M19 9h2" }],
    ["path", { "d": "M3 9h2" }],
    ["path", { "d": "M9 9h1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panel-top-dashed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panel_top_dashed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panel_top_dashed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panel_top_dashed = hmr(Panel_top_dashed, () => Panel_top_dashed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panel_top_dashed[HMR].source;
    set(Panel_top_dashed[HMR].source, module.default[HMR].original);
  });
}
var panel_top_dashed_default = Panel_top_dashed;

// node_modules/lucide-svelte/dist/icons/panel-top-open.svelte
Panel_top_open[FILENAME] = "node_modules/lucide-svelte/dist/icons/panel-top-open.svelte";
function Panel_top_open($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panel_top_open);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M3 9h18" }],
    ["path", { "d": "m15 14-3 3-3-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panel-top-open" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panel_top_open, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panel_top_open,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panel_top_open = hmr(Panel_top_open, () => Panel_top_open[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panel_top_open[HMR].source;
    set(Panel_top_open[HMR].source, module.default[HMR].original);
  });
}
var panel_top_open_default = Panel_top_open;

// node_modules/lucide-svelte/dist/icons/panel-top.svelte
Panel_top[FILENAME] = "node_modules/lucide-svelte/dist/icons/panel-top.svelte";
function Panel_top($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panel_top);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M3 9h18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panel-top" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panel_top, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panel_top,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panel_top = hmr(Panel_top, () => Panel_top[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panel_top[HMR].source;
    set(Panel_top[HMR].source, module.default[HMR].original);
  });
}
var panel_top_default = Panel_top;

// node_modules/lucide-svelte/dist/icons/panels-left-bottom.svelte
Panels_left_bottom[FILENAME] = "node_modules/lucide-svelte/dist/icons/panels-left-bottom.svelte";
function Panels_left_bottom($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panels_left_bottom);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M9 3v18" }],
    ["path", { "d": "M9 15h12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panels-left-bottom" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panels_left_bottom, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panels_left_bottom,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panels_left_bottom = hmr(Panels_left_bottom, () => Panels_left_bottom[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panels_left_bottom[HMR].source;
    set(Panels_left_bottom[HMR].source, module.default[HMR].original);
  });
}
var panels_left_bottom_default = Panels_left_bottom;

// node_modules/lucide-svelte/dist/icons/panels-right-bottom.svelte
Panels_right_bottom[FILENAME] = "node_modules/lucide-svelte/dist/icons/panels-right-bottom.svelte";
function Panels_right_bottom($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panels_right_bottom);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M3 15h12" }],
    ["path", { "d": "M15 3v18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panels-right-bottom" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panels_right_bottom, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panels_right_bottom,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panels_right_bottom = hmr(Panels_right_bottom, () => Panels_right_bottom[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panels_right_bottom[HMR].source;
    set(Panels_right_bottom[HMR].source, module.default[HMR].original);
  });
}
var panels_right_bottom_default = Panels_right_bottom;

// node_modules/lucide-svelte/dist/icons/panels-top-left.svelte
Panels_top_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/panels-top-left.svelte";
function Panels_top_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Panels_top_left);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M3 9h18" }],
    ["path", { "d": "M9 21V9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "panels-top-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Panels_top_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Panels_top_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Panels_top_left = hmr(Panels_top_left, () => Panels_top_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Panels_top_left[HMR].source;
    set(Panels_top_left[HMR].source, module.default[HMR].original);
  });
}
var panels_top_left_default = Panels_top_left;

// node_modules/lucide-svelte/dist/icons/paperclip.svelte
Paperclip[FILENAME] = "node_modules/lucide-svelte/dist/icons/paperclip.svelte";
function Paperclip($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Paperclip);
  const iconNode = [
    [
      "path",
      {
        "d": "m16 6-8.414 8.586a2 2 0 0 0 2.829 2.829l8.414-8.586a4 4 0 1 0-5.657-5.657l-8.379 8.551a6 6 0 1 0 8.485 8.485l8.379-8.551"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "paperclip" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Paperclip, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Paperclip,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Paperclip = hmr(Paperclip, () => Paperclip[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Paperclip[HMR].source;
    set(Paperclip[HMR].source, module.default[HMR].original);
  });
}
var paperclip_default = Paperclip;

// node_modules/lucide-svelte/dist/icons/parking-meter.svelte
Parking_meter[FILENAME] = "node_modules/lucide-svelte/dist/icons/parking-meter.svelte";
function Parking_meter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Parking_meter);
  const iconNode = [
    ["path", { "d": "M11 15h2" }],
    ["path", { "d": "M12 12v3" }],
    ["path", { "d": "M12 19v3" }],
    [
      "path",
      {
        "d": "M15.282 19a1 1 0 0 0 .948-.68l2.37-6.988a7 7 0 1 0-13.2 0l2.37 6.988a1 1 0 0 0 .948.68z"
      }
    ],
    ["path", { "d": "M9 9a3 3 0 1 1 6 0" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "parking-meter" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Parking_meter, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Parking_meter,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Parking_meter = hmr(Parking_meter, () => Parking_meter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Parking_meter[HMR].source;
    set(Parking_meter[HMR].source, module.default[HMR].original);
  });
}
var parking_meter_default = Parking_meter;

// node_modules/lucide-svelte/dist/icons/parentheses.svelte
Parentheses[FILENAME] = "node_modules/lucide-svelte/dist/icons/parentheses.svelte";
function Parentheses($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Parentheses);
  const iconNode = [
    ["path", { "d": "M8 21s-4-3-4-9 4-9 4-9" }],
    ["path", { "d": "M16 3s4 3 4 9-4 9-4 9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "parentheses" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Parentheses, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Parentheses,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Parentheses = hmr(Parentheses, () => Parentheses[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Parentheses[HMR].source;
    set(Parentheses[HMR].source, module.default[HMR].original);
  });
}
var parentheses_default = Parentheses;

// node_modules/lucide-svelte/dist/icons/party-popper.svelte
Party_popper[FILENAME] = "node_modules/lucide-svelte/dist/icons/party-popper.svelte";
function Party_popper($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Party_popper);
  const iconNode = [
    ["path", { "d": "M5.8 11.3 2 22l10.7-3.79" }],
    ["path", { "d": "M4 3h.01" }],
    ["path", { "d": "M22 8h.01" }],
    ["path", { "d": "M15 2h.01" }],
    ["path", { "d": "M22 20h.01" }],
    [
      "path",
      {
        "d": "m22 2-2.24.75a2.9 2.9 0 0 0-1.96 3.12c.1.86-.57 1.63-1.45 1.63h-.38c-.86 0-1.6.6-1.76 1.44L14 10"
      }
    ],
    [
      "path",
      {
        "d": "m22 13-.82-.33c-.86-.34-1.82.2-1.98 1.11c-.11.7-.72 1.22-1.43 1.22H17"
      }
    ],
    [
      "path",
      {
        "d": "m11 2 .33.82c.34.86-.2 1.82-1.11 1.98C9.52 4.9 9 5.52 9 6.23V7"
      }
    ],
    [
      "path",
      {
        "d": "M11 13c1.93 1.93 2.83 4.17 2 5-.83.83-3.07-.07-5-2-1.93-1.93-2.83-4.17-2-5 .83-.83 3.07.07 5 2Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "party-popper" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Party_popper, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Party_popper,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Party_popper = hmr(Party_popper, () => Party_popper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Party_popper[HMR].source;
    set(Party_popper[HMR].source, module.default[HMR].original);
  });
}
var party_popper_default = Party_popper;

// node_modules/lucide-svelte/dist/icons/pause.svelte
Pause[FILENAME] = "node_modules/lucide-svelte/dist/icons/pause.svelte";
function Pause($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pause);
  const iconNode = [
    [
      "rect",
      { "x": "14", "y": "3", "width": "5", "height": "18", "rx": "1" }
    ],
    [
      "rect",
      { "x": "5", "y": "3", "width": "5", "height": "18", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pause" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pause, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pause,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pause = hmr(Pause, () => Pause[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pause[HMR].source;
    set(Pause[HMR].source, module.default[HMR].original);
  });
}
var pause_default = Pause;

// node_modules/lucide-svelte/dist/icons/paw-print.svelte
Paw_print[FILENAME] = "node_modules/lucide-svelte/dist/icons/paw-print.svelte";
function Paw_print($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Paw_print);
  const iconNode = [
    ["circle", { "cx": "11", "cy": "4", "r": "2" }],
    ["circle", { "cx": "18", "cy": "8", "r": "2" }],
    ["circle", { "cx": "20", "cy": "16", "r": "2" }],
    [
      "path",
      {
        "d": "M9 10a5 5 0 0 1 5 5v3.5a3.5 3.5 0 0 1-6.84 1.045Q6.52 17.48 4.46 16.84A3.5 3.5 0 0 1 5.5 10Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "paw-print" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Paw_print, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Paw_print,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Paw_print = hmr(Paw_print, () => Paw_print[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Paw_print[HMR].source;
    set(Paw_print[HMR].source, module.default[HMR].original);
  });
}
var paw_print_default = Paw_print;

// node_modules/lucide-svelte/dist/icons/pc-case.svelte
Pc_case[FILENAME] = "node_modules/lucide-svelte/dist/icons/pc-case.svelte";
function Pc_case($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pc_case);
  const iconNode = [
    [
      "rect",
      { "width": "14", "height": "20", "x": "5", "y": "2", "rx": "2" }
    ],
    ["path", { "d": "M15 14h.01" }],
    ["path", { "d": "M9 6h6" }],
    ["path", { "d": "M9 10h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pc-case" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pc_case, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pc_case,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pc_case = hmr(Pc_case, () => Pc_case[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pc_case[HMR].source;
    set(Pc_case[HMR].source, module.default[HMR].original);
  });
}
var pc_case_default = Pc_case;

// node_modules/lucide-svelte/dist/icons/pen-line.svelte
Pen_line[FILENAME] = "node_modules/lucide-svelte/dist/icons/pen-line.svelte";
function Pen_line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pen_line);
  const iconNode = [
    ["path", { "d": "M13 21h8" }],
    [
      "path",
      {
        "d": "M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pen-line" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pen_line, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pen_line,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pen_line = hmr(Pen_line, () => Pen_line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pen_line[HMR].source;
    set(Pen_line[HMR].source, module.default[HMR].original);
  });
}
var pen_line_default = Pen_line;

// node_modules/lucide-svelte/dist/icons/pen-off.svelte
Pen_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/pen-off.svelte";
function Pen_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pen_off);
  const iconNode = [
    [
      "path",
      {
        "d": "m10 10-6.157 6.162a2 2 0 0 0-.5.833l-1.322 4.36a.5.5 0 0 0 .622.624l4.358-1.323a2 2 0 0 0 .83-.5L14 13.982"
      }
    ],
    [
      "path",
      {
        "d": "m12.829 7.172 4.359-4.346a1 1 0 1 1 3.986 3.986l-4.353 4.353"
      }
    ],
    ["path", { "d": "m2 2 20 20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pen-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pen_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pen_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pen_off = hmr(Pen_off, () => Pen_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pen_off[HMR].source;
    set(Pen_off[HMR].source, module.default[HMR].original);
  });
}
var pen_off_default = Pen_off;

// node_modules/lucide-svelte/dist/icons/pen-tool.svelte
Pen_tool[FILENAME] = "node_modules/lucide-svelte/dist/icons/pen-tool.svelte";
function Pen_tool($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pen_tool);
  const iconNode = [
    [
      "path",
      {
        "d": "M15.707 21.293a1 1 0 0 1-1.414 0l-1.586-1.586a1 1 0 0 1 0-1.414l5.586-5.586a1 1 0 0 1 1.414 0l1.586 1.586a1 1 0 0 1 0 1.414z"
      }
    ],
    [
      "path",
      {
        "d": "m18 13-1.375-6.874a1 1 0 0 0-.746-.776L3.235 2.028a1 1 0 0 0-1.207 1.207L5.35 15.879a1 1 0 0 0 .776.746L13 18"
      }
    ],
    ["path", { "d": "m2.3 2.3 7.286 7.286" }],
    ["circle", { "cx": "11", "cy": "11", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pen-tool" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pen_tool, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pen_tool,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pen_tool = hmr(Pen_tool, () => Pen_tool[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pen_tool[HMR].source;
    set(Pen_tool[HMR].source, module.default[HMR].original);
  });
}
var pen_tool_default = Pen_tool;

// node_modules/lucide-svelte/dist/icons/pen.svelte
Pen[FILENAME] = "node_modules/lucide-svelte/dist/icons/pen.svelte";
function Pen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pen);
  const iconNode = [
    [
      "path",
      {
        "d": "M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pen" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pen, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pen,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pen = hmr(Pen, () => Pen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pen[HMR].source;
    set(Pen[HMR].source, module.default[HMR].original);
  });
}
var pen_default = Pen;

// node_modules/lucide-svelte/dist/icons/pencil-line.svelte
Pencil_line[FILENAME] = "node_modules/lucide-svelte/dist/icons/pencil-line.svelte";
function Pencil_line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pencil_line);
  const iconNode = [
    ["path", { "d": "M13 21h8" }],
    ["path", { "d": "m15 5 4 4" }],
    [
      "path",
      {
        "d": "M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pencil-line" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pencil_line, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pencil_line,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pencil_line = hmr(Pencil_line, () => Pencil_line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pencil_line[HMR].source;
    set(Pencil_line[HMR].source, module.default[HMR].original);
  });
}
var pencil_line_default = Pencil_line;

// node_modules/lucide-svelte/dist/icons/pencil-off.svelte
Pencil_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/pencil-off.svelte";
function Pencil_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pencil_off);
  const iconNode = [
    [
      "path",
      {
        "d": "m10 10-6.157 6.162a2 2 0 0 0-.5.833l-1.322 4.36a.5.5 0 0 0 .622.624l4.358-1.323a2 2 0 0 0 .83-.5L14 13.982"
      }
    ],
    [
      "path",
      {
        "d": "m12.829 7.172 4.359-4.346a1 1 0 1 1 3.986 3.986l-4.353 4.353"
      }
    ],
    ["path", { "d": "m15 5 4 4" }],
    ["path", { "d": "m2 2 20 20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pencil-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pencil_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pencil_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pencil_off = hmr(Pencil_off, () => Pencil_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pencil_off[HMR].source;
    set(Pencil_off[HMR].source, module.default[HMR].original);
  });
}
var pencil_off_default = Pencil_off;

// node_modules/lucide-svelte/dist/icons/pencil-ruler.svelte
Pencil_ruler[FILENAME] = "node_modules/lucide-svelte/dist/icons/pencil-ruler.svelte";
function Pencil_ruler($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pencil_ruler);
  const iconNode = [
    [
      "path",
      {
        "d": "M13 7 8.7 2.7a2.41 2.41 0 0 0-3.4 0L2.7 5.3a2.41 2.41 0 0 0 0 3.4L7 13"
      }
    ],
    ["path", { "d": "m8 6 2-2" }],
    ["path", { "d": "m18 16 2-2" }],
    [
      "path",
      {
        "d": "m17 11 4.3 4.3c.94.94.94 2.46 0 3.4l-2.6 2.6c-.94.94-2.46.94-3.4 0L11 17"
      }
    ],
    [
      "path",
      {
        "d": "M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z"
      }
    ],
    ["path", { "d": "m15 5 4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pencil-ruler" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pencil_ruler, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pencil_ruler,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pencil_ruler = hmr(Pencil_ruler, () => Pencil_ruler[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pencil_ruler[HMR].source;
    set(Pencil_ruler[HMR].source, module.default[HMR].original);
  });
}
var pencil_ruler_default = Pencil_ruler;

// node_modules/lucide-svelte/dist/icons/pentagon.svelte
Pentagon[FILENAME] = "node_modules/lucide-svelte/dist/icons/pentagon.svelte";
function Pentagon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pentagon);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.83 2.38a2 2 0 0 1 2.34 0l8 5.74a2 2 0 0 1 .73 2.25l-3.04 9.26a2 2 0 0 1-1.9 1.37H7.04a2 2 0 0 1-1.9-1.37L2.1 10.37a2 2 0 0 1 .73-2.25z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pentagon" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pentagon, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pentagon,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pentagon = hmr(Pentagon, () => Pentagon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pentagon[HMR].source;
    set(Pentagon[HMR].source, module.default[HMR].original);
  });
}
var pentagon_default = Pentagon;

// node_modules/lucide-svelte/dist/icons/pencil.svelte
Pencil[FILENAME] = "node_modules/lucide-svelte/dist/icons/pencil.svelte";
function Pencil($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pencil);
  const iconNode = [
    [
      "path",
      {
        "d": "M21.174 6.812a1 1 0 0 0-3.986-3.987L3.842 16.174a2 2 0 0 0-.5.83l-1.321 4.352a.5.5 0 0 0 .623.622l4.353-1.32a2 2 0 0 0 .83-.497z"
      }
    ],
    ["path", { "d": "m15 5 4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pencil" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pencil, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pencil,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pencil = hmr(Pencil, () => Pencil[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pencil[HMR].source;
    set(Pencil[HMR].source, module.default[HMR].original);
  });
}
var pencil_default = Pencil;

// node_modules/lucide-svelte/dist/icons/percent.svelte
Percent[FILENAME] = "node_modules/lucide-svelte/dist/icons/percent.svelte";
function Percent($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Percent);
  const iconNode = [
    ["line", { "x1": "19", "x2": "5", "y1": "5", "y2": "19" }],
    ["circle", { "cx": "6.5", "cy": "6.5", "r": "2.5" }],
    ["circle", { "cx": "17.5", "cy": "17.5", "r": "2.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "percent" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Percent, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Percent,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Percent = hmr(Percent, () => Percent[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Percent[HMR].source;
    set(Percent[HMR].source, module.default[HMR].original);
  });
}
var percent_default = Percent;

// node_modules/lucide-svelte/dist/icons/person-standing.svelte
Person_standing[FILENAME] = "node_modules/lucide-svelte/dist/icons/person-standing.svelte";
function Person_standing($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Person_standing);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "5", "r": "1" }],
    ["path", { "d": "m9 20 3-6 3 6" }],
    ["path", { "d": "m6 8 6 2 6-2" }],
    ["path", { "d": "M12 10v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "person-standing" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Person_standing, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Person_standing,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Person_standing = hmr(Person_standing, () => Person_standing[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Person_standing[HMR].source;
    set(Person_standing[HMR].source, module.default[HMR].original);
  });
}
var person_standing_default = Person_standing;

// node_modules/lucide-svelte/dist/icons/philippine-peso.svelte
Philippine_peso[FILENAME] = "node_modules/lucide-svelte/dist/icons/philippine-peso.svelte";
function Philippine_peso($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Philippine_peso);
  const iconNode = [
    ["path", { "d": "M20 11H4" }],
    ["path", { "d": "M20 7H4" }],
    ["path", { "d": "M7 21V4a1 1 0 0 1 1-1h4a1 1 0 0 1 0 12H7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "philippine-peso" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Philippine_peso, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Philippine_peso,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Philippine_peso = hmr(Philippine_peso, () => Philippine_peso[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Philippine_peso[HMR].source;
    set(Philippine_peso[HMR].source, module.default[HMR].original);
  });
}
var philippine_peso_default = Philippine_peso;

// node_modules/lucide-svelte/dist/icons/phone-call.svelte
Phone_call[FILENAME] = "node_modules/lucide-svelte/dist/icons/phone-call.svelte";
function Phone_call($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Phone_call);
  const iconNode = [
    ["path", { "d": "M13 2a9 9 0 0 1 9 9" }],
    ["path", { "d": "M13 6a5 5 0 0 1 5 5" }],
    [
      "path",
      {
        "d": "M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "phone-call" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Phone_call, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Phone_call,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Phone_call = hmr(Phone_call, () => Phone_call[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Phone_call[HMR].source;
    set(Phone_call[HMR].source, module.default[HMR].original);
  });
}
var phone_call_default = Phone_call;

// node_modules/lucide-svelte/dist/icons/phone-forwarded.svelte
Phone_forwarded[FILENAME] = "node_modules/lucide-svelte/dist/icons/phone-forwarded.svelte";
function Phone_forwarded($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Phone_forwarded);
  const iconNode = [
    ["path", { "d": "M14 6h8" }],
    ["path", { "d": "m18 2 4 4-4 4" }],
    [
      "path",
      {
        "d": "M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "phone-forwarded" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Phone_forwarded, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Phone_forwarded,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Phone_forwarded = hmr(Phone_forwarded, () => Phone_forwarded[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Phone_forwarded[HMR].source;
    set(Phone_forwarded[HMR].source, module.default[HMR].original);
  });
}
var phone_forwarded_default = Phone_forwarded;

// node_modules/lucide-svelte/dist/icons/phone-incoming.svelte
Phone_incoming[FILENAME] = "node_modules/lucide-svelte/dist/icons/phone-incoming.svelte";
function Phone_incoming($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Phone_incoming);
  const iconNode = [
    ["path", { "d": "M16 2v6h6" }],
    ["path", { "d": "m22 2-6 6" }],
    [
      "path",
      {
        "d": "M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "phone-incoming" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Phone_incoming, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Phone_incoming,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Phone_incoming = hmr(Phone_incoming, () => Phone_incoming[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Phone_incoming[HMR].source;
    set(Phone_incoming[HMR].source, module.default[HMR].original);
  });
}
var phone_incoming_default = Phone_incoming;

// node_modules/lucide-svelte/dist/icons/phone-missed.svelte
Phone_missed[FILENAME] = "node_modules/lucide-svelte/dist/icons/phone-missed.svelte";
function Phone_missed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Phone_missed);
  const iconNode = [
    ["path", { "d": "m16 2 6 6" }],
    ["path", { "d": "m22 2-6 6" }],
    [
      "path",
      {
        "d": "M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "phone-missed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Phone_missed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Phone_missed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Phone_missed = hmr(Phone_missed, () => Phone_missed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Phone_missed[HMR].source;
    set(Phone_missed[HMR].source, module.default[HMR].original);
  });
}
var phone_missed_default = Phone_missed;

// node_modules/lucide-svelte/dist/icons/phone-off.svelte
Phone_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/phone-off.svelte";
function Phone_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Phone_off);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.1 13.9a14 14 0 0 0 3.732 2.668 1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2 18 18 0 0 1-12.728-5.272"
      }
    ],
    ["path", { "d": "M22 2 2 22" }],
    [
      "path",
      {
        "d": "M4.76 13.582A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 .244.473"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "phone-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Phone_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Phone_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Phone_off = hmr(Phone_off, () => Phone_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Phone_off[HMR].source;
    set(Phone_off[HMR].source, module.default[HMR].original);
  });
}
var phone_off_default = Phone_off;

// node_modules/lucide-svelte/dist/icons/phone-outgoing.svelte
Phone_outgoing[FILENAME] = "node_modules/lucide-svelte/dist/icons/phone-outgoing.svelte";
function Phone_outgoing($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Phone_outgoing);
  const iconNode = [
    ["path", { "d": "m16 8 6-6" }],
    ["path", { "d": "M22 8V2h-6" }],
    [
      "path",
      {
        "d": "M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "phone-outgoing" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Phone_outgoing, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Phone_outgoing,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Phone_outgoing = hmr(Phone_outgoing, () => Phone_outgoing[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Phone_outgoing[HMR].source;
    set(Phone_outgoing[HMR].source, module.default[HMR].original);
  });
}
var phone_outgoing_default = Phone_outgoing;

// node_modules/lucide-svelte/dist/icons/phone.svelte
Phone[FILENAME] = "node_modules/lucide-svelte/dist/icons/phone.svelte";
function Phone($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Phone);
  const iconNode = [
    [
      "path",
      {
        "d": "M13.832 16.568a1 1 0 0 0 1.213-.303l.355-.465A2 2 0 0 1 17 15h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2A18 18 0 0 1 2 4a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v3a2 2 0 0 1-.8 1.6l-.468.351a1 1 0 0 0-.292 1.233 14 14 0 0 0 6.392 6.384"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "phone" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Phone, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Phone,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Phone = hmr(Phone, () => Phone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Phone[HMR].source;
    set(Phone[HMR].source, module.default[HMR].original);
  });
}
var phone_default = Phone;

// node_modules/lucide-svelte/dist/icons/pi.svelte
Pi[FILENAME] = "node_modules/lucide-svelte/dist/icons/pi.svelte";
function Pi($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pi);
  const iconNode = [
    ["line", { "x1": "9", "x2": "9", "y1": "4", "y2": "20" }],
    ["path", { "d": "M4 7c0-1.7 1.3-3 3-3h13" }],
    ["path", { "d": "M18 20c-1.7 0-3-1.3-3-3V4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pi" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pi, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pi,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pi = hmr(Pi, () => Pi[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pi[HMR].source;
    set(Pi[HMR].source, module.default[HMR].original);
  });
}
var pi_default = Pi;

// node_modules/lucide-svelte/dist/icons/piano.svelte
Piano[FILENAME] = "node_modules/lucide-svelte/dist/icons/piano.svelte";
function Piano($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Piano);
  const iconNode = [
    [
      "path",
      {
        "d": "M18.5 8c-1.4 0-2.6-.8-3.2-2A6.87 6.87 0 0 0 2 9v11a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-8.5C22 9.6 20.4 8 18.5 8"
      }
    ],
    ["path", { "d": "M2 14h20" }],
    ["path", { "d": "M6 14v4" }],
    ["path", { "d": "M10 14v4" }],
    ["path", { "d": "M14 14v4" }],
    ["path", { "d": "M18 14v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "piano" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Piano, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Piano,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Piano = hmr(Piano, () => Piano[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Piano[HMR].source;
    set(Piano[HMR].source, module.default[HMR].original);
  });
}
var piano_default = Piano;

// node_modules/lucide-svelte/dist/icons/pickaxe.svelte
Pickaxe[FILENAME] = "node_modules/lucide-svelte/dist/icons/pickaxe.svelte";
function Pickaxe($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pickaxe);
  const iconNode = [
    [
      "path",
      { "d": "m14 13-8.381 8.38a1 1 0 0 1-3.001-3L11 9.999" }
    ],
    [
      "path",
      {
        "d": "M15.973 4.027A13 13 0 0 0 5.902 2.373c-1.398.342-1.092 2.158.277 2.601a19.9 19.9 0 0 1 5.822 3.024"
      }
    ],
    [
      "path",
      {
        "d": "M16.001 11.999a19.9 19.9 0 0 1 3.024 5.824c.444 1.369 2.26 1.676 2.603.278A13 13 0 0 0 20 8.069"
      }
    ],
    [
      "path",
      {
        "d": "M18.352 3.352a1.205 1.205 0 0 0-1.704 0l-5.296 5.296a1.205 1.205 0 0 0 0 1.704l2.296 2.296a1.205 1.205 0 0 0 1.704 0l5.296-5.296a1.205 1.205 0 0 0 0-1.704z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pickaxe" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pickaxe, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pickaxe,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pickaxe = hmr(Pickaxe, () => Pickaxe[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pickaxe[HMR].source;
    set(Pickaxe[HMR].source, module.default[HMR].original);
  });
}
var pickaxe_default = Pickaxe;

// node_modules/lucide-svelte/dist/icons/picture-in-picture-2.svelte
Picture_in_picture_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/picture-in-picture-2.svelte";
function Picture_in_picture_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Picture_in_picture_2);
  const iconNode = [
    [
      "path",
      {
        "d": "M21 9V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10c0 1.1.9 2 2 2h4"
      }
    ],
    [
      "rect",
      {
        "width": "10",
        "height": "7",
        "x": "12",
        "y": "13",
        "rx": "2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "picture-in-picture-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Picture_in_picture_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Picture_in_picture_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Picture_in_picture_2 = hmr(Picture_in_picture_2, () => Picture_in_picture_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Picture_in_picture_2[HMR].source;
    set(Picture_in_picture_2[HMR].source, module.default[HMR].original);
  });
}
var picture_in_picture_2_default = Picture_in_picture_2;

// node_modules/lucide-svelte/dist/icons/picture-in-picture.svelte
Picture_in_picture[FILENAME] = "node_modules/lucide-svelte/dist/icons/picture-in-picture.svelte";
function Picture_in_picture($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Picture_in_picture);
  const iconNode = [
    ["path", { "d": "M2 10h6V4" }],
    ["path", { "d": "m2 4 6 6" }],
    ["path", { "d": "M21 10V7a2 2 0 0 0-2-2h-7" }],
    ["path", { "d": "M3 14v2a2 2 0 0 0 2 2h3" }],
    [
      "rect",
      {
        "x": "12",
        "y": "14",
        "width": "10",
        "height": "7",
        "rx": "1"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "picture-in-picture" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Picture_in_picture, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Picture_in_picture,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Picture_in_picture = hmr(Picture_in_picture, () => Picture_in_picture[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Picture_in_picture[HMR].source;
    set(Picture_in_picture[HMR].source, module.default[HMR].original);
  });
}
var picture_in_picture_default = Picture_in_picture;

// node_modules/lucide-svelte/dist/icons/piggy-bank.svelte
Piggy_bank[FILENAME] = "node_modules/lucide-svelte/dist/icons/piggy-bank.svelte";
function Piggy_bank($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Piggy_bank);
  const iconNode = [
    [
      "path",
      {
        "d": "M11 17h3v2a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3a3.16 3.16 0 0 0 2-2h1a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1h-1a5 5 0 0 0-2-4V3a4 4 0 0 0-3.2 1.6l-.3.4H11a6 6 0 0 0-6 6v1a5 5 0 0 0 2 4v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1z"
      }
    ],
    ["path", { "d": "M16 10h.01" }],
    ["path", { "d": "M2 8v1a2 2 0 0 0 2 2h1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "piggy-bank" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Piggy_bank, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Piggy_bank,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Piggy_bank = hmr(Piggy_bank, () => Piggy_bank[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Piggy_bank[HMR].source;
    set(Piggy_bank[HMR].source, module.default[HMR].original);
  });
}
var piggy_bank_default = Piggy_bank;

// node_modules/lucide-svelte/dist/icons/pilcrow-left.svelte
Pilcrow_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/pilcrow-left.svelte";
function Pilcrow_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pilcrow_left);
  const iconNode = [
    ["path", { "d": "M14 3v11" }],
    ["path", { "d": "M14 9h-3a3 3 0 0 1 0-6h9" }],
    ["path", { "d": "M18 3v11" }],
    ["path", { "d": "M22 18H2l4-4" }],
    ["path", { "d": "m6 22-4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pilcrow-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pilcrow_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pilcrow_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pilcrow_left = hmr(Pilcrow_left, () => Pilcrow_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pilcrow_left[HMR].source;
    set(Pilcrow_left[HMR].source, module.default[HMR].original);
  });
}
var pilcrow_left_default = Pilcrow_left;

// node_modules/lucide-svelte/dist/icons/pilcrow-right.svelte
Pilcrow_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/pilcrow-right.svelte";
function Pilcrow_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pilcrow_right);
  const iconNode = [
    ["path", { "d": "M10 3v11" }],
    ["path", { "d": "M10 9H7a1 1 0 0 1 0-6h8" }],
    ["path", { "d": "M14 3v11" }],
    ["path", { "d": "m18 14 4 4H2" }],
    ["path", { "d": "m22 18-4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pilcrow-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pilcrow_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pilcrow_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pilcrow_right = hmr(Pilcrow_right, () => Pilcrow_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pilcrow_right[HMR].source;
    set(Pilcrow_right[HMR].source, module.default[HMR].original);
  });
}
var pilcrow_right_default = Pilcrow_right;

// node_modules/lucide-svelte/dist/icons/pilcrow.svelte
Pilcrow[FILENAME] = "node_modules/lucide-svelte/dist/icons/pilcrow.svelte";
function Pilcrow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pilcrow);
  const iconNode = [
    ["path", { "d": "M13 4v16" }],
    ["path", { "d": "M17 4v16" }],
    ["path", { "d": "M19 4H9.5a4.5 4.5 0 0 0 0 9H13" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pilcrow" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pilcrow, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pilcrow,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pilcrow = hmr(Pilcrow, () => Pilcrow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pilcrow[HMR].source;
    set(Pilcrow[HMR].source, module.default[HMR].original);
  });
}
var pilcrow_default = Pilcrow;

// node_modules/lucide-svelte/dist/icons/pill-bottle.svelte
Pill_bottle[FILENAME] = "node_modules/lucide-svelte/dist/icons/pill-bottle.svelte";
function Pill_bottle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pill_bottle);
  const iconNode = [
    ["path", { "d": "M18 11h-4a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1h4" }],
    ["path", { "d": "M6 7v13a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V7" }],
    [
      "rect",
      { "width": "16", "height": "5", "x": "4", "y": "2", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pill-bottle" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pill_bottle, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pill_bottle,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pill_bottle = hmr(Pill_bottle, () => Pill_bottle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pill_bottle[HMR].source;
    set(Pill_bottle[HMR].source, module.default[HMR].original);
  });
}
var pill_bottle_default = Pill_bottle;

// node_modules/lucide-svelte/dist/icons/pin-off.svelte
Pin_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/pin-off.svelte";
function Pin_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pin_off);
  const iconNode = [
    ["path", { "d": "M12 17v5" }],
    [
      "path",
      { "d": "M15 9.34V7a1 1 0 0 1 1-1 2 2 0 0 0 0-4H7.89" }
    ],
    ["path", { "d": "m2 2 20 20" }],
    [
      "path",
      {
        "d": "M9 9v1.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V16a1 1 0 0 0 1 1h11"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pin-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pin_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pin_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pin_off = hmr(Pin_off, () => Pin_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pin_off[HMR].source;
    set(Pin_off[HMR].source, module.default[HMR].original);
  });
}
var pin_off_default = Pin_off;

// node_modules/lucide-svelte/dist/icons/pill.svelte
Pill[FILENAME] = "node_modules/lucide-svelte/dist/icons/pill.svelte";
function Pill($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pill);
  const iconNode = [
    [
      "path",
      {
        "d": "m10.5 20.5 10-10a4.95 4.95 0 1 0-7-7l-10 10a4.95 4.95 0 1 0 7 7Z"
      }
    ],
    ["path", { "d": "m8.5 8.5 7 7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pill" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pill, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pill,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pill = hmr(Pill, () => Pill[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pill[HMR].source;
    set(Pill[HMR].source, module.default[HMR].original);
  });
}
var pill_default = Pill;

// node_modules/lucide-svelte/dist/icons/pin.svelte
Pin[FILENAME] = "node_modules/lucide-svelte/dist/icons/pin.svelte";
function Pin($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pin);
  const iconNode = [
    ["path", { "d": "M12 17v5" }],
    [
      "path",
      {
        "d": "M9 10.76a2 2 0 0 1-1.11 1.79l-1.78.9A2 2 0 0 0 5 15.24V16a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-.76a2 2 0 0 0-1.11-1.79l-1.78-.9A2 2 0 0 1 15 10.76V7a1 1 0 0 1 1-1 2 2 0 0 0 0-4H8a2 2 0 0 0 0 4 1 1 0 0 1 1 1z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pin" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pin, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pin,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pin = hmr(Pin, () => Pin[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pin[HMR].source;
    set(Pin[HMR].source, module.default[HMR].original);
  });
}
var pin_default = Pin;

// node_modules/lucide-svelte/dist/icons/pipette.svelte
Pipette[FILENAME] = "node_modules/lucide-svelte/dist/icons/pipette.svelte";
function Pipette($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pipette);
  const iconNode = [
    [
      "path",
      {
        "d": "m12 9-8.414 8.414A2 2 0 0 0 3 18.828v1.344a2 2 0 0 1-.586 1.414A2 2 0 0 1 3.828 21h1.344a2 2 0 0 0 1.414-.586L15 12"
      }
    ],
    [
      "path",
      {
        "d": "m18 9 .4.4a1 1 0 1 1-3 3l-3.8-3.8a1 1 0 1 1 3-3l.4.4 3.4-3.4a1 1 0 1 1 3 3z"
      }
    ],
    ["path", { "d": "m2 22 .414-.414" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pipette" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pipette, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pipette,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pipette = hmr(Pipette, () => Pipette[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pipette[HMR].source;
    set(Pipette[HMR].source, module.default[HMR].original);
  });
}
var pipette_default = Pipette;

// node_modules/lucide-svelte/dist/icons/plane-landing.svelte
Plane_landing[FILENAME] = "node_modules/lucide-svelte/dist/icons/plane-landing.svelte";
function Plane_landing($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Plane_landing);
  const iconNode = [
    ["path", { "d": "M2 22h20" }],
    [
      "path",
      {
        "d": "M3.77 10.77 2 9l2-4.5 1.1.55c.55.28.9.84.9 1.45s.35 1.17.9 1.45L8 8.5l3-6 1.05.53a2 2 0 0 1 1.09 1.52l.72 5.4a2 2 0 0 0 1.09 1.52l4.4 2.2c.42.22.78.55 1.01.96l.6 1.03c.49.88-.06 1.98-1.06 2.1l-1.18.15c-.47.06-.95-.02-1.37-.24L4.29 11.15a2 2 0 0 1-.52-.38Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "plane-landing" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Plane_landing, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Plane_landing,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Plane_landing = hmr(Plane_landing, () => Plane_landing[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Plane_landing[HMR].source;
    set(Plane_landing[HMR].source, module.default[HMR].original);
  });
}
var plane_landing_default = Plane_landing;

// node_modules/lucide-svelte/dist/icons/pizza.svelte
Pizza[FILENAME] = "node_modules/lucide-svelte/dist/icons/pizza.svelte";
function Pizza($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pizza);
  const iconNode = [
    ["path", { "d": "m12 14-1 1" }],
    ["path", { "d": "m13.75 18.25-1.25 1.42" }],
    [
      "path",
      { "d": "M17.775 5.654a15.68 15.68 0 0 0-12.121 12.12" }
    ],
    ["path", { "d": "M18.8 9.3a1 1 0 0 0 2.1 7.7" }],
    [
      "path",
      {
        "d": "M21.964 20.732a1 1 0 0 1-1.232 1.232l-18-5a1 1 0 0 1-.695-1.232A19.68 19.68 0 0 1 15.732 2.037a1 1 0 0 1 1.232.695z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pizza" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pizza, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pizza,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pizza = hmr(Pizza, () => Pizza[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pizza[HMR].source;
    set(Pizza[HMR].source, module.default[HMR].original);
  });
}
var pizza_default = Pizza;

// node_modules/lucide-svelte/dist/icons/plane-takeoff.svelte
Plane_takeoff[FILENAME] = "node_modules/lucide-svelte/dist/icons/plane-takeoff.svelte";
function Plane_takeoff($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Plane_takeoff);
  const iconNode = [
    ["path", { "d": "M2 22h20" }],
    [
      "path",
      {
        "d": "M6.36 17.4 4 17l-2-4 1.1-.55a2 2 0 0 1 1.8 0l.17.1a2 2 0 0 0 1.8 0L8 12 5 6l.9-.45a2 2 0 0 1 2.09.2l4.02 3a2 2 0 0 0 2.1.2l4.19-2.06a2.41 2.41 0 0 1 1.73-.17L21 7a1.4 1.4 0 0 1 .87 1.99l-.38.76c-.23.46-.6.84-1.07 1.08L7.58 17.2a2 2 0 0 1-1.22.18Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "plane-takeoff" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Plane_takeoff, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Plane_takeoff,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Plane_takeoff = hmr(Plane_takeoff, () => Plane_takeoff[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Plane_takeoff[HMR].source;
    set(Plane_takeoff[HMR].source, module.default[HMR].original);
  });
}
var plane_takeoff_default = Plane_takeoff;

// node_modules/lucide-svelte/dist/icons/plane.svelte
Plane[FILENAME] = "node_modules/lucide-svelte/dist/icons/plane.svelte";
function Plane($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Plane);
  const iconNode = [
    [
      "path",
      {
        "d": "M17.8 19.2 16 11l3.5-3.5C21 6 21.5 4 21 3c-1-.5-3 0-4.5 1.5L13 8 4.8 6.2c-.5-.1-.9.1-1.1.5l-.3.5c-.2.5-.1 1 .3 1.3L9 12l-2 3H4l-1 1 3 2 2 3 1-1v-3l3-2 3.5 5.3c.3.4.8.5 1.3.3l.5-.2c.4-.3.6-.7.5-1.2z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "plane" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Plane, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Plane,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Plane = hmr(Plane, () => Plane[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Plane[HMR].source;
    set(Plane[HMR].source, module.default[HMR].original);
  });
}
var plane_default = Plane;

// node_modules/lucide-svelte/dist/icons/play.svelte
Play[FILENAME] = "node_modules/lucide-svelte/dist/icons/play.svelte";
function Play($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Play);
  const iconNode = [
    [
      "path",
      {
        "d": "M5 5a2 2 0 0 1 3.008-1.728l11.997 6.998a2 2 0 0 1 .003 3.458l-12 7A2 2 0 0 1 5 19z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "play" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Play, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Play,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Play = hmr(Play, () => Play[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Play[HMR].source;
    set(Play[HMR].source, module.default[HMR].original);
  });
}
var play_default = Play;

// node_modules/lucide-svelte/dist/icons/plug-2.svelte
Plug_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/plug-2.svelte";
function Plug_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Plug_2);
  const iconNode = [
    ["path", { "d": "M9 2v6" }],
    ["path", { "d": "M15 2v6" }],
    ["path", { "d": "M12 17v5" }],
    ["path", { "d": "M5 8h14" }],
    ["path", { "d": "M6 11V8h12v3a6 6 0 1 1-12 0Z" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "plug-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Plug_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Plug_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Plug_2 = hmr(Plug_2, () => Plug_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Plug_2[HMR].source;
    set(Plug_2[HMR].source, module.default[HMR].original);
  });
}
var plug_2_default = Plug_2;

// node_modules/lucide-svelte/dist/icons/plug-zap.svelte
Plug_zap[FILENAME] = "node_modules/lucide-svelte/dist/icons/plug-zap.svelte";
function Plug_zap($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Plug_zap);
  const iconNode = [
    [
      "path",
      {
        "d": "M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z"
      }
    ],
    ["path", { "d": "m2 22 3-3" }],
    ["path", { "d": "M7.5 13.5 10 11" }],
    ["path", { "d": "M10.5 16.5 13 14" }],
    ["path", { "d": "m18 3-4 4h6l-4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "plug-zap" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Plug_zap, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Plug_zap,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Plug_zap = hmr(Plug_zap, () => Plug_zap[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Plug_zap[HMR].source;
    set(Plug_zap[HMR].source, module.default[HMR].original);
  });
}
var plug_zap_default = Plug_zap;

// node_modules/lucide-svelte/dist/icons/plug.svelte
Plug[FILENAME] = "node_modules/lucide-svelte/dist/icons/plug.svelte";
function Plug($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Plug);
  const iconNode = [
    ["path", { "d": "M12 22v-5" }],
    ["path", { "d": "M9 8V2" }],
    ["path", { "d": "M15 8V2" }],
    ["path", { "d": "M18 8v5a4 4 0 0 1-4 4h-4a4 4 0 0 1-4-4V8Z" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "plug" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Plug, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Plug,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Plug = hmr(Plug, () => Plug[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Plug[HMR].source;
    set(Plug[HMR].source, module.default[HMR].original);
  });
}
var plug_default = Plug;

// node_modules/lucide-svelte/dist/icons/plus.svelte
Plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/plus.svelte";
function Plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Plus);
  const iconNode = [["path", { "d": "M5 12h14" }], ["path", { "d": "M12 5v14" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Plus = hmr(Plus, () => Plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Plus[HMR].source;
    set(Plus[HMR].source, module.default[HMR].original);
  });
}
var plus_default = Plus;

// node_modules/lucide-svelte/dist/icons/pocket-knife.svelte
Pocket_knife[FILENAME] = "node_modules/lucide-svelte/dist/icons/pocket-knife.svelte";
function Pocket_knife($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pocket_knife);
  const iconNode = [
    [
      "path",
      { "d": "M3 2v1c0 1 2 1 2 2S3 6 3 7s2 1 2 2-2 1-2 2 2 1 2 2" }
    ],
    ["path", { "d": "M18 6h.01" }],
    ["path", { "d": "M6 18h.01" }],
    [
      "path",
      {
        "d": "M20.83 8.83a4 4 0 0 0-5.66-5.66l-12 12a4 4 0 1 0 5.66 5.66Z"
      }
    ],
    ["path", { "d": "M18 11.66V22a4 4 0 0 0 4-4V6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pocket-knife" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pocket_knife, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pocket_knife,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pocket_knife = hmr(Pocket_knife, () => Pocket_knife[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pocket_knife[HMR].source;
    set(Pocket_knife[HMR].source, module.default[HMR].original);
  });
}
var pocket_knife_default = Pocket_knife;

// node_modules/lucide-svelte/dist/icons/pocket.svelte
Pocket[FILENAME] = "node_modules/lucide-svelte/dist/icons/pocket.svelte";
function Pocket($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pocket);
  const iconNode = [
    [
      "path",
      { "d": "M20 3a2 2 0 0 1 2 2v6a1 1 0 0 1-20 0V5a2 2 0 0 1 2-2z" }
    ],
    ["path", { "d": "m8 10 4 4 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pocket" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pocket, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pocket,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pocket = hmr(Pocket, () => Pocket[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pocket[HMR].source;
    set(Pocket[HMR].source, module.default[HMR].original);
  });
}
var pocket_default = Pocket;

// node_modules/lucide-svelte/dist/icons/podcast.svelte
Podcast[FILENAME] = "node_modules/lucide-svelte/dist/icons/podcast.svelte";
function Podcast($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Podcast);
  const iconNode = [
    [
      "path",
      {
        "d": "M13 17a1 1 0 1 0-2 0l.5 4.5a0.5 0.5 0 0 0 1 0z",
        "fill": "currentColor"
      }
    ],
    ["path", { "d": "M16.85 18.58a9 9 0 1 0-9.7 0" }],
    ["path", { "d": "M8 14a5 5 0 1 1 8 0" }],
    [
      "circle",
      { "cx": "12", "cy": "11", "r": "1", "fill": "currentColor" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "podcast" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Podcast, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Podcast,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Podcast = hmr(Podcast, () => Podcast[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Podcast[HMR].source;
    set(Podcast[HMR].source, module.default[HMR].original);
  });
}
var podcast_default = Podcast;

// node_modules/lucide-svelte/dist/icons/pointer-off.svelte
Pointer_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/pointer-off.svelte";
function Pointer_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pointer_off);
  const iconNode = [
    ["path", { "d": "M10 4.5V4a2 2 0 0 0-2.41-1.957" }],
    ["path", { "d": "M13.9 8.4a2 2 0 0 0-1.26-1.295" }],
    [
      "path",
      {
        "d": "M21.7 16.2A8 8 0 0 0 22 14v-3a2 2 0 1 0-4 0v-1a2 2 0 0 0-3.63-1.158"
      }
    ],
    [
      "path",
      {
        "d": "m7 15-1.8-1.8a2 2 0 0 0-2.79 2.86L6 19.7a7.74 7.74 0 0 0 6 2.3h2a8 8 0 0 0 5.657-2.343"
      }
    ],
    ["path", { "d": "M6 6v8" }],
    ["path", { "d": "m2 2 20 20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pointer-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pointer_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pointer_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pointer_off = hmr(Pointer_off, () => Pointer_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pointer_off[HMR].source;
    set(Pointer_off[HMR].source, module.default[HMR].original);
  });
}
var pointer_off_default = Pointer_off;

// node_modules/lucide-svelte/dist/icons/pointer.svelte
Pointer[FILENAME] = "node_modules/lucide-svelte/dist/icons/pointer.svelte";
function Pointer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pointer);
  const iconNode = [
    ["path", { "d": "M22 14a8 8 0 0 1-8 8" }],
    ["path", { "d": "M18 11v-1a2 2 0 0 0-2-2a2 2 0 0 0-2 2" }],
    ["path", { "d": "M14 10V9a2 2 0 0 0-2-2a2 2 0 0 0-2 2v1" }],
    ["path", { "d": "M10 9.5V4a2 2 0 0 0-2-2a2 2 0 0 0-2 2v10" }],
    [
      "path",
      {
        "d": "M18 11a2 2 0 1 1 4 0v3a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pointer" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pointer, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pointer,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pointer = hmr(Pointer, () => Pointer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pointer[HMR].source;
    set(Pointer[HMR].source, module.default[HMR].original);
  });
}
var pointer_default = Pointer;

// node_modules/lucide-svelte/dist/icons/popcorn.svelte
Popcorn[FILENAME] = "node_modules/lucide-svelte/dist/icons/popcorn.svelte";
function Popcorn($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Popcorn);
  const iconNode = [
    [
      "path",
      {
        "d": "M18 8a2 2 0 0 0 0-4 2 2 0 0 0-4 0 2 2 0 0 0-4 0 2 2 0 0 0-4 0 2 2 0 0 0 0 4"
      }
    ],
    ["path", { "d": "M10 22 9 8" }],
    ["path", { "d": "m14 22 1-14" }],
    [
      "path",
      {
        "d": "M20 8c.5 0 .9.4.8 1l-2.6 12c-.1.5-.7 1-1.2 1H7c-.6 0-1.1-.4-1.2-1L3.2 9c-.1-.6.3-1 .8-1Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "popcorn" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Popcorn, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Popcorn,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Popcorn = hmr(Popcorn, () => Popcorn[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Popcorn[HMR].source;
    set(Popcorn[HMR].source, module.default[HMR].original);
  });
}
var popcorn_default = Popcorn;

// node_modules/lucide-svelte/dist/icons/popsicle.svelte
Popsicle[FILENAME] = "node_modules/lucide-svelte/dist/icons/popsicle.svelte";
function Popsicle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Popsicle);
  const iconNode = [
    [
      "path",
      {
        "d": "M18.6 14.4c.8-.8.8-2 0-2.8l-8.1-8.1a4.95 4.95 0 1 0-7.1 7.1l8.1 8.1c.9.7 2.1.7 2.9-.1Z"
      }
    ],
    ["path", { "d": "m22 22-5.5-5.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "popsicle" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Popsicle, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Popsicle,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Popsicle = hmr(Popsicle, () => Popsicle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Popsicle[HMR].source;
    set(Popsicle[HMR].source, module.default[HMR].original);
  });
}
var popsicle_default = Popsicle;

// node_modules/lucide-svelte/dist/icons/pound-sterling.svelte
Pound_sterling[FILENAME] = "node_modules/lucide-svelte/dist/icons/pound-sterling.svelte";
function Pound_sterling($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pound_sterling);
  const iconNode = [
    ["path", { "d": "M18 7c0-5.333-8-5.333-8 0" }],
    ["path", { "d": "M10 7v14" }],
    ["path", { "d": "M6 21h12" }],
    ["path", { "d": "M6 13h10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pound-sterling" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pound_sterling, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pound_sterling,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pound_sterling = hmr(Pound_sterling, () => Pound_sterling[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pound_sterling[HMR].source;
    set(Pound_sterling[HMR].source, module.default[HMR].original);
  });
}
var pound_sterling_default = Pound_sterling;

// node_modules/lucide-svelte/dist/icons/power-off.svelte
Power_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/power-off.svelte";
function Power_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Power_off);
  const iconNode = [
    ["path", { "d": "M18.36 6.64A9 9 0 0 1 20.77 15" }],
    ["path", { "d": "M6.16 6.16a9 9 0 1 0 12.68 12.68" }],
    ["path", { "d": "M12 2v4" }],
    ["path", { "d": "m2 2 20 20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "power-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Power_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Power_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Power_off = hmr(Power_off, () => Power_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Power_off[HMR].source;
    set(Power_off[HMR].source, module.default[HMR].original);
  });
}
var power_off_default = Power_off;

// node_modules/lucide-svelte/dist/icons/power.svelte
Power[FILENAME] = "node_modules/lucide-svelte/dist/icons/power.svelte";
function Power($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Power);
  const iconNode = [
    ["path", { "d": "M12 2v10" }],
    ["path", { "d": "M18.4 6.6a9 9 0 1 1-12.77.04" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "power" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Power, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Power,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Power = hmr(Power, () => Power[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Power[HMR].source;
    set(Power[HMR].source, module.default[HMR].original);
  });
}
var power_default = Power;

// node_modules/lucide-svelte/dist/icons/presentation.svelte
Presentation[FILENAME] = "node_modules/lucide-svelte/dist/icons/presentation.svelte";
function Presentation($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Presentation);
  const iconNode = [
    ["path", { "d": "M2 3h20" }],
    ["path", { "d": "M21 3v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V3" }],
    ["path", { "d": "m7 21 5-5 5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "presentation" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Presentation, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Presentation,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Presentation = hmr(Presentation, () => Presentation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Presentation[HMR].source;
    set(Presentation[HMR].source, module.default[HMR].original);
  });
}
var presentation_default = Presentation;

// node_modules/lucide-svelte/dist/icons/printer-check.svelte
Printer_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/printer-check.svelte";
function Printer_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Printer_check);
  const iconNode = [
    [
      "path",
      {
        "d": "M13.5 22H7a1 1 0 0 1-1-1v-6a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v.5"
      }
    ],
    ["path", { "d": "m16 19 2 2 4-4" }],
    [
      "path",
      {
        "d": "M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v2"
      }
    ],
    ["path", { "d": "M6 9V3a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "printer-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Printer_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Printer_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Printer_check = hmr(Printer_check, () => Printer_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Printer_check[HMR].source;
    set(Printer_check[HMR].source, module.default[HMR].original);
  });
}
var printer_check_default = Printer_check;

// node_modules/lucide-svelte/dist/icons/printer.svelte
Printer[FILENAME] = "node_modules/lucide-svelte/dist/icons/printer.svelte";
function Printer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Printer);
  const iconNode = [
    [
      "path",
      {
        "d": "M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"
      }
    ],
    ["path", { "d": "M6 9V3a1 1 0 0 1 1-1h10a1 1 0 0 1 1 1v6" }],
    [
      "rect",
      { "x": "6", "y": "14", "width": "12", "height": "8", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "printer" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Printer, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Printer,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Printer = hmr(Printer, () => Printer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Printer[HMR].source;
    set(Printer[HMR].source, module.default[HMR].original);
  });
}
var printer_default = Printer;

// node_modules/lucide-svelte/dist/icons/projector.svelte
Projector[FILENAME] = "node_modules/lucide-svelte/dist/icons/projector.svelte";
function Projector($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Projector);
  const iconNode = [
    ["path", { "d": "M5 7 3 5" }],
    ["path", { "d": "M9 6V3" }],
    ["path", { "d": "m13 7 2-2" }],
    ["circle", { "cx": "9", "cy": "13", "r": "3" }],
    [
      "path",
      {
        "d": "M11.83 12H20a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2h2.17"
      }
    ],
    ["path", { "d": "M16 16h2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "projector" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Projector, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Projector,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Projector = hmr(Projector, () => Projector[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Projector[HMR].source;
    set(Projector[HMR].source, module.default[HMR].original);
  });
}
var projector_default = Projector;

// node_modules/lucide-svelte/dist/icons/proportions.svelte
Proportions[FILENAME] = "node_modules/lucide-svelte/dist/icons/proportions.svelte";
function Proportions($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Proportions);
  const iconNode = [
    [
      "rect",
      { "width": "20", "height": "16", "x": "2", "y": "4", "rx": "2" }
    ],
    ["path", { "d": "M12 9v11" }],
    ["path", { "d": "M2 9h13a2 2 0 0 1 2 2v9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "proportions" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Proportions, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Proportions,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Proportions = hmr(Proportions, () => Proportions[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Proportions[HMR].source;
    set(Proportions[HMR].source, module.default[HMR].original);
  });
}
var proportions_default = Proportions;

// node_modules/lucide-svelte/dist/icons/puzzle.svelte
Puzzle[FILENAME] = "node_modules/lucide-svelte/dist/icons/puzzle.svelte";
function Puzzle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Puzzle);
  const iconNode = [
    [
      "path",
      {
        "d": "M15.39 4.39a1 1 0 0 0 1.68-.474 2.5 2.5 0 1 1 3.014 3.015 1 1 0 0 0-.474 1.68l1.683 1.682a2.414 2.414 0 0 1 0 3.414L19.61 15.39a1 1 0 0 1-1.68-.474 2.5 2.5 0 1 0-3.014 3.015 1 1 0 0 1 .474 1.68l-1.683 1.682a2.414 2.414 0 0 1-3.414 0L8.61 19.61a1 1 0 0 0-1.68.474 2.5 2.5 0 1 1-3.014-3.015 1 1 0 0 0 .474-1.68l-1.683-1.682a2.414 2.414 0 0 1 0-3.414L4.39 8.61a1 1 0 0 1 1.68.474 2.5 2.5 0 1 0 3.014-3.015 1 1 0 0 1-.474-1.68l1.683-1.682a2.414 2.414 0 0 1 3.414 0z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "puzzle" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Puzzle, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Puzzle,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Puzzle = hmr(Puzzle, () => Puzzle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Puzzle[HMR].source;
    set(Puzzle[HMR].source, module.default[HMR].original);
  });
}
var puzzle_default = Puzzle;

// node_modules/lucide-svelte/dist/icons/pyramid.svelte
Pyramid[FILENAME] = "node_modules/lucide-svelte/dist/icons/pyramid.svelte";
function Pyramid($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Pyramid);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.5 16.88a1 1 0 0 1-.32-1.43l9-13.02a1 1 0 0 1 1.64 0l9 13.01a1 1 0 0 1-.32 1.44l-8.51 4.86a2 2 0 0 1-1.98 0Z"
      }
    ],
    ["path", { "d": "M12 2v20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "pyramid" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Pyramid, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Pyramid,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Pyramid = hmr(Pyramid, () => Pyramid[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pyramid[HMR].source;
    set(Pyramid[HMR].source, module.default[HMR].original);
  });
}
var pyramid_default = Pyramid;

// node_modules/lucide-svelte/dist/icons/quote.svelte
Quote[FILENAME] = "node_modules/lucide-svelte/dist/icons/quote.svelte";
function Quote($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Quote);
  const iconNode = [
    [
      "path",
      {
        "d": "M16 3a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2 1 1 0 0 1 1 1v1a2 2 0 0 1-2 2 1 1 0 0 0-1 1v2a1 1 0 0 0 1 1 6 6 0 0 0 6-6V5a2 2 0 0 0-2-2z"
      }
    ],
    [
      "path",
      {
        "d": "M5 3a2 2 0 0 0-2 2v6a2 2 0 0 0 2 2 1 1 0 0 1 1 1v1a2 2 0 0 1-2 2 1 1 0 0 0-1 1v2a1 1 0 0 0 1 1 6 6 0 0 0 6-6V5a2 2 0 0 0-2-2z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "quote" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Quote, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Quote,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Quote = hmr(Quote, () => Quote[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Quote[HMR].source;
    set(Quote[HMR].source, module.default[HMR].original);
  });
}
var quote_default = Quote;

// node_modules/lucide-svelte/dist/icons/qr-code.svelte
Qr_code[FILENAME] = "node_modules/lucide-svelte/dist/icons/qr-code.svelte";
function Qr_code($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Qr_code);
  const iconNode = [
    [
      "rect",
      { "width": "5", "height": "5", "x": "3", "y": "3", "rx": "1" }
    ],
    [
      "rect",
      { "width": "5", "height": "5", "x": "16", "y": "3", "rx": "1" }
    ],
    [
      "rect",
      { "width": "5", "height": "5", "x": "3", "y": "16", "rx": "1" }
    ],
    ["path", { "d": "M21 16h-3a2 2 0 0 0-2 2v3" }],
    ["path", { "d": "M21 21v.01" }],
    ["path", { "d": "M12 7v3a2 2 0 0 1-2 2H7" }],
    ["path", { "d": "M3 12h.01" }],
    ["path", { "d": "M12 3h.01" }],
    ["path", { "d": "M12 16v.01" }],
    ["path", { "d": "M16 12h1" }],
    ["path", { "d": "M21 12v.01" }],
    ["path", { "d": "M12 21v-1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "qr-code" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Qr_code, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Qr_code,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Qr_code = hmr(Qr_code, () => Qr_code[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Qr_code[HMR].source;
    set(Qr_code[HMR].source, module.default[HMR].original);
  });
}
var qr_code_default = Qr_code;

// node_modules/lucide-svelte/dist/icons/rabbit.svelte
Rabbit[FILENAME] = "node_modules/lucide-svelte/dist/icons/rabbit.svelte";
function Rabbit($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rabbit);
  const iconNode = [
    ["path", { "d": "M13 16a3 3 0 0 1 2.24 5" }],
    ["path", { "d": "M18 12h.01" }],
    [
      "path",
      {
        "d": "M18 21h-8a4 4 0 0 1-4-4 7 7 0 0 1 7-7h.2L9.6 6.4a1 1 0 1 1 2.8-2.8L15.8 7h.2c3.3 0 6 2.7 6 6v1a2 2 0 0 1-2 2h-1a3 3 0 0 0-3 3"
      }
    ],
    ["path", { "d": "M20 8.54V4a2 2 0 1 0-4 0v3" }],
    ["path", { "d": "M7.612 12.524a3 3 0 1 0-1.6 4.3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rabbit" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rabbit, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rabbit,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rabbit = hmr(Rabbit, () => Rabbit[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rabbit[HMR].source;
    set(Rabbit[HMR].source, module.default[HMR].original);
  });
}
var rabbit_default = Rabbit;

// node_modules/lucide-svelte/dist/icons/radar.svelte
Radar[FILENAME] = "node_modules/lucide-svelte/dist/icons/radar.svelte";
function Radar($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Radar);
  const iconNode = [
    ["path", { "d": "M19.07 4.93A10 10 0 0 0 6.99 3.34" }],
    ["path", { "d": "M4 6h.01" }],
    ["path", { "d": "M2.29 9.62A10 10 0 1 0 21.31 8.35" }],
    ["path", { "d": "M16.24 7.76A6 6 0 1 0 8.23 16.67" }],
    ["path", { "d": "M12 18h.01" }],
    ["path", { "d": "M17.99 11.66A6 6 0 0 1 15.77 16.67" }],
    ["circle", { "cx": "12", "cy": "12", "r": "2" }],
    ["path", { "d": "m13.41 10.59 5.66-5.66" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "radar" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Radar, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Radar,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Radar = hmr(Radar, () => Radar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Radar[HMR].source;
    set(Radar[HMR].source, module.default[HMR].original);
  });
}
var radar_default = Radar;

// node_modules/lucide-svelte/dist/icons/radiation.svelte
Radiation[FILENAME] = "node_modules/lucide-svelte/dist/icons/radiation.svelte";
function Radiation($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Radiation);
  const iconNode = [
    ["path", { "d": "M12 12h.01" }],
    [
      "path",
      {
        "d": "M14 15.4641a4 4 0 0 1-4 0L7.52786 19.74597 A 1 1 0 0 0 7.99303 21.16211 10 10 0 0 0 16.00697 21.16211 1 1 0 0 0 16.47214 19.74597z"
      }
    ],
    [
      "path",
      {
        "d": "M16 12a4 4 0 0 0-2-3.464l2.472-4.282a1 1 0 0 1 1.46-.305 10 10 0 0 1 4.006 6.94A1 1 0 0 1 21 12z"
      }
    ],
    [
      "path",
      {
        "d": "M8 12a4 4 0 0 1 2-3.464L7.528 4.254a1 1 0 0 0-1.46-.305 10 10 0 0 0-4.006 6.94A1 1 0 0 0 3 12z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "radiation" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Radiation, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Radiation,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Radiation = hmr(Radiation, () => Radiation[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Radiation[HMR].source;
    set(Radiation[HMR].source, module.default[HMR].original);
  });
}
var radiation_default = Radiation;

// node_modules/lucide-svelte/dist/icons/radical.svelte
Radical[FILENAME] = "node_modules/lucide-svelte/dist/icons/radical.svelte";
function Radical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Radical);
  const iconNode = [
    [
      "path",
      {
        "d": "M3 12h3.28a1 1 0 0 1 .948.684l2.298 7.934a.5.5 0 0 0 .96-.044L13.82 4.771A1 1 0 0 1 14.792 4H21"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "radical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Radical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Radical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Radical = hmr(Radical, () => Radical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Radical[HMR].source;
    set(Radical[HMR].source, module.default[HMR].original);
  });
}
var radical_default = Radical;

// node_modules/lucide-svelte/dist/icons/radio-receiver.svelte
Radio_receiver[FILENAME] = "node_modules/lucide-svelte/dist/icons/radio-receiver.svelte";
function Radio_receiver($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Radio_receiver);
  const iconNode = [
    ["path", { "d": "M5 16v2" }],
    ["path", { "d": "M19 16v2" }],
    [
      "rect",
      { "width": "20", "height": "8", "x": "2", "y": "8", "rx": "2" }
    ],
    ["path", { "d": "M18 12h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "radio-receiver" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Radio_receiver, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Radio_receiver,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Radio_receiver = hmr(Radio_receiver, () => Radio_receiver[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Radio_receiver[HMR].source;
    set(Radio_receiver[HMR].source, module.default[HMR].original);
  });
}
var radio_receiver_default = Radio_receiver;

// node_modules/lucide-svelte/dist/icons/radio-tower.svelte
Radio_tower[FILENAME] = "node_modules/lucide-svelte/dist/icons/radio-tower.svelte";
function Radio_tower($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Radio_tower);
  const iconNode = [
    ["path", { "d": "M4.9 16.1C1 12.2 1 5.8 4.9 1.9" }],
    ["path", { "d": "M7.8 4.7a6.14 6.14 0 0 0-.8 7.5" }],
    ["circle", { "cx": "12", "cy": "9", "r": "2" }],
    ["path", { "d": "M16.2 4.8c2 2 2.26 5.11.8 7.47" }],
    ["path", { "d": "M19.1 1.9a9.96 9.96 0 0 1 0 14.1" }],
    ["path", { "d": "M9.5 18h5" }],
    ["path", { "d": "m8 22 4-11 4 11" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "radio-tower" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Radio_tower, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Radio_tower,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Radio_tower = hmr(Radio_tower, () => Radio_tower[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Radio_tower[HMR].source;
    set(Radio_tower[HMR].source, module.default[HMR].original);
  });
}
var radio_tower_default = Radio_tower;

// node_modules/lucide-svelte/dist/icons/radio.svelte
Radio[FILENAME] = "node_modules/lucide-svelte/dist/icons/radio.svelte";
function Radio($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Radio);
  const iconNode = [
    ["path", { "d": "M16.247 7.761a6 6 0 0 1 0 8.478" }],
    ["path", { "d": "M19.075 4.933a10 10 0 0 1 0 14.134" }],
    ["path", { "d": "M4.925 19.067a10 10 0 0 1 0-14.134" }],
    ["path", { "d": "M7.753 16.239a6 6 0 0 1 0-8.478" }],
    ["circle", { "cx": "12", "cy": "12", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "radio" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Radio, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Radio,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Radio = hmr(Radio, () => Radio[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Radio[HMR].source;
    set(Radio[HMR].source, module.default[HMR].original);
  });
}
var radio_default = Radio;

// node_modules/lucide-svelte/dist/icons/radius.svelte
Radius[FILENAME] = "node_modules/lucide-svelte/dist/icons/radius.svelte";
function Radius($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Radius);
  const iconNode = [
    ["path", { "d": "M20.34 17.52a10 10 0 1 0-2.82 2.82" }],
    ["circle", { "cx": "19", "cy": "19", "r": "2" }],
    ["path", { "d": "m13.41 13.41 4.18 4.18" }],
    ["circle", { "cx": "12", "cy": "12", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "radius" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Radius, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Radius,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Radius = hmr(Radius, () => Radius[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Radius[HMR].source;
    set(Radius[HMR].source, module.default[HMR].original);
  });
}
var radius_default = Radius;

// node_modules/lucide-svelte/dist/icons/rail-symbol.svelte
Rail_symbol[FILENAME] = "node_modules/lucide-svelte/dist/icons/rail-symbol.svelte";
function Rail_symbol($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rail_symbol);
  const iconNode = [
    ["path", { "d": "M5 15h14" }],
    ["path", { "d": "M5 9h14" }],
    ["path", { "d": "m14 20-5-5 6-6-5-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rail-symbol" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rail_symbol, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rail_symbol,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rail_symbol = hmr(Rail_symbol, () => Rail_symbol[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rail_symbol[HMR].source;
    set(Rail_symbol[HMR].source, module.default[HMR].original);
  });
}
var rail_symbol_default = Rail_symbol;

// node_modules/lucide-svelte/dist/icons/rainbow.svelte
Rainbow[FILENAME] = "node_modules/lucide-svelte/dist/icons/rainbow.svelte";
function Rainbow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rainbow);
  const iconNode = [
    ["path", { "d": "M22 17a10 10 0 0 0-20 0" }],
    ["path", { "d": "M6 17a6 6 0 0 1 12 0" }],
    ["path", { "d": "M10 17a2 2 0 0 1 4 0" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rainbow" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rainbow, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rainbow,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rainbow = hmr(Rainbow, () => Rainbow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rainbow[HMR].source;
    set(Rainbow[HMR].source, module.default[HMR].original);
  });
}
var rainbow_default = Rainbow;

// node_modules/lucide-svelte/dist/icons/rat.svelte
Rat[FILENAME] = "node_modules/lucide-svelte/dist/icons/rat.svelte";
function Rat($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rat);
  const iconNode = [
    ["path", { "d": "M13 22H4a2 2 0 0 1 0-4h12" }],
    ["path", { "d": "M13.236 18a3 3 0 0 0-2.2-5" }],
    ["path", { "d": "M16 9h.01" }],
    [
      "path",
      {
        "d": "M16.82 3.94a3 3 0 1 1 3.237 4.868l1.815 2.587a1.5 1.5 0 0 1-1.5 2.1l-2.872-.453a3 3 0 0 0-3.5 3"
      }
    ],
    [
      "path",
      {
        "d": "M17 4.988a3 3 0 1 0-5.2 2.052A7 7 0 0 0 4 14.015 4 4 0 0 0 8 18"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rat" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rat, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rat,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rat = hmr(Rat, () => Rat[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rat[HMR].source;
    set(Rat[HMR].source, module.default[HMR].original);
  });
}
var rat_default = Rat;

// node_modules/lucide-svelte/dist/icons/ratio.svelte
Ratio[FILENAME] = "node_modules/lucide-svelte/dist/icons/ratio.svelte";
function Ratio($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ratio);
  const iconNode = [
    [
      "rect",
      { "width": "12", "height": "20", "x": "6", "y": "2", "rx": "2" }
    ],
    [
      "rect",
      { "width": "20", "height": "12", "x": "2", "y": "6", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ratio" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ratio, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ratio,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ratio = hmr(Ratio, () => Ratio[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ratio[HMR].source;
    set(Ratio[HMR].source, module.default[HMR].original);
  });
}
var ratio_default = Ratio;

// node_modules/lucide-svelte/dist/icons/receipt-cent.svelte
Receipt_cent[FILENAME] = "node_modules/lucide-svelte/dist/icons/receipt-cent.svelte";
function Receipt_cent($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Receipt_cent);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"
      }
    ],
    ["path", { "d": "M12 6.5v11" }],
    ["path", { "d": "M15 9.4a4 4 0 1 0 0 5.2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "receipt-cent" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Receipt_cent, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Receipt_cent,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Receipt_cent = hmr(Receipt_cent, () => Receipt_cent[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Receipt_cent[HMR].source;
    set(Receipt_cent[HMR].source, module.default[HMR].original);
  });
}
var receipt_cent_default = Receipt_cent;

// node_modules/lucide-svelte/dist/icons/receipt-euro.svelte
Receipt_euro[FILENAME] = "node_modules/lucide-svelte/dist/icons/receipt-euro.svelte";
function Receipt_euro($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Receipt_euro);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"
      }
    ],
    ["path", { "d": "M8 12h5" }],
    ["path", { "d": "M16 9.5a4 4 0 1 0 0 5.2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "receipt-euro" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Receipt_euro, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Receipt_euro,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Receipt_euro = hmr(Receipt_euro, () => Receipt_euro[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Receipt_euro[HMR].source;
    set(Receipt_euro[HMR].source, module.default[HMR].original);
  });
}
var receipt_euro_default = Receipt_euro;

// node_modules/lucide-svelte/dist/icons/receipt-indian-rupee.svelte
Receipt_indian_rupee[FILENAME] = "node_modules/lucide-svelte/dist/icons/receipt-indian-rupee.svelte";
function Receipt_indian_rupee($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Receipt_indian_rupee);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"
      }
    ],
    ["path", { "d": "M8 7h8" }],
    ["path", { "d": "M12 17.5 8 15h1a4 4 0 0 0 0-8" }],
    ["path", { "d": "M8 11h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "receipt-indian-rupee" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Receipt_indian_rupee, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Receipt_indian_rupee,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Receipt_indian_rupee = hmr(Receipt_indian_rupee, () => Receipt_indian_rupee[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Receipt_indian_rupee[HMR].source;
    set(Receipt_indian_rupee[HMR].source, module.default[HMR].original);
  });
}
var receipt_indian_rupee_default = Receipt_indian_rupee;

// node_modules/lucide-svelte/dist/icons/receipt-japanese-yen.svelte
Receipt_japanese_yen[FILENAME] = "node_modules/lucide-svelte/dist/icons/receipt-japanese-yen.svelte";
function Receipt_japanese_yen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Receipt_japanese_yen);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"
      }
    ],
    ["path", { "d": "m12 10 3-3" }],
    ["path", { "d": "m9 7 3 3v7.5" }],
    ["path", { "d": "M9 11h6" }],
    ["path", { "d": "M9 15h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "receipt-japanese-yen" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Receipt_japanese_yen, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Receipt_japanese_yen,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Receipt_japanese_yen = hmr(Receipt_japanese_yen, () => Receipt_japanese_yen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Receipt_japanese_yen[HMR].source;
    set(Receipt_japanese_yen[HMR].source, module.default[HMR].original);
  });
}
var receipt_japanese_yen_default = Receipt_japanese_yen;

// node_modules/lucide-svelte/dist/icons/receipt-pound-sterling.svelte
Receipt_pound_sterling[FILENAME] = "node_modules/lucide-svelte/dist/icons/receipt-pound-sterling.svelte";
function Receipt_pound_sterling($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Receipt_pound_sterling);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"
      }
    ],
    ["path", { "d": "M8 13h5" }],
    ["path", { "d": "M10 17V9.5a2.5 2.5 0 0 1 5 0" }],
    ["path", { "d": "M8 17h7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "receipt-pound-sterling" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Receipt_pound_sterling, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Receipt_pound_sterling,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Receipt_pound_sterling = hmr(Receipt_pound_sterling, () => Receipt_pound_sterling[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Receipt_pound_sterling[HMR].source;
    set(Receipt_pound_sterling[HMR].source, module.default[HMR].original);
  });
}
var receipt_pound_sterling_default = Receipt_pound_sterling;

// node_modules/lucide-svelte/dist/icons/receipt-russian-ruble.svelte
Receipt_russian_ruble[FILENAME] = "node_modules/lucide-svelte/dist/icons/receipt-russian-ruble.svelte";
function Receipt_russian_ruble($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Receipt_russian_ruble);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"
      }
    ],
    ["path", { "d": "M8 15h5" }],
    ["path", { "d": "M8 11h5a2 2 0 1 0 0-4h-3v10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "receipt-russian-ruble" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Receipt_russian_ruble, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Receipt_russian_ruble,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Receipt_russian_ruble = hmr(Receipt_russian_ruble, () => Receipt_russian_ruble[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Receipt_russian_ruble[HMR].source;
    set(Receipt_russian_ruble[HMR].source, module.default[HMR].original);
  });
}
var receipt_russian_ruble_default = Receipt_russian_ruble;

// node_modules/lucide-svelte/dist/icons/receipt-swiss-franc.svelte
Receipt_swiss_franc[FILENAME] = "node_modules/lucide-svelte/dist/icons/receipt-swiss-franc.svelte";
function Receipt_swiss_franc($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Receipt_swiss_franc);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"
      }
    ],
    ["path", { "d": "M10 17V7h5" }],
    ["path", { "d": "M10 11h4" }],
    ["path", { "d": "M8 15h5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "receipt-swiss-franc" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Receipt_swiss_franc, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Receipt_swiss_franc,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Receipt_swiss_franc = hmr(Receipt_swiss_franc, () => Receipt_swiss_franc[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Receipt_swiss_franc[HMR].source;
    set(Receipt_swiss_franc[HMR].source, module.default[HMR].original);
  });
}
var receipt_swiss_franc_default = Receipt_swiss_franc;

// node_modules/lucide-svelte/dist/icons/receipt-text.svelte
Receipt_text[FILENAME] = "node_modules/lucide-svelte/dist/icons/receipt-text.svelte";
function Receipt_text($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Receipt_text);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"
      }
    ],
    ["path", { "d": "M14 8H8" }],
    ["path", { "d": "M16 12H8" }],
    ["path", { "d": "M13 16H8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "receipt-text" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Receipt_text, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Receipt_text,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Receipt_text = hmr(Receipt_text, () => Receipt_text[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Receipt_text[HMR].source;
    set(Receipt_text[HMR].source, module.default[HMR].original);
  });
}
var receipt_text_default = Receipt_text;

// node_modules/lucide-svelte/dist/icons/receipt-turkish-lira.svelte
Receipt_turkish_lira[FILENAME] = "node_modules/lucide-svelte/dist/icons/receipt-turkish-lira.svelte";
function Receipt_turkish_lira($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Receipt_turkish_lira);
  const iconNode = [
    ["path", { "d": "M10 6.5v11a5.5 5.5 0 0 0 5.5-5.5" }],
    ["path", { "d": "m14 8-6 3" }],
    [
      "path",
      {
        "d": "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "receipt-turkish-lira" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Receipt_turkish_lira, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Receipt_turkish_lira,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Receipt_turkish_lira = hmr(Receipt_turkish_lira, () => Receipt_turkish_lira[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Receipt_turkish_lira[HMR].source;
    set(Receipt_turkish_lira[HMR].source, module.default[HMR].original);
  });
}
var receipt_turkish_lira_default = Receipt_turkish_lira;

// node_modules/lucide-svelte/dist/icons/receipt.svelte
Receipt[FILENAME] = "node_modules/lucide-svelte/dist/icons/receipt.svelte";
function Receipt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Receipt);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 2v20l2-1 2 1 2-1 2 1 2-1 2 1 2-1 2 1V2l-2 1-2-1-2 1-2-1-2 1-2-1-2 1Z"
      }
    ],
    ["path", { "d": "M16 8h-6a2 2 0 1 0 0 4h4a2 2 0 1 1 0 4H8" }],
    ["path", { "d": "M12 17.5v-11" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "receipt" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Receipt, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Receipt,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Receipt = hmr(Receipt, () => Receipt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Receipt[HMR].source;
    set(Receipt[HMR].source, module.default[HMR].original);
  });
}
var receipt_default = Receipt;

// node_modules/lucide-svelte/dist/icons/rectangle-circle.svelte
Rectangle_circle[FILENAME] = "node_modules/lucide-svelte/dist/icons/rectangle-circle.svelte";
function Rectangle_circle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rectangle_circle);
  const iconNode = [
    ["path", { "d": "M14 4v16H3a1 1 0 0 1-1-1V5a1 1 0 0 1 1-1z" }],
    ["circle", { "cx": "14", "cy": "12", "r": "8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rectangle-circle" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rectangle_circle, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rectangle_circle,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rectangle_circle = hmr(Rectangle_circle, () => Rectangle_circle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rectangle_circle[HMR].source;
    set(Rectangle_circle[HMR].source, module.default[HMR].original);
  });
}
var rectangle_circle_default = Rectangle_circle;

// node_modules/lucide-svelte/dist/icons/rectangle-ellipsis.svelte
Rectangle_ellipsis[FILENAME] = "node_modules/lucide-svelte/dist/icons/rectangle-ellipsis.svelte";
function Rectangle_ellipsis($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rectangle_ellipsis);
  const iconNode = [
    [
      "rect",
      { "width": "20", "height": "12", "x": "2", "y": "6", "rx": "2" }
    ],
    ["path", { "d": "M12 12h.01" }],
    ["path", { "d": "M17 12h.01" }],
    ["path", { "d": "M7 12h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rectangle-ellipsis" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rectangle_ellipsis, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rectangle_ellipsis,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rectangle_ellipsis = hmr(Rectangle_ellipsis, () => Rectangle_ellipsis[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rectangle_ellipsis[HMR].source;
    set(Rectangle_ellipsis[HMR].source, module.default[HMR].original);
  });
}
var rectangle_ellipsis_default = Rectangle_ellipsis;

// node_modules/lucide-svelte/dist/icons/rectangle-goggles.svelte
Rectangle_goggles[FILENAME] = "node_modules/lucide-svelte/dist/icons/rectangle-goggles.svelte";
function Rectangle_goggles($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rectangle_goggles);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 6a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-4a2 2 0 0 1-1.6-.8l-1.6-2.13a1 1 0 0 0-1.6 0L9.6 17.2A2 2 0 0 1 8 18H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rectangle-goggles" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rectangle_goggles, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rectangle_goggles,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rectangle_goggles = hmr(Rectangle_goggles, () => Rectangle_goggles[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rectangle_goggles[HMR].source;
    set(Rectangle_goggles[HMR].source, module.default[HMR].original);
  });
}
var rectangle_goggles_default = Rectangle_goggles;

// node_modules/lucide-svelte/dist/icons/rectangle-horizontal.svelte
Rectangle_horizontal[FILENAME] = "node_modules/lucide-svelte/dist/icons/rectangle-horizontal.svelte";
function Rectangle_horizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rectangle_horizontal);
  const iconNode = [
    [
      "rect",
      { "width": "20", "height": "12", "x": "2", "y": "6", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rectangle-horizontal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rectangle_horizontal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rectangle_horizontal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rectangle_horizontal = hmr(Rectangle_horizontal, () => Rectangle_horizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rectangle_horizontal[HMR].source;
    set(Rectangle_horizontal[HMR].source, module.default[HMR].original);
  });
}
var rectangle_horizontal_default = Rectangle_horizontal;

// node_modules/lucide-svelte/dist/icons/rectangle-vertical.svelte
Rectangle_vertical[FILENAME] = "node_modules/lucide-svelte/dist/icons/rectangle-vertical.svelte";
function Rectangle_vertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rectangle_vertical);
  const iconNode = [
    [
      "rect",
      { "width": "12", "height": "20", "x": "6", "y": "2", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rectangle-vertical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rectangle_vertical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rectangle_vertical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rectangle_vertical = hmr(Rectangle_vertical, () => Rectangle_vertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rectangle_vertical[HMR].source;
    set(Rectangle_vertical[HMR].source, module.default[HMR].original);
  });
}
var rectangle_vertical_default = Rectangle_vertical;

// node_modules/lucide-svelte/dist/icons/recycle.svelte
Recycle[FILENAME] = "node_modules/lucide-svelte/dist/icons/recycle.svelte";
function Recycle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Recycle);
  const iconNode = [
    [
      "path",
      {
        "d": "M7 19H4.815a1.83 1.83 0 0 1-1.57-.881 1.785 1.785 0 0 1-.004-1.784L7.196 9.5"
      }
    ],
    [
      "path",
      {
        "d": "M11 19h8.203a1.83 1.83 0 0 0 1.556-.89 1.784 1.784 0 0 0 0-1.775l-1.226-2.12"
      }
    ],
    ["path", { "d": "m14 16-3 3 3 3" }],
    ["path", { "d": "M8.293 13.596 7.196 9.5 3.1 10.598" }],
    [
      "path",
      {
        "d": "m9.344 5.811 1.093-1.892A1.83 1.83 0 0 1 11.985 3a1.784 1.784 0 0 1 1.546.888l3.943 6.843"
      }
    ],
    ["path", { "d": "m13.378 9.633 4.096 1.098 1.097-4.096" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "recycle" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Recycle, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Recycle,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Recycle = hmr(Recycle, () => Recycle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Recycle[HMR].source;
    set(Recycle[HMR].source, module.default[HMR].original);
  });
}
var recycle_default = Recycle;

// node_modules/lucide-svelte/dist/icons/redo-2.svelte
Redo_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/redo-2.svelte";
function Redo_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Redo_2);
  const iconNode = [
    ["path", { "d": "m15 14 5-5-5-5" }],
    [
      "path",
      {
        "d": "M20 9H9.5A5.5 5.5 0 0 0 4 14.5A5.5 5.5 0 0 0 9.5 20H13"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "redo-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Redo_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Redo_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Redo_2 = hmr(Redo_2, () => Redo_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Redo_2[HMR].source;
    set(Redo_2[HMR].source, module.default[HMR].original);
  });
}
var redo_2_default = Redo_2;

// node_modules/lucide-svelte/dist/icons/redo.svelte
Redo[FILENAME] = "node_modules/lucide-svelte/dist/icons/redo.svelte";
function Redo($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Redo);
  const iconNode = [
    ["path", { "d": "M21 7v6h-6" }],
    ["path", { "d": "M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3 2.7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "redo" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Redo, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Redo,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Redo = hmr(Redo, () => Redo[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Redo[HMR].source;
    set(Redo[HMR].source, module.default[HMR].original);
  });
}
var redo_default = Redo;

// node_modules/lucide-svelte/dist/icons/redo-dot.svelte
Redo_dot[FILENAME] = "node_modules/lucide-svelte/dist/icons/redo-dot.svelte";
function Redo_dot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Redo_dot);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "17", "r": "1" }],
    ["path", { "d": "M21 7v6h-6" }],
    ["path", { "d": "M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3 2.7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "redo-dot" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Redo_dot, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Redo_dot,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Redo_dot = hmr(Redo_dot, () => Redo_dot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Redo_dot[HMR].source;
    set(Redo_dot[HMR].source, module.default[HMR].original);
  });
}
var redo_dot_default = Redo_dot;

// node_modules/lucide-svelte/dist/icons/refresh-ccw-dot.svelte
Refresh_ccw_dot[FILENAME] = "node_modules/lucide-svelte/dist/icons/refresh-ccw-dot.svelte";
function Refresh_ccw_dot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Refresh_ccw_dot);
  const iconNode = [
    [
      "path",
      { "d": "M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" }
    ],
    ["path", { "d": "M3 3v5h5" }],
    [
      "path",
      { "d": "M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16" }
    ],
    ["path", { "d": "M16 16h5v5" }],
    ["circle", { "cx": "12", "cy": "12", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "refresh-ccw-dot" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Refresh_ccw_dot, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Refresh_ccw_dot,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Refresh_ccw_dot = hmr(Refresh_ccw_dot, () => Refresh_ccw_dot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Refresh_ccw_dot[HMR].source;
    set(Refresh_ccw_dot[HMR].source, module.default[HMR].original);
  });
}
var refresh_ccw_dot_default = Refresh_ccw_dot;

// node_modules/lucide-svelte/dist/icons/refresh-ccw.svelte
Refresh_ccw[FILENAME] = "node_modules/lucide-svelte/dist/icons/refresh-ccw.svelte";
function Refresh_ccw($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Refresh_ccw);
  const iconNode = [
    [
      "path",
      { "d": "M21 12a9 9 0 0 0-9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" }
    ],
    ["path", { "d": "M3 3v5h5" }],
    [
      "path",
      { "d": "M3 12a9 9 0 0 0 9 9 9.75 9.75 0 0 0 6.74-2.74L21 16" }
    ],
    ["path", { "d": "M16 16h5v5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "refresh-ccw" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Refresh_ccw, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Refresh_ccw,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Refresh_ccw = hmr(Refresh_ccw, () => Refresh_ccw[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Refresh_ccw[HMR].source;
    set(Refresh_ccw[HMR].source, module.default[HMR].original);
  });
}
var refresh_ccw_default = Refresh_ccw;

// node_modules/lucide-svelte/dist/icons/refresh-cw-off.svelte
Refresh_cw_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/refresh-cw-off.svelte";
function Refresh_cw_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Refresh_cw_off);
  const iconNode = [
    [
      "path",
      {
        "d": "M21 8L18.74 5.74A9.75 9.75 0 0 0 12 3C11 3 10.03 3.16 9.13 3.47"
      }
    ],
    ["path", { "d": "M8 16H3v5" }],
    ["path", { "d": "M3 12C3 9.51 4 7.26 5.64 5.64" }],
    [
      "path",
      {
        "d": "m3 16 2.26 2.26A9.75 9.75 0 0 0 12 21c2.49 0 4.74-1 6.36-2.64"
      }
    ],
    ["path", { "d": "M21 12c0 1-.16 1.97-.47 2.87" }],
    ["path", { "d": "M21 3v5h-5" }],
    ["path", { "d": "M22 22 2 2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "refresh-cw-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Refresh_cw_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Refresh_cw_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Refresh_cw_off = hmr(Refresh_cw_off, () => Refresh_cw_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Refresh_cw_off[HMR].source;
    set(Refresh_cw_off[HMR].source, module.default[HMR].original);
  });
}
var refresh_cw_off_default = Refresh_cw_off;

// node_modules/lucide-svelte/dist/icons/refresh-cw.svelte
Refresh_cw[FILENAME] = "node_modules/lucide-svelte/dist/icons/refresh-cw.svelte";
function Refresh_cw($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Refresh_cw);
  const iconNode = [
    [
      "path",
      { "d": "M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8" }
    ],
    ["path", { "d": "M21 3v5h-5" }],
    [
      "path",
      { "d": "M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16" }
    ],
    ["path", { "d": "M8 16H3v5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "refresh-cw" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Refresh_cw, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Refresh_cw,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Refresh_cw = hmr(Refresh_cw, () => Refresh_cw[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Refresh_cw[HMR].source;
    set(Refresh_cw[HMR].source, module.default[HMR].original);
  });
}
var refresh_cw_default = Refresh_cw;

// node_modules/lucide-svelte/dist/icons/refrigerator.svelte
Refrigerator[FILENAME] = "node_modules/lucide-svelte/dist/icons/refrigerator.svelte";
function Refrigerator($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Refrigerator);
  const iconNode = [
    [
      "path",
      {
        "d": "M5 6a4 4 0 0 1 4-4h6a4 4 0 0 1 4 4v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6Z"
      }
    ],
    ["path", { "d": "M5 10h14" }],
    ["path", { "d": "M15 7v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "refrigerator" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Refrigerator, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Refrigerator,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Refrigerator = hmr(Refrigerator, () => Refrigerator[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Refrigerator[HMR].source;
    set(Refrigerator[HMR].source, module.default[HMR].original);
  });
}
var refrigerator_default = Refrigerator;

// node_modules/lucide-svelte/dist/icons/regex.svelte
Regex[FILENAME] = "node_modules/lucide-svelte/dist/icons/regex.svelte";
function Regex($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Regex);
  const iconNode = [
    ["path", { "d": "M17 3v10" }],
    ["path", { "d": "m12.67 5.5 8.66 5" }],
    ["path", { "d": "m12.67 10.5 8.66-5" }],
    [
      "path",
      {
        "d": "M9 17a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2a2 2 0 0 0 2 2h2a2 2 0 0 0 2-2v-2z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "regex" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Regex, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Regex,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Regex = hmr(Regex, () => Regex[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Regex[HMR].source;
    set(Regex[HMR].source, module.default[HMR].original);
  });
}
var regex_default = Regex;

// node_modules/lucide-svelte/dist/icons/remove-formatting.svelte
Remove_formatting[FILENAME] = "node_modules/lucide-svelte/dist/icons/remove-formatting.svelte";
function Remove_formatting($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Remove_formatting);
  const iconNode = [
    ["path", { "d": "M4 7V4h16v3" }],
    ["path", { "d": "M5 20h6" }],
    ["path", { "d": "M13 4 8 20" }],
    ["path", { "d": "m15 15 5 5" }],
    ["path", { "d": "m20 15-5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "remove-formatting" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Remove_formatting, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Remove_formatting,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Remove_formatting = hmr(Remove_formatting, () => Remove_formatting[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Remove_formatting[HMR].source;
    set(Remove_formatting[HMR].source, module.default[HMR].original);
  });
}
var remove_formatting_default = Remove_formatting;

// node_modules/lucide-svelte/dist/icons/repeat-1.svelte
Repeat_1[FILENAME] = "node_modules/lucide-svelte/dist/icons/repeat-1.svelte";
function Repeat_1($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Repeat_1);
  const iconNode = [
    ["path", { "d": "m17 2 4 4-4 4" }],
    ["path", { "d": "M3 11v-1a4 4 0 0 1 4-4h14" }],
    ["path", { "d": "m7 22-4-4 4-4" }],
    ["path", { "d": "M21 13v1a4 4 0 0 1-4 4H3" }],
    ["path", { "d": "M11 10h1v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "repeat-1" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Repeat_1, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Repeat_1,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Repeat_1 = hmr(Repeat_1, () => Repeat_1[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Repeat_1[HMR].source;
    set(Repeat_1[HMR].source, module.default[HMR].original);
  });
}
var repeat_1_default = Repeat_1;

// node_modules/lucide-svelte/dist/icons/repeat-2.svelte
Repeat_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/repeat-2.svelte";
function Repeat_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Repeat_2);
  const iconNode = [
    ["path", { "d": "m2 9 3-3 3 3" }],
    ["path", { "d": "M13 18H7a2 2 0 0 1-2-2V6" }],
    ["path", { "d": "m22 15-3 3-3-3" }],
    ["path", { "d": "M11 6h6a2 2 0 0 1 2 2v10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "repeat-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Repeat_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Repeat_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Repeat_2 = hmr(Repeat_2, () => Repeat_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Repeat_2[HMR].source;
    set(Repeat_2[HMR].source, module.default[HMR].original);
  });
}
var repeat_2_default = Repeat_2;

// node_modules/lucide-svelte/dist/icons/repeat.svelte
Repeat[FILENAME] = "node_modules/lucide-svelte/dist/icons/repeat.svelte";
function Repeat($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Repeat);
  const iconNode = [
    ["path", { "d": "m17 2 4 4-4 4" }],
    ["path", { "d": "M3 11v-1a4 4 0 0 1 4-4h14" }],
    ["path", { "d": "m7 22-4-4 4-4" }],
    ["path", { "d": "M21 13v1a4 4 0 0 1-4 4H3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "repeat" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Repeat, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Repeat,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Repeat = hmr(Repeat, () => Repeat[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Repeat[HMR].source;
    set(Repeat[HMR].source, module.default[HMR].original);
  });
}
var repeat_default = Repeat;

// node_modules/lucide-svelte/dist/icons/replace-all.svelte
Replace_all[FILENAME] = "node_modules/lucide-svelte/dist/icons/replace-all.svelte";
function Replace_all($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Replace_all);
  const iconNode = [
    ["path", { "d": "M14 14a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2" }],
    ["path", { "d": "M14 4a2 2 0 0 1 2-2" }],
    ["path", { "d": "M16 10a2 2 0 0 1-2-2" }],
    ["path", { "d": "M20 14a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2" }],
    ["path", { "d": "M20 2a2 2 0 0 1 2 2" }],
    ["path", { "d": "M22 8a2 2 0 0 1-2 2" }],
    ["path", { "d": "m3 7 3 3 3-3" }],
    ["path", { "d": "M6 10V5a 3 3 0 0 1 3-3h1" }],
    [
      "rect",
      { "x": "2", "y": "14", "width": "8", "height": "8", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "replace-all" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Replace_all, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Replace_all,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Replace_all = hmr(Replace_all, () => Replace_all[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Replace_all[HMR].source;
    set(Replace_all[HMR].source, module.default[HMR].original);
  });
}
var replace_all_default = Replace_all;

// node_modules/lucide-svelte/dist/icons/replace.svelte
Replace[FILENAME] = "node_modules/lucide-svelte/dist/icons/replace.svelte";
function Replace($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Replace);
  const iconNode = [
    ["path", { "d": "M14 4a2 2 0 0 1 2-2" }],
    ["path", { "d": "M16 10a2 2 0 0 1-2-2" }],
    ["path", { "d": "M20 2a2 2 0 0 1 2 2" }],
    ["path", { "d": "M22 8a2 2 0 0 1-2 2" }],
    ["path", { "d": "m3 7 3 3 3-3" }],
    ["path", { "d": "M6 10V5a3 3 0 0 1 3-3h1" }],
    [
      "rect",
      { "x": "2", "y": "14", "width": "8", "height": "8", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "replace" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Replace, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Replace,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Replace = hmr(Replace, () => Replace[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Replace[HMR].source;
    set(Replace[HMR].source, module.default[HMR].original);
  });
}
var replace_default = Replace;

// node_modules/lucide-svelte/dist/icons/reply-all.svelte
Reply_all[FILENAME] = "node_modules/lucide-svelte/dist/icons/reply-all.svelte";
function Reply_all($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Reply_all);
  const iconNode = [
    ["path", { "d": "m12 17-5-5 5-5" }],
    ["path", { "d": "M22 18v-2a4 4 0 0 0-4-4H7" }],
    ["path", { "d": "m7 17-5-5 5-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "reply-all" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Reply_all, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Reply_all,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Reply_all = hmr(Reply_all, () => Reply_all[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Reply_all[HMR].source;
    set(Reply_all[HMR].source, module.default[HMR].original);
  });
}
var reply_all_default = Reply_all;

// node_modules/lucide-svelte/dist/icons/reply.svelte
Reply[FILENAME] = "node_modules/lucide-svelte/dist/icons/reply.svelte";
function Reply($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Reply);
  const iconNode = [
    ["path", { "d": "M20 18v-2a4 4 0 0 0-4-4H4" }],
    ["path", { "d": "m9 17-5-5 5-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "reply" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Reply, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Reply,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Reply = hmr(Reply, () => Reply[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Reply[HMR].source;
    set(Reply[HMR].source, module.default[HMR].original);
  });
}
var reply_default = Reply;

// node_modules/lucide-svelte/dist/icons/rewind.svelte
Rewind[FILENAME] = "node_modules/lucide-svelte/dist/icons/rewind.svelte";
function Rewind($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rewind);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 6a2 2 0 0 0-3.414-1.414l-6 6a2 2 0 0 0 0 2.828l6 6A2 2 0 0 0 12 18z"
      }
    ],
    [
      "path",
      {
        "d": "M22 6a2 2 0 0 0-3.414-1.414l-6 6a2 2 0 0 0 0 2.828l6 6A2 2 0 0 0 22 18z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rewind" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rewind, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rewind,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rewind = hmr(Rewind, () => Rewind[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rewind[HMR].source;
    set(Rewind[HMR].source, module.default[HMR].original);
  });
}
var rewind_default = Rewind;

// node_modules/lucide-svelte/dist/icons/ribbon.svelte
Ribbon[FILENAME] = "node_modules/lucide-svelte/dist/icons/ribbon.svelte";
function Ribbon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ribbon);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 11.22C11 9.997 10 9 10 8a2 2 0 0 1 4 0c0 1-.998 2.002-2.01 3.22"
      }
    ],
    ["path", { "d": "m12 18 2.57-3.5" }],
    ["path", { "d": "M6.243 9.016a7 7 0 0 1 11.507-.009" }],
    ["path", { "d": "M9.35 14.53 12 11.22" }],
    [
      "path",
      {
        "d": "M9.35 14.53C7.728 12.246 6 10.221 6 7a6 5 0 0 1 12 0c-.005 3.22-1.778 5.235-3.43 7.5l3.557 4.527a1 1 0 0 1-.203 1.43l-1.894 1.36a1 1 0 0 1-1.384-.215L12 18l-2.679 3.593a1 1 0 0 1-1.39.213l-1.865-1.353a1 1 0 0 1-.203-1.422z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ribbon" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ribbon, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ribbon,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ribbon = hmr(Ribbon, () => Ribbon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ribbon[HMR].source;
    set(Ribbon[HMR].source, module.default[HMR].original);
  });
}
var ribbon_default = Ribbon;

// node_modules/lucide-svelte/dist/icons/rocket.svelte
Rocket[FILENAME] = "node_modules/lucide-svelte/dist/icons/rocket.svelte";
function Rocket($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rocket);
  const iconNode = [
    [
      "path",
      {
        "d": "M4.5 16.5c-1.5 1.26-2 5-2 5s3.74-.5 5-2c.71-.84.7-2.13-.09-2.91a2.18 2.18 0 0 0-2.91-.09z"
      }
    ],
    [
      "path",
      {
        "d": "m12 15-3-3a22 22 0 0 1 2-3.95A12.88 12.88 0 0 1 22 2c0 2.72-.78 7.5-6 11a22.35 22.35 0 0 1-4 2z"
      }
    ],
    ["path", { "d": "M9 12H4s.55-3.03 2-4c1.62-1.08 5 0 5 0" }],
    ["path", { "d": "M12 15v5s3.03-.55 4-2c1.08-1.62 0-5 0-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rocket" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rocket, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rocket,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rocket = hmr(Rocket, () => Rocket[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rocket[HMR].source;
    set(Rocket[HMR].source, module.default[HMR].original);
  });
}
var rocket_default = Rocket;

// node_modules/lucide-svelte/dist/icons/rocking-chair.svelte
Rocking_chair[FILENAME] = "node_modules/lucide-svelte/dist/icons/rocking-chair.svelte";
function Rocking_chair($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rocking_chair);
  const iconNode = [
    ["polyline", { "points": "3.5 2 6.5 12.5 18 12.5" }],
    [
      "line",
      { "x1": "9.5", "x2": "5.5", "y1": "12.5", "y2": "20" }
    ],
    [
      "line",
      { "x1": "15", "x2": "18.5", "y1": "12.5", "y2": "20" }
    ],
    ["path", { "d": "M2.75 18a13 13 0 0 0 18.5 0" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rocking-chair" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rocking_chair, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rocking_chair,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rocking_chair = hmr(Rocking_chair, () => Rocking_chair[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rocking_chair[HMR].source;
    set(Rocking_chair[HMR].source, module.default[HMR].original);
  });
}
var rocking_chair_default = Rocking_chair;

// node_modules/lucide-svelte/dist/icons/roller-coaster.svelte
Roller_coaster[FILENAME] = "node_modules/lucide-svelte/dist/icons/roller-coaster.svelte";
function Roller_coaster($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Roller_coaster);
  const iconNode = [
    ["path", { "d": "M6 19V5" }],
    ["path", { "d": "M10 19V6.8" }],
    ["path", { "d": "M14 19v-7.8" }],
    ["path", { "d": "M18 5v4" }],
    ["path", { "d": "M18 19v-6" }],
    ["path", { "d": "M22 19V9" }],
    [
      "path",
      {
        "d": "M2 19V9a4 4 0 0 1 4-4c2 0 4 1.33 6 4s4 4 6 4a4 4 0 1 0-3-6.65"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "roller-coaster" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Roller_coaster, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Roller_coaster,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Roller_coaster = hmr(Roller_coaster, () => Roller_coaster[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Roller_coaster[HMR].source;
    set(Roller_coaster[HMR].source, module.default[HMR].original);
  });
}
var roller_coaster_default = Roller_coaster;

// node_modules/lucide-svelte/dist/icons/rotate-3d.svelte
Rotate_3d[FILENAME] = "node_modules/lucide-svelte/dist/icons/rotate-3d.svelte";
function Rotate_3d($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rotate_3d);
  const iconNode = [
    [
      "path",
      {
        "d": "M16.466 7.5C15.643 4.237 13.952 2 12 2 9.239 2 7 6.477 7 12s2.239 10 5 10c.342 0 .677-.069 1-.2"
      }
    ],
    ["path", { "d": "m15.194 13.707 3.814 1.86-1.86 3.814" }],
    [
      "path",
      {
        "d": "M19 15.57c-1.804.885-4.274 1.43-7 1.43-5.523 0-10-2.239-10-5s4.477-5 10-5c4.838 0 8.873 1.718 9.8 4"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rotate-3d" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rotate_3d, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rotate_3d,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rotate_3d = hmr(Rotate_3d, () => Rotate_3d[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rotate_3d[HMR].source;
    set(Rotate_3d[HMR].source, module.default[HMR].original);
  });
}
var rotate_3d_default = Rotate_3d;

// node_modules/lucide-svelte/dist/icons/rotate-ccw-key.svelte
Rotate_ccw_key[FILENAME] = "node_modules/lucide-svelte/dist/icons/rotate-ccw-key.svelte";
function Rotate_ccw_key($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rotate_ccw_key);
  const iconNode = [
    ["path", { "d": "m14.5 9.5 1 1" }],
    ["path", { "d": "m15.5 8.5-4 4" }],
    [
      "path",
      { "d": "M3 12a9 9 0 1 0 9-9 9.74 9.74 0 0 0-6.74 2.74L3 8" }
    ],
    ["path", { "d": "M3 3v5h5" }],
    ["circle", { "cx": "10", "cy": "14", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rotate-ccw-key" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rotate_ccw_key, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rotate_ccw_key,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rotate_ccw_key = hmr(Rotate_ccw_key, () => Rotate_ccw_key[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rotate_ccw_key[HMR].source;
    set(Rotate_ccw_key[HMR].source, module.default[HMR].original);
  });
}
var rotate_ccw_key_default = Rotate_ccw_key;

// node_modules/lucide-svelte/dist/icons/rotate-ccw-square.svelte
Rotate_ccw_square[FILENAME] = "node_modules/lucide-svelte/dist/icons/rotate-ccw-square.svelte";
function Rotate_ccw_square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rotate_ccw_square);
  const iconNode = [
    ["path", { "d": "M20 9V7a2 2 0 0 0-2-2h-6" }],
    ["path", { "d": "m15 2-3 3 3 3" }],
    [
      "path",
      {
        "d": "M20 13v5a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rotate-ccw-square" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rotate_ccw_square, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rotate_ccw_square,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rotate_ccw_square = hmr(Rotate_ccw_square, () => Rotate_ccw_square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rotate_ccw_square[HMR].source;
    set(Rotate_ccw_square[HMR].source, module.default[HMR].original);
  });
}
var rotate_ccw_square_default = Rotate_ccw_square;

// node_modules/lucide-svelte/dist/icons/rotate-ccw.svelte
Rotate_ccw[FILENAME] = "node_modules/lucide-svelte/dist/icons/rotate-ccw.svelte";
function Rotate_ccw($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rotate_ccw);
  const iconNode = [
    [
      "path",
      { "d": "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8" }
    ],
    ["path", { "d": "M3 3v5h5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rotate-ccw" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rotate_ccw, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rotate_ccw,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rotate_ccw = hmr(Rotate_ccw, () => Rotate_ccw[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rotate_ccw[HMR].source;
    set(Rotate_ccw[HMR].source, module.default[HMR].original);
  });
}
var rotate_ccw_default = Rotate_ccw;

// node_modules/lucide-svelte/dist/icons/rotate-cw-square.svelte
Rotate_cw_square[FILENAME] = "node_modules/lucide-svelte/dist/icons/rotate-cw-square.svelte";
function Rotate_cw_square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rotate_cw_square);
  const iconNode = [
    ["path", { "d": "M12 5H6a2 2 0 0 0-2 2v3" }],
    ["path", { "d": "m9 8 3-3-3-3" }],
    [
      "path",
      {
        "d": "M4 14v4a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2h-2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rotate-cw-square" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rotate_cw_square, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rotate_cw_square,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rotate_cw_square = hmr(Rotate_cw_square, () => Rotate_cw_square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rotate_cw_square[HMR].source;
    set(Rotate_cw_square[HMR].source, module.default[HMR].original);
  });
}
var rotate_cw_square_default = Rotate_cw_square;

// node_modules/lucide-svelte/dist/icons/rotate-cw.svelte
Rotate_cw[FILENAME] = "node_modules/lucide-svelte/dist/icons/rotate-cw.svelte";
function Rotate_cw($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rotate_cw);
  const iconNode = [
    [
      "path",
      { "d": "M21 12a9 9 0 1 1-9-9c2.52 0 4.93 1 6.74 2.74L21 8" }
    ],
    ["path", { "d": "M21 3v5h-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rotate-cw" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rotate_cw, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rotate_cw,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rotate_cw = hmr(Rotate_cw, () => Rotate_cw[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rotate_cw[HMR].source;
    set(Rotate_cw[HMR].source, module.default[HMR].original);
  });
}
var rotate_cw_default = Rotate_cw;

// node_modules/lucide-svelte/dist/icons/route-off.svelte
Route_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/route-off.svelte";
function Route_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Route_off);
  const iconNode = [
    ["circle", { "cx": "6", "cy": "19", "r": "3" }],
    ["path", { "d": "M9 19h8.5c.4 0 .9-.1 1.3-.2" }],
    ["path", { "d": "M5.2 5.2A3.5 3.53 0 0 0 6.5 12H12" }],
    ["path", { "d": "m2 2 20 20" }],
    ["path", { "d": "M21 15.3a3.5 3.5 0 0 0-3.3-3.3" }],
    ["path", { "d": "M15 5h-4.3" }],
    ["circle", { "cx": "18", "cy": "5", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "route-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Route_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Route_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Route_off = hmr(Route_off, () => Route_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Route_off[HMR].source;
    set(Route_off[HMR].source, module.default[HMR].original);
  });
}
var route_off_default = Route_off;

// node_modules/lucide-svelte/dist/icons/route.svelte
Route[FILENAME] = "node_modules/lucide-svelte/dist/icons/route.svelte";
function Route($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Route);
  const iconNode = [
    ["circle", { "cx": "6", "cy": "19", "r": "3" }],
    [
      "path",
      { "d": "M9 19h8.5a3.5 3.5 0 0 0 0-7h-11a3.5 3.5 0 0 1 0-7H15" }
    ],
    ["circle", { "cx": "18", "cy": "5", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "route" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Route, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Route,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Route = hmr(Route, () => Route[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Route[HMR].source;
    set(Route[HMR].source, module.default[HMR].original);
  });
}
var route_default = Route;

// node_modules/lucide-svelte/dist/icons/router.svelte
Router[FILENAME] = "node_modules/lucide-svelte/dist/icons/router.svelte";
function Router($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Router);
  const iconNode = [
    [
      "rect",
      { "width": "20", "height": "8", "x": "2", "y": "14", "rx": "2" }
    ],
    ["path", { "d": "M6.01 18H6" }],
    ["path", { "d": "M10.01 18H10" }],
    ["path", { "d": "M15 10v4" }],
    ["path", { "d": "M17.84 7.17a4 4 0 0 0-5.66 0" }],
    ["path", { "d": "M20.66 4.34a8 8 0 0 0-11.31 0" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "router" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Router, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Router,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Router = hmr(Router, () => Router[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Router[HMR].source;
    set(Router[HMR].source, module.default[HMR].original);
  });
}
var router_default = Router;

// node_modules/lucide-svelte/dist/icons/rows-2.svelte
Rows_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/rows-2.svelte";
function Rows_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rows_2);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M3 12h18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rows-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rows_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rows_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rows_2 = hmr(Rows_2, () => Rows_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rows_2[HMR].source;
    set(Rows_2[HMR].source, module.default[HMR].original);
  });
}
var rows_2_default = Rows_2;

// node_modules/lucide-svelte/dist/icons/rows-3.svelte
Rows_3[FILENAME] = "node_modules/lucide-svelte/dist/icons/rows-3.svelte";
function Rows_3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rows_3);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M21 9H3" }],
    ["path", { "d": "M21 15H3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rows-3" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rows_3, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rows_3,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rows_3 = hmr(Rows_3, () => Rows_3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rows_3[HMR].source;
    set(Rows_3[HMR].source, module.default[HMR].original);
  });
}
var rows_3_default = Rows_3;

// node_modules/lucide-svelte/dist/icons/rows-4.svelte
Rows_4[FILENAME] = "node_modules/lucide-svelte/dist/icons/rows-4.svelte";
function Rows_4($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rows_4);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M21 7.5H3" }],
    ["path", { "d": "M21 12H3" }],
    ["path", { "d": "M21 16.5H3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rows-4" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rows_4, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rows_4,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rows_4 = hmr(Rows_4, () => Rows_4[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rows_4[HMR].source;
    set(Rows_4[HMR].source, module.default[HMR].original);
  });
}
var rows_4_default = Rows_4;

// node_modules/lucide-svelte/dist/icons/rss.svelte
Rss[FILENAME] = "node_modules/lucide-svelte/dist/icons/rss.svelte";
function Rss($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Rss);
  const iconNode = [
    ["path", { "d": "M4 11a9 9 0 0 1 9 9" }],
    ["path", { "d": "M4 4a16 16 0 0 1 16 16" }],
    ["circle", { "cx": "5", "cy": "19", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "rss" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Rss, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Rss,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Rss = hmr(Rss, () => Rss[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rss[HMR].source;
    set(Rss[HMR].source, module.default[HMR].original);
  });
}
var rss_default = Rss;

// node_modules/lucide-svelte/dist/icons/ruler-dimension-line.svelte
Ruler_dimension_line[FILENAME] = "node_modules/lucide-svelte/dist/icons/ruler-dimension-line.svelte";
function Ruler_dimension_line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ruler_dimension_line);
  const iconNode = [
    ["path", { "d": "M12 15v-3.014" }],
    ["path", { "d": "M16 15v-3.014" }],
    ["path", { "d": "M20 6H4" }],
    ["path", { "d": "M20 8V4" }],
    ["path", { "d": "M4 8V4" }],
    ["path", { "d": "M8 15v-3.014" }],
    [
      "rect",
      { "x": "3", "y": "12", "width": "18", "height": "7", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ruler-dimension-line" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ruler_dimension_line, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ruler_dimension_line,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ruler_dimension_line = hmr(Ruler_dimension_line, () => Ruler_dimension_line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ruler_dimension_line[HMR].source;
    set(Ruler_dimension_line[HMR].source, module.default[HMR].original);
  });
}
var ruler_dimension_line_default = Ruler_dimension_line;

// node_modules/lucide-svelte/dist/icons/ruler.svelte
Ruler[FILENAME] = "node_modules/lucide-svelte/dist/icons/ruler.svelte";
function Ruler($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ruler);
  const iconNode = [
    [
      "path",
      {
        "d": "M21.3 15.3a2.4 2.4 0 0 1 0 3.4l-2.6 2.6a2.4 2.4 0 0 1-3.4 0L2.7 8.7a2.41 2.41 0 0 1 0-3.4l2.6-2.6a2.41 2.41 0 0 1 3.4 0Z"
      }
    ],
    ["path", { "d": "m14.5 12.5 2-2" }],
    ["path", { "d": "m11.5 9.5 2-2" }],
    ["path", { "d": "m8.5 6.5 2-2" }],
    ["path", { "d": "m17.5 15.5 2-2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ruler" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ruler, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ruler,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ruler = hmr(Ruler, () => Ruler[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ruler[HMR].source;
    set(Ruler[HMR].source, module.default[HMR].original);
  });
}
var ruler_default = Ruler;

// node_modules/lucide-svelte/dist/icons/russian-ruble.svelte
Russian_ruble[FILENAME] = "node_modules/lucide-svelte/dist/icons/russian-ruble.svelte";
function Russian_ruble($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Russian_ruble);
  const iconNode = [
    ["path", { "d": "M6 11h8a4 4 0 0 0 0-8H9v18" }],
    ["path", { "d": "M6 15h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "russian-ruble" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Russian_ruble, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Russian_ruble,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Russian_ruble = hmr(Russian_ruble, () => Russian_ruble[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Russian_ruble[HMR].source;
    set(Russian_ruble[HMR].source, module.default[HMR].original);
  });
}
var russian_ruble_default = Russian_ruble;

// node_modules/lucide-svelte/dist/icons/sailboat.svelte
Sailboat[FILENAME] = "node_modules/lucide-svelte/dist/icons/sailboat.svelte";
function Sailboat($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sailboat);
  const iconNode = [
    ["path", { "d": "M10 2v15" }],
    [
      "path",
      {
        "d": "M7 22a4 4 0 0 1-4-4 1 1 0 0 1 1-1h16a1 1 0 0 1 1 1 4 4 0 0 1-4 4z"
      }
    ],
    [
      "path",
      {
        "d": "M9.159 2.46a1 1 0 0 1 1.521-.193l9.977 8.98A1 1 0 0 1 20 13H4a1 1 0 0 1-.824-1.567z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sailboat" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sailboat, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sailboat,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sailboat = hmr(Sailboat, () => Sailboat[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sailboat[HMR].source;
    set(Sailboat[HMR].source, module.default[HMR].original);
  });
}
var sailboat_default = Sailboat;

// node_modules/lucide-svelte/dist/icons/salad.svelte
Salad[FILENAME] = "node_modules/lucide-svelte/dist/icons/salad.svelte";
function Salad($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Salad);
  const iconNode = [
    ["path", { "d": "M7 21h10" }],
    ["path", { "d": "M12 21a9 9 0 0 0 9-9H3a9 9 0 0 0 9 9Z" }],
    [
      "path",
      {
        "d": "M11.38 12a2.4 2.4 0 0 1-.4-4.77 2.4 2.4 0 0 1 3.2-2.77 2.4 2.4 0 0 1 3.47-.63 2.4 2.4 0 0 1 3.37 3.37 2.4 2.4 0 0 1-1.1 3.7 2.51 2.51 0 0 1 .03 1.1"
      }
    ],
    ["path", { "d": "m13 12 4-4" }],
    [
      "path",
      { "d": "M10.9 7.25A3.99 3.99 0 0 0 4 10c0 .73.2 1.41.54 2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "salad" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Salad, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Salad,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Salad = hmr(Salad, () => Salad[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Salad[HMR].source;
    set(Salad[HMR].source, module.default[HMR].original);
  });
}
var salad_default = Salad;

// node_modules/lucide-svelte/dist/icons/sandwich.svelte
Sandwich[FILENAME] = "node_modules/lucide-svelte/dist/icons/sandwich.svelte";
function Sandwich($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sandwich);
  const iconNode = [
    [
      "path",
      {
        "d": "m2.37 11.223 8.372-6.777a2 2 0 0 1 2.516 0l8.371 6.777"
      }
    ],
    [
      "path",
      { "d": "M21 15a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-5.25" }
    ],
    ["path", { "d": "M3 15a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1h9" }],
    [
      "path",
      { "d": "m6.67 15 6.13 4.6a2 2 0 0 0 2.8-.4l3.15-4.2" }
    ],
    [
      "rect",
      { "width": "20", "height": "4", "x": "2", "y": "11", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sandwich" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sandwich, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sandwich,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sandwich = hmr(Sandwich, () => Sandwich[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sandwich[HMR].source;
    set(Sandwich[HMR].source, module.default[HMR].original);
  });
}
var sandwich_default = Sandwich;

// node_modules/lucide-svelte/dist/icons/satellite-dish.svelte
Satellite_dish[FILENAME] = "node_modules/lucide-svelte/dist/icons/satellite-dish.svelte";
function Satellite_dish($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Satellite_dish);
  const iconNode = [
    ["path", { "d": "M4 10a7.31 7.31 0 0 0 10 10Z" }],
    ["path", { "d": "m9 15 3-3" }],
    ["path", { "d": "M17 13a6 6 0 0 0-6-6" }],
    ["path", { "d": "M21 13A10 10 0 0 0 11 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "satellite-dish" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Satellite_dish, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Satellite_dish,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Satellite_dish = hmr(Satellite_dish, () => Satellite_dish[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Satellite_dish[HMR].source;
    set(Satellite_dish[HMR].source, module.default[HMR].original);
  });
}
var satellite_dish_default = Satellite_dish;

// node_modules/lucide-svelte/dist/icons/satellite.svelte
Satellite[FILENAME] = "node_modules/lucide-svelte/dist/icons/satellite.svelte";
function Satellite($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Satellite);
  const iconNode = [
    [
      "path",
      {
        "d": "m13.5 6.5-3.148-3.148a1.205 1.205 0 0 0-1.704 0L6.352 5.648a1.205 1.205 0 0 0 0 1.704L9.5 10.5"
      }
    ],
    ["path", { "d": "M16.5 7.5 19 5" }],
    [
      "path",
      {
        "d": "m17.5 10.5 3.148 3.148a1.205 1.205 0 0 1 0 1.704l-2.296 2.296a1.205 1.205 0 0 1-1.704 0L13.5 14.5"
      }
    ],
    ["path", { "d": "M9 21a6 6 0 0 0-6-6" }],
    [
      "path",
      {
        "d": "M9.352 10.648a1.205 1.205 0 0 0 0 1.704l2.296 2.296a1.205 1.205 0 0 0 1.704 0l4.296-4.296a1.205 1.205 0 0 0 0-1.704l-2.296-2.296a1.205 1.205 0 0 0-1.704 0z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "satellite" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Satellite, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Satellite,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Satellite = hmr(Satellite, () => Satellite[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Satellite[HMR].source;
    set(Satellite[HMR].source, module.default[HMR].original);
  });
}
var satellite_default = Satellite;

// node_modules/lucide-svelte/dist/icons/saudi-riyal.svelte
Saudi_riyal[FILENAME] = "node_modules/lucide-svelte/dist/icons/saudi-riyal.svelte";
function Saudi_riyal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Saudi_riyal);
  const iconNode = [
    ["path", { "d": "m20 19.5-5.5 1.2" }],
    ["path", { "d": "M14.5 4v11.22a1 1 0 0 0 1.242.97L20 15.2" }],
    [
      "path",
      { "d": "m2.978 19.351 5.549-1.363A2 2 0 0 0 10 16V2" }
    ],
    ["path", { "d": "M20 10 4 13.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "saudi-riyal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Saudi_riyal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Saudi_riyal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Saudi_riyal = hmr(Saudi_riyal, () => Saudi_riyal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Saudi_riyal[HMR].source;
    set(Saudi_riyal[HMR].source, module.default[HMR].original);
  });
}
var saudi_riyal_default = Saudi_riyal;

// node_modules/lucide-svelte/dist/icons/save-all.svelte
Save_all[FILENAME] = "node_modules/lucide-svelte/dist/icons/save-all.svelte";
function Save_all($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Save_all);
  const iconNode = [
    ["path", { "d": "M10 2v3a1 1 0 0 0 1 1h5" }],
    [
      "path",
      { "d": "M18 18v-6a1 1 0 0 0-1-1h-6a1 1 0 0 0-1 1v6" }
    ],
    ["path", { "d": "M18 22H4a2 2 0 0 1-2-2V6" }],
    [
      "path",
      {
        "d": "M8 18a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9.172a2 2 0 0 1 1.414.586l2.828 2.828A2 2 0 0 1 22 6.828V16a2 2 0 0 1-2.01 2z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "save-all" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Save_all, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Save_all,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Save_all = hmr(Save_all, () => Save_all[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Save_all[HMR].source;
    set(Save_all[HMR].source, module.default[HMR].original);
  });
}
var save_all_default = Save_all;

// node_modules/lucide-svelte/dist/icons/save-off.svelte
Save_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/save-off.svelte";
function Save_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Save_off);
  const iconNode = [
    ["path", { "d": "M13 13H8a1 1 0 0 0-1 1v7" }],
    ["path", { "d": "M14 8h1" }],
    ["path", { "d": "M17 21v-4" }],
    ["path", { "d": "m2 2 20 20" }],
    [
      "path",
      {
        "d": "M20.41 20.41A2 2 0 0 1 19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 .59-1.41"
      }
    ],
    ["path", { "d": "M29.5 11.5s5 5 4 5" }],
    [
      "path",
      { "d": "M9 3h6.2a2 2 0 0 1 1.4.6l3.8 3.8a2 2 0 0 1 .6 1.4V15" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "save-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Save_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Save_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Save_off = hmr(Save_off, () => Save_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Save_off[HMR].source;
    set(Save_off[HMR].source, module.default[HMR].original);
  });
}
var save_off_default = Save_off;

// node_modules/lucide-svelte/dist/icons/save.svelte
Save[FILENAME] = "node_modules/lucide-svelte/dist/icons/save.svelte";
function Save($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Save);
  const iconNode = [
    [
      "path",
      {
        "d": "M15.2 3a2 2 0 0 1 1.4.6l3.8 3.8a2 2 0 0 1 .6 1.4V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2z"
      }
    ],
    ["path", { "d": "M17 21v-7a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v7" }],
    ["path", { "d": "M7 3v4a1 1 0 0 0 1 1h7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "save" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Save, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Save,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Save = hmr(Save, () => Save[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Save[HMR].source;
    set(Save[HMR].source, module.default[HMR].original);
  });
}
var save_default = Save;

// node_modules/lucide-svelte/dist/icons/scale-3d.svelte
Scale_3d[FILENAME] = "node_modules/lucide-svelte/dist/icons/scale-3d.svelte";
function Scale_3d($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Scale_3d);
  const iconNode = [
    ["path", { "d": "M5 7v11a1 1 0 0 0 1 1h11" }],
    ["path", { "d": "M5.293 18.707 11 13" }],
    ["circle", { "cx": "19", "cy": "19", "r": "2" }],
    ["circle", { "cx": "5", "cy": "5", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "scale-3d" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Scale_3d, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Scale_3d,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scale_3d = hmr(Scale_3d, () => Scale_3d[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Scale_3d[HMR].source;
    set(Scale_3d[HMR].source, module.default[HMR].original);
  });
}
var scale_3d_default = Scale_3d;

// node_modules/lucide-svelte/dist/icons/scale.svelte
Scale[FILENAME] = "node_modules/lucide-svelte/dist/icons/scale.svelte";
function Scale($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Scale);
  const iconNode = [
    [
      "path",
      { "d": "m16 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z" }
    ],
    [
      "path",
      { "d": "m2 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z" }
    ],
    ["path", { "d": "M7 21h10" }],
    ["path", { "d": "M12 3v18" }],
    ["path", { "d": "M3 7h2c2 0 5-1 7-2 2 1 5 2 7 2h2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "scale" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Scale, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Scale,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scale = hmr(Scale, () => Scale[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Scale[HMR].source;
    set(Scale[HMR].source, module.default[HMR].original);
  });
}
var scale_default = Scale;

// node_modules/lucide-svelte/dist/icons/scaling.svelte
Scaling[FILENAME] = "node_modules/lucide-svelte/dist/icons/scaling.svelte";
function Scaling($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Scaling);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"
      }
    ],
    ["path", { "d": "M14 15H9v-5" }],
    ["path", { "d": "M16 3h5v5" }],
    ["path", { "d": "M21 3 9 15" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "scaling" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Scaling, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Scaling,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scaling = hmr(Scaling, () => Scaling[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Scaling[HMR].source;
    set(Scaling[HMR].source, module.default[HMR].original);
  });
}
var scaling_default = Scaling;

// node_modules/lucide-svelte/dist/icons/scan-barcode.svelte
Scan_barcode[FILENAME] = "node_modules/lucide-svelte/dist/icons/scan-barcode.svelte";
function Scan_barcode($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Scan_barcode);
  const iconNode = [
    ["path", { "d": "M3 7V5a2 2 0 0 1 2-2h2" }],
    ["path", { "d": "M17 3h2a2 2 0 0 1 2 2v2" }],
    ["path", { "d": "M21 17v2a2 2 0 0 1-2 2h-2" }],
    ["path", { "d": "M7 21H5a2 2 0 0 1-2-2v-2" }],
    ["path", { "d": "M8 7v10" }],
    ["path", { "d": "M12 7v10" }],
    ["path", { "d": "M17 7v10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "scan-barcode" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Scan_barcode, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Scan_barcode,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scan_barcode = hmr(Scan_barcode, () => Scan_barcode[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Scan_barcode[HMR].source;
    set(Scan_barcode[HMR].source, module.default[HMR].original);
  });
}
var scan_barcode_default = Scan_barcode;

// node_modules/lucide-svelte/dist/icons/scan-eye.svelte
Scan_eye[FILENAME] = "node_modules/lucide-svelte/dist/icons/scan-eye.svelte";
function Scan_eye($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Scan_eye);
  const iconNode = [
    ["path", { "d": "M3 7V5a2 2 0 0 1 2-2h2" }],
    ["path", { "d": "M17 3h2a2 2 0 0 1 2 2v2" }],
    ["path", { "d": "M21 17v2a2 2 0 0 1-2 2h-2" }],
    ["path", { "d": "M7 21H5a2 2 0 0 1-2-2v-2" }],
    ["circle", { "cx": "12", "cy": "12", "r": "1" }],
    [
      "path",
      {
        "d": "M18.944 12.33a1 1 0 0 0 0-.66 7.5 7.5 0 0 0-13.888 0 1 1 0 0 0 0 .66 7.5 7.5 0 0 0 13.888 0"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "scan-eye" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Scan_eye, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Scan_eye,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scan_eye = hmr(Scan_eye, () => Scan_eye[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Scan_eye[HMR].source;
    set(Scan_eye[HMR].source, module.default[HMR].original);
  });
}
var scan_eye_default = Scan_eye;

// node_modules/lucide-svelte/dist/icons/scan-face.svelte
Scan_face[FILENAME] = "node_modules/lucide-svelte/dist/icons/scan-face.svelte";
function Scan_face($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Scan_face);
  const iconNode = [
    ["path", { "d": "M3 7V5a2 2 0 0 1 2-2h2" }],
    ["path", { "d": "M17 3h2a2 2 0 0 1 2 2v2" }],
    ["path", { "d": "M21 17v2a2 2 0 0 1-2 2h-2" }],
    ["path", { "d": "M7 21H5a2 2 0 0 1-2-2v-2" }],
    ["path", { "d": "M8 14s1.5 2 4 2 4-2 4-2" }],
    ["path", { "d": "M9 9h.01" }],
    ["path", { "d": "M15 9h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "scan-face" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Scan_face, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Scan_face,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scan_face = hmr(Scan_face, () => Scan_face[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Scan_face[HMR].source;
    set(Scan_face[HMR].source, module.default[HMR].original);
  });
}
var scan_face_default = Scan_face;

// node_modules/lucide-svelte/dist/icons/scan-heart.svelte
Scan_heart[FILENAME] = "node_modules/lucide-svelte/dist/icons/scan-heart.svelte";
function Scan_heart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Scan_heart);
  const iconNode = [
    ["path", { "d": "M17 3h2a2 2 0 0 1 2 2v2" }],
    ["path", { "d": "M21 17v2a2 2 0 0 1-2 2h-2" }],
    ["path", { "d": "M3 7V5a2 2 0 0 1 2-2h2" }],
    ["path", { "d": "M7 21H5a2 2 0 0 1-2-2v-2" }],
    [
      "path",
      {
        "d": "M7.828 13.07A3 3 0 0 1 12 8.764a3 3 0 0 1 4.172 4.306l-3.447 3.62a1 1 0 0 1-1.449 0z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "scan-heart" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Scan_heart, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Scan_heart,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scan_heart = hmr(Scan_heart, () => Scan_heart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Scan_heart[HMR].source;
    set(Scan_heart[HMR].source, module.default[HMR].original);
  });
}
var scan_heart_default = Scan_heart;

// node_modules/lucide-svelte/dist/icons/scan-line.svelte
Scan_line[FILENAME] = "node_modules/lucide-svelte/dist/icons/scan-line.svelte";
function Scan_line($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Scan_line);
  const iconNode = [
    ["path", { "d": "M3 7V5a2 2 0 0 1 2-2h2" }],
    ["path", { "d": "M17 3h2a2 2 0 0 1 2 2v2" }],
    ["path", { "d": "M21 17v2a2 2 0 0 1-2 2h-2" }],
    ["path", { "d": "M7 21H5a2 2 0 0 1-2-2v-2" }],
    ["path", { "d": "M7 12h10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "scan-line" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Scan_line, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Scan_line,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scan_line = hmr(Scan_line, () => Scan_line[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Scan_line[HMR].source;
    set(Scan_line[HMR].source, module.default[HMR].original);
  });
}
var scan_line_default = Scan_line;

// node_modules/lucide-svelte/dist/icons/scan-qr-code.svelte
Scan_qr_code[FILENAME] = "node_modules/lucide-svelte/dist/icons/scan-qr-code.svelte";
function Scan_qr_code($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Scan_qr_code);
  const iconNode = [
    ["path", { "d": "M17 12v4a1 1 0 0 1-1 1h-4" }],
    ["path", { "d": "M17 3h2a2 2 0 0 1 2 2v2" }],
    ["path", { "d": "M17 8V7" }],
    ["path", { "d": "M21 17v2a2 2 0 0 1-2 2h-2" }],
    ["path", { "d": "M3 7V5a2 2 0 0 1 2-2h2" }],
    ["path", { "d": "M7 17h.01" }],
    ["path", { "d": "M7 21H5a2 2 0 0 1-2-2v-2" }],
    [
      "rect",
      { "x": "7", "y": "7", "width": "5", "height": "5", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "scan-qr-code" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Scan_qr_code, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Scan_qr_code,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scan_qr_code = hmr(Scan_qr_code, () => Scan_qr_code[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Scan_qr_code[HMR].source;
    set(Scan_qr_code[HMR].source, module.default[HMR].original);
  });
}
var scan_qr_code_default = Scan_qr_code;

// node_modules/lucide-svelte/dist/icons/scan-search.svelte
Scan_search[FILENAME] = "node_modules/lucide-svelte/dist/icons/scan-search.svelte";
function Scan_search($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Scan_search);
  const iconNode = [
    ["path", { "d": "M3 7V5a2 2 0 0 1 2-2h2" }],
    ["path", { "d": "M17 3h2a2 2 0 0 1 2 2v2" }],
    ["path", { "d": "M21 17v2a2 2 0 0 1-2 2h-2" }],
    ["path", { "d": "M7 21H5a2 2 0 0 1-2-2v-2" }],
    ["circle", { "cx": "12", "cy": "12", "r": "3" }],
    ["path", { "d": "m16 16-1.9-1.9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "scan-search" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Scan_search, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Scan_search,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scan_search = hmr(Scan_search, () => Scan_search[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Scan_search[HMR].source;
    set(Scan_search[HMR].source, module.default[HMR].original);
  });
}
var scan_search_default = Scan_search;

// node_modules/lucide-svelte/dist/icons/scan-text.svelte
Scan_text[FILENAME] = "node_modules/lucide-svelte/dist/icons/scan-text.svelte";
function Scan_text($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Scan_text);
  const iconNode = [
    ["path", { "d": "M3 7V5a2 2 0 0 1 2-2h2" }],
    ["path", { "d": "M17 3h2a2 2 0 0 1 2 2v2" }],
    ["path", { "d": "M21 17v2a2 2 0 0 1-2 2h-2" }],
    ["path", { "d": "M7 21H5a2 2 0 0 1-2-2v-2" }],
    ["path", { "d": "M7 8h8" }],
    ["path", { "d": "M7 12h10" }],
    ["path", { "d": "M7 16h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "scan-text" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Scan_text, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Scan_text,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scan_text = hmr(Scan_text, () => Scan_text[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Scan_text[HMR].source;
    set(Scan_text[HMR].source, module.default[HMR].original);
  });
}
var scan_text_default = Scan_text;

// node_modules/lucide-svelte/dist/icons/scan.svelte
Scan[FILENAME] = "node_modules/lucide-svelte/dist/icons/scan.svelte";
function Scan($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Scan);
  const iconNode = [
    ["path", { "d": "M3 7V5a2 2 0 0 1 2-2h2" }],
    ["path", { "d": "M17 3h2a2 2 0 0 1 2 2v2" }],
    ["path", { "d": "M21 17v2a2 2 0 0 1-2 2h-2" }],
    ["path", { "d": "M7 21H5a2 2 0 0 1-2-2v-2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "scan" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Scan, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Scan,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scan = hmr(Scan, () => Scan[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Scan[HMR].source;
    set(Scan[HMR].source, module.default[HMR].original);
  });
}
var scan_default = Scan;

// node_modules/lucide-svelte/dist/icons/school.svelte
School[FILENAME] = "node_modules/lucide-svelte/dist/icons/school.svelte";
function School($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, School);
  const iconNode = [
    ["path", { "d": "M14 22v-4a2 2 0 1 0-4 0v4" }],
    [
      "path",
      {
        "d": "m18 10 3.447 1.724a1 1 0 0 1 .553.894V20a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2v-7.382a1 1 0 0 1 .553-.894L6 10"
      }
    ],
    ["path", { "d": "M18 5v17" }],
    ["path", { "d": "m4 6 7.106-3.553a2 2 0 0 1 1.788 0L20 6" }],
    ["path", { "d": "M6 5v17" }],
    ["circle", { "cx": "12", "cy": "9", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "school" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(School, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    School,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  School = hmr(School, () => School[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = School[HMR].source;
    set(School[HMR].source, module.default[HMR].original);
  });
}
var school_default = School;

// node_modules/lucide-svelte/dist/icons/scissors-line-dashed.svelte
Scissors_line_dashed[FILENAME] = "node_modules/lucide-svelte/dist/icons/scissors-line-dashed.svelte";
function Scissors_line_dashed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Scissors_line_dashed);
  const iconNode = [
    ["path", { "d": "M5.42 9.42 8 12" }],
    ["circle", { "cx": "4", "cy": "8", "r": "2" }],
    ["path", { "d": "m14 6-8.58 8.58" }],
    ["circle", { "cx": "4", "cy": "16", "r": "2" }],
    ["path", { "d": "M10.8 14.8 14 18" }],
    ["path", { "d": "M16 12h-2" }],
    ["path", { "d": "M22 12h-2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "scissors-line-dashed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Scissors_line_dashed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Scissors_line_dashed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scissors_line_dashed = hmr(Scissors_line_dashed, () => Scissors_line_dashed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Scissors_line_dashed[HMR].source;
    set(Scissors_line_dashed[HMR].source, module.default[HMR].original);
  });
}
var scissors_line_dashed_default = Scissors_line_dashed;

// node_modules/lucide-svelte/dist/icons/scissors.svelte
Scissors[FILENAME] = "node_modules/lucide-svelte/dist/icons/scissors.svelte";
function Scissors($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Scissors);
  const iconNode = [
    ["circle", { "cx": "6", "cy": "6", "r": "3" }],
    ["path", { "d": "M8.12 8.12 12 12" }],
    ["path", { "d": "M20 4 8.12 15.88" }],
    ["circle", { "cx": "6", "cy": "18", "r": "3" }],
    ["path", { "d": "M14.8 14.8 20 20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "scissors" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Scissors, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Scissors,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scissors = hmr(Scissors, () => Scissors[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Scissors[HMR].source;
    set(Scissors[HMR].source, module.default[HMR].original);
  });
}
var scissors_default = Scissors;

// node_modules/lucide-svelte/dist/icons/screen-share-off.svelte
Screen_share_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/screen-share-off.svelte";
function Screen_share_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Screen_share_off);
  const iconNode = [
    [
      "path",
      {
        "d": "M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3"
      }
    ],
    ["path", { "d": "M8 21h8" }],
    ["path", { "d": "M12 17v4" }],
    ["path", { "d": "m22 3-5 5" }],
    ["path", { "d": "m17 3 5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "screen-share-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Screen_share_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Screen_share_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Screen_share_off = hmr(Screen_share_off, () => Screen_share_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Screen_share_off[HMR].source;
    set(Screen_share_off[HMR].source, module.default[HMR].original);
  });
}
var screen_share_off_default = Screen_share_off;

// node_modules/lucide-svelte/dist/icons/screen-share.svelte
Screen_share[FILENAME] = "node_modules/lucide-svelte/dist/icons/screen-share.svelte";
function Screen_share($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Screen_share);
  const iconNode = [
    [
      "path",
      {
        "d": "M13 3H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-3"
      }
    ],
    ["path", { "d": "M8 21h8" }],
    ["path", { "d": "M12 17v4" }],
    ["path", { "d": "m17 8 5-5" }],
    ["path", { "d": "M17 3h5v5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "screen-share" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Screen_share, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Screen_share,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Screen_share = hmr(Screen_share, () => Screen_share[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Screen_share[HMR].source;
    set(Screen_share[HMR].source, module.default[HMR].original);
  });
}
var screen_share_default = Screen_share;

// node_modules/lucide-svelte/dist/icons/scroll-text.svelte
Scroll_text[FILENAME] = "node_modules/lucide-svelte/dist/icons/scroll-text.svelte";
function Scroll_text($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Scroll_text);
  const iconNode = [
    ["path", { "d": "M15 12h-5" }],
    ["path", { "d": "M15 8h-5" }],
    ["path", { "d": "M19 17V5a2 2 0 0 0-2-2H4" }],
    [
      "path",
      {
        "d": "M8 21h12a2 2 0 0 0 2-2v-1a1 1 0 0 0-1-1H11a1 1 0 0 0-1 1v1a2 2 0 1 1-4 0V5a2 2 0 1 0-4 0v2a1 1 0 0 0 1 1h3"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "scroll-text" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Scroll_text, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Scroll_text,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scroll_text = hmr(Scroll_text, () => Scroll_text[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Scroll_text[HMR].source;
    set(Scroll_text[HMR].source, module.default[HMR].original);
  });
}
var scroll_text_default = Scroll_text;

// node_modules/lucide-svelte/dist/icons/scroll.svelte
Scroll[FILENAME] = "node_modules/lucide-svelte/dist/icons/scroll.svelte";
function Scroll($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Scroll);
  const iconNode = [
    ["path", { "d": "M19 17V5a2 2 0 0 0-2-2H4" }],
    [
      "path",
      {
        "d": "M8 21h12a2 2 0 0 0 2-2v-1a1 1 0 0 0-1-1H11a1 1 0 0 0-1 1v1a2 2 0 1 1-4 0V5a2 2 0 1 0-4 0v2a1 1 0 0 0 1 1h3"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "scroll" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Scroll, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Scroll,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Scroll = hmr(Scroll, () => Scroll[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Scroll[HMR].source;
    set(Scroll[HMR].source, module.default[HMR].original);
  });
}
var scroll_default = Scroll;

// node_modules/lucide-svelte/dist/icons/search-check.svelte
Search_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/search-check.svelte";
function Search_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Search_check);
  const iconNode = [
    ["path", { "d": "m8 11 2 2 4-4" }],
    ["circle", { "cx": "11", "cy": "11", "r": "8" }],
    ["path", { "d": "m21 21-4.3-4.3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "search-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Search_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Search_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Search_check = hmr(Search_check, () => Search_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Search_check[HMR].source;
    set(Search_check[HMR].source, module.default[HMR].original);
  });
}
var search_check_default = Search_check;

// node_modules/lucide-svelte/dist/icons/search-code.svelte
Search_code[FILENAME] = "node_modules/lucide-svelte/dist/icons/search-code.svelte";
function Search_code($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Search_code);
  const iconNode = [
    ["path", { "d": "m13 13.5 2-2.5-2-2.5" }],
    ["path", { "d": "m21 21-4.3-4.3" }],
    ["path", { "d": "M9 8.5 7 11l2 2.5" }],
    ["circle", { "cx": "11", "cy": "11", "r": "8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "search-code" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Search_code, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Search_code,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Search_code = hmr(Search_code, () => Search_code[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Search_code[HMR].source;
    set(Search_code[HMR].source, module.default[HMR].original);
  });
}
var search_code_default = Search_code;

// node_modules/lucide-svelte/dist/icons/search-slash.svelte
Search_slash[FILENAME] = "node_modules/lucide-svelte/dist/icons/search-slash.svelte";
function Search_slash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Search_slash);
  const iconNode = [
    ["path", { "d": "m13.5 8.5-5 5" }],
    ["circle", { "cx": "11", "cy": "11", "r": "8" }],
    ["path", { "d": "m21 21-4.3-4.3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "search-slash" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Search_slash, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Search_slash,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Search_slash = hmr(Search_slash, () => Search_slash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Search_slash[HMR].source;
    set(Search_slash[HMR].source, module.default[HMR].original);
  });
}
var search_slash_default = Search_slash;

// node_modules/lucide-svelte/dist/icons/search-x.svelte
Search_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/search-x.svelte";
function Search_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Search_x);
  const iconNode = [
    ["path", { "d": "m13.5 8.5-5 5" }],
    ["path", { "d": "m8.5 8.5 5 5" }],
    ["circle", { "cx": "11", "cy": "11", "r": "8" }],
    ["path", { "d": "m21 21-4.3-4.3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "search-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Search_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Search_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Search_x = hmr(Search_x, () => Search_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Search_x[HMR].source;
    set(Search_x[HMR].source, module.default[HMR].original);
  });
}
var search_x_default = Search_x;

// node_modules/lucide-svelte/dist/icons/search.svelte
Search[FILENAME] = "node_modules/lucide-svelte/dist/icons/search.svelte";
function Search($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Search);
  const iconNode = [
    ["path", { "d": "m21 21-4.34-4.34" }],
    ["circle", { "cx": "11", "cy": "11", "r": "8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "search" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Search, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Search,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Search = hmr(Search, () => Search[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Search[HMR].source;
    set(Search[HMR].source, module.default[HMR].original);
  });
}
var search_default = Search;

// node_modules/lucide-svelte/dist/icons/section.svelte
Section[FILENAME] = "node_modules/lucide-svelte/dist/icons/section.svelte";
function Section($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Section);
  const iconNode = [
    [
      "path",
      { "d": "M16 5a4 3 0 0 0-8 0c0 4 8 3 8 7a4 3 0 0 1-8 0" }
    ],
    [
      "path",
      { "d": "M8 19a4 3 0 0 0 8 0c0-4-8-3-8-7a4 3 0 0 1 8 0" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "section" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Section, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Section,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Section = hmr(Section, () => Section[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Section[HMR].source;
    set(Section[HMR].source, module.default[HMR].original);
  });
}
var section_default = Section;

// node_modules/lucide-svelte/dist/icons/send-horizontal.svelte
Send_horizontal[FILENAME] = "node_modules/lucide-svelte/dist/icons/send-horizontal.svelte";
function Send_horizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Send_horizontal);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.714 3.048a.498.498 0 0 0-.683.627l2.843 7.627a2 2 0 0 1 0 1.396l-2.842 7.627a.498.498 0 0 0 .682.627l18-8.5a.5.5 0 0 0 0-.904z"
      }
    ],
    ["path", { "d": "M6 12h16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "send-horizontal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Send_horizontal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Send_horizontal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Send_horizontal = hmr(Send_horizontal, () => Send_horizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Send_horizontal[HMR].source;
    set(Send_horizontal[HMR].source, module.default[HMR].original);
  });
}
var send_horizontal_default = Send_horizontal;

// node_modules/lucide-svelte/dist/icons/send-to-back.svelte
Send_to_back[FILENAME] = "node_modules/lucide-svelte/dist/icons/send-to-back.svelte";
function Send_to_back($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Send_to_back);
  const iconNode = [
    [
      "rect",
      { "x": "14", "y": "14", "width": "8", "height": "8", "rx": "2" }
    ],
    [
      "rect",
      { "x": "2", "y": "2", "width": "8", "height": "8", "rx": "2" }
    ],
    ["path", { "d": "M7 14v1a2 2 0 0 0 2 2h1" }],
    ["path", { "d": "M14 7h1a2 2 0 0 1 2 2v1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "send-to-back" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Send_to_back, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Send_to_back,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Send_to_back = hmr(Send_to_back, () => Send_to_back[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Send_to_back[HMR].source;
    set(Send_to_back[HMR].source, module.default[HMR].original);
  });
}
var send_to_back_default = Send_to_back;

// node_modules/lucide-svelte/dist/icons/send.svelte
Send[FILENAME] = "node_modules/lucide-svelte/dist/icons/send.svelte";
function Send($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Send);
  const iconNode = [
    [
      "path",
      {
        "d": "M14.536 21.686a.5.5 0 0 0 .937-.024l6.5-19a.496.496 0 0 0-.635-.635l-19 6.5a.5.5 0 0 0-.024.937l7.93 3.18a2 2 0 0 1 1.112 1.11z"
      }
    ],
    ["path", { "d": "m21.854 2.147-10.94 10.939" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "send" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Send, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Send,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Send = hmr(Send, () => Send[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Send[HMR].source;
    set(Send[HMR].source, module.default[HMR].original);
  });
}
var send_default = Send;

// node_modules/lucide-svelte/dist/icons/separator-horizontal.svelte
Separator_horizontal[FILENAME] = "node_modules/lucide-svelte/dist/icons/separator-horizontal.svelte";
function Separator_horizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Separator_horizontal);
  const iconNode = [
    ["path", { "d": "m16 16-4 4-4-4" }],
    ["path", { "d": "M3 12h18" }],
    ["path", { "d": "m8 8 4-4 4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "separator-horizontal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Separator_horizontal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Separator_horizontal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Separator_horizontal = hmr(Separator_horizontal, () => Separator_horizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Separator_horizontal[HMR].source;
    set(Separator_horizontal[HMR].source, module.default[HMR].original);
  });
}
var separator_horizontal_default = Separator_horizontal;

// node_modules/lucide-svelte/dist/icons/separator-vertical.svelte
Separator_vertical[FILENAME] = "node_modules/lucide-svelte/dist/icons/separator-vertical.svelte";
function Separator_vertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Separator_vertical);
  const iconNode = [
    ["path", { "d": "M12 3v18" }],
    ["path", { "d": "m16 16 4-4-4-4" }],
    ["path", { "d": "m8 8-4 4 4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "separator-vertical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Separator_vertical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Separator_vertical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Separator_vertical = hmr(Separator_vertical, () => Separator_vertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Separator_vertical[HMR].source;
    set(Separator_vertical[HMR].source, module.default[HMR].original);
  });
}
var separator_vertical_default = Separator_vertical;

// node_modules/lucide-svelte/dist/icons/server-cog.svelte
Server_cog[FILENAME] = "node_modules/lucide-svelte/dist/icons/server-cog.svelte";
function Server_cog($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Server_cog);
  const iconNode = [
    ["path", { "d": "m10.852 14.772-.383.923" }],
    [
      "path",
      { "d": "M13.148 14.772a3 3 0 1 0-2.296-5.544l-.383-.923" }
    ],
    ["path", { "d": "m13.148 9.228.383-.923" }],
    [
      "path",
      { "d": "m13.53 15.696-.382-.924a3 3 0 1 1-2.296-5.544" }
    ],
    ["path", { "d": "m14.772 10.852.923-.383" }],
    ["path", { "d": "m14.772 13.148.923.383" }],
    [
      "path",
      {
        "d": "M4.5 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-.5"
      }
    ],
    [
      "path",
      {
        "d": "M4.5 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-.5"
      }
    ],
    ["path", { "d": "M6 18h.01" }],
    ["path", { "d": "M6 6h.01" }],
    ["path", { "d": "m9.228 10.852-.923-.383" }],
    ["path", { "d": "m9.228 13.148-.923.383" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "server-cog" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Server_cog, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Server_cog,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Server_cog = hmr(Server_cog, () => Server_cog[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Server_cog[HMR].source;
    set(Server_cog[HMR].source, module.default[HMR].original);
  });
}
var server_cog_default = Server_cog;

// node_modules/lucide-svelte/dist/icons/server-crash.svelte
Server_crash[FILENAME] = "node_modules/lucide-svelte/dist/icons/server-crash.svelte";
function Server_crash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Server_crash);
  const iconNode = [
    [
      "path",
      {
        "d": "M6 10H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-2"
      }
    ],
    [
      "path",
      {
        "d": "M6 14H4a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-4a2 2 0 0 0-2-2h-2"
      }
    ],
    ["path", { "d": "M6 6h.01" }],
    ["path", { "d": "M6 18h.01" }],
    ["path", { "d": "m13 6-4 6h6l-4 6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "server-crash" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Server_crash, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Server_crash,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Server_crash = hmr(Server_crash, () => Server_crash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Server_crash[HMR].source;
    set(Server_crash[HMR].source, module.default[HMR].original);
  });
}
var server_crash_default = Server_crash;

// node_modules/lucide-svelte/dist/icons/server-off.svelte
Server_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/server-off.svelte";
function Server_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Server_off);
  const iconNode = [
    ["path", { "d": "M7 2h13a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-5" }],
    [
      "path",
      { "d": "M10 10 2.5 2.5C2 2 2 2.5 2 5v3a2 2 0 0 0 2 2h6z" }
    ],
    ["path", { "d": "M22 17v-1a2 2 0 0 0-2-2h-1" }],
    [
      "path",
      {
        "d": "M4 14a2 2 0 0 0-2 2v4a2 2 0 0 0 2 2h16.5l1-.5.5.5-8-8H4z"
      }
    ],
    ["path", { "d": "M6 18h.01" }],
    ["path", { "d": "m2 2 20 20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "server-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Server_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Server_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Server_off = hmr(Server_off, () => Server_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Server_off[HMR].source;
    set(Server_off[HMR].source, module.default[HMR].original);
  });
}
var server_off_default = Server_off;

// node_modules/lucide-svelte/dist/icons/server.svelte
Server[FILENAME] = "node_modules/lucide-svelte/dist/icons/server.svelte";
function Server($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Server);
  const iconNode = [
    [
      "rect",
      {
        "width": "20",
        "height": "8",
        "x": "2",
        "y": "2",
        "rx": "2",
        "ry": "2"
      }
    ],
    [
      "rect",
      {
        "width": "20",
        "height": "8",
        "x": "2",
        "y": "14",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["line", { "x1": "6", "x2": "6.01", "y1": "6", "y2": "6" }],
    ["line", { "x1": "6", "x2": "6.01", "y1": "18", "y2": "18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "server" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Server, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Server,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Server = hmr(Server, () => Server[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Server[HMR].source;
    set(Server[HMR].source, module.default[HMR].original);
  });
}
var server_default = Server;

// node_modules/lucide-svelte/dist/icons/settings-2.svelte
Settings_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/settings-2.svelte";
function Settings_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Settings_2);
  const iconNode = [
    ["path", { "d": "M14 17H5" }],
    ["path", { "d": "M19 7h-9" }],
    ["circle", { "cx": "17", "cy": "17", "r": "3" }],
    ["circle", { "cx": "7", "cy": "7", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "settings-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Settings_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Settings_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Settings_2 = hmr(Settings_2, () => Settings_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Settings_2[HMR].source;
    set(Settings_2[HMR].source, module.default[HMR].original);
  });
}
var settings_2_default = Settings_2;

// node_modules/lucide-svelte/dist/icons/settings.svelte
Settings[FILENAME] = "node_modules/lucide-svelte/dist/icons/settings.svelte";
function Settings($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Settings);
  const iconNode = [
    [
      "path",
      {
        "d": "M9.671 4.136a2.34 2.34 0 0 1 4.659 0 2.34 2.34 0 0 0 3.319 1.915 2.34 2.34 0 0 1 2.33 4.033 2.34 2.34 0 0 0 0 3.831 2.34 2.34 0 0 1-2.33 4.033 2.34 2.34 0 0 0-3.319 1.915 2.34 2.34 0 0 1-4.659 0 2.34 2.34 0 0 0-3.32-1.915 2.34 2.34 0 0 1-2.33-4.033 2.34 2.34 0 0 0 0-3.831A2.34 2.34 0 0 1 6.35 6.051a2.34 2.34 0 0 0 3.319-1.915"
      }
    ],
    ["circle", { "cx": "12", "cy": "12", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "settings" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Settings, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Settings,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Settings = hmr(Settings, () => Settings[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Settings[HMR].source;
    set(Settings[HMR].source, module.default[HMR].original);
  });
}
var settings_default = Settings;

// node_modules/lucide-svelte/dist/icons/shapes.svelte
Shapes[FILENAME] = "node_modules/lucide-svelte/dist/icons/shapes.svelte";
function Shapes($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shapes);
  const iconNode = [
    [
      "path",
      {
        "d": "M8.3 10a.7.7 0 0 1-.626-1.079L11.4 3a.7.7 0 0 1 1.198-.043L16.3 8.9a.7.7 0 0 1-.572 1.1Z"
      }
    ],
    [
      "rect",
      { "x": "3", "y": "14", "width": "7", "height": "7", "rx": "1" }
    ],
    ["circle", { "cx": "17.5", "cy": "17.5", "r": "3.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shapes" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shapes, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shapes,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shapes = hmr(Shapes, () => Shapes[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shapes[HMR].source;
    set(Shapes[HMR].source, module.default[HMR].original);
  });
}
var shapes_default = Shapes;

// node_modules/lucide-svelte/dist/icons/share-2.svelte
Share_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/share-2.svelte";
function Share_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Share_2);
  const iconNode = [
    ["circle", { "cx": "18", "cy": "5", "r": "3" }],
    ["circle", { "cx": "6", "cy": "12", "r": "3" }],
    ["circle", { "cx": "18", "cy": "19", "r": "3" }],
    [
      "line",
      { "x1": "8.59", "x2": "15.42", "y1": "13.51", "y2": "17.49" }
    ],
    [
      "line",
      { "x1": "15.41", "x2": "8.59", "y1": "6.51", "y2": "10.49" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "share-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Share_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Share_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Share_2 = hmr(Share_2, () => Share_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Share_2[HMR].source;
    set(Share_2[HMR].source, module.default[HMR].original);
  });
}
var share_2_default = Share_2;

// node_modules/lucide-svelte/dist/icons/share.svelte
Share[FILENAME] = "node_modules/lucide-svelte/dist/icons/share.svelte";
function Share($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Share);
  const iconNode = [
    ["path", { "d": "M12 2v13" }],
    ["path", { "d": "m16 6-4-4-4 4" }],
    ["path", { "d": "M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "share" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Share, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Share,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Share = hmr(Share, () => Share[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Share[HMR].source;
    set(Share[HMR].source, module.default[HMR].original);
  });
}
var share_default = Share;

// node_modules/lucide-svelte/dist/icons/sheet.svelte
Sheet[FILENAME] = "node_modules/lucide-svelte/dist/icons/sheet.svelte";
function Sheet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sheet);
  const iconNode = [
    [
      "rect",
      {
        "width": "18",
        "height": "18",
        "x": "3",
        "y": "3",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["line", { "x1": "3", "x2": "21", "y1": "9", "y2": "9" }],
    ["line", { "x1": "3", "x2": "21", "y1": "15", "y2": "15" }],
    ["line", { "x1": "9", "x2": "9", "y1": "9", "y2": "21" }],
    ["line", { "x1": "15", "x2": "15", "y1": "9", "y2": "21" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sheet" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sheet, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sheet,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sheet = hmr(Sheet, () => Sheet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sheet[HMR].source;
    set(Sheet[HMR].source, module.default[HMR].original);
  });
}
var sheet_default = Sheet;

// node_modules/lucide-svelte/dist/icons/shell.svelte
Shell[FILENAME] = "node_modules/lucide-svelte/dist/icons/shell.svelte";
function Shell($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shell);
  const iconNode = [
    [
      "path",
      {
        "d": "M14 11a2 2 0 1 1-4 0 4 4 0 0 1 8 0 6 6 0 0 1-12 0 8 8 0 0 1 16 0 10 10 0 1 1-20 0 11.93 11.93 0 0 1 2.42-7.22 2 2 0 1 1 3.16 2.44"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shell" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shell, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shell,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shell = hmr(Shell, () => Shell[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shell[HMR].source;
    set(Shell[HMR].source, module.default[HMR].original);
  });
}
var shell_default = Shell;

// node_modules/lucide-svelte/dist/icons/shield-alert.svelte
Shield_alert[FILENAME] = "node_modules/lucide-svelte/dist/icons/shield-alert.svelte";
function Shield_alert($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shield_alert);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
      }
    ],
    ["path", { "d": "M12 8v4" }],
    ["path", { "d": "M12 16h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shield-alert" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shield_alert, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shield_alert,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shield_alert = hmr(Shield_alert, () => Shield_alert[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shield_alert[HMR].source;
    set(Shield_alert[HMR].source, module.default[HMR].original);
  });
}
var shield_alert_default = Shield_alert;

// node_modules/lucide-svelte/dist/icons/shield-ban.svelte
Shield_ban[FILENAME] = "node_modules/lucide-svelte/dist/icons/shield-ban.svelte";
function Shield_ban($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shield_ban);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
      }
    ],
    ["path", { "d": "m4.243 5.21 14.39 12.472" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shield-ban" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shield_ban, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shield_ban,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shield_ban = hmr(Shield_ban, () => Shield_ban[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shield_ban[HMR].source;
    set(Shield_ban[HMR].source, module.default[HMR].original);
  });
}
var shield_ban_default = Shield_ban;

// node_modules/lucide-svelte/dist/icons/shield-check.svelte
Shield_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/shield-check.svelte";
function Shield_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shield_check);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
      }
    ],
    ["path", { "d": "m9 12 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shield-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shield_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shield_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shield_check = hmr(Shield_check, () => Shield_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shield_check[HMR].source;
    set(Shield_check[HMR].source, module.default[HMR].original);
  });
}
var shield_check_default = Shield_check;

// node_modules/lucide-svelte/dist/icons/shield-ellipsis.svelte
Shield_ellipsis[FILENAME] = "node_modules/lucide-svelte/dist/icons/shield-ellipsis.svelte";
function Shield_ellipsis($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shield_ellipsis);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
      }
    ],
    ["path", { "d": "M8 12h.01" }],
    ["path", { "d": "M12 12h.01" }],
    ["path", { "d": "M16 12h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shield-ellipsis" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shield_ellipsis, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shield_ellipsis,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shield_ellipsis = hmr(Shield_ellipsis, () => Shield_ellipsis[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shield_ellipsis[HMR].source;
    set(Shield_ellipsis[HMR].source, module.default[HMR].original);
  });
}
var shield_ellipsis_default = Shield_ellipsis;

// node_modules/lucide-svelte/dist/icons/shield-half.svelte
Shield_half[FILENAME] = "node_modules/lucide-svelte/dist/icons/shield-half.svelte";
function Shield_half($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shield_half);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
      }
    ],
    ["path", { "d": "M12 22V2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shield-half" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shield_half, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shield_half,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shield_half = hmr(Shield_half, () => Shield_half[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shield_half[HMR].source;
    set(Shield_half[HMR].source, module.default[HMR].original);
  });
}
var shield_half_default = Shield_half;

// node_modules/lucide-svelte/dist/icons/shield-minus.svelte
Shield_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/shield-minus.svelte";
function Shield_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shield_minus);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
      }
    ],
    ["path", { "d": "M9 12h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shield-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shield_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shield_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shield_minus = hmr(Shield_minus, () => Shield_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shield_minus[HMR].source;
    set(Shield_minus[HMR].source, module.default[HMR].original);
  });
}
var shield_minus_default = Shield_minus;

// node_modules/lucide-svelte/dist/icons/shield-off.svelte
Shield_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/shield-off.svelte";
function Shield_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shield_off);
  const iconNode = [
    ["path", { "d": "m2 2 20 20" }],
    [
      "path",
      {
        "d": "M5 5a1 1 0 0 0-1 1v7c0 5 3.5 7.5 7.67 8.94a1 1 0 0 0 .67.01c2.35-.82 4.48-1.97 5.9-3.71"
      }
    ],
    [
      "path",
      {
        "d": "M9.309 3.652A12.252 12.252 0 0 0 11.24 2.28a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1v7a9.784 9.784 0 0 1-.08 1.264"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shield-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shield_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shield_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shield_off = hmr(Shield_off, () => Shield_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shield_off[HMR].source;
    set(Shield_off[HMR].source, module.default[HMR].original);
  });
}
var shield_off_default = Shield_off;

// node_modules/lucide-svelte/dist/icons/shield-plus.svelte
Shield_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/shield-plus.svelte";
function Shield_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shield_plus);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
      }
    ],
    ["path", { "d": "M9 12h6" }],
    ["path", { "d": "M12 9v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shield-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shield_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shield_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shield_plus = hmr(Shield_plus, () => Shield_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shield_plus[HMR].source;
    set(Shield_plus[HMR].source, module.default[HMR].original);
  });
}
var shield_plus_default = Shield_plus;

// node_modules/lucide-svelte/dist/icons/shield-question-mark.svelte
Shield_question_mark[FILENAME] = "node_modules/lucide-svelte/dist/icons/shield-question-mark.svelte";
function Shield_question_mark($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shield_question_mark);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
      }
    ],
    ["path", { "d": "M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3" }],
    ["path", { "d": "M12 17h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shield-question-mark" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shield_question_mark, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shield_question_mark,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shield_question_mark = hmr(Shield_question_mark, () => Shield_question_mark[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shield_question_mark[HMR].source;
    set(Shield_question_mark[HMR].source, module.default[HMR].original);
  });
}
var shield_question_mark_default = Shield_question_mark;

// node_modules/lucide-svelte/dist/icons/shield-x.svelte
Shield_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/shield-x.svelte";
function Shield_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shield_x);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
      }
    ],
    ["path", { "d": "m14.5 9.5-5 5" }],
    ["path", { "d": "m9.5 9.5 5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shield-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shield_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shield_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shield_x = hmr(Shield_x, () => Shield_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shield_x[HMR].source;
    set(Shield_x[HMR].source, module.default[HMR].original);
  });
}
var shield_x_default = Shield_x;

// node_modules/lucide-svelte/dist/icons/shield-user.svelte
Shield_user[FILENAME] = "node_modules/lucide-svelte/dist/icons/shield-user.svelte";
function Shield_user($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shield_user);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
      }
    ],
    ["path", { "d": "M6.376 18.91a6 6 0 0 1 11.249.003" }],
    ["circle", { "cx": "12", "cy": "11", "r": "4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shield-user" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shield_user, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shield_user,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shield_user = hmr(Shield_user, () => Shield_user[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shield_user[HMR].source;
    set(Shield_user[HMR].source, module.default[HMR].original);
  });
}
var shield_user_default = Shield_user;

// node_modules/lucide-svelte/dist/icons/shield.svelte
Shield[FILENAME] = "node_modules/lucide-svelte/dist/icons/shield.svelte";
function Shield($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shield);
  const iconNode = [
    [
      "path",
      {
        "d": "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shield" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shield, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shield,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shield = hmr(Shield, () => Shield[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shield[HMR].source;
    set(Shield[HMR].source, module.default[HMR].original);
  });
}
var shield_default = Shield;

// node_modules/lucide-svelte/dist/icons/ship-wheel.svelte
Ship_wheel[FILENAME] = "node_modules/lucide-svelte/dist/icons/ship-wheel.svelte";
function Ship_wheel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ship_wheel);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "8" }],
    ["path", { "d": "M12 2v7.5" }],
    ["path", { "d": "m19 5-5.23 5.23" }],
    ["path", { "d": "M22 12h-7.5" }],
    ["path", { "d": "m19 19-5.23-5.23" }],
    ["path", { "d": "M12 14.5V22" }],
    ["path", { "d": "M10.23 13.77 5 19" }],
    ["path", { "d": "M9.5 12H2" }],
    ["path", { "d": "M10.23 10.23 5 5" }],
    ["circle", { "cx": "12", "cy": "12", "r": "2.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ship-wheel" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ship_wheel, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ship_wheel,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ship_wheel = hmr(Ship_wheel, () => Ship_wheel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ship_wheel[HMR].source;
    set(Ship_wheel[HMR].source, module.default[HMR].original);
  });
}
var ship_wheel_default = Ship_wheel;

// node_modules/lucide-svelte/dist/icons/ship.svelte
Ship[FILENAME] = "node_modules/lucide-svelte/dist/icons/ship.svelte";
function Ship($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ship);
  const iconNode = [
    ["path", { "d": "M12 10.189V14" }],
    ["path", { "d": "M12 2v3" }],
    ["path", { "d": "M19 13V7a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2v6" }],
    [
      "path",
      {
        "d": "M19.38 20A11.6 11.6 0 0 0 21 14l-8.188-3.639a2 2 0 0 0-1.624 0L3 14a11.6 11.6 0 0 0 2.81 7.76"
      }
    ],
    [
      "path",
      {
        "d": "M2 21c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1s1.2 1 2.5 1c2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ship" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ship, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ship,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ship = hmr(Ship, () => Ship[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ship[HMR].source;
    set(Ship[HMR].source, module.default[HMR].original);
  });
}
var ship_default = Ship;

// node_modules/lucide-svelte/dist/icons/shirt.svelte
Shirt[FILENAME] = "node_modules/lucide-svelte/dist/icons/shirt.svelte";
function Shirt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shirt);
  const iconNode = [
    [
      "path",
      {
        "d": "M20.38 3.46 16 2a4 4 0 0 1-8 0L3.62 3.46a2 2 0 0 0-1.34 2.23l.58 3.47a1 1 0 0 0 .99.84H6v10c0 1.1.9 2 2 2h8a2 2 0 0 0 2-2V10h2.15a1 1 0 0 0 .99-.84l.58-3.47a2 2 0 0 0-1.34-2.23z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shirt" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shirt, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shirt,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shirt = hmr(Shirt, () => Shirt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shirt[HMR].source;
    set(Shirt[HMR].source, module.default[HMR].original);
  });
}
var shirt_default = Shirt;

// node_modules/lucide-svelte/dist/icons/shopping-bag.svelte
Shopping_bag[FILENAME] = "node_modules/lucide-svelte/dist/icons/shopping-bag.svelte";
function Shopping_bag($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shopping_bag);
  const iconNode = [
    ["path", { "d": "M16 10a4 4 0 0 1-8 0" }],
    ["path", { "d": "M3.103 6.034h17.794" }],
    [
      "path",
      {
        "d": "M3.4 5.467a2 2 0 0 0-.4 1.2V20a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V6.667a2 2 0 0 0-.4-1.2l-2-2.667A2 2 0 0 0 17 2H7a2 2 0 0 0-1.6.8z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shopping-bag" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shopping_bag, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shopping_bag,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shopping_bag = hmr(Shopping_bag, () => Shopping_bag[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shopping_bag[HMR].source;
    set(Shopping_bag[HMR].source, module.default[HMR].original);
  });
}
var shopping_bag_default = Shopping_bag;

// node_modules/lucide-svelte/dist/icons/shopping-basket.svelte
Shopping_basket[FILENAME] = "node_modules/lucide-svelte/dist/icons/shopping-basket.svelte";
function Shopping_basket($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shopping_basket);
  const iconNode = [
    ["path", { "d": "m15 11-1 9" }],
    ["path", { "d": "m19 11-4-7" }],
    ["path", { "d": "M2 11h20" }],
    [
      "path",
      {
        "d": "m3.5 11 1.6 7.4a2 2 0 0 0 2 1.6h9.8a2 2 0 0 0 2-1.6l1.7-7.4"
      }
    ],
    ["path", { "d": "M4.5 15.5h15" }],
    ["path", { "d": "m5 11 4-7" }],
    ["path", { "d": "m9 11 1 9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shopping-basket" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shopping_basket, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shopping_basket,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shopping_basket = hmr(Shopping_basket, () => Shopping_basket[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shopping_basket[HMR].source;
    set(Shopping_basket[HMR].source, module.default[HMR].original);
  });
}
var shopping_basket_default = Shopping_basket;

// node_modules/lucide-svelte/dist/icons/shopping-cart.svelte
Shopping_cart[FILENAME] = "node_modules/lucide-svelte/dist/icons/shopping-cart.svelte";
function Shopping_cart($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shopping_cart);
  const iconNode = [
    ["circle", { "cx": "8", "cy": "21", "r": "1" }],
    ["circle", { "cx": "19", "cy": "21", "r": "1" }],
    [
      "path",
      {
        "d": "M2.05 2.05h2l2.66 12.42a2 2 0 0 0 2 1.58h9.78a2 2 0 0 0 1.95-1.57l1.65-7.43H5.12"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shopping-cart" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shopping_cart, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shopping_cart,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shopping_cart = hmr(Shopping_cart, () => Shopping_cart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shopping_cart[HMR].source;
    set(Shopping_cart[HMR].source, module.default[HMR].original);
  });
}
var shopping_cart_default = Shopping_cart;

// node_modules/lucide-svelte/dist/icons/shovel.svelte
Shovel[FILENAME] = "node_modules/lucide-svelte/dist/icons/shovel.svelte";
function Shovel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shovel);
  const iconNode = [
    [
      "path",
      {
        "d": "M21.56 4.56a1.5 1.5 0 0 1 0 2.122l-.47.47a3 3 0 0 1-4.212-.03 3 3 0 0 1 0-4.243l.44-.44a1.5 1.5 0 0 1 2.121 0z"
      }
    ],
    [
      "path",
      {
        "d": "M3 22a1 1 0 0 1-1-1v-3.586a1 1 0 0 1 .293-.707l3.355-3.355a1.205 1.205 0 0 1 1.704 0l3.296 3.296a1.205 1.205 0 0 1 0 1.704l-3.355 3.355a1 1 0 0 1-.707.293z"
      }
    ],
    ["path", { "d": "m9 15 7.879-7.878" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shovel" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shovel, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shovel,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shovel = hmr(Shovel, () => Shovel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shovel[HMR].source;
    set(Shovel[HMR].source, module.default[HMR].original);
  });
}
var shovel_default = Shovel;

// node_modules/lucide-svelte/dist/icons/shower-head.svelte
Shower_head[FILENAME] = "node_modules/lucide-svelte/dist/icons/shower-head.svelte";
function Shower_head($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shower_head);
  const iconNode = [
    ["path", { "d": "m4 4 2.5 2.5" }],
    ["path", { "d": "M13.5 6.5a4.95 4.95 0 0 0-7 7" }],
    ["path", { "d": "M15 5 5 15" }],
    ["path", { "d": "M14 17v.01" }],
    ["path", { "d": "M10 16v.01" }],
    ["path", { "d": "M13 13v.01" }],
    ["path", { "d": "M16 10v.01" }],
    ["path", { "d": "M11 20v.01" }],
    ["path", { "d": "M17 14v.01" }],
    ["path", { "d": "M20 11v.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shower-head" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shower_head, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shower_head,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shower_head = hmr(Shower_head, () => Shower_head[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shower_head[HMR].source;
    set(Shower_head[HMR].source, module.default[HMR].original);
  });
}
var shower_head_default = Shower_head;

// node_modules/lucide-svelte/dist/icons/shredder.svelte
Shredder[FILENAME] = "node_modules/lucide-svelte/dist/icons/shredder.svelte";
function Shredder($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shredder);
  const iconNode = [
    ["path", { "d": "M10 22v-5" }],
    ["path", { "d": "M14 19v-2" }],
    ["path", { "d": "M14 2v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M18 20v-3" }],
    ["path", { "d": "M2 13h20" }],
    ["path", { "d": "M20 13V7l-5-5H6a2 2 0 0 0-2 2v9" }],
    ["path", { "d": "M6 20v-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shredder" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shredder, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shredder,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shredder = hmr(Shredder, () => Shredder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shredder[HMR].source;
    set(Shredder[HMR].source, module.default[HMR].original);
  });
}
var shredder_default = Shredder;

// node_modules/lucide-svelte/dist/icons/shrimp.svelte
Shrimp[FILENAME] = "node_modules/lucide-svelte/dist/icons/shrimp.svelte";
function Shrimp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shrimp);
  const iconNode = [
    ["path", { "d": "M11 12h.01" }],
    [
      "path",
      { "d": "M13 22c.5-.5 1.12-1 2.5-1-1.38 0-2-.5-2.5-1" }
    ],
    [
      "path",
      {
        "d": "M14 2a3.28 3.28 0 0 1-3.227 1.798l-6.17-.561A2.387 2.387 0 1 0 4.387 8H15.5a1 1 0 0 1 0 13 1 1 0 0 0 0-5H12a7 7 0 0 1-7-7V8"
      }
    ],
    ["path", { "d": "M14 8a8.5 8.5 0 0 1 0 8" }],
    ["path", { "d": "M16 16c2 0 4.5-4 4-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shrimp" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shrimp, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shrimp,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shrimp = hmr(Shrimp, () => Shrimp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shrimp[HMR].source;
    set(Shrimp[HMR].source, module.default[HMR].original);
  });
}
var shrimp_default = Shrimp;

// node_modules/lucide-svelte/dist/icons/shrink.svelte
Shrink[FILENAME] = "node_modules/lucide-svelte/dist/icons/shrink.svelte";
function Shrink($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shrink);
  const iconNode = [
    ["path", { "d": "m15 15 6 6m-6-6v4.8m0-4.8h4.8" }],
    ["path", { "d": "M9 19.8V15m0 0H4.2M9 15l-6 6" }],
    ["path", { "d": "M15 4.2V9m0 0h4.8M15 9l6-6" }],
    ["path", { "d": "M9 4.2V9m0 0H4.2M9 9 3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shrink" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shrink, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shrink,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shrink = hmr(Shrink, () => Shrink[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shrink[HMR].source;
    set(Shrink[HMR].source, module.default[HMR].original);
  });
}
var shrink_default = Shrink;

// node_modules/lucide-svelte/dist/icons/shrub.svelte
Shrub[FILENAME] = "node_modules/lucide-svelte/dist/icons/shrub.svelte";
function Shrub($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shrub);
  const iconNode = [
    [
      "path",
      { "d": "M12 22v-5.172a2 2 0 0 0-.586-1.414L9.5 13.5" }
    ],
    ["path", { "d": "M14.5 14.5 12 17" }],
    [
      "path",
      {
        "d": "M17 8.8A6 6 0 0 1 13.8 20H10A6.5 6.5 0 0 1 7 8a5 5 0 0 1 10 0z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shrub" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shrub, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shrub,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shrub = hmr(Shrub, () => Shrub[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shrub[HMR].source;
    set(Shrub[HMR].source, module.default[HMR].original);
  });
}
var shrub_default = Shrub;

// node_modules/lucide-svelte/dist/icons/shuffle.svelte
Shuffle[FILENAME] = "node_modules/lucide-svelte/dist/icons/shuffle.svelte";
function Shuffle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Shuffle);
  const iconNode = [
    ["path", { "d": "m18 14 4 4-4 4" }],
    ["path", { "d": "m18 2 4 4-4 4" }],
    [
      "path",
      {
        "d": "M2 18h1.973a4 4 0 0 0 3.3-1.7l5.454-8.6a4 4 0 0 1 3.3-1.7H22"
      }
    ],
    ["path", { "d": "M2 6h1.972a4 4 0 0 1 3.6 2.2" }],
    ["path", { "d": "M22 18h-6.041a4 4 0 0 1-3.3-1.8l-.359-.45" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "shuffle" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Shuffle, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Shuffle,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Shuffle = hmr(Shuffle, () => Shuffle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Shuffle[HMR].source;
    set(Shuffle[HMR].source, module.default[HMR].original);
  });
}
var shuffle_default = Shuffle;

// node_modules/lucide-svelte/dist/icons/sigma.svelte
Sigma[FILENAME] = "node_modules/lucide-svelte/dist/icons/sigma.svelte";
function Sigma($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sigma);
  const iconNode = [
    [
      "path",
      {
        "d": "M18 7V5a1 1 0 0 0-1-1H6.5a.5.5 0 0 0-.4.8l4.5 6a2 2 0 0 1 0 2.4l-4.5 6a.5.5 0 0 0 .4.8H17a1 1 0 0 0 1-1v-2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sigma" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sigma, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sigma,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sigma = hmr(Sigma, () => Sigma[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sigma[HMR].source;
    set(Sigma[HMR].source, module.default[HMR].original);
  });
}
var sigma_default = Sigma;

// node_modules/lucide-svelte/dist/icons/signal-high.svelte
Signal_high[FILENAME] = "node_modules/lucide-svelte/dist/icons/signal-high.svelte";
function Signal_high($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Signal_high);
  const iconNode = [
    ["path", { "d": "M2 20h.01" }],
    ["path", { "d": "M7 20v-4" }],
    ["path", { "d": "M12 20v-8" }],
    ["path", { "d": "M17 20V8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "signal-high" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Signal_high, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Signal_high,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Signal_high = hmr(Signal_high, () => Signal_high[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Signal_high[HMR].source;
    set(Signal_high[HMR].source, module.default[HMR].original);
  });
}
var signal_high_default = Signal_high;

// node_modules/lucide-svelte/dist/icons/signal-low.svelte
Signal_low[FILENAME] = "node_modules/lucide-svelte/dist/icons/signal-low.svelte";
function Signal_low($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Signal_low);
  const iconNode = [
    ["path", { "d": "M2 20h.01" }],
    ["path", { "d": "M7 20v-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "signal-low" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Signal_low, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Signal_low,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Signal_low = hmr(Signal_low, () => Signal_low[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Signal_low[HMR].source;
    set(Signal_low[HMR].source, module.default[HMR].original);
  });
}
var signal_low_default = Signal_low;

// node_modules/lucide-svelte/dist/icons/signal-medium.svelte
Signal_medium[FILENAME] = "node_modules/lucide-svelte/dist/icons/signal-medium.svelte";
function Signal_medium($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Signal_medium);
  const iconNode = [
    ["path", { "d": "M2 20h.01" }],
    ["path", { "d": "M7 20v-4" }],
    ["path", { "d": "M12 20v-8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "signal-medium" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Signal_medium, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Signal_medium,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Signal_medium = hmr(Signal_medium, () => Signal_medium[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Signal_medium[HMR].source;
    set(Signal_medium[HMR].source, module.default[HMR].original);
  });
}
var signal_medium_default = Signal_medium;

// node_modules/lucide-svelte/dist/icons/signal-zero.svelte
Signal_zero[FILENAME] = "node_modules/lucide-svelte/dist/icons/signal-zero.svelte";
function Signal_zero($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Signal_zero);
  const iconNode = [["path", { "d": "M2 20h.01" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "signal-zero" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Signal_zero, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Signal_zero,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Signal_zero = hmr(Signal_zero, () => Signal_zero[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Signal_zero[HMR].source;
    set(Signal_zero[HMR].source, module.default[HMR].original);
  });
}
var signal_zero_default = Signal_zero;

// node_modules/lucide-svelte/dist/icons/signal.svelte
Signal[FILENAME] = "node_modules/lucide-svelte/dist/icons/signal.svelte";
function Signal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Signal);
  const iconNode = [
    ["path", { "d": "M2 20h.01" }],
    ["path", { "d": "M7 20v-4" }],
    ["path", { "d": "M12 20v-8" }],
    ["path", { "d": "M17 20V8" }],
    ["path", { "d": "M22 4v16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "signal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Signal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Signal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Signal = hmr(Signal, () => Signal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Signal[HMR].source;
    set(Signal[HMR].source, module.default[HMR].original);
  });
}
var signal_default = Signal;

// node_modules/lucide-svelte/dist/icons/signature.svelte
Signature[FILENAME] = "node_modules/lucide-svelte/dist/icons/signature.svelte";
function Signature($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Signature);
  const iconNode = [
    [
      "path",
      {
        "d": "m21 17-2.156-1.868A.5.5 0 0 0 18 15.5v.5a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1c0-2.545-3.991-3.97-8.5-4a1 1 0 0 0 0 5c4.153 0 4.745-11.295 5.708-13.5a2.5 2.5 0 1 1 3.31 3.284"
      }
    ],
    ["path", { "d": "M3 21h18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "signature" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Signature, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Signature,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Signature = hmr(Signature, () => Signature[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Signature[HMR].source;
    set(Signature[HMR].source, module.default[HMR].original);
  });
}
var signature_default = Signature;

// node_modules/lucide-svelte/dist/icons/signpost-big.svelte
Signpost_big[FILENAME] = "node_modules/lucide-svelte/dist/icons/signpost-big.svelte";
function Signpost_big($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Signpost_big);
  const iconNode = [
    ["path", { "d": "M10 9H4L2 7l2-2h6" }],
    ["path", { "d": "M14 5h6l2 2-2 2h-6" }],
    ["path", { "d": "M10 22V4a2 2 0 1 1 4 0v18" }],
    ["path", { "d": "M8 22h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "signpost-big" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Signpost_big, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Signpost_big,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Signpost_big = hmr(Signpost_big, () => Signpost_big[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Signpost_big[HMR].source;
    set(Signpost_big[HMR].source, module.default[HMR].original);
  });
}
var signpost_big_default = Signpost_big;

// node_modules/lucide-svelte/dist/icons/signpost.svelte
Signpost[FILENAME] = "node_modules/lucide-svelte/dist/icons/signpost.svelte";
function Signpost($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Signpost);
  const iconNode = [
    ["path", { "d": "M12 13v8" }],
    ["path", { "d": "M12 3v3" }],
    [
      "path",
      {
        "d": "M18 6a2 2 0 0 1 1.387.56l2.307 2.22a1 1 0 0 1 0 1.44l-2.307 2.22A2 2 0 0 1 18 13H6a2 2 0 0 1-1.387-.56l-2.306-2.22a1 1 0 0 1 0-1.44l2.306-2.22A2 2 0 0 1 6 6z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "signpost" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Signpost, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Signpost,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Signpost = hmr(Signpost, () => Signpost[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Signpost[HMR].source;
    set(Signpost[HMR].source, module.default[HMR].original);
  });
}
var signpost_default = Signpost;

// node_modules/lucide-svelte/dist/icons/siren.svelte
Siren[FILENAME] = "node_modules/lucide-svelte/dist/icons/siren.svelte";
function Siren($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Siren);
  const iconNode = [
    ["path", { "d": "M7 18v-6a5 5 0 1 1 10 0v6" }],
    [
      "path",
      {
        "d": "M5 21a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-1a2 2 0 0 0-2-2H7a2 2 0 0 0-2 2z"
      }
    ],
    ["path", { "d": "M21 12h1" }],
    ["path", { "d": "M18.5 4.5 18 5" }],
    ["path", { "d": "M2 12h1" }],
    ["path", { "d": "M12 2v1" }],
    ["path", { "d": "m4.929 4.929.707.707" }],
    ["path", { "d": "M12 12v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "siren" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Siren, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Siren,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Siren = hmr(Siren, () => Siren[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Siren[HMR].source;
    set(Siren[HMR].source, module.default[HMR].original);
  });
}
var siren_default = Siren;

// node_modules/lucide-svelte/dist/icons/skip-back.svelte
Skip_back[FILENAME] = "node_modules/lucide-svelte/dist/icons/skip-back.svelte";
function Skip_back($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Skip_back);
  const iconNode = [
    [
      "path",
      {
        "d": "M17.971 4.285A2 2 0 0 1 21 6v12a2 2 0 0 1-3.029 1.715l-9.997-5.998a2 2 0 0 1-.003-3.432z"
      }
    ],
    ["path", { "d": "M3 20V4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "skip-back" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Skip_back, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Skip_back,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Skip_back = hmr(Skip_back, () => Skip_back[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Skip_back[HMR].source;
    set(Skip_back[HMR].source, module.default[HMR].original);
  });
}
var skip_back_default = Skip_back;

// node_modules/lucide-svelte/dist/icons/skip-forward.svelte
Skip_forward[FILENAME] = "node_modules/lucide-svelte/dist/icons/skip-forward.svelte";
function Skip_forward($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Skip_forward);
  const iconNode = [
    ["path", { "d": "M21 4v16" }],
    [
      "path",
      {
        "d": "M6.029 4.285A2 2 0 0 0 3 6v12a2 2 0 0 0 3.029 1.715l9.997-5.998a2 2 0 0 0 .003-3.432z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "skip-forward" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Skip_forward, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Skip_forward,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Skip_forward = hmr(Skip_forward, () => Skip_forward[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Skip_forward[HMR].source;
    set(Skip_forward[HMR].source, module.default[HMR].original);
  });
}
var skip_forward_default = Skip_forward;

// node_modules/lucide-svelte/dist/icons/skull.svelte
Skull[FILENAME] = "node_modules/lucide-svelte/dist/icons/skull.svelte";
function Skull($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Skull);
  const iconNode = [
    ["path", { "d": "m12.5 17-.5-1-.5 1h1z" }],
    [
      "path",
      {
        "d": "M15 22a1 1 0 0 0 1-1v-1a2 2 0 0 0 1.56-3.25 8 8 0 1 0-11.12 0A2 2 0 0 0 8 20v1a1 1 0 0 0 1 1z"
      }
    ],
    ["circle", { "cx": "15", "cy": "12", "r": "1" }],
    ["circle", { "cx": "9", "cy": "12", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "skull" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Skull, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Skull,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Skull = hmr(Skull, () => Skull[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Skull[HMR].source;
    set(Skull[HMR].source, module.default[HMR].original);
  });
}
var skull_default = Skull;

// node_modules/lucide-svelte/dist/icons/slack.svelte
Slack[FILENAME] = "node_modules/lucide-svelte/dist/icons/slack.svelte";
function Slack($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Slack);
  const iconNode = [
    [
      "rect",
      {
        "width": "3",
        "height": "8",
        "x": "13",
        "y": "2",
        "rx": "1.5"
      }
    ],
    ["path", { "d": "M19 8.5V10h1.5A1.5 1.5 0 1 0 19 8.5" }],
    [
      "rect",
      {
        "width": "3",
        "height": "8",
        "x": "8",
        "y": "14",
        "rx": "1.5"
      }
    ],
    ["path", { "d": "M5 15.5V14H3.5A1.5 1.5 0 1 0 5 15.5" }],
    [
      "rect",
      {
        "width": "8",
        "height": "3",
        "x": "14",
        "y": "13",
        "rx": "1.5"
      }
    ],
    ["path", { "d": "M15.5 19H14v1.5a1.5 1.5 0 1 0 1.5-1.5" }],
    [
      "rect",
      { "width": "8", "height": "3", "x": "2", "y": "8", "rx": "1.5" }
    ],
    ["path", { "d": "M8.5 5H10V3.5A1.5 1.5 0 1 0 8.5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "slack" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Slack, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Slack,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Slack = hmr(Slack, () => Slack[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Slack[HMR].source;
    set(Slack[HMR].source, module.default[HMR].original);
  });
}
var slack_default = Slack;

// node_modules/lucide-svelte/dist/icons/slash.svelte
Slash[FILENAME] = "node_modules/lucide-svelte/dist/icons/slash.svelte";
function Slash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Slash);
  const iconNode = [["path", { "d": "M22 2 2 22" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "slash" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Slash, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Slash,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Slash = hmr(Slash, () => Slash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Slash[HMR].source;
    set(Slash[HMR].source, module.default[HMR].original);
  });
}
var slash_default = Slash;

// node_modules/lucide-svelte/dist/icons/slice.svelte
Slice[FILENAME] = "node_modules/lucide-svelte/dist/icons/slice.svelte";
function Slice($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Slice);
  const iconNode = [
    [
      "path",
      {
        "d": "M11 16.586V19a1 1 0 0 1-1 1H2L18.37 3.63a1 1 0 1 1 3 3l-9.663 9.663a1 1 0 0 1-1.414 0L8 14"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "slice" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Slice, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Slice,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Slice = hmr(Slice, () => Slice[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Slice[HMR].source;
    set(Slice[HMR].source, module.default[HMR].original);
  });
}
var slice_default = Slice;

// node_modules/lucide-svelte/dist/icons/sliders-horizontal.svelte
Sliders_horizontal[FILENAME] = "node_modules/lucide-svelte/dist/icons/sliders-horizontal.svelte";
function Sliders_horizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sliders_horizontal);
  const iconNode = [
    ["line", { "x1": "21", "x2": "14", "y1": "4", "y2": "4" }],
    ["line", { "x1": "10", "x2": "3", "y1": "4", "y2": "4" }],
    ["line", { "x1": "21", "x2": "12", "y1": "12", "y2": "12" }],
    ["line", { "x1": "8", "x2": "3", "y1": "12", "y2": "12" }],
    ["line", { "x1": "21", "x2": "16", "y1": "20", "y2": "20" }],
    ["line", { "x1": "12", "x2": "3", "y1": "20", "y2": "20" }],
    ["line", { "x1": "14", "x2": "14", "y1": "2", "y2": "6" }],
    ["line", { "x1": "8", "x2": "8", "y1": "10", "y2": "14" }],
    ["line", { "x1": "16", "x2": "16", "y1": "18", "y2": "22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sliders-horizontal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sliders_horizontal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sliders_horizontal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sliders_horizontal = hmr(Sliders_horizontal, () => Sliders_horizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sliders_horizontal[HMR].source;
    set(Sliders_horizontal[HMR].source, module.default[HMR].original);
  });
}
var sliders_horizontal_default = Sliders_horizontal;

// node_modules/lucide-svelte/dist/icons/sliders-vertical.svelte
Sliders_vertical[FILENAME] = "node_modules/lucide-svelte/dist/icons/sliders-vertical.svelte";
function Sliders_vertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sliders_vertical);
  const iconNode = [
    ["line", { "x1": "4", "x2": "4", "y1": "21", "y2": "14" }],
    ["line", { "x1": "4", "x2": "4", "y1": "10", "y2": "3" }],
    ["line", { "x1": "12", "x2": "12", "y1": "21", "y2": "12" }],
    ["line", { "x1": "12", "x2": "12", "y1": "8", "y2": "3" }],
    ["line", { "x1": "20", "x2": "20", "y1": "21", "y2": "16" }],
    ["line", { "x1": "20", "x2": "20", "y1": "12", "y2": "3" }],
    ["line", { "x1": "2", "x2": "6", "y1": "14", "y2": "14" }],
    ["line", { "x1": "10", "x2": "14", "y1": "8", "y2": "8" }],
    ["line", { "x1": "18", "x2": "22", "y1": "16", "y2": "16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sliders-vertical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sliders_vertical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sliders_vertical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sliders_vertical = hmr(Sliders_vertical, () => Sliders_vertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sliders_vertical[HMR].source;
    set(Sliders_vertical[HMR].source, module.default[HMR].original);
  });
}
var sliders_vertical_default = Sliders_vertical;

// node_modules/lucide-svelte/dist/icons/smartphone-charging.svelte
Smartphone_charging[FILENAME] = "node_modules/lucide-svelte/dist/icons/smartphone-charging.svelte";
function Smartphone_charging($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Smartphone_charging);
  const iconNode = [
    [
      "rect",
      {
        "width": "14",
        "height": "20",
        "x": "5",
        "y": "2",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["path", { "d": "M12.667 8 10 12h4l-2.667 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "smartphone-charging" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Smartphone_charging, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Smartphone_charging,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Smartphone_charging = hmr(Smartphone_charging, () => Smartphone_charging[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Smartphone_charging[HMR].source;
    set(Smartphone_charging[HMR].source, module.default[HMR].original);
  });
}
var smartphone_charging_default = Smartphone_charging;

// node_modules/lucide-svelte/dist/icons/smartphone-nfc.svelte
Smartphone_nfc[FILENAME] = "node_modules/lucide-svelte/dist/icons/smartphone-nfc.svelte";
function Smartphone_nfc($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Smartphone_nfc);
  const iconNode = [
    [
      "rect",
      { "width": "7", "height": "12", "x": "2", "y": "6", "rx": "1" }
    ],
    ["path", { "d": "M13 8.32a7.43 7.43 0 0 1 0 7.36" }],
    ["path", { "d": "M16.46 6.21a11.76 11.76 0 0 1 0 11.58" }],
    ["path", { "d": "M19.91 4.1a15.91 15.91 0 0 1 .01 15.8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "smartphone-nfc" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Smartphone_nfc, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Smartphone_nfc,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Smartphone_nfc = hmr(Smartphone_nfc, () => Smartphone_nfc[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Smartphone_nfc[HMR].source;
    set(Smartphone_nfc[HMR].source, module.default[HMR].original);
  });
}
var smartphone_nfc_default = Smartphone_nfc;

// node_modules/lucide-svelte/dist/icons/smartphone.svelte
Smartphone[FILENAME] = "node_modules/lucide-svelte/dist/icons/smartphone.svelte";
function Smartphone($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Smartphone);
  const iconNode = [
    [
      "rect",
      {
        "width": "14",
        "height": "20",
        "x": "5",
        "y": "2",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["path", { "d": "M12 18h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "smartphone" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Smartphone, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Smartphone,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Smartphone = hmr(Smartphone, () => Smartphone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Smartphone[HMR].source;
    set(Smartphone[HMR].source, module.default[HMR].original);
  });
}
var smartphone_default = Smartphone;

// node_modules/lucide-svelte/dist/icons/smile-plus.svelte
Smile_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/smile-plus.svelte";
function Smile_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Smile_plus);
  const iconNode = [
    ["path", { "d": "M22 11v1a10 10 0 1 1-9-10" }],
    ["path", { "d": "M8 14s1.5 2 4 2 4-2 4-2" }],
    ["line", { "x1": "9", "x2": "9.01", "y1": "9", "y2": "9" }],
    ["line", { "x1": "15", "x2": "15.01", "y1": "9", "y2": "9" }],
    ["path", { "d": "M16 5h6" }],
    ["path", { "d": "M19 2v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "smile-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Smile_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Smile_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Smile_plus = hmr(Smile_plus, () => Smile_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Smile_plus[HMR].source;
    set(Smile_plus[HMR].source, module.default[HMR].original);
  });
}
var smile_plus_default = Smile_plus;

// node_modules/lucide-svelte/dist/icons/smile.svelte
Smile[FILENAME] = "node_modules/lucide-svelte/dist/icons/smile.svelte";
function Smile($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Smile);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["path", { "d": "M8 14s1.5 2 4 2 4-2 4-2" }],
    ["line", { "x1": "9", "x2": "9.01", "y1": "9", "y2": "9" }],
    ["line", { "x1": "15", "x2": "15.01", "y1": "9", "y2": "9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "smile" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Smile, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Smile,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Smile = hmr(Smile, () => Smile[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Smile[HMR].source;
    set(Smile[HMR].source, module.default[HMR].original);
  });
}
var smile_default = Smile;

// node_modules/lucide-svelte/dist/icons/snail.svelte
Snail[FILENAME] = "node_modules/lucide-svelte/dist/icons/snail.svelte";
function Snail($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Snail);
  const iconNode = [
    [
      "path",
      { "d": "M2 13a6 6 0 1 0 12 0 4 4 0 1 0-8 0 2 2 0 0 0 4 0" }
    ],
    ["circle", { "cx": "10", "cy": "13", "r": "8" }],
    [
      "path",
      { "d": "M2 21h12c4.4 0 8-3.6 8-8V7a2 2 0 1 0-4 0v6" }
    ],
    ["path", { "d": "M18 3 19.1 5.2" }],
    ["path", { "d": "M22 3 20.9 5.2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "snail" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Snail, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Snail,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Snail = hmr(Snail, () => Snail[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Snail[HMR].source;
    set(Snail[HMR].source, module.default[HMR].original);
  });
}
var snail_default = Snail;

// node_modules/lucide-svelte/dist/icons/snowflake.svelte
Snowflake[FILENAME] = "node_modules/lucide-svelte/dist/icons/snowflake.svelte";
function Snowflake($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Snowflake);
  const iconNode = [
    ["path", { "d": "m10 20-1.25-2.5L6 18" }],
    ["path", { "d": "M10 4 8.75 6.5 6 6" }],
    ["path", { "d": "m14 20 1.25-2.5L18 18" }],
    ["path", { "d": "m14 4 1.25 2.5L18 6" }],
    ["path", { "d": "m17 21-3-6h-4" }],
    ["path", { "d": "m17 3-3 6 1.5 3" }],
    ["path", { "d": "M2 12h6.5L10 9" }],
    ["path", { "d": "m20 10-1.5 2 1.5 2" }],
    ["path", { "d": "M22 12h-6.5L14 15" }],
    ["path", { "d": "m4 10 1.5 2L4 14" }],
    ["path", { "d": "m7 21 3-6-1.5-3" }],
    ["path", { "d": "m7 3 3 6h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "snowflake" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Snowflake, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Snowflake,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Snowflake = hmr(Snowflake, () => Snowflake[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Snowflake[HMR].source;
    set(Snowflake[HMR].source, module.default[HMR].original);
  });
}
var snowflake_default = Snowflake;

// node_modules/lucide-svelte/dist/icons/soap-dispenser-droplet.svelte
Soap_dispenser_droplet[FILENAME] = "node_modules/lucide-svelte/dist/icons/soap-dispenser-droplet.svelte";
function Soap_dispenser_droplet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Soap_dispenser_droplet);
  const iconNode = [
    ["path", { "d": "M10.5 2v4" }],
    ["path", { "d": "M14 2H7a2 2 0 0 0-2 2" }],
    [
      "path",
      {
        "d": "M19.29 14.76A6.67 6.67 0 0 1 17 11a6.6 6.6 0 0 1-2.29 3.76c-1.15.92-1.71 2.04-1.71 3.19 0 2.22 1.8 4.05 4 4.05s4-1.83 4-4.05c0-1.16-.57-2.26-1.71-3.19"
      }
    ],
    [
      "path",
      {
        "d": "M9.607 21H6a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h7V7a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v3"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "soap-dispenser-droplet" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Soap_dispenser_droplet, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Soap_dispenser_droplet,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Soap_dispenser_droplet = hmr(Soap_dispenser_droplet, () => Soap_dispenser_droplet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Soap_dispenser_droplet[HMR].source;
    set(Soap_dispenser_droplet[HMR].source, module.default[HMR].original);
  });
}
var soap_dispenser_droplet_default = Soap_dispenser_droplet;

// node_modules/lucide-svelte/dist/icons/sofa.svelte
Sofa[FILENAME] = "node_modules/lucide-svelte/dist/icons/sofa.svelte";
function Sofa($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sofa);
  const iconNode = [
    ["path", { "d": "M20 9V6a2 2 0 0 0-2-2H6a2 2 0 0 0-2 2v3" }],
    [
      "path",
      {
        "d": "M2 16a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-5a2 2 0 0 0-4 0v1.5a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5V11a2 2 0 0 0-4 0z"
      }
    ],
    ["path", { "d": "M4 18v2" }],
    ["path", { "d": "M20 18v2" }],
    ["path", { "d": "M12 4v9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sofa" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sofa, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sofa,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sofa = hmr(Sofa, () => Sofa[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sofa[HMR].source;
    set(Sofa[HMR].source, module.default[HMR].original);
  });
}
var sofa_default = Sofa;

// node_modules/lucide-svelte/dist/icons/soup.svelte
Soup[FILENAME] = "node_modules/lucide-svelte/dist/icons/soup.svelte";
function Soup($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Soup);
  const iconNode = [
    ["path", { "d": "M12 21a9 9 0 0 0 9-9H3a9 9 0 0 0 9 9Z" }],
    ["path", { "d": "M7 21h10" }],
    ["path", { "d": "M19.5 12 22 6" }],
    [
      "path",
      {
        "d": "M16.25 3c.27.1.8.53.75 1.36-.06.83-.93 1.2-1 2.02-.05.78.34 1.24.73 1.62"
      }
    ],
    [
      "path",
      {
        "d": "M11.25 3c.27.1.8.53.74 1.36-.05.83-.93 1.2-.98 2.02-.06.78.33 1.24.72 1.62"
      }
    ],
    [
      "path",
      {
        "d": "M6.25 3c.27.1.8.53.75 1.36-.06.83-.93 1.2-1 2.02-.05.78.34 1.24.74 1.62"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "soup" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Soup, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Soup,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Soup = hmr(Soup, () => Soup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Soup[HMR].source;
    set(Soup[HMR].source, module.default[HMR].original);
  });
}
var soup_default = Soup;

// node_modules/lucide-svelte/dist/icons/space.svelte
Space[FILENAME] = "node_modules/lucide-svelte/dist/icons/space.svelte";
function Space($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Space);
  const iconNode = [
    [
      "path",
      { "d": "M22 17v1c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "space" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Space, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Space,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Space = hmr(Space, () => Space[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Space[HMR].source;
    set(Space[HMR].source, module.default[HMR].original);
  });
}
var space_default = Space;

// node_modules/lucide-svelte/dist/icons/spade.svelte
Spade[FILENAME] = "node_modules/lucide-svelte/dist/icons/spade.svelte";
function Spade($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Spade);
  const iconNode = [
    [
      "path",
      {
        "d": "M5 9c-1.5 1.5-3 3.2-3 5.5A5.5 5.5 0 0 0 7.5 20c1.8 0 3-.5 4.5-2 1.5 1.5 2.7 2 4.5 2a5.5 5.5 0 0 0 5.5-5.5c0-2.3-1.5-4-3-5.5l-7-7-7 7Z"
      }
    ],
    ["path", { "d": "M12 18v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "spade" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Spade, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Spade,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Spade = hmr(Spade, () => Spade[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Spade[HMR].source;
    set(Spade[HMR].source, module.default[HMR].original);
  });
}
var spade_default = Spade;

// node_modules/lucide-svelte/dist/icons/sparkle.svelte
Sparkle[FILENAME] = "node_modules/lucide-svelte/dist/icons/sparkle.svelte";
function Sparkle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sparkle);
  const iconNode = [
    [
      "path",
      {
        "d": "M11.017 2.814a1 1 0 0 1 1.966 0l1.051 5.558a2 2 0 0 0 1.594 1.594l5.558 1.051a1 1 0 0 1 0 1.966l-5.558 1.051a2 2 0 0 0-1.594 1.594l-1.051 5.558a1 1 0 0 1-1.966 0l-1.051-5.558a2 2 0 0 0-1.594-1.594l-5.558-1.051a1 1 0 0 1 0-1.966l5.558-1.051a2 2 0 0 0 1.594-1.594z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sparkle" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sparkle, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sparkle,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sparkle = hmr(Sparkle, () => Sparkle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sparkle[HMR].source;
    set(Sparkle[HMR].source, module.default[HMR].original);
  });
}
var sparkle_default = Sparkle;

// node_modules/lucide-svelte/dist/icons/sparkles.svelte
Sparkles[FILENAME] = "node_modules/lucide-svelte/dist/icons/sparkles.svelte";
function Sparkles($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sparkles);
  const iconNode = [
    [
      "path",
      {
        "d": "M11.017 2.814a1 1 0 0 1 1.966 0l1.051 5.558a2 2 0 0 0 1.594 1.594l5.558 1.051a1 1 0 0 1 0 1.966l-5.558 1.051a2 2 0 0 0-1.594 1.594l-1.051 5.558a1 1 0 0 1-1.966 0l-1.051-5.558a2 2 0 0 0-1.594-1.594l-5.558-1.051a1 1 0 0 1 0-1.966l5.558-1.051a2 2 0 0 0 1.594-1.594z"
      }
    ],
    ["path", { "d": "M20 2v4" }],
    ["path", { "d": "M22 4h-4" }],
    ["circle", { "cx": "4", "cy": "20", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sparkles" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sparkles, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sparkles,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sparkles = hmr(Sparkles, () => Sparkles[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sparkles[HMR].source;
    set(Sparkles[HMR].source, module.default[HMR].original);
  });
}
var sparkles_default = Sparkles;

// node_modules/lucide-svelte/dist/icons/speaker.svelte
Speaker[FILENAME] = "node_modules/lucide-svelte/dist/icons/speaker.svelte";
function Speaker($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Speaker);
  const iconNode = [
    [
      "rect",
      { "width": "16", "height": "20", "x": "4", "y": "2", "rx": "2" }
    ],
    ["path", { "d": "M12 6h.01" }],
    ["circle", { "cx": "12", "cy": "14", "r": "4" }],
    ["path", { "d": "M12 14h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "speaker" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Speaker, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Speaker,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Speaker = hmr(Speaker, () => Speaker[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Speaker[HMR].source;
    set(Speaker[HMR].source, module.default[HMR].original);
  });
}
var speaker_default = Speaker;

// node_modules/lucide-svelte/dist/icons/speech.svelte
Speech[FILENAME] = "node_modules/lucide-svelte/dist/icons/speech.svelte";
function Speech($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Speech);
  const iconNode = [
    [
      "path",
      {
        "d": "M8.8 20v-4.1l1.9.2a2.3 2.3 0 0 0 2.164-2.1V8.3A5.37 5.37 0 0 0 2 8.25c0 2.8.656 3.054 1 4.55a5.77 5.77 0 0 1 .029 2.758L2 20"
      }
    ],
    ["path", { "d": "M19.8 17.8a7.5 7.5 0 0 0 .003-10.603" }],
    ["path", { "d": "M17 15a3.5 3.5 0 0 0-.025-4.975" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "speech" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Speech, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Speech,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Speech = hmr(Speech, () => Speech[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Speech[HMR].source;
    set(Speech[HMR].source, module.default[HMR].original);
  });
}
var speech_default = Speech;

// node_modules/lucide-svelte/dist/icons/spell-check-2.svelte
Spell_check_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/spell-check-2.svelte";
function Spell_check_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Spell_check_2);
  const iconNode = [
    ["path", { "d": "m6 16 6-12 6 12" }],
    ["path", { "d": "M8 12h8" }],
    [
      "path",
      {
        "d": "M4 21c1.1 0 1.1-1 2.3-1s1.1 1 2.3 1c1.1 0 1.1-1 2.3-1 1.1 0 1.1 1 2.3 1 1.1 0 1.1-1 2.3-1 1.1 0 1.1 1 2.3 1 1.1 0 1.1-1 2.3-1"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "spell-check-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Spell_check_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Spell_check_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Spell_check_2 = hmr(Spell_check_2, () => Spell_check_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Spell_check_2[HMR].source;
    set(Spell_check_2[HMR].source, module.default[HMR].original);
  });
}
var spell_check_2_default = Spell_check_2;

// node_modules/lucide-svelte/dist/icons/spell-check.svelte
Spell_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/spell-check.svelte";
function Spell_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Spell_check);
  const iconNode = [
    ["path", { "d": "m6 16 6-12 6 12" }],
    ["path", { "d": "M8 12h8" }],
    ["path", { "d": "m16 20 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "spell-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Spell_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Spell_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Spell_check = hmr(Spell_check, () => Spell_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Spell_check[HMR].source;
    set(Spell_check[HMR].source, module.default[HMR].original);
  });
}
var spell_check_default = Spell_check;

// node_modules/lucide-svelte/dist/icons/spline-pointer.svelte
Spline_pointer[FILENAME] = "node_modules/lucide-svelte/dist/icons/spline-pointer.svelte";
function Spline_pointer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Spline_pointer);
  const iconNode = [
    [
      "path",
      {
        "d": "M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z"
      }
    ],
    ["path", { "d": "M5 17A12 12 0 0 1 17 5" }],
    ["circle", { "cx": "19", "cy": "5", "r": "2" }],
    ["circle", { "cx": "5", "cy": "19", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "spline-pointer" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Spline_pointer, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Spline_pointer,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Spline_pointer = hmr(Spline_pointer, () => Spline_pointer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Spline_pointer[HMR].source;
    set(Spline_pointer[HMR].source, module.default[HMR].original);
  });
}
var spline_pointer_default = Spline_pointer;

// node_modules/lucide-svelte/dist/icons/spline.svelte
Spline[FILENAME] = "node_modules/lucide-svelte/dist/icons/spline.svelte";
function Spline($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Spline);
  const iconNode = [
    ["circle", { "cx": "19", "cy": "5", "r": "2" }],
    ["circle", { "cx": "5", "cy": "19", "r": "2" }],
    ["path", { "d": "M5 17A12 12 0 0 1 17 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "spline" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Spline, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Spline,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Spline = hmr(Spline, () => Spline[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Spline[HMR].source;
    set(Spline[HMR].source, module.default[HMR].original);
  });
}
var spline_default = Spline;

// node_modules/lucide-svelte/dist/icons/split.svelte
Split[FILENAME] = "node_modules/lucide-svelte/dist/icons/split.svelte";
function Split($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Split);
  const iconNode = [
    ["path", { "d": "M16 3h5v5" }],
    ["path", { "d": "M8 3H3v5" }],
    ["path", { "d": "M12 22v-8.3a4 4 0 0 0-1.172-2.872L3 3" }],
    ["path", { "d": "m15 9 6-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "split" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Split, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Split,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Split = hmr(Split, () => Split[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Split[HMR].source;
    set(Split[HMR].source, module.default[HMR].original);
  });
}
var split_default = Split;

// node_modules/lucide-svelte/dist/icons/spool.svelte
Spool[FILENAME] = "node_modules/lucide-svelte/dist/icons/spool.svelte";
function Spool($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Spool);
  const iconNode = [
    [
      "path",
      {
        "d": "M17 13.44 4.442 17.082A2 2 0 0 0 4.982 21H19a2 2 0 0 0 .558-3.921l-1.115-.32A2 2 0 0 1 17 14.837V7.66"
      }
    ],
    [
      "path",
      {
        "d": "m7 10.56 12.558-3.642A2 2 0 0 0 19.018 3H5a2 2 0 0 0-.558 3.921l1.115.32A2 2 0 0 1 7 9.163v7.178"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "spool" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Spool, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Spool,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Spool = hmr(Spool, () => Spool[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Spool[HMR].source;
    set(Spool[HMR].source, module.default[HMR].original);
  });
}
var spool_default = Spool;

// node_modules/lucide-svelte/dist/icons/spotlight.svelte
Spotlight[FILENAME] = "node_modules/lucide-svelte/dist/icons/spotlight.svelte";
function Spotlight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Spotlight);
  const iconNode = [
    ["path", { "d": "M15.295 19.562 16 22" }],
    ["path", { "d": "m17 16 3.758 2.098" }],
    ["path", { "d": "m19 12.5 3.026-.598" }],
    [
      "path",
      {
        "d": "M7.61 6.3a3 3 0 0 0-3.92 1.3l-1.38 2.79a3 3 0 0 0 1.3 3.91l6.89 3.597a1 1 0 0 0 1.342-.447l3.106-6.211a1 1 0 0 0-.447-1.341z"
      }
    ],
    ["path", { "d": "M8 9V2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "spotlight" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Spotlight, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Spotlight,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Spotlight = hmr(Spotlight, () => Spotlight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Spotlight[HMR].source;
    set(Spotlight[HMR].source, module.default[HMR].original);
  });
}
var spotlight_default = Spotlight;

// node_modules/lucide-svelte/dist/icons/spray-can.svelte
Spray_can[FILENAME] = "node_modules/lucide-svelte/dist/icons/spray-can.svelte";
function Spray_can($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Spray_can);
  const iconNode = [
    ["path", { "d": "M3 3h.01" }],
    ["path", { "d": "M7 5h.01" }],
    ["path", { "d": "M11 7h.01" }],
    ["path", { "d": "M3 7h.01" }],
    ["path", { "d": "M7 9h.01" }],
    ["path", { "d": "M3 11h.01" }],
    ["rect", { "width": "4", "height": "4", "x": "15", "y": "5" }],
    [
      "path",
      { "d": "m19 9 2 2v10c0 .6-.4 1-1 1h-6c-.6 0-1-.4-1-1V11l2-2" }
    ],
    ["path", { "d": "m13 14 8-2" }],
    ["path", { "d": "m13 19 8-2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "spray-can" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Spray_can, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Spray_can,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Spray_can = hmr(Spray_can, () => Spray_can[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Spray_can[HMR].source;
    set(Spray_can[HMR].source, module.default[HMR].original);
  });
}
var spray_can_default = Spray_can;

// node_modules/lucide-svelte/dist/icons/sprout.svelte
Sprout[FILENAME] = "node_modules/lucide-svelte/dist/icons/sprout.svelte";
function Sprout($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sprout);
  const iconNode = [
    [
      "path",
      {
        "d": "M14 9.536V7a4 4 0 0 1 4-4h1.5a.5.5 0 0 1 .5.5V5a4 4 0 0 1-4 4 4 4 0 0 0-4 4c0 2 1 3 1 5a5 5 0 0 1-1 3"
      }
    ],
    ["path", { "d": "M4 9a5 5 0 0 1 8 4 5 5 0 0 1-8-4" }],
    ["path", { "d": "M5 21h14" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sprout" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sprout, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sprout,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sprout = hmr(Sprout, () => Sprout[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sprout[HMR].source;
    set(Sprout[HMR].source, module.default[HMR].original);
  });
}
var sprout_default = Sprout;

// node_modules/lucide-svelte/dist/icons/square-activity.svelte
Square_activity[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-activity.svelte";
function Square_activity($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_activity);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M17 12h-2l-2 5-2-10-2 5H7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-activity" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_activity, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_activity,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_activity = hmr(Square_activity, () => Square_activity[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_activity[HMR].source;
    set(Square_activity[HMR].source, module.default[HMR].original);
  });
}
var square_activity_default = Square_activity;

// node_modules/lucide-svelte/dist/icons/square-arrow-down-left.svelte
Square_arrow_down_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-arrow-down-left.svelte";
function Square_arrow_down_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_arrow_down_left);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "m16 8-8 8" }],
    ["path", { "d": "M16 16H8V8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-arrow-down-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_arrow_down_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_arrow_down_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_arrow_down_left = hmr(Square_arrow_down_left, () => Square_arrow_down_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_arrow_down_left[HMR].source;
    set(Square_arrow_down_left[HMR].source, module.default[HMR].original);
  });
}
var square_arrow_down_left_default = Square_arrow_down_left;

// node_modules/lucide-svelte/dist/icons/square-arrow-down-right.svelte
Square_arrow_down_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-arrow-down-right.svelte";
function Square_arrow_down_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_arrow_down_right);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "m8 8 8 8" }],
    ["path", { "d": "M16 8v8H8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-arrow-down-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_arrow_down_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_arrow_down_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_arrow_down_right = hmr(Square_arrow_down_right, () => Square_arrow_down_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_arrow_down_right[HMR].source;
    set(Square_arrow_down_right[HMR].source, module.default[HMR].original);
  });
}
var square_arrow_down_right_default = Square_arrow_down_right;

// node_modules/lucide-svelte/dist/icons/square-arrow-down.svelte
Square_arrow_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-arrow-down.svelte";
function Square_arrow_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_arrow_down);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M12 8v8" }],
    ["path", { "d": "m8 12 4 4 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-arrow-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_arrow_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_arrow_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_arrow_down = hmr(Square_arrow_down, () => Square_arrow_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_arrow_down[HMR].source;
    set(Square_arrow_down[HMR].source, module.default[HMR].original);
  });
}
var square_arrow_down_default = Square_arrow_down;

// node_modules/lucide-svelte/dist/icons/square-arrow-left.svelte
Square_arrow_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-arrow-left.svelte";
function Square_arrow_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_arrow_left);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "m12 8-4 4 4 4" }],
    ["path", { "d": "M16 12H8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-arrow-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_arrow_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_arrow_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_arrow_left = hmr(Square_arrow_left, () => Square_arrow_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_arrow_left[HMR].source;
    set(Square_arrow_left[HMR].source, module.default[HMR].original);
  });
}
var square_arrow_left_default = Square_arrow_left;

// node_modules/lucide-svelte/dist/icons/square-arrow-out-down-left.svelte
Square_arrow_out_down_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-arrow-out-down-left.svelte";
function Square_arrow_out_down_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_arrow_out_down_left);
  const iconNode = [
    [
      "path",
      {
        "d": "M13 21h6a2 2 0 0 0 2-2V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v6"
      }
    ],
    ["path", { "d": "m3 21 9-9" }],
    ["path", { "d": "M9 21H3v-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-arrow-out-down-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_arrow_out_down_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_arrow_out_down_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_arrow_out_down_left = hmr(Square_arrow_out_down_left, () => Square_arrow_out_down_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_arrow_out_down_left[HMR].source;
    set(Square_arrow_out_down_left[HMR].source, module.default[HMR].original);
  });
}
var square_arrow_out_down_left_default = Square_arrow_out_down_left;

// node_modules/lucide-svelte/dist/icons/square-arrow-out-down-right.svelte
Square_arrow_out_down_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-arrow-out-down-right.svelte";
function Square_arrow_out_down_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_arrow_out_down_right);
  const iconNode = [
    [
      "path",
      {
        "d": "M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6"
      }
    ],
    ["path", { "d": "m21 21-9-9" }],
    ["path", { "d": "M21 15v6h-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-arrow-out-down-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_arrow_out_down_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_arrow_out_down_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_arrow_out_down_right = hmr(Square_arrow_out_down_right, () => Square_arrow_out_down_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_arrow_out_down_right[HMR].source;
    set(Square_arrow_out_down_right[HMR].source, module.default[HMR].original);
  });
}
var square_arrow_out_down_right_default = Square_arrow_out_down_right;

// node_modules/lucide-svelte/dist/icons/square-arrow-out-up-left.svelte
Square_arrow_out_up_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-arrow-out-up-left.svelte";
function Square_arrow_out_up_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_arrow_out_up_left);
  const iconNode = [
    [
      "path",
      {
        "d": "M13 3h6a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-6"
      }
    ],
    ["path", { "d": "m3 3 9 9" }],
    ["path", { "d": "M3 9V3h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-arrow-out-up-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_arrow_out_up_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_arrow_out_up_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_arrow_out_up_left = hmr(Square_arrow_out_up_left, () => Square_arrow_out_up_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_arrow_out_up_left[HMR].source;
    set(Square_arrow_out_up_left[HMR].source, module.default[HMR].original);
  });
}
var square_arrow_out_up_left_default = Square_arrow_out_up_left;

// node_modules/lucide-svelte/dist/icons/square-arrow-out-up-right.svelte
Square_arrow_out_up_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-arrow-out-up-right.svelte";
function Square_arrow_out_up_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_arrow_out_up_right);
  const iconNode = [
    [
      "path",
      {
        "d": "M21 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h6"
      }
    ],
    ["path", { "d": "m21 3-9 9" }],
    ["path", { "d": "M15 3h6v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-arrow-out-up-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_arrow_out_up_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_arrow_out_up_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_arrow_out_up_right = hmr(Square_arrow_out_up_right, () => Square_arrow_out_up_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_arrow_out_up_right[HMR].source;
    set(Square_arrow_out_up_right[HMR].source, module.default[HMR].original);
  });
}
var square_arrow_out_up_right_default = Square_arrow_out_up_right;

// node_modules/lucide-svelte/dist/icons/square-arrow-right.svelte
Square_arrow_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-arrow-right.svelte";
function Square_arrow_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_arrow_right);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M8 12h8" }],
    ["path", { "d": "m12 16 4-4-4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-arrow-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_arrow_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_arrow_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_arrow_right = hmr(Square_arrow_right, () => Square_arrow_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_arrow_right[HMR].source;
    set(Square_arrow_right[HMR].source, module.default[HMR].original);
  });
}
var square_arrow_right_default = Square_arrow_right;

// node_modules/lucide-svelte/dist/icons/square-arrow-up-left.svelte
Square_arrow_up_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-arrow-up-left.svelte";
function Square_arrow_up_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_arrow_up_left);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M8 16V8h8" }],
    ["path", { "d": "M16 16 8 8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-arrow-up-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_arrow_up_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_arrow_up_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_arrow_up_left = hmr(Square_arrow_up_left, () => Square_arrow_up_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_arrow_up_left[HMR].source;
    set(Square_arrow_up_left[HMR].source, module.default[HMR].original);
  });
}
var square_arrow_up_left_default = Square_arrow_up_left;

// node_modules/lucide-svelte/dist/icons/square-arrow-up-right.svelte
Square_arrow_up_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-arrow-up-right.svelte";
function Square_arrow_up_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_arrow_up_right);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M8 8h8v8" }],
    ["path", { "d": "m8 16 8-8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-arrow-up-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_arrow_up_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_arrow_up_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_arrow_up_right = hmr(Square_arrow_up_right, () => Square_arrow_up_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_arrow_up_right[HMR].source;
    set(Square_arrow_up_right[HMR].source, module.default[HMR].original);
  });
}
var square_arrow_up_right_default = Square_arrow_up_right;

// node_modules/lucide-svelte/dist/icons/square-arrow-up.svelte
Square_arrow_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-arrow-up.svelte";
function Square_arrow_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_arrow_up);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "m16 12-4-4-4 4" }],
    ["path", { "d": "M12 16V8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-arrow-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_arrow_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_arrow_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_arrow_up = hmr(Square_arrow_up, () => Square_arrow_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_arrow_up[HMR].source;
    set(Square_arrow_up[HMR].source, module.default[HMR].original);
  });
}
var square_arrow_up_default = Square_arrow_up;

// node_modules/lucide-svelte/dist/icons/square-asterisk.svelte
Square_asterisk[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-asterisk.svelte";
function Square_asterisk($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_asterisk);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M12 8v8" }],
    ["path", { "d": "m8.5 14 7-4" }],
    ["path", { "d": "m8.5 10 7 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-asterisk" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_asterisk, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_asterisk,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_asterisk = hmr(Square_asterisk, () => Square_asterisk[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_asterisk[HMR].source;
    set(Square_asterisk[HMR].source, module.default[HMR].original);
  });
}
var square_asterisk_default = Square_asterisk;

// node_modules/lucide-svelte/dist/icons/square-bottom-dashed-scissors.svelte
Square_bottom_dashed_scissors[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-bottom-dashed-scissors.svelte";
function Square_bottom_dashed_scissors($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_bottom_dashed_scissors);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 22a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2"
      }
    ],
    ["path", { "d": "M10 22H8" }],
    ["path", { "d": "M16 22h-2" }],
    ["circle", { "cx": "8", "cy": "8", "r": "2" }],
    ["path", { "d": "M9.414 9.414 12 12" }],
    ["path", { "d": "M14.8 14.8 18 18" }],
    ["circle", { "cx": "8", "cy": "16", "r": "2" }],
    ["path", { "d": "m18 6-8.586 8.586" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-bottom-dashed-scissors" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_bottom_dashed_scissors, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_bottom_dashed_scissors,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_bottom_dashed_scissors = hmr(Square_bottom_dashed_scissors, () => Square_bottom_dashed_scissors[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_bottom_dashed_scissors[HMR].source;
    set(Square_bottom_dashed_scissors[HMR].source, module.default[HMR].original);
  });
}
var square_bottom_dashed_scissors_default = Square_bottom_dashed_scissors;

// node_modules/lucide-svelte/dist/icons/square-chart-gantt.svelte
Square_chart_gantt[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-chart-gantt.svelte";
function Square_chart_gantt($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_chart_gantt);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M9 8h7" }],
    ["path", { "d": "M8 12h6" }],
    ["path", { "d": "M11 16h5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-chart-gantt" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_chart_gantt, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_chart_gantt,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_chart_gantt = hmr(Square_chart_gantt, () => Square_chart_gantt[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_chart_gantt[HMR].source;
    set(Square_chart_gantt[HMR].source, module.default[HMR].original);
  });
}
var square_chart_gantt_default = Square_chart_gantt;

// node_modules/lucide-svelte/dist/icons/square-check-big.svelte
Square_check_big[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-check-big.svelte";
function Square_check_big($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_check_big);
  const iconNode = [
    [
      "path",
      {
        "d": "M21 10.656V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h12.344"
      }
    ],
    ["path", { "d": "m9 11 3 3L22 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-check-big" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_check_big, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_check_big,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_check_big = hmr(Square_check_big, () => Square_check_big[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_check_big[HMR].source;
    set(Square_check_big[HMR].source, module.default[HMR].original);
  });
}
var square_check_big_default = Square_check_big;

// node_modules/lucide-svelte/dist/icons/square-check.svelte
Square_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-check.svelte";
function Square_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_check);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "m9 12 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_check = hmr(Square_check, () => Square_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_check[HMR].source;
    set(Square_check[HMR].source, module.default[HMR].original);
  });
}
var square_check_default = Square_check;

// node_modules/lucide-svelte/dist/icons/square-chevron-down.svelte
Square_chevron_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-chevron-down.svelte";
function Square_chevron_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_chevron_down);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "m16 10-4 4-4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-chevron-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_chevron_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_chevron_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_chevron_down = hmr(Square_chevron_down, () => Square_chevron_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_chevron_down[HMR].source;
    set(Square_chevron_down[HMR].source, module.default[HMR].original);
  });
}
var square_chevron_down_default = Square_chevron_down;

// node_modules/lucide-svelte/dist/icons/square-chevron-left.svelte
Square_chevron_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-chevron-left.svelte";
function Square_chevron_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_chevron_left);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "m14 16-4-4 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-chevron-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_chevron_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_chevron_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_chevron_left = hmr(Square_chevron_left, () => Square_chevron_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_chevron_left[HMR].source;
    set(Square_chevron_left[HMR].source, module.default[HMR].original);
  });
}
var square_chevron_left_default = Square_chevron_left;

// node_modules/lucide-svelte/dist/icons/square-chevron-right.svelte
Square_chevron_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-chevron-right.svelte";
function Square_chevron_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_chevron_right);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "m10 8 4 4-4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-chevron-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_chevron_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_chevron_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_chevron_right = hmr(Square_chevron_right, () => Square_chevron_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_chevron_right[HMR].source;
    set(Square_chevron_right[HMR].source, module.default[HMR].original);
  });
}
var square_chevron_right_default = Square_chevron_right;

// node_modules/lucide-svelte/dist/icons/square-chevron-up.svelte
Square_chevron_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-chevron-up.svelte";
function Square_chevron_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_chevron_up);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "m8 14 4-4 4 4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-chevron-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_chevron_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_chevron_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_chevron_up = hmr(Square_chevron_up, () => Square_chevron_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_chevron_up[HMR].source;
    set(Square_chevron_up[HMR].source, module.default[HMR].original);
  });
}
var square_chevron_up_default = Square_chevron_up;

// node_modules/lucide-svelte/dist/icons/square-code.svelte
Square_code[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-code.svelte";
function Square_code($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_code);
  const iconNode = [
    ["path", { "d": "m10 9-3 3 3 3" }],
    ["path", { "d": "m14 15 3-3-3-3" }],
    [
      "rect",
      { "x": "3", "y": "3", "width": "18", "height": "18", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-code" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_code, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_code,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_code = hmr(Square_code, () => Square_code[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_code[HMR].source;
    set(Square_code[HMR].source, module.default[HMR].original);
  });
}
var square_code_default = Square_code;

// node_modules/lucide-svelte/dist/icons/square-dashed-bottom-code.svelte
Square_dashed_bottom_code[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-dashed-bottom-code.svelte";
function Square_dashed_bottom_code($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_dashed_bottom_code);
  const iconNode = [
    ["path", { "d": "M10 9.5 8 12l2 2.5" }],
    ["path", { "d": "M14 21h1" }],
    ["path", { "d": "m14 9.5 2 2.5-2 2.5" }],
    [
      "path",
      {
        "d": "M5 21a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2"
      }
    ],
    ["path", { "d": "M9 21h1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-dashed-bottom-code" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_dashed_bottom_code, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_dashed_bottom_code,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_dashed_bottom_code = hmr(Square_dashed_bottom_code, () => Square_dashed_bottom_code[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_dashed_bottom_code[HMR].source;
    set(Square_dashed_bottom_code[HMR].source, module.default[HMR].original);
  });
}
var square_dashed_bottom_code_default = Square_dashed_bottom_code;

// node_modules/lucide-svelte/dist/icons/square-dashed-bottom.svelte
Square_dashed_bottom[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-dashed-bottom.svelte";
function Square_dashed_bottom($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_dashed_bottom);
  const iconNode = [
    [
      "path",
      {
        "d": "M5 21a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2"
      }
    ],
    ["path", { "d": "M9 21h1" }],
    ["path", { "d": "M14 21h1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-dashed-bottom" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_dashed_bottom, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_dashed_bottom,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_dashed_bottom = hmr(Square_dashed_bottom, () => Square_dashed_bottom[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_dashed_bottom[HMR].source;
    set(Square_dashed_bottom[HMR].source, module.default[HMR].original);
  });
}
var square_dashed_bottom_default = Square_dashed_bottom;

// node_modules/lucide-svelte/dist/icons/square-dashed-kanban.svelte
Square_dashed_kanban[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-dashed-kanban.svelte";
function Square_dashed_kanban($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_dashed_kanban);
  const iconNode = [
    ["path", { "d": "M8 7v7" }],
    ["path", { "d": "M12 7v4" }],
    ["path", { "d": "M16 7v9" }],
    ["path", { "d": "M5 3a2 2 0 0 0-2 2" }],
    ["path", { "d": "M9 3h1" }],
    ["path", { "d": "M14 3h1" }],
    ["path", { "d": "M19 3a2 2 0 0 1 2 2" }],
    ["path", { "d": "M21 9v1" }],
    ["path", { "d": "M21 14v1" }],
    ["path", { "d": "M21 19a2 2 0 0 1-2 2" }],
    ["path", { "d": "M14 21h1" }],
    ["path", { "d": "M9 21h1" }],
    ["path", { "d": "M5 21a2 2 0 0 1-2-2" }],
    ["path", { "d": "M3 14v1" }],
    ["path", { "d": "M3 9v1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-dashed-kanban" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_dashed_kanban, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_dashed_kanban,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_dashed_kanban = hmr(Square_dashed_kanban, () => Square_dashed_kanban[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_dashed_kanban[HMR].source;
    set(Square_dashed_kanban[HMR].source, module.default[HMR].original);
  });
}
var square_dashed_kanban_default = Square_dashed_kanban;

// node_modules/lucide-svelte/dist/icons/square-dashed-mouse-pointer.svelte
Square_dashed_mouse_pointer[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-dashed-mouse-pointer.svelte";
function Square_dashed_mouse_pointer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_dashed_mouse_pointer);
  const iconNode = [
    [
      "path",
      {
        "d": "M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z"
      }
    ],
    ["path", { "d": "M5 3a2 2 0 0 0-2 2" }],
    ["path", { "d": "M19 3a2 2 0 0 1 2 2" }],
    ["path", { "d": "M5 21a2 2 0 0 1-2-2" }],
    ["path", { "d": "M9 3h1" }],
    ["path", { "d": "M9 21h2" }],
    ["path", { "d": "M14 3h1" }],
    ["path", { "d": "M3 9v1" }],
    ["path", { "d": "M21 9v2" }],
    ["path", { "d": "M3 14v1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-dashed-mouse-pointer" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_dashed_mouse_pointer, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_dashed_mouse_pointer,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_dashed_mouse_pointer = hmr(Square_dashed_mouse_pointer, () => Square_dashed_mouse_pointer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_dashed_mouse_pointer[HMR].source;
    set(Square_dashed_mouse_pointer[HMR].source, module.default[HMR].original);
  });
}
var square_dashed_mouse_pointer_default = Square_dashed_mouse_pointer;

// node_modules/lucide-svelte/dist/icons/square-dashed-top-solid.svelte
Square_dashed_top_solid[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-dashed-top-solid.svelte";
function Square_dashed_top_solid($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_dashed_top_solid);
  const iconNode = [
    ["path", { "d": "M14 21h1" }],
    ["path", { "d": "M21 14v1" }],
    ["path", { "d": "M21 19a2 2 0 0 1-2 2" }],
    ["path", { "d": "M21 9v1" }],
    ["path", { "d": "M3 14v1" }],
    ["path", { "d": "M3 5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2" }],
    ["path", { "d": "M3 9v1" }],
    ["path", { "d": "M5 21a2 2 0 0 1-2-2" }],
    ["path", { "d": "M9 21h1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-dashed-top-solid" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_dashed_top_solid, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_dashed_top_solid,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_dashed_top_solid = hmr(Square_dashed_top_solid, () => Square_dashed_top_solid[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_dashed_top_solid[HMR].source;
    set(Square_dashed_top_solid[HMR].source, module.default[HMR].original);
  });
}
var square_dashed_top_solid_default = Square_dashed_top_solid;

// node_modules/lucide-svelte/dist/icons/square-dashed.svelte
Square_dashed[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-dashed.svelte";
function Square_dashed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_dashed);
  const iconNode = [
    ["path", { "d": "M5 3a2 2 0 0 0-2 2" }],
    ["path", { "d": "M19 3a2 2 0 0 1 2 2" }],
    ["path", { "d": "M21 19a2 2 0 0 1-2 2" }],
    ["path", { "d": "M5 21a2 2 0 0 1-2-2" }],
    ["path", { "d": "M9 3h1" }],
    ["path", { "d": "M9 21h1" }],
    ["path", { "d": "M14 3h1" }],
    ["path", { "d": "M14 21h1" }],
    ["path", { "d": "M3 9v1" }],
    ["path", { "d": "M21 9v1" }],
    ["path", { "d": "M3 14v1" }],
    ["path", { "d": "M21 14v1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-dashed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_dashed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_dashed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_dashed = hmr(Square_dashed, () => Square_dashed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_dashed[HMR].source;
    set(Square_dashed[HMR].source, module.default[HMR].original);
  });
}
var square_dashed_default = Square_dashed;

// node_modules/lucide-svelte/dist/icons/square-divide.svelte
Square_divide[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-divide.svelte";
function Square_divide($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_divide);
  const iconNode = [
    [
      "rect",
      {
        "width": "18",
        "height": "18",
        "x": "3",
        "y": "3",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["line", { "x1": "8", "x2": "16", "y1": "12", "y2": "12" }],
    ["line", { "x1": "12", "x2": "12", "y1": "16", "y2": "16" }],
    ["line", { "x1": "12", "x2": "12", "y1": "8", "y2": "8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-divide" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_divide, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_divide,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_divide = hmr(Square_divide, () => Square_divide[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_divide[HMR].source;
    set(Square_divide[HMR].source, module.default[HMR].original);
  });
}
var square_divide_default = Square_divide;

// node_modules/lucide-svelte/dist/icons/square-dot.svelte
Square_dot[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-dot.svelte";
function Square_dot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_dot);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["circle", { "cx": "12", "cy": "12", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-dot" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_dot, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_dot,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_dot = hmr(Square_dot, () => Square_dot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_dot[HMR].source;
    set(Square_dot[HMR].source, module.default[HMR].original);
  });
}
var square_dot_default = Square_dot;

// node_modules/lucide-svelte/dist/icons/square-function.svelte
Square_function[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-function.svelte";
function Square_function($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_function);
  const iconNode = [
    [
      "rect",
      {
        "width": "18",
        "height": "18",
        "x": "3",
        "y": "3",
        "rx": "2",
        "ry": "2"
      }
    ],
    [
      "path",
      { "d": "M9 17c2 0 2.8-1 2.8-2.8V10c0-2 1-3.3 3.2-3" }
    ],
    ["path", { "d": "M9 11.2h5.7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-function" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_function, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_function,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_function = hmr(Square_function, () => Square_function[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_function[HMR].source;
    set(Square_function[HMR].source, module.default[HMR].original);
  });
}
var square_function_default = Square_function;

// node_modules/lucide-svelte/dist/icons/square-equal.svelte
Square_equal[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-equal.svelte";
function Square_equal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_equal);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M7 10h10" }],
    ["path", { "d": "M7 14h10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-equal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_equal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_equal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_equal = hmr(Square_equal, () => Square_equal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_equal[HMR].source;
    set(Square_equal[HMR].source, module.default[HMR].original);
  });
}
var square_equal_default = Square_equal;

// node_modules/lucide-svelte/dist/icons/square-kanban.svelte
Square_kanban[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-kanban.svelte";
function Square_kanban($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_kanban);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M8 7v7" }],
    ["path", { "d": "M12 7v4" }],
    ["path", { "d": "M16 7v9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-kanban" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_kanban, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_kanban,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_kanban = hmr(Square_kanban, () => Square_kanban[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_kanban[HMR].source;
    set(Square_kanban[HMR].source, module.default[HMR].original);
  });
}
var square_kanban_default = Square_kanban;

// node_modules/lucide-svelte/dist/icons/square-library.svelte
Square_library[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-library.svelte";
function Square_library($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_library);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M7 7v10" }],
    ["path", { "d": "M11 7v10" }],
    ["path", { "d": "m15 7 2 10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-library" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_library, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_library,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_library = hmr(Square_library, () => Square_library[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_library[HMR].source;
    set(Square_library[HMR].source, module.default[HMR].original);
  });
}
var square_library_default = Square_library;

// node_modules/lucide-svelte/dist/icons/square-m.svelte
Square_m[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-m.svelte";
function Square_m($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_m);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M8 16V8l4 4 4-4v8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-m" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_m, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_m,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_m = hmr(Square_m, () => Square_m[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_m[HMR].source;
    set(Square_m[HMR].source, module.default[HMR].original);
  });
}
var square_m_default = Square_m;

// node_modules/lucide-svelte/dist/icons/square-menu.svelte
Square_menu[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-menu.svelte";
function Square_menu($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_menu);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M7 8h10" }],
    ["path", { "d": "M7 12h10" }],
    ["path", { "d": "M7 16h10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-menu" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_menu, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_menu,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_menu = hmr(Square_menu, () => Square_menu[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_menu[HMR].source;
    set(Square_menu[HMR].source, module.default[HMR].original);
  });
}
var square_menu_default = Square_menu;

// node_modules/lucide-svelte/dist/icons/square-minus.svelte
Square_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-minus.svelte";
function Square_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_minus);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M8 12h8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_minus = hmr(Square_minus, () => Square_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_minus[HMR].source;
    set(Square_minus[HMR].source, module.default[HMR].original);
  });
}
var square_minus_default = Square_minus;

// node_modules/lucide-svelte/dist/icons/square-mouse-pointer.svelte
Square_mouse_pointer[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-mouse-pointer.svelte";
function Square_mouse_pointer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_mouse_pointer);
  const iconNode = [
    [
      "path",
      {
        "d": "M12.034 12.681a.498.498 0 0 1 .647-.647l9 3.5a.5.5 0 0 1-.033.943l-3.444 1.068a1 1 0 0 0-.66.66l-1.067 3.443a.5.5 0 0 1-.943.033z"
      }
    ],
    [
      "path",
      {
        "d": "M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h6"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-mouse-pointer" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_mouse_pointer, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_mouse_pointer,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_mouse_pointer = hmr(Square_mouse_pointer, () => Square_mouse_pointer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_mouse_pointer[HMR].source;
    set(Square_mouse_pointer[HMR].source, module.default[HMR].original);
  });
}
var square_mouse_pointer_default = Square_mouse_pointer;

// node_modules/lucide-svelte/dist/icons/square-parking-off.svelte
Square_parking_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-parking-off.svelte";
function Square_parking_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_parking_off);
  const iconNode = [
    [
      "path",
      {
        "d": "M3.6 3.6A2 2 0 0 1 5 3h14a2 2 0 0 1 2 2v14a2 2 0 0 1-.59 1.41"
      }
    ],
    ["path", { "d": "M3 8.7V19a2 2 0 0 0 2 2h10.3" }],
    ["path", { "d": "m2 2 20 20" }],
    ["path", { "d": "M13 13a3 3 0 1 0 0-6H9v2" }],
    ["path", { "d": "M9 17v-2.3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-parking-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_parking_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_parking_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_parking_off = hmr(Square_parking_off, () => Square_parking_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_parking_off[HMR].source;
    set(Square_parking_off[HMR].source, module.default[HMR].original);
  });
}
var square_parking_off_default = Square_parking_off;

// node_modules/lucide-svelte/dist/icons/square-parking.svelte
Square_parking[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-parking.svelte";
function Square_parking($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_parking);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M9 17V7h4a3 3 0 0 1 0 6H9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-parking" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_parking, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_parking,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_parking = hmr(Square_parking, () => Square_parking[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_parking[HMR].source;
    set(Square_parking[HMR].source, module.default[HMR].original);
  });
}
var square_parking_default = Square_parking;

// node_modules/lucide-svelte/dist/icons/square-pause.svelte
Square_pause[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-pause.svelte";
function Square_pause($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_pause);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["line", { "x1": "10", "x2": "10", "y1": "15", "y2": "9" }],
    ["line", { "x1": "14", "x2": "14", "y1": "15", "y2": "9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-pause" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_pause, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_pause,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_pause = hmr(Square_pause, () => Square_pause[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_pause[HMR].source;
    set(Square_pause[HMR].source, module.default[HMR].original);
  });
}
var square_pause_default = Square_pause;

// node_modules/lucide-svelte/dist/icons/square-percent.svelte
Square_percent[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-percent.svelte";
function Square_percent($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_percent);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "m15 9-6 6" }],
    ["path", { "d": "M9 9h.01" }],
    ["path", { "d": "M15 15h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-percent" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_percent, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_percent,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_percent = hmr(Square_percent, () => Square_percent[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_percent[HMR].source;
    set(Square_percent[HMR].source, module.default[HMR].original);
  });
}
var square_percent_default = Square_percent;

// node_modules/lucide-svelte/dist/icons/square-pen.svelte
Square_pen[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-pen.svelte";
function Square_pen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_pen);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"
      }
    ],
    [
      "path",
      {
        "d": "M18.375 2.625a1 1 0 0 1 3 3l-9.013 9.014a2 2 0 0 1-.853.505l-2.873.84a.5.5 0 0 1-.62-.62l.84-2.873a2 2 0 0 1 .506-.852z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-pen" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_pen, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_pen,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_pen = hmr(Square_pen, () => Square_pen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_pen[HMR].source;
    set(Square_pen[HMR].source, module.default[HMR].original);
  });
}
var square_pen_default = Square_pen;

// node_modules/lucide-svelte/dist/icons/square-pi.svelte
Square_pi[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-pi.svelte";
function Square_pi($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_pi);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M7 7h10" }],
    ["path", { "d": "M10 7v10" }],
    ["path", { "d": "M16 17a2 2 0 0 1-2-2V7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-pi" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_pi, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_pi,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_pi = hmr(Square_pi, () => Square_pi[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_pi[HMR].source;
    set(Square_pi[HMR].source, module.default[HMR].original);
  });
}
var square_pi_default = Square_pi;

// node_modules/lucide-svelte/dist/icons/square-pilcrow.svelte
Square_pilcrow[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-pilcrow.svelte";
function Square_pilcrow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_pilcrow);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M12 12H9.5a2.5 2.5 0 0 1 0-5H17" }],
    ["path", { "d": "M12 7v10" }],
    ["path", { "d": "M16 7v10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-pilcrow" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_pilcrow, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_pilcrow,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_pilcrow = hmr(Square_pilcrow, () => Square_pilcrow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_pilcrow[HMR].source;
    set(Square_pilcrow[HMR].source, module.default[HMR].original);
  });
}
var square_pilcrow_default = Square_pilcrow;

// node_modules/lucide-svelte/dist/icons/square-play.svelte
Square_play[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-play.svelte";
function Square_play($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_play);
  const iconNode = [
    [
      "rect",
      { "x": "3", "y": "3", "width": "18", "height": "18", "rx": "2" }
    ],
    [
      "path",
      {
        "d": "M9 9.003a1 1 0 0 1 1.517-.859l4.997 2.997a1 1 0 0 1 0 1.718l-4.997 2.997A1 1 0 0 1 9 14.996z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-play" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_play, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_play,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_play = hmr(Square_play, () => Square_play[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_play[HMR].source;
    set(Square_play[HMR].source, module.default[HMR].original);
  });
}
var square_play_default = Square_play;

// node_modules/lucide-svelte/dist/icons/square-plus.svelte
Square_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-plus.svelte";
function Square_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_plus);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M8 12h8" }],
    ["path", { "d": "M12 8v8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_plus = hmr(Square_plus, () => Square_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_plus[HMR].source;
    set(Square_plus[HMR].source, module.default[HMR].original);
  });
}
var square_plus_default = Square_plus;

// node_modules/lucide-svelte/dist/icons/square-power.svelte
Square_power[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-power.svelte";
function Square_power($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_power);
  const iconNode = [
    ["path", { "d": "M12 7v4" }],
    ["path", { "d": "M7.998 9.003a5 5 0 1 0 8-.005" }],
    [
      "rect",
      { "x": "3", "y": "3", "width": "18", "height": "18", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-power" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_power, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_power,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_power = hmr(Square_power, () => Square_power[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_power[HMR].source;
    set(Square_power[HMR].source, module.default[HMR].original);
  });
}
var square_power_default = Square_power;

// node_modules/lucide-svelte/dist/icons/square-radical.svelte
Square_radical[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-radical.svelte";
function Square_radical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_radical);
  const iconNode = [
    ["path", { "d": "M7 12h2l2 5 2-10h4" }],
    [
      "rect",
      { "x": "3", "y": "3", "width": "18", "height": "18", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-radical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_radical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_radical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_radical = hmr(Square_radical, () => Square_radical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_radical[HMR].source;
    set(Square_radical[HMR].source, module.default[HMR].original);
  });
}
var square_radical_default = Square_radical;

// node_modules/lucide-svelte/dist/icons/square-round-corner.svelte
Square_round_corner[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-round-corner.svelte";
function Square_round_corner($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_round_corner);
  const iconNode = [
    ["path", { "d": "M21 11a8 8 0 0 0-8-8" }],
    [
      "path",
      {
        "d": "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-round-corner" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_round_corner, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_round_corner,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_round_corner = hmr(Square_round_corner, () => Square_round_corner[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_round_corner[HMR].source;
    set(Square_round_corner[HMR].source, module.default[HMR].original);
  });
}
var square_round_corner_default = Square_round_corner;

// node_modules/lucide-svelte/dist/icons/square-scissors.svelte
Square_scissors[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-scissors.svelte";
function Square_scissors($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_scissors);
  const iconNode = [
    [
      "rect",
      { "width": "20", "height": "20", "x": "2", "y": "2", "rx": "2" }
    ],
    ["circle", { "cx": "8", "cy": "8", "r": "2" }],
    ["path", { "d": "M9.414 9.414 12 12" }],
    ["path", { "d": "M14.8 14.8 18 18" }],
    ["circle", { "cx": "8", "cy": "16", "r": "2" }],
    ["path", { "d": "m18 6-8.586 8.586" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-scissors" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_scissors, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_scissors,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_scissors = hmr(Square_scissors, () => Square_scissors[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_scissors[HMR].source;
    set(Square_scissors[HMR].source, module.default[HMR].original);
  });
}
var square_scissors_default = Square_scissors;

// node_modules/lucide-svelte/dist/icons/square-sigma.svelte
Square_sigma[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-sigma.svelte";
function Square_sigma($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_sigma);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M16 8.9V7H8l4 5-4 5h8v-1.9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-sigma" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_sigma, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_sigma,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_sigma = hmr(Square_sigma, () => Square_sigma[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_sigma[HMR].source;
    set(Square_sigma[HMR].source, module.default[HMR].original);
  });
}
var square_sigma_default = Square_sigma;

// node_modules/lucide-svelte/dist/icons/square-slash.svelte
Square_slash[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-slash.svelte";
function Square_slash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_slash);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["line", { "x1": "9", "x2": "15", "y1": "15", "y2": "9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-slash" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_slash, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_slash,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_slash = hmr(Square_slash, () => Square_slash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_slash[HMR].source;
    set(Square_slash[HMR].source, module.default[HMR].original);
  });
}
var square_slash_default = Square_slash;

// node_modules/lucide-svelte/dist/icons/square-split-horizontal.svelte
Square_split_horizontal[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-split-horizontal.svelte";
function Square_split_horizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_split_horizontal);
  const iconNode = [
    ["path", { "d": "M8 19H5c-1 0-2-1-2-2V7c0-1 1-2 2-2h3" }],
    ["path", { "d": "M16 5h3c1 0 2 1 2 2v10c0 1-1 2-2 2h-3" }],
    ["line", { "x1": "12", "x2": "12", "y1": "4", "y2": "20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-split-horizontal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_split_horizontal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_split_horizontal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_split_horizontal = hmr(Square_split_horizontal, () => Square_split_horizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_split_horizontal[HMR].source;
    set(Square_split_horizontal[HMR].source, module.default[HMR].original);
  });
}
var square_split_horizontal_default = Square_split_horizontal;

// node_modules/lucide-svelte/dist/icons/square-split-vertical.svelte
Square_split_vertical[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-split-vertical.svelte";
function Square_split_vertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_split_vertical);
  const iconNode = [
    ["path", { "d": "M5 8V5c0-1 1-2 2-2h10c1 0 2 1 2 2v3" }],
    ["path", { "d": "M19 16v3c0 1-1 2-2 2H7c-1 0-2-1-2-2v-3" }],
    ["line", { "x1": "4", "x2": "20", "y1": "12", "y2": "12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-split-vertical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_split_vertical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_split_vertical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_split_vertical = hmr(Square_split_vertical, () => Square_split_vertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_split_vertical[HMR].source;
    set(Square_split_vertical[HMR].source, module.default[HMR].original);
  });
}
var square_split_vertical_default = Square_split_vertical;

// node_modules/lucide-svelte/dist/icons/square-square.svelte
Square_square[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-square.svelte";
function Square_square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_square);
  const iconNode = [
    [
      "rect",
      { "x": "3", "y": "3", "width": "18", "height": "18", "rx": "2" }
    ],
    [
      "rect",
      { "x": "8", "y": "8", "width": "8", "height": "8", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-square" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_square, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_square,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_square = hmr(Square_square, () => Square_square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_square[HMR].source;
    set(Square_square[HMR].source, module.default[HMR].original);
  });
}
var square_square_default = Square_square;

// node_modules/lucide-svelte/dist/icons/square-stack.svelte
Square_stack[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-stack.svelte";
function Square_stack($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_stack);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 10c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h4c1.1 0 2 .9 2 2"
      }
    ],
    [
      "path",
      {
        "d": "M10 16c-1.1 0-2-.9-2-2v-4c0-1.1.9-2 2-2h4c1.1 0 2 .9 2 2"
      }
    ],
    [
      "rect",
      { "width": "8", "height": "8", "x": "14", "y": "14", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-stack" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_stack, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_stack,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_stack = hmr(Square_stack, () => Square_stack[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_stack[HMR].source;
    set(Square_stack[HMR].source, module.default[HMR].original);
  });
}
var square_stack_default = Square_stack;

// node_modules/lucide-svelte/dist/icons/square-stop.svelte
Square_stop[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-stop.svelte";
function Square_stop($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_stop);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    [
      "rect",
      { "x": "9", "y": "9", "width": "6", "height": "6", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-stop" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_stop, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_stop,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_stop = hmr(Square_stop, () => Square_stop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_stop[HMR].source;
    set(Square_stop[HMR].source, module.default[HMR].original);
  });
}
var square_stop_default = Square_stop;

// node_modules/lucide-svelte/dist/icons/square-terminal.svelte
Square_terminal[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-terminal.svelte";
function Square_terminal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_terminal);
  const iconNode = [
    ["path", { "d": "m7 11 2-2-2-2" }],
    ["path", { "d": "M11 13h4" }],
    [
      "rect",
      {
        "width": "18",
        "height": "18",
        "x": "3",
        "y": "3",
        "rx": "2",
        "ry": "2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-terminal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_terminal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_terminal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_terminal = hmr(Square_terminal, () => Square_terminal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_terminal[HMR].source;
    set(Square_terminal[HMR].source, module.default[HMR].original);
  });
}
var square_terminal_default = Square_terminal;

// node_modules/lucide-svelte/dist/icons/square-user-round.svelte
Square_user_round[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-user-round.svelte";
function Square_user_round($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_user_round);
  const iconNode = [
    ["path", { "d": "M18 21a6 6 0 0 0-12 0" }],
    ["circle", { "cx": "12", "cy": "11", "r": "4" }],
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-user-round" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_user_round, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_user_round,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_user_round = hmr(Square_user_round, () => Square_user_round[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_user_round[HMR].source;
    set(Square_user_round[HMR].source, module.default[HMR].original);
  });
}
var square_user_round_default = Square_user_round;

// node_modules/lucide-svelte/dist/icons/square-user.svelte
Square_user[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-user.svelte";
function Square_user($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_user);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["circle", { "cx": "12", "cy": "10", "r": "3" }],
    ["path", { "d": "M7 21v-2a2 2 0 0 1 2-2h6a2 2 0 0 1 2 2v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-user" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_user, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_user,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_user = hmr(Square_user, () => Square_user[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_user[HMR].source;
    set(Square_user[HMR].source, module.default[HMR].original);
  });
}
var square_user_default = Square_user;

// node_modules/lucide-svelte/dist/icons/square-x.svelte
Square_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/square-x.svelte";
function Square_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square_x);
  const iconNode = [
    [
      "rect",
      {
        "width": "18",
        "height": "18",
        "x": "3",
        "y": "3",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["path", { "d": "m15 9-6 6" }],
    ["path", { "d": "m9 9 6 6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square_x = hmr(Square_x, () => Square_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square_x[HMR].source;
    set(Square_x[HMR].source, module.default[HMR].original);
  });
}
var square_x_default = Square_x;

// node_modules/lucide-svelte/dist/icons/square.svelte
Square[FILENAME] = "node_modules/lucide-svelte/dist/icons/square.svelte";
function Square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Square);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "square" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Square, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Square,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Square = hmr(Square, () => Square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Square[HMR].source;
    set(Square[HMR].source, module.default[HMR].original);
  });
}
var square_default = Square;

// node_modules/lucide-svelte/dist/icons/squares-exclude.svelte
Squares_exclude[FILENAME] = "node_modules/lucide-svelte/dist/icons/squares-exclude.svelte";
function Squares_exclude($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Squares_exclude);
  const iconNode = [
    [
      "path",
      {
        "d": "M16 12v2a2 2 0 0 1-2 2H9a1 1 0 0 0-1 1v3a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V10a2 2 0 0 0-2-2h0"
      }
    ],
    [
      "path",
      {
        "d": "M4 16a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v3a1 1 0 0 1-1 1h-5a2 2 0 0 0-2 2v2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "squares-exclude" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Squares_exclude, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Squares_exclude,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Squares_exclude = hmr(Squares_exclude, () => Squares_exclude[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Squares_exclude[HMR].source;
    set(Squares_exclude[HMR].source, module.default[HMR].original);
  });
}
var squares_exclude_default = Squares_exclude;

// node_modules/lucide-svelte/dist/icons/squares-intersect.svelte
Squares_intersect[FILENAME] = "node_modules/lucide-svelte/dist/icons/squares-intersect.svelte";
function Squares_intersect($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Squares_intersect);
  const iconNode = [
    ["path", { "d": "M10 22a2 2 0 0 1-2-2" }],
    ["path", { "d": "M14 2a2 2 0 0 1 2 2" }],
    ["path", { "d": "M16 22h-2" }],
    ["path", { "d": "M2 10V8" }],
    ["path", { "d": "M2 4a2 2 0 0 1 2-2" }],
    ["path", { "d": "M20 8a2 2 0 0 1 2 2" }],
    ["path", { "d": "M22 14v2" }],
    ["path", { "d": "M22 20a2 2 0 0 1-2 2" }],
    ["path", { "d": "M4 16a2 2 0 0 1-2-2" }],
    [
      "path",
      {
        "d": "M8 10a2 2 0 0 1 2-2h5a1 1 0 0 1 1 1v5a2 2 0 0 1-2 2H9a1 1 0 0 1-1-1z"
      }
    ],
    ["path", { "d": "M8 2h2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "squares-intersect" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Squares_intersect, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Squares_intersect,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Squares_intersect = hmr(Squares_intersect, () => Squares_intersect[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Squares_intersect[HMR].source;
    set(Squares_intersect[HMR].source, module.default[HMR].original);
  });
}
var squares_intersect_default = Squares_intersect;

// node_modules/lucide-svelte/dist/icons/squares-subtract.svelte
Squares_subtract[FILENAME] = "node_modules/lucide-svelte/dist/icons/squares-subtract.svelte";
function Squares_subtract($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Squares_subtract);
  const iconNode = [
    ["path", { "d": "M10 22a2 2 0 0 1-2-2" }],
    ["path", { "d": "M16 22h-2" }],
    [
      "path",
      {
        "d": "M16 4a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h3a1 1 0 0 0 1-1v-5a2 2 0 0 1 2-2h5a1 1 0 0 0 1-1z"
      }
    ],
    ["path", { "d": "M20 8a2 2 0 0 1 2 2" }],
    ["path", { "d": "M22 14v2" }],
    ["path", { "d": "M22 20a2 2 0 0 1-2 2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "squares-subtract" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Squares_subtract, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Squares_subtract,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Squares_subtract = hmr(Squares_subtract, () => Squares_subtract[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Squares_subtract[HMR].source;
    set(Squares_subtract[HMR].source, module.default[HMR].original);
  });
}
var squares_subtract_default = Squares_subtract;

// node_modules/lucide-svelte/dist/icons/squircle-dashed.svelte
Squircle_dashed[FILENAME] = "node_modules/lucide-svelte/dist/icons/squircle-dashed.svelte";
function Squircle_dashed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Squircle_dashed);
  const iconNode = [
    ["path", { "d": "M13.77 3.043a34 34 0 0 0-3.54 0" }],
    ["path", { "d": "M13.771 20.956a33 33 0 0 1-3.541.001" }],
    [
      "path",
      { "d": "M20.18 17.74c-.51 1.15-1.29 1.93-2.439 2.44" }
    ],
    [
      "path",
      { "d": "M20.18 6.259c-.51-1.148-1.291-1.929-2.44-2.438" }
    ],
    ["path", { "d": "M20.957 10.23a33 33 0 0 1 0 3.54" }],
    ["path", { "d": "M3.043 10.23a34 34 0 0 0 .001 3.541" }],
    [
      "path",
      { "d": "M6.26 20.179c-1.15-.508-1.93-1.29-2.44-2.438" }
    ],
    ["path", { "d": "M6.26 3.82c-1.149.51-1.93 1.291-2.44 2.44" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "squircle-dashed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Squircle_dashed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Squircle_dashed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Squircle_dashed = hmr(Squircle_dashed, () => Squircle_dashed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Squircle_dashed[HMR].source;
    set(Squircle_dashed[HMR].source, module.default[HMR].original);
  });
}
var squircle_dashed_default = Squircle_dashed;

// node_modules/lucide-svelte/dist/icons/squares-unite.svelte
Squares_unite[FILENAME] = "node_modules/lucide-svelte/dist/icons/squares-unite.svelte";
function Squares_unite($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Squares_unite);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 16a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2v3a1 1 0 0 0 1 1h3a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H10a2 2 0 0 1-2-2v-3a1 1 0 0 0-1-1z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "squares-unite" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Squares_unite, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Squares_unite,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Squares_unite = hmr(Squares_unite, () => Squares_unite[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Squares_unite[HMR].source;
    set(Squares_unite[HMR].source, module.default[HMR].original);
  });
}
var squares_unite_default = Squares_unite;

// node_modules/lucide-svelte/dist/icons/squircle.svelte
Squircle[FILENAME] = "node_modules/lucide-svelte/dist/icons/squircle.svelte";
function Squircle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Squircle);
  const iconNode = [
    [
      "path",
      { "d": "M12 3c7.2 0 9 1.8 9 9s-1.8 9-9 9-9-1.8-9-9 1.8-9 9-9" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "squircle" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Squircle, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Squircle,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Squircle = hmr(Squircle, () => Squircle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Squircle[HMR].source;
    set(Squircle[HMR].source, module.default[HMR].original);
  });
}
var squircle_default = Squircle;

// node_modules/lucide-svelte/dist/icons/squirrel.svelte
Squirrel[FILENAME] = "node_modules/lucide-svelte/dist/icons/squirrel.svelte";
function Squirrel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Squirrel);
  const iconNode = [
    ["path", { "d": "M15.236 22a3 3 0 0 0-2.2-5" }],
    [
      "path",
      {
        "d": "M16 20a3 3 0 0 1 3-3h1a2 2 0 0 0 2-2v-2a4 4 0 0 0-4-4V4"
      }
    ],
    ["path", { "d": "M18 13h.01" }],
    [
      "path",
      {
        "d": "M18 6a4 4 0 0 0-4 4 7 7 0 0 0-7 7c0-5 4-5 4-10.5a4.5 4.5 0 1 0-9 0 2.5 2.5 0 0 0 5 0C7 10 3 11 3 17c0 2.8 2.2 5 5 5h10"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "squirrel" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Squirrel, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Squirrel,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Squirrel = hmr(Squirrel, () => Squirrel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Squirrel[HMR].source;
    set(Squirrel[HMR].source, module.default[HMR].original);
  });
}
var squirrel_default = Squirrel;

// node_modules/lucide-svelte/dist/icons/stamp.svelte
Stamp[FILENAME] = "node_modules/lucide-svelte/dist/icons/stamp.svelte";
function Stamp($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Stamp);
  const iconNode = [
    [
      "path",
      {
        "d": "M14 13V8.5C14 7 15 7 15 5a3 3 0 0 0-6 0c0 2 1 2 1 3.5V13"
      }
    ],
    [
      "path",
      {
        "d": "M20 15.5a2.5 2.5 0 0 0-2.5-2.5h-11A2.5 2.5 0 0 0 4 15.5V17a1 1 0 0 0 1 1h14a1 1 0 0 0 1-1z"
      }
    ],
    ["path", { "d": "M5 22h14" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "stamp" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Stamp, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Stamp,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Stamp = hmr(Stamp, () => Stamp[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Stamp[HMR].source;
    set(Stamp[HMR].source, module.default[HMR].original);
  });
}
var stamp_default = Stamp;

// node_modules/lucide-svelte/dist/icons/star-half.svelte
Star_half[FILENAME] = "node_modules/lucide-svelte/dist/icons/star-half.svelte";
function Star_half($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Star_half);
  const iconNode = [
    [
      "path",
      {
        "d": "M12 18.338a2.1 2.1 0 0 0-.987.244L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.12 2.12 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.12 2.12 0 0 0 1.597-1.16l2.309-4.679A.53.53 0 0 1 12 2"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "star-half" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Star_half, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Star_half,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Star_half = hmr(Star_half, () => Star_half[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Star_half[HMR].source;
    set(Star_half[HMR].source, module.default[HMR].original);
  });
}
var star_half_default = Star_half;

// node_modules/lucide-svelte/dist/icons/star-off.svelte
Star_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/star-off.svelte";
function Star_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Star_off);
  const iconNode = [
    [
      "path",
      {
        "d": "M8.34 8.34 2 9.27l5 4.87L5.82 21 12 17.77 18.18 21l-.59-3.43"
      }
    ],
    [
      "path",
      { "d": "M18.42 12.76 22 9.27l-6.91-1L12 2l-1.44 2.91" }
    ],
    ["line", { "x1": "2", "x2": "22", "y1": "2", "y2": "22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "star-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Star_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Star_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Star_off = hmr(Star_off, () => Star_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Star_off[HMR].source;
    set(Star_off[HMR].source, module.default[HMR].original);
  });
}
var star_off_default = Star_off;

// node_modules/lucide-svelte/dist/icons/step-back.svelte
Step_back[FILENAME] = "node_modules/lucide-svelte/dist/icons/step-back.svelte";
function Step_back($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Step_back);
  const iconNode = [
    [
      "path",
      {
        "d": "M13.971 4.285A2 2 0 0 1 17 6v12a2 2 0 0 1-3.029 1.715l-9.997-5.998a2 2 0 0 1-.003-3.432z"
      }
    ],
    ["path", { "d": "M21 20V4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "step-back" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Step_back, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Step_back,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Step_back = hmr(Step_back, () => Step_back[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Step_back[HMR].source;
    set(Step_back[HMR].source, module.default[HMR].original);
  });
}
var step_back_default = Step_back;

// node_modules/lucide-svelte/dist/icons/star.svelte
Star[FILENAME] = "node_modules/lucide-svelte/dist/icons/star.svelte";
function Star($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Star);
  const iconNode = [
    [
      "path",
      {
        "d": "M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "star" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Star, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Star,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Star = hmr(Star, () => Star[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Star[HMR].source;
    set(Star[HMR].source, module.default[HMR].original);
  });
}
var star_default = Star;

// node_modules/lucide-svelte/dist/icons/step-forward.svelte
Step_forward[FILENAME] = "node_modules/lucide-svelte/dist/icons/step-forward.svelte";
function Step_forward($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Step_forward);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.029 4.285A2 2 0 0 0 7 6v12a2 2 0 0 0 3.029 1.715l9.997-5.998a2 2 0 0 0 .003-3.432z"
      }
    ],
    ["path", { "d": "M3 4v16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "step-forward" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Step_forward, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Step_forward,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Step_forward = hmr(Step_forward, () => Step_forward[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Step_forward[HMR].source;
    set(Step_forward[HMR].source, module.default[HMR].original);
  });
}
var step_forward_default = Step_forward;

// node_modules/lucide-svelte/dist/icons/stethoscope.svelte
Stethoscope[FILENAME] = "node_modules/lucide-svelte/dist/icons/stethoscope.svelte";
function Stethoscope($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Stethoscope);
  const iconNode = [
    ["path", { "d": "M11 2v2" }],
    ["path", { "d": "M5 2v2" }],
    [
      "path",
      {
        "d": "M5 3H4a2 2 0 0 0-2 2v4a6 6 0 0 0 12 0V5a2 2 0 0 0-2-2h-1"
      }
    ],
    ["path", { "d": "M8 15a6 6 0 0 0 12 0v-3" }],
    ["circle", { "cx": "20", "cy": "10", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "stethoscope" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Stethoscope, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Stethoscope,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Stethoscope = hmr(Stethoscope, () => Stethoscope[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Stethoscope[HMR].source;
    set(Stethoscope[HMR].source, module.default[HMR].original);
  });
}
var stethoscope_default = Stethoscope;

// node_modules/lucide-svelte/dist/icons/sticker.svelte
Sticker[FILENAME] = "node_modules/lucide-svelte/dist/icons/sticker.svelte";
function Sticker($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sticker);
  const iconNode = [
    [
      "path",
      {
        "d": "M15.5 3H5a2 2 0 0 0-2 2v14c0 1.1.9 2 2 2h14a2 2 0 0 0 2-2V8.5L15.5 3Z"
      }
    ],
    ["path", { "d": "M14 3v4a2 2 0 0 0 2 2h4" }],
    ["path", { "d": "M8 13h.01" }],
    ["path", { "d": "M16 13h.01" }],
    ["path", { "d": "M10 16s.8 1 2 1c1.3 0 2-1 2-1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sticker" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sticker, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sticker,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sticker = hmr(Sticker, () => Sticker[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sticker[HMR].source;
    set(Sticker[HMR].source, module.default[HMR].original);
  });
}
var sticker_default = Sticker;

// node_modules/lucide-svelte/dist/icons/sticky-note.svelte
Sticky_note[FILENAME] = "node_modules/lucide-svelte/dist/icons/sticky-note.svelte";
function Sticky_note($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sticky_note);
  const iconNode = [
    [
      "path",
      {
        "d": "M16 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V8Z"
      }
    ],
    ["path", { "d": "M15 3v4a2 2 0 0 0 2 2h4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sticky-note" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sticky_note, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sticky_note,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sticky_note = hmr(Sticky_note, () => Sticky_note[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sticky_note[HMR].source;
    set(Sticky_note[HMR].source, module.default[HMR].original);
  });
}
var sticky_note_default = Sticky_note;

// node_modules/lucide-svelte/dist/icons/store.svelte
Store[FILENAME] = "node_modules/lucide-svelte/dist/icons/store.svelte";
function Store($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Store);
  const iconNode = [
    [
      "path",
      {
        "d": "m2 7 4.41-4.41A2 2 0 0 1 7.83 2h8.34a2 2 0 0 1 1.42.59L22 7"
      }
    ],
    ["path", { "d": "M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8" }],
    [
      "path",
      { "d": "M15 22v-4a2 2 0 0 0-2-2h-2a2 2 0 0 0-2 2v4" }
    ],
    ["path", { "d": "M2 7h20" }],
    [
      "path",
      {
        "d": "M22 7v3a2 2 0 0 1-2 2a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 16 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 12 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 8 12a2.7 2.7 0 0 1-1.59-.63.7.7 0 0 0-.82 0A2.7 2.7 0 0 1 4 12a2 2 0 0 1-2-2V7"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "store" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Store, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Store,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Store = hmr(Store, () => Store[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Store[HMR].source;
    set(Store[HMR].source, module.default[HMR].original);
  });
}
var store_default = Store;

// node_modules/lucide-svelte/dist/icons/stretch-horizontal.svelte
Stretch_horizontal[FILENAME] = "node_modules/lucide-svelte/dist/icons/stretch-horizontal.svelte";
function Stretch_horizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Stretch_horizontal);
  const iconNode = [
    [
      "rect",
      { "width": "20", "height": "6", "x": "2", "y": "4", "rx": "2" }
    ],
    [
      "rect",
      { "width": "20", "height": "6", "x": "2", "y": "14", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "stretch-horizontal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Stretch_horizontal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Stretch_horizontal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Stretch_horizontal = hmr(Stretch_horizontal, () => Stretch_horizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Stretch_horizontal[HMR].source;
    set(Stretch_horizontal[HMR].source, module.default[HMR].original);
  });
}
var stretch_horizontal_default = Stretch_horizontal;

// node_modules/lucide-svelte/dist/icons/stretch-vertical.svelte
Stretch_vertical[FILENAME] = "node_modules/lucide-svelte/dist/icons/stretch-vertical.svelte";
function Stretch_vertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Stretch_vertical);
  const iconNode = [
    [
      "rect",
      { "width": "6", "height": "20", "x": "4", "y": "2", "rx": "2" }
    ],
    [
      "rect",
      { "width": "6", "height": "20", "x": "14", "y": "2", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "stretch-vertical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Stretch_vertical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Stretch_vertical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Stretch_vertical = hmr(Stretch_vertical, () => Stretch_vertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Stretch_vertical[HMR].source;
    set(Stretch_vertical[HMR].source, module.default[HMR].original);
  });
}
var stretch_vertical_default = Stretch_vertical;

// node_modules/lucide-svelte/dist/icons/strikethrough.svelte
Strikethrough[FILENAME] = "node_modules/lucide-svelte/dist/icons/strikethrough.svelte";
function Strikethrough($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Strikethrough);
  const iconNode = [
    ["path", { "d": "M16 4H9a3 3 0 0 0-2.83 4" }],
    ["path", { "d": "M14 12a4 4 0 0 1 0 8H6" }],
    ["line", { "x1": "4", "x2": "20", "y1": "12", "y2": "12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "strikethrough" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Strikethrough, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Strikethrough,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Strikethrough = hmr(Strikethrough, () => Strikethrough[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Strikethrough[HMR].source;
    set(Strikethrough[HMR].source, module.default[HMR].original);
  });
}
var strikethrough_default = Strikethrough;

// node_modules/lucide-svelte/dist/icons/subscript.svelte
Subscript[FILENAME] = "node_modules/lucide-svelte/dist/icons/subscript.svelte";
function Subscript($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Subscript);
  const iconNode = [
    ["path", { "d": "m4 5 8 8" }],
    ["path", { "d": "m12 5-8 8" }],
    [
      "path",
      {
        "d": "M20 19h-4c0-1.5.44-2 1.5-2.5S20 15.33 20 14c0-.47-.17-.93-.48-1.29a2.11 2.11 0 0 0-2.62-.44c-.42.24-.74.62-.9 1.07"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "subscript" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Subscript, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Subscript,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Subscript = hmr(Subscript, () => Subscript[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Subscript[HMR].source;
    set(Subscript[HMR].source, module.default[HMR].original);
  });
}
var subscript_default = Subscript;

// node_modules/lucide-svelte/dist/icons/sun-dim.svelte
Sun_dim[FILENAME] = "node_modules/lucide-svelte/dist/icons/sun-dim.svelte";
function Sun_dim($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sun_dim);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "4" }],
    ["path", { "d": "M12 4h.01" }],
    ["path", { "d": "M20 12h.01" }],
    ["path", { "d": "M12 20h.01" }],
    ["path", { "d": "M4 12h.01" }],
    ["path", { "d": "M17.657 6.343h.01" }],
    ["path", { "d": "M17.657 17.657h.01" }],
    ["path", { "d": "M6.343 17.657h.01" }],
    ["path", { "d": "M6.343 6.343h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sun-dim" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sun_dim, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sun_dim,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sun_dim = hmr(Sun_dim, () => Sun_dim[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sun_dim[HMR].source;
    set(Sun_dim[HMR].source, module.default[HMR].original);
  });
}
var sun_dim_default = Sun_dim;

// node_modules/lucide-svelte/dist/icons/sun-medium.svelte
Sun_medium[FILENAME] = "node_modules/lucide-svelte/dist/icons/sun-medium.svelte";
function Sun_medium($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sun_medium);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "4" }],
    ["path", { "d": "M12 3v1" }],
    ["path", { "d": "M12 20v1" }],
    ["path", { "d": "M3 12h1" }],
    ["path", { "d": "M20 12h1" }],
    ["path", { "d": "m18.364 5.636-.707.707" }],
    ["path", { "d": "m6.343 17.657-.707.707" }],
    ["path", { "d": "m5.636 5.636.707.707" }],
    ["path", { "d": "m17.657 17.657.707.707" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sun-medium" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sun_medium, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sun_medium,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sun_medium = hmr(Sun_medium, () => Sun_medium[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sun_medium[HMR].source;
    set(Sun_medium[HMR].source, module.default[HMR].original);
  });
}
var sun_medium_default = Sun_medium;

// node_modules/lucide-svelte/dist/icons/sun-moon.svelte
Sun_moon[FILENAME] = "node_modules/lucide-svelte/dist/icons/sun-moon.svelte";
function Sun_moon($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sun_moon);
  const iconNode = [
    ["path", { "d": "M12 2v2" }],
    [
      "path",
      {
        "d": "M14.837 16.385a6 6 0 1 1-7.223-7.222c.624-.147.97.66.715 1.248a4 4 0 0 0 5.26 5.259c.589-.255 1.396.09 1.248.715"
      }
    ],
    ["path", { "d": "M16 12a4 4 0 0 0-4-4" }],
    ["path", { "d": "m19 5-1.256 1.256" }],
    ["path", { "d": "M20 12h2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sun-moon" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sun_moon, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sun_moon,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sun_moon = hmr(Sun_moon, () => Sun_moon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sun_moon[HMR].source;
    set(Sun_moon[HMR].source, module.default[HMR].original);
  });
}
var sun_moon_default = Sun_moon;

// node_modules/lucide-svelte/dist/icons/sun-snow.svelte
Sun_snow[FILENAME] = "node_modules/lucide-svelte/dist/icons/sun-snow.svelte";
function Sun_snow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sun_snow);
  const iconNode = [
    ["path", { "d": "M10 21v-1" }],
    ["path", { "d": "M10 4V3" }],
    ["path", { "d": "M10 9a3 3 0 0 0 0 6" }],
    ["path", { "d": "m14 20 1.25-2.5L18 18" }],
    ["path", { "d": "m14 4 1.25 2.5L18 6" }],
    ["path", { "d": "m17 21-3-6 1.5-3H22" }],
    ["path", { "d": "m17 3-3 6 1.5 3" }],
    ["path", { "d": "M2 12h1" }],
    ["path", { "d": "m20 10-1.5 2 1.5 2" }],
    ["path", { "d": "m3.64 18.36.7-.7" }],
    ["path", { "d": "m4.34 6.34-.7-.7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sun-snow" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sun_snow, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sun_snow,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sun_snow = hmr(Sun_snow, () => Sun_snow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sun_snow[HMR].source;
    set(Sun_snow[HMR].source, module.default[HMR].original);
  });
}
var sun_snow_default = Sun_snow;

// node_modules/lucide-svelte/dist/icons/sun.svelte
Sun[FILENAME] = "node_modules/lucide-svelte/dist/icons/sun.svelte";
function Sun($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sun);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "4" }],
    ["path", { "d": "M12 2v2" }],
    ["path", { "d": "M12 20v2" }],
    ["path", { "d": "m4.93 4.93 1.41 1.41" }],
    ["path", { "d": "m17.66 17.66 1.41 1.41" }],
    ["path", { "d": "M2 12h2" }],
    ["path", { "d": "M20 12h2" }],
    ["path", { "d": "m6.34 17.66-1.41 1.41" }],
    ["path", { "d": "m19.07 4.93-1.41 1.41" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sun" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sun, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sun,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sun = hmr(Sun, () => Sun[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sun[HMR].source;
    set(Sun[HMR].source, module.default[HMR].original);
  });
}
var sun_default = Sun;

// node_modules/lucide-svelte/dist/icons/sunrise.svelte
Sunrise[FILENAME] = "node_modules/lucide-svelte/dist/icons/sunrise.svelte";
function Sunrise($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sunrise);
  const iconNode = [
    ["path", { "d": "M12 2v8" }],
    ["path", { "d": "m4.93 10.93 1.41 1.41" }],
    ["path", { "d": "M2 18h2" }],
    ["path", { "d": "M20 18h2" }],
    ["path", { "d": "m19.07 10.93-1.41 1.41" }],
    ["path", { "d": "M22 22H2" }],
    ["path", { "d": "m8 6 4-4 4 4" }],
    ["path", { "d": "M16 18a4 4 0 0 0-8 0" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sunrise" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sunrise, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sunrise,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sunrise = hmr(Sunrise, () => Sunrise[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sunrise[HMR].source;
    set(Sunrise[HMR].source, module.default[HMR].original);
  });
}
var sunrise_default = Sunrise;

// node_modules/lucide-svelte/dist/icons/sunset.svelte
Sunset[FILENAME] = "node_modules/lucide-svelte/dist/icons/sunset.svelte";
function Sunset($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sunset);
  const iconNode = [
    ["path", { "d": "M12 10V2" }],
    ["path", { "d": "m4.93 10.93 1.41 1.41" }],
    ["path", { "d": "M2 18h2" }],
    ["path", { "d": "M20 18h2" }],
    ["path", { "d": "m19.07 10.93-1.41 1.41" }],
    ["path", { "d": "M22 22H2" }],
    ["path", { "d": "m16 6-4 4-4-4" }],
    ["path", { "d": "M16 18a4 4 0 0 0-8 0" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sunset" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sunset, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sunset,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sunset = hmr(Sunset, () => Sunset[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sunset[HMR].source;
    set(Sunset[HMR].source, module.default[HMR].original);
  });
}
var sunset_default = Sunset;

// node_modules/lucide-svelte/dist/icons/superscript.svelte
Superscript[FILENAME] = "node_modules/lucide-svelte/dist/icons/superscript.svelte";
function Superscript($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Superscript);
  const iconNode = [
    ["path", { "d": "m4 19 8-8" }],
    ["path", { "d": "m12 19-8-8" }],
    [
      "path",
      {
        "d": "M20 12h-4c0-1.5.442-2 1.5-2.5S20 8.334 20 7.002c0-.472-.17-.93-.484-1.29a2.105 2.105 0 0 0-2.617-.436c-.42.239-.738.614-.899 1.06"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "superscript" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Superscript, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Superscript,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Superscript = hmr(Superscript, () => Superscript[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Superscript[HMR].source;
    set(Superscript[HMR].source, module.default[HMR].original);
  });
}
var superscript_default = Superscript;

// node_modules/lucide-svelte/dist/icons/swatch-book.svelte
Swatch_book[FILENAME] = "node_modules/lucide-svelte/dist/icons/swatch-book.svelte";
function Swatch_book($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Swatch_book);
  const iconNode = [
    [
      "path",
      { "d": "M11 17a4 4 0 0 1-8 0V5a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2Z" }
    ],
    [
      "path",
      { "d": "M16.7 13H19a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2H7" }
    ],
    ["path", { "d": "M 7 17h.01" }],
    [
      "path",
      {
        "d": "m11 8 2.3-2.3a2.4 2.4 0 0 1 3.404.004L18.6 7.6a2.4 2.4 0 0 1 .026 3.434L9.9 19.8"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "swatch-book" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Swatch_book, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Swatch_book,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Swatch_book = hmr(Swatch_book, () => Swatch_book[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Swatch_book[HMR].source;
    set(Swatch_book[HMR].source, module.default[HMR].original);
  });
}
var swatch_book_default = Swatch_book;

// node_modules/lucide-svelte/dist/icons/swiss-franc.svelte
Swiss_franc[FILENAME] = "node_modules/lucide-svelte/dist/icons/swiss-franc.svelte";
function Swiss_franc($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Swiss_franc);
  const iconNode = [
    ["path", { "d": "M10 21V3h8" }],
    ["path", { "d": "M6 16h9" }],
    ["path", { "d": "M10 9.5h7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "swiss-franc" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Swiss_franc, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Swiss_franc,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Swiss_franc = hmr(Swiss_franc, () => Swiss_franc[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Swiss_franc[HMR].source;
    set(Swiss_franc[HMR].source, module.default[HMR].original);
  });
}
var swiss_franc_default = Swiss_franc;

// node_modules/lucide-svelte/dist/icons/switch-camera.svelte
Switch_camera[FILENAME] = "node_modules/lucide-svelte/dist/icons/switch-camera.svelte";
function Switch_camera($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Switch_camera);
  const iconNode = [
    ["path", { "d": "M11 19H4a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h5" }],
    ["path", { "d": "M13 5h7a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-5" }],
    ["circle", { "cx": "12", "cy": "12", "r": "3" }],
    ["path", { "d": "m18 22-3-3 3-3" }],
    ["path", { "d": "m6 2 3 3-3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "switch-camera" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Switch_camera, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Switch_camera,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Switch_camera = hmr(Switch_camera, () => Switch_camera[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Switch_camera[HMR].source;
    set(Switch_camera[HMR].source, module.default[HMR].original);
  });
}
var switch_camera_default = Switch_camera;

// node_modules/lucide-svelte/dist/icons/sword.svelte
Sword[FILENAME] = "node_modules/lucide-svelte/dist/icons/sword.svelte";
function Sword($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Sword);
  const iconNode = [
    ["polyline", { "points": "14.5 17.5 3 6 3 3 6 3 17.5 14.5" }],
    ["line", { "x1": "13", "x2": "19", "y1": "19", "y2": "13" }],
    ["line", { "x1": "16", "x2": "20", "y1": "16", "y2": "20" }],
    ["line", { "x1": "19", "x2": "21", "y1": "21", "y2": "19" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "sword" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Sword, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Sword,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Sword = hmr(Sword, () => Sword[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sword[HMR].source;
    set(Sword[HMR].source, module.default[HMR].original);
  });
}
var sword_default = Sword;

// node_modules/lucide-svelte/dist/icons/swords.svelte
Swords[FILENAME] = "node_modules/lucide-svelte/dist/icons/swords.svelte";
function Swords($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Swords);
  const iconNode = [
    ["polyline", { "points": "14.5 17.5 3 6 3 3 6 3 17.5 14.5" }],
    ["line", { "x1": "13", "x2": "19", "y1": "19", "y2": "13" }],
    ["line", { "x1": "16", "x2": "20", "y1": "16", "y2": "20" }],
    ["line", { "x1": "19", "x2": "21", "y1": "21", "y2": "19" }],
    ["polyline", { "points": "14.5 6.5 18 3 21 3 21 6 17.5 9.5" }],
    ["line", { "x1": "5", "x2": "9", "y1": "14", "y2": "18" }],
    ["line", { "x1": "7", "x2": "4", "y1": "17", "y2": "20" }],
    ["line", { "x1": "3", "x2": "5", "y1": "19", "y2": "21" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "swords" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Swords, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Swords,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Swords = hmr(Swords, () => Swords[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Swords[HMR].source;
    set(Swords[HMR].source, module.default[HMR].original);
  });
}
var swords_default = Swords;

// node_modules/lucide-svelte/dist/icons/syringe.svelte
Syringe[FILENAME] = "node_modules/lucide-svelte/dist/icons/syringe.svelte";
function Syringe($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Syringe);
  const iconNode = [
    ["path", { "d": "m18 2 4 4" }],
    ["path", { "d": "m17 7 3-3" }],
    [
      "path",
      {
        "d": "M19 9 8.7 19.3c-1 1-2.5 1-3.4 0l-.6-.6c-1-1-1-2.5 0-3.4L15 5"
      }
    ],
    ["path", { "d": "m9 11 4 4" }],
    ["path", { "d": "m5 19-3 3" }],
    ["path", { "d": "m14 4 6 6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "syringe" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Syringe, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Syringe,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Syringe = hmr(Syringe, () => Syringe[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Syringe[HMR].source;
    set(Syringe[HMR].source, module.default[HMR].original);
  });
}
var syringe_default = Syringe;

// node_modules/lucide-svelte/dist/icons/table-2.svelte
Table_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/table-2.svelte";
function Table_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Table_2);
  const iconNode = [
    [
      "path",
      {
        "d": "M9 3H5a2 2 0 0 0-2 2v4m6-6h10a2 2 0 0 1 2 2v4M9 3v18m0 0h10a2 2 0 0 0 2-2V9M9 21H5a2 2 0 0 1-2-2V9m0 0h18"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "table-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Table_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Table_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Table_2 = hmr(Table_2, () => Table_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Table_2[HMR].source;
    set(Table_2[HMR].source, module.default[HMR].original);
  });
}
var table_2_default = Table_2;

// node_modules/lucide-svelte/dist/icons/table-cells-merge.svelte
Table_cells_merge[FILENAME] = "node_modules/lucide-svelte/dist/icons/table-cells-merge.svelte";
function Table_cells_merge($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Table_cells_merge);
  const iconNode = [
    ["path", { "d": "M12 21v-6" }],
    ["path", { "d": "M12 9V3" }],
    ["path", { "d": "M3 15h18" }],
    ["path", { "d": "M3 9h18" }],
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "table-cells-merge" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Table_cells_merge, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Table_cells_merge,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Table_cells_merge = hmr(Table_cells_merge, () => Table_cells_merge[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Table_cells_merge[HMR].source;
    set(Table_cells_merge[HMR].source, module.default[HMR].original);
  });
}
var table_cells_merge_default = Table_cells_merge;

// node_modules/lucide-svelte/dist/icons/table-cells-split.svelte
Table_cells_split[FILENAME] = "node_modules/lucide-svelte/dist/icons/table-cells-split.svelte";
function Table_cells_split($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Table_cells_split);
  const iconNode = [
    ["path", { "d": "M12 15V9" }],
    ["path", { "d": "M3 15h18" }],
    ["path", { "d": "M3 9h18" }],
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "table-cells-split" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Table_cells_split, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Table_cells_split,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Table_cells_split = hmr(Table_cells_split, () => Table_cells_split[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Table_cells_split[HMR].source;
    set(Table_cells_split[HMR].source, module.default[HMR].original);
  });
}
var table_cells_split_default = Table_cells_split;

// node_modules/lucide-svelte/dist/icons/table-columns-split.svelte
Table_columns_split[FILENAME] = "node_modules/lucide-svelte/dist/icons/table-columns-split.svelte";
function Table_columns_split($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Table_columns_split);
  const iconNode = [
    ["path", { "d": "M14 14v2" }],
    ["path", { "d": "M14 20v2" }],
    ["path", { "d": "M14 2v2" }],
    ["path", { "d": "M14 8v2" }],
    ["path", { "d": "M2 15h8" }],
    ["path", { "d": "M2 3h6a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H2" }],
    ["path", { "d": "M2 9h8" }],
    ["path", { "d": "M22 15h-4" }],
    ["path", { "d": "M22 3h-2a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h2" }],
    ["path", { "d": "M22 9h-4" }],
    ["path", { "d": "M5 3v18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "table-columns-split" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Table_columns_split, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Table_columns_split,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Table_columns_split = hmr(Table_columns_split, () => Table_columns_split[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Table_columns_split[HMR].source;
    set(Table_columns_split[HMR].source, module.default[HMR].original);
  });
}
var table_columns_split_default = Table_columns_split;

// node_modules/lucide-svelte/dist/icons/table-of-contents.svelte
Table_of_contents[FILENAME] = "node_modules/lucide-svelte/dist/icons/table-of-contents.svelte";
function Table_of_contents($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Table_of_contents);
  const iconNode = [
    ["path", { "d": "M16 12H3" }],
    ["path", { "d": "M16 18H3" }],
    ["path", { "d": "M16 6H3" }],
    ["path", { "d": "M21 12h.01" }],
    ["path", { "d": "M21 18h.01" }],
    ["path", { "d": "M21 6h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "table-of-contents" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Table_of_contents, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Table_of_contents,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Table_of_contents = hmr(Table_of_contents, () => Table_of_contents[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Table_of_contents[HMR].source;
    set(Table_of_contents[HMR].source, module.default[HMR].original);
  });
}
var table_of_contents_default = Table_of_contents;

// node_modules/lucide-svelte/dist/icons/table-properties.svelte
Table_properties[FILENAME] = "node_modules/lucide-svelte/dist/icons/table-properties.svelte";
function Table_properties($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Table_properties);
  const iconNode = [
    ["path", { "d": "M15 3v18" }],
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M21 9H3" }],
    ["path", { "d": "M21 15H3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "table-properties" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Table_properties, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Table_properties,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Table_properties = hmr(Table_properties, () => Table_properties[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Table_properties[HMR].source;
    set(Table_properties[HMR].source, module.default[HMR].original);
  });
}
var table_properties_default = Table_properties;

// node_modules/lucide-svelte/dist/icons/table-rows-split.svelte
Table_rows_split[FILENAME] = "node_modules/lucide-svelte/dist/icons/table-rows-split.svelte";
function Table_rows_split($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Table_rows_split);
  const iconNode = [
    ["path", { "d": "M14 10h2" }],
    ["path", { "d": "M15 22v-8" }],
    ["path", { "d": "M15 2v4" }],
    ["path", { "d": "M2 10h2" }],
    ["path", { "d": "M20 10h2" }],
    ["path", { "d": "M3 19h18" }],
    [
      "path",
      { "d": "M3 22v-6a2 2 135 0 1 2-2h14a2 2 45 0 1 2 2v6" }
    ],
    [
      "path",
      { "d": "M3 2v2a2 2 45 0 0 2 2h14a2 2 135 0 0 2-2V2" }
    ],
    ["path", { "d": "M8 10h2" }],
    ["path", { "d": "M9 22v-8" }],
    ["path", { "d": "M9 2v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "table-rows-split" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Table_rows_split, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Table_rows_split,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Table_rows_split = hmr(Table_rows_split, () => Table_rows_split[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Table_rows_split[HMR].source;
    set(Table_rows_split[HMR].source, module.default[HMR].original);
  });
}
var table_rows_split_default = Table_rows_split;

// node_modules/lucide-svelte/dist/icons/table.svelte
Table[FILENAME] = "node_modules/lucide-svelte/dist/icons/table.svelte";
function Table($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Table);
  const iconNode = [
    ["path", { "d": "M12 3v18" }],
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M3 9h18" }],
    ["path", { "d": "M3 15h18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "table" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Table, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Table,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Table = hmr(Table, () => Table[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Table[HMR].source;
    set(Table[HMR].source, module.default[HMR].original);
  });
}
var table_default = Table;

// node_modules/lucide-svelte/dist/icons/tablet-smartphone.svelte
Tablet_smartphone[FILENAME] = "node_modules/lucide-svelte/dist/icons/tablet-smartphone.svelte";
function Tablet_smartphone($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tablet_smartphone);
  const iconNode = [
    [
      "rect",
      { "width": "10", "height": "14", "x": "3", "y": "8", "rx": "2" }
    ],
    [
      "path",
      {
        "d": "M5 4a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2h-2.4"
      }
    ],
    ["path", { "d": "M8 18h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tablet-smartphone" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tablet_smartphone, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tablet_smartphone,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tablet_smartphone = hmr(Tablet_smartphone, () => Tablet_smartphone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tablet_smartphone[HMR].source;
    set(Tablet_smartphone[HMR].source, module.default[HMR].original);
  });
}
var tablet_smartphone_default = Tablet_smartphone;

// node_modules/lucide-svelte/dist/icons/tablet.svelte
Tablet[FILENAME] = "node_modules/lucide-svelte/dist/icons/tablet.svelte";
function Tablet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tablet);
  const iconNode = [
    [
      "rect",
      {
        "width": "16",
        "height": "20",
        "x": "4",
        "y": "2",
        "rx": "2",
        "ry": "2"
      }
    ],
    [
      "line",
      { "x1": "12", "x2": "12.01", "y1": "18", "y2": "18" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tablet" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tablet, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tablet,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tablet = hmr(Tablet, () => Tablet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tablet[HMR].source;
    set(Tablet[HMR].source, module.default[HMR].original);
  });
}
var tablet_default = Tablet;

// node_modules/lucide-svelte/dist/icons/tablets.svelte
Tablets[FILENAME] = "node_modules/lucide-svelte/dist/icons/tablets.svelte";
function Tablets($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tablets);
  const iconNode = [
    ["circle", { "cx": "7", "cy": "7", "r": "5" }],
    ["circle", { "cx": "17", "cy": "17", "r": "5" }],
    ["path", { "d": "M12 17h10" }],
    ["path", { "d": "m3.46 10.54 7.08-7.08" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tablets" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tablets, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tablets,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tablets = hmr(Tablets, () => Tablets[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tablets[HMR].source;
    set(Tablets[HMR].source, module.default[HMR].original);
  });
}
var tablets_default = Tablets;

// node_modules/lucide-svelte/dist/icons/tag.svelte
Tag[FILENAME] = "node_modules/lucide-svelte/dist/icons/tag.svelte";
function Tag($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tag);
  const iconNode = [
    [
      "path",
      {
        "d": "M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"
      }
    ],
    [
      "circle",
      { "cx": "7.5", "cy": "7.5", "r": ".5", "fill": "currentColor" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tag" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tag, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tag,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tag = hmr(Tag, () => Tag[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tag[HMR].source;
    set(Tag[HMR].source, module.default[HMR].original);
  });
}
var tag_default = Tag;

// node_modules/lucide-svelte/dist/icons/tags.svelte
Tags[FILENAME] = "node_modules/lucide-svelte/dist/icons/tags.svelte";
function Tags($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tags);
  const iconNode = [
    [
      "path",
      {
        "d": "M13.172 2a2 2 0 0 1 1.414.586l6.71 6.71a2.4 2.4 0 0 1 0 3.408l-4.592 4.592a2.4 2.4 0 0 1-3.408 0l-6.71-6.71A2 2 0 0 1 6 9.172V3a1 1 0 0 1 1-1z"
      }
    ],
    [
      "path",
      {
        "d": "M2 7v6.172a2 2 0 0 0 .586 1.414l6.71 6.71a2.4 2.4 0 0 0 3.191.193"
      }
    ],
    [
      "circle",
      { "cx": "10.5", "cy": "6.5", "r": ".5", "fill": "currentColor" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tags" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tags, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tags,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tags = hmr(Tags, () => Tags[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tags[HMR].source;
    set(Tags[HMR].source, module.default[HMR].original);
  });
}
var tags_default = Tags;

// node_modules/lucide-svelte/dist/icons/tally-1.svelte
Tally_1[FILENAME] = "node_modules/lucide-svelte/dist/icons/tally-1.svelte";
function Tally_1($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tally_1);
  const iconNode = [["path", { "d": "M4 4v16" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tally-1" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tally_1, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tally_1,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tally_1 = hmr(Tally_1, () => Tally_1[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tally_1[HMR].source;
    set(Tally_1[HMR].source, module.default[HMR].original);
  });
}
var tally_1_default = Tally_1;

// node_modules/lucide-svelte/dist/icons/tally-2.svelte
Tally_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/tally-2.svelte";
function Tally_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tally_2);
  const iconNode = [["path", { "d": "M4 4v16" }], ["path", { "d": "M9 4v16" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tally-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tally_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tally_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tally_2 = hmr(Tally_2, () => Tally_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tally_2[HMR].source;
    set(Tally_2[HMR].source, module.default[HMR].original);
  });
}
var tally_2_default = Tally_2;

// node_modules/lucide-svelte/dist/icons/tally-3.svelte
Tally_3[FILENAME] = "node_modules/lucide-svelte/dist/icons/tally-3.svelte";
function Tally_3($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tally_3);
  const iconNode = [
    ["path", { "d": "M4 4v16" }],
    ["path", { "d": "M9 4v16" }],
    ["path", { "d": "M14 4v16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tally-3" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tally_3, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tally_3,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tally_3 = hmr(Tally_3, () => Tally_3[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tally_3[HMR].source;
    set(Tally_3[HMR].source, module.default[HMR].original);
  });
}
var tally_3_default = Tally_3;

// node_modules/lucide-svelte/dist/icons/tally-4.svelte
Tally_4[FILENAME] = "node_modules/lucide-svelte/dist/icons/tally-4.svelte";
function Tally_4($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tally_4);
  const iconNode = [
    ["path", { "d": "M4 4v16" }],
    ["path", { "d": "M9 4v16" }],
    ["path", { "d": "M14 4v16" }],
    ["path", { "d": "M19 4v16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tally-4" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tally_4, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tally_4,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tally_4 = hmr(Tally_4, () => Tally_4[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tally_4[HMR].source;
    set(Tally_4[HMR].source, module.default[HMR].original);
  });
}
var tally_4_default = Tally_4;

// node_modules/lucide-svelte/dist/icons/tally-5.svelte
Tally_5[FILENAME] = "node_modules/lucide-svelte/dist/icons/tally-5.svelte";
function Tally_5($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tally_5);
  const iconNode = [
    ["path", { "d": "M4 4v16" }],
    ["path", { "d": "M9 4v16" }],
    ["path", { "d": "M14 4v16" }],
    ["path", { "d": "M19 4v16" }],
    ["path", { "d": "M22 6 2 18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tally-5" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tally_5, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tally_5,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tally_5 = hmr(Tally_5, () => Tally_5[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tally_5[HMR].source;
    set(Tally_5[HMR].source, module.default[HMR].original);
  });
}
var tally_5_default = Tally_5;

// node_modules/lucide-svelte/dist/icons/tangent.svelte
Tangent[FILENAME] = "node_modules/lucide-svelte/dist/icons/tangent.svelte";
function Tangent($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tangent);
  const iconNode = [
    ["circle", { "cx": "17", "cy": "4", "r": "2" }],
    ["path", { "d": "M15.59 5.41 5.41 15.59" }],
    ["circle", { "cx": "4", "cy": "17", "r": "2" }],
    ["path", { "d": "M12 22s-4-9-1.5-11.5S22 12 22 12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tangent" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tangent, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tangent,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tangent = hmr(Tangent, () => Tangent[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tangent[HMR].source;
    set(Tangent[HMR].source, module.default[HMR].original);
  });
}
var tangent_default = Tangent;

// node_modules/lucide-svelte/dist/icons/target.svelte
Target[FILENAME] = "node_modules/lucide-svelte/dist/icons/target.svelte";
function Target($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Target);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "12", "r": "10" }],
    ["circle", { "cx": "12", "cy": "12", "r": "6" }],
    ["circle", { "cx": "12", "cy": "12", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "target" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Target, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Target,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Target = hmr(Target, () => Target[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Target[HMR].source;
    set(Target[HMR].source, module.default[HMR].original);
  });
}
var target_default = Target;

// node_modules/lucide-svelte/dist/icons/telescope.svelte
Telescope[FILENAME] = "node_modules/lucide-svelte/dist/icons/telescope.svelte";
function Telescope($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Telescope);
  const iconNode = [
    [
      "path",
      {
        "d": "m10.065 12.493-6.18 1.318a.934.934 0 0 1-1.108-.702l-.537-2.15a1.07 1.07 0 0 1 .691-1.265l13.504-4.44"
      }
    ],
    ["path", { "d": "m13.56 11.747 4.332-.924" }],
    ["path", { "d": "m16 21-3.105-6.21" }],
    [
      "path",
      {
        "d": "M16.485 5.94a2 2 0 0 1 1.455-2.425l1.09-.272a1 1 0 0 1 1.212.727l1.515 6.06a1 1 0 0 1-.727 1.213l-1.09.272a2 2 0 0 1-2.425-1.455z"
      }
    ],
    ["path", { "d": "m6.158 8.633 1.114 4.456" }],
    ["path", { "d": "m8 21 3.105-6.21" }],
    ["circle", { "cx": "12", "cy": "13", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "telescope" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Telescope, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Telescope,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Telescope = hmr(Telescope, () => Telescope[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Telescope[HMR].source;
    set(Telescope[HMR].source, module.default[HMR].original);
  });
}
var telescope_default = Telescope;

// node_modules/lucide-svelte/dist/icons/tent-tree.svelte
Tent_tree[FILENAME] = "node_modules/lucide-svelte/dist/icons/tent-tree.svelte";
function Tent_tree($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tent_tree);
  const iconNode = [
    ["circle", { "cx": "4", "cy": "4", "r": "2" }],
    ["path", { "d": "m14 5 3-3 3 3" }],
    ["path", { "d": "m14 10 3-3 3 3" }],
    ["path", { "d": "M17 14V2" }],
    ["path", { "d": "M17 14H7l-5 8h20Z" }],
    ["path", { "d": "M8 14v8" }],
    ["path", { "d": "m9 14 5 8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tent-tree" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tent_tree, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tent_tree,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tent_tree = hmr(Tent_tree, () => Tent_tree[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tent_tree[HMR].source;
    set(Tent_tree[HMR].source, module.default[HMR].original);
  });
}
var tent_tree_default = Tent_tree;

// node_modules/lucide-svelte/dist/icons/tent.svelte
Tent[FILENAME] = "node_modules/lucide-svelte/dist/icons/tent.svelte";
function Tent($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tent);
  const iconNode = [
    ["path", { "d": "M3.5 21 14 3" }],
    ["path", { "d": "M20.5 21 10 3" }],
    ["path", { "d": "M15.5 21 12 15l-3.5 6" }],
    ["path", { "d": "M2 21h20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tent" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tent, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tent,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tent = hmr(Tent, () => Tent[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tent[HMR].source;
    set(Tent[HMR].source, module.default[HMR].original);
  });
}
var tent_default = Tent;

// node_modules/lucide-svelte/dist/icons/terminal.svelte
Terminal[FILENAME] = "node_modules/lucide-svelte/dist/icons/terminal.svelte";
function Terminal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Terminal);
  const iconNode = [
    ["path", { "d": "M12 19h8" }],
    ["path", { "d": "m4 17 6-6-6-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "terminal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Terminal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Terminal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Terminal = hmr(Terminal, () => Terminal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Terminal[HMR].source;
    set(Terminal[HMR].source, module.default[HMR].original);
  });
}
var terminal_default = Terminal;

// node_modules/lucide-svelte/dist/icons/test-tube-diagonal.svelte
Test_tube_diagonal[FILENAME] = "node_modules/lucide-svelte/dist/icons/test-tube-diagonal.svelte";
function Test_tube_diagonal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Test_tube_diagonal);
  const iconNode = [
    [
      "path",
      {
        "d": "M21 7 6.82 21.18a2.83 2.83 0 0 1-3.99-.01a2.83 2.83 0 0 1 0-4L17 3"
      }
    ],
    ["path", { "d": "m16 2 6 6" }],
    ["path", { "d": "M12 16H4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "test-tube-diagonal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Test_tube_diagonal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Test_tube_diagonal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Test_tube_diagonal = hmr(Test_tube_diagonal, () => Test_tube_diagonal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Test_tube_diagonal[HMR].source;
    set(Test_tube_diagonal[HMR].source, module.default[HMR].original);
  });
}
var test_tube_diagonal_default = Test_tube_diagonal;

// node_modules/lucide-svelte/dist/icons/test-tube.svelte
Test_tube[FILENAME] = "node_modules/lucide-svelte/dist/icons/test-tube.svelte";
function Test_tube($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Test_tube);
  const iconNode = [
    [
      "path",
      {
        "d": "M14.5 2v17.5c0 1.4-1.1 2.5-2.5 2.5c-1.4 0-2.5-1.1-2.5-2.5V2"
      }
    ],
    ["path", { "d": "M8.5 2h7" }],
    ["path", { "d": "M14.5 16h-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "test-tube" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Test_tube, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Test_tube,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Test_tube = hmr(Test_tube, () => Test_tube[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Test_tube[HMR].source;
    set(Test_tube[HMR].source, module.default[HMR].original);
  });
}
var test_tube_default = Test_tube;

// node_modules/lucide-svelte/dist/icons/test-tubes.svelte
Test_tubes[FILENAME] = "node_modules/lucide-svelte/dist/icons/test-tubes.svelte";
function Test_tubes($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Test_tubes);
  const iconNode = [
    [
      "path",
      { "d": "M9 2v17.5A2.5 2.5 0 0 1 6.5 22A2.5 2.5 0 0 1 4 19.5V2" }
    ],
    [
      "path",
      {
        "d": "M20 2v17.5a2.5 2.5 0 0 1-2.5 2.5a2.5 2.5 0 0 1-2.5-2.5V2"
      }
    ],
    ["path", { "d": "M3 2h7" }],
    ["path", { "d": "M14 2h7" }],
    ["path", { "d": "M9 16H4" }],
    ["path", { "d": "M20 16h-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "test-tubes" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Test_tubes, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Test_tubes,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Test_tubes = hmr(Test_tubes, () => Test_tubes[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Test_tubes[HMR].source;
    set(Test_tubes[HMR].source, module.default[HMR].original);
  });
}
var test_tubes_default = Test_tubes;

// node_modules/lucide-svelte/dist/icons/text-cursor-input.svelte
Text_cursor_input[FILENAME] = "node_modules/lucide-svelte/dist/icons/text-cursor-input.svelte";
function Text_cursor_input($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Text_cursor_input);
  const iconNode = [
    ["path", { "d": "M12 20h-1a2 2 0 0 1-2-2 2 2 0 0 1-2 2H6" }],
    ["path", { "d": "M13 8h7a2 2 0 0 1 2 2v4a2 2 0 0 1-2 2h-7" }],
    ["path", { "d": "M5 16H4a2 2 0 0 1-2-2v-4a2 2 0 0 1 2-2h1" }],
    ["path", { "d": "M6 4h1a2 2 0 0 1 2 2 2 2 0 0 1 2-2h1" }],
    ["path", { "d": "M9 6v12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "text-cursor-input" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Text_cursor_input, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Text_cursor_input,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Text_cursor_input = hmr(Text_cursor_input, () => Text_cursor_input[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Text_cursor_input[HMR].source;
    set(Text_cursor_input[HMR].source, module.default[HMR].original);
  });
}
var text_cursor_input_default = Text_cursor_input;

// node_modules/lucide-svelte/dist/icons/text-cursor.svelte
Text_cursor[FILENAME] = "node_modules/lucide-svelte/dist/icons/text-cursor.svelte";
function Text_cursor($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Text_cursor);
  const iconNode = [
    ["path", { "d": "M17 22h-1a4 4 0 0 1-4-4V6a4 4 0 0 1 4-4h1" }],
    ["path", { "d": "M7 22h1a4 4 0 0 0 4-4v-1" }],
    ["path", { "d": "M7 2h1a4 4 0 0 1 4 4v1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "text-cursor" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Text_cursor, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Text_cursor,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Text_cursor = hmr(Text_cursor, () => Text_cursor[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Text_cursor[HMR].source;
    set(Text_cursor[HMR].source, module.default[HMR].original);
  });
}
var text_cursor_default = Text_cursor;

// node_modules/lucide-svelte/dist/icons/text-quote.svelte
Text_quote[FILENAME] = "node_modules/lucide-svelte/dist/icons/text-quote.svelte";
function Text_quote($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Text_quote);
  const iconNode = [
    ["path", { "d": "M17 6H3" }],
    ["path", { "d": "M21 12H8" }],
    ["path", { "d": "M21 18H8" }],
    ["path", { "d": "M3 12v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "text-quote" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Text_quote, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Text_quote,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Text_quote = hmr(Text_quote, () => Text_quote[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Text_quote[HMR].source;
    set(Text_quote[HMR].source, module.default[HMR].original);
  });
}
var text_quote_default = Text_quote;

// node_modules/lucide-svelte/dist/icons/text-search.svelte
Text_search[FILENAME] = "node_modules/lucide-svelte/dist/icons/text-search.svelte";
function Text_search($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Text_search);
  const iconNode = [
    ["path", { "d": "M21 6H3" }],
    ["path", { "d": "M10 12H3" }],
    ["path", { "d": "M10 18H3" }],
    ["circle", { "cx": "17", "cy": "15", "r": "3" }],
    ["path", { "d": "m21 19-1.9-1.9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "text-search" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Text_search, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Text_search,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Text_search = hmr(Text_search, () => Text_search[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Text_search[HMR].source;
    set(Text_search[HMR].source, module.default[HMR].original);
  });
}
var text_search_default = Text_search;

// node_modules/lucide-svelte/dist/icons/text-select.svelte
Text_select[FILENAME] = "node_modules/lucide-svelte/dist/icons/text-select.svelte";
function Text_select($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Text_select);
  const iconNode = [
    ["path", { "d": "M14 21h1" }],
    ["path", { "d": "M14 3h1" }],
    ["path", { "d": "M19 3a2 2 0 0 1 2 2" }],
    ["path", { "d": "M21 14v1" }],
    ["path", { "d": "M21 19a2 2 0 0 1-2 2" }],
    ["path", { "d": "M21 9v1" }],
    ["path", { "d": "M3 14v1" }],
    ["path", { "d": "M3 9v1" }],
    ["path", { "d": "M5 21a2 2 0 0 1-2-2" }],
    ["path", { "d": "M5 3a2 2 0 0 0-2 2" }],
    ["path", { "d": "M7 12h10" }],
    ["path", { "d": "M7 16h6" }],
    ["path", { "d": "M7 8h8" }],
    ["path", { "d": "M9 21h1" }],
    ["path", { "d": "M9 3h1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "text-select" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Text_select, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Text_select,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Text_select = hmr(Text_select, () => Text_select[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Text_select[HMR].source;
    set(Text_select[HMR].source, module.default[HMR].original);
  });
}
var text_select_default = Text_select;

// node_modules/lucide-svelte/dist/icons/text.svelte
Text[FILENAME] = "node_modules/lucide-svelte/dist/icons/text.svelte";
function Text($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Text);
  const iconNode = [
    ["path", { "d": "M15 18H3" }],
    ["path", { "d": "M17 6H3" }],
    ["path", { "d": "M21 12H3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "text" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Text, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Text,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Text = hmr(Text, () => Text[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Text[HMR].source;
    set(Text[HMR].source, module.default[HMR].original);
  });
}
var text_default = Text;

// node_modules/lucide-svelte/dist/icons/theater.svelte
Theater[FILENAME] = "node_modules/lucide-svelte/dist/icons/theater.svelte";
function Theater($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Theater);
  const iconNode = [
    ["path", { "d": "M2 10s3-3 3-8" }],
    ["path", { "d": "M22 10s-3-3-3-8" }],
    ["path", { "d": "M10 2c0 4.4-3.6 8-8 8" }],
    ["path", { "d": "M14 2c0 4.4 3.6 8 8 8" }],
    ["path", { "d": "M2 10s2 2 2 5" }],
    ["path", { "d": "M22 10s-2 2-2 5" }],
    ["path", { "d": "M8 15h8" }],
    ["path", { "d": "M2 22v-1a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1" }],
    ["path", { "d": "M14 22v-1a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "theater" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Theater, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Theater,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Theater = hmr(Theater, () => Theater[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Theater[HMR].source;
    set(Theater[HMR].source, module.default[HMR].original);
  });
}
var theater_default = Theater;

// node_modules/lucide-svelte/dist/icons/thermometer-sun.svelte
Thermometer_sun[FILENAME] = "node_modules/lucide-svelte/dist/icons/thermometer-sun.svelte";
function Thermometer_sun($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Thermometer_sun);
  const iconNode = [
    ["path", { "d": "M12 9a4 4 0 0 0-2 7.5" }],
    ["path", { "d": "M12 3v2" }],
    ["path", { "d": "m6.6 18.4-1.4 1.4" }],
    [
      "path",
      { "d": "M20 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z" }
    ],
    ["path", { "d": "M4 13H2" }],
    ["path", { "d": "M6.34 7.34 4.93 5.93" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "thermometer-sun" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Thermometer_sun, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Thermometer_sun,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Thermometer_sun = hmr(Thermometer_sun, () => Thermometer_sun[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Thermometer_sun[HMR].source;
    set(Thermometer_sun[HMR].source, module.default[HMR].original);
  });
}
var thermometer_sun_default = Thermometer_sun;

// node_modules/lucide-svelte/dist/icons/thermometer-snowflake.svelte
Thermometer_snowflake[FILENAME] = "node_modules/lucide-svelte/dist/icons/thermometer-snowflake.svelte";
function Thermometer_snowflake($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Thermometer_snowflake);
  const iconNode = [
    ["path", { "d": "m10 20-1.25-2.5L6 18" }],
    ["path", { "d": "M10 4 8.75 6.5 6 6" }],
    ["path", { "d": "M10.585 15H10" }],
    ["path", { "d": "M2 12h6.5L10 9" }],
    ["path", { "d": "M20 14.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0z" }],
    ["path", { "d": "m4 10 1.5 2L4 14" }],
    ["path", { "d": "m7 21 3-6-1.5-3" }],
    ["path", { "d": "m7 3 3 6h2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "thermometer-snowflake" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Thermometer_snowflake, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Thermometer_snowflake,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Thermometer_snowflake = hmr(Thermometer_snowflake, () => Thermometer_snowflake[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Thermometer_snowflake[HMR].source;
    set(Thermometer_snowflake[HMR].source, module.default[HMR].original);
  });
}
var thermometer_snowflake_default = Thermometer_snowflake;

// node_modules/lucide-svelte/dist/icons/thermometer.svelte
Thermometer[FILENAME] = "node_modules/lucide-svelte/dist/icons/thermometer.svelte";
function Thermometer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Thermometer);
  const iconNode = [
    [
      "path",
      { "d": "M14 4v10.54a4 4 0 1 1-4 0V4a2 2 0 0 1 4 0Z" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "thermometer" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Thermometer, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Thermometer,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Thermometer = hmr(Thermometer, () => Thermometer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Thermometer[HMR].source;
    set(Thermometer[HMR].source, module.default[HMR].original);
  });
}
var thermometer_default = Thermometer;

// node_modules/lucide-svelte/dist/icons/thumbs-down.svelte
Thumbs_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/thumbs-down.svelte";
function Thumbs_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Thumbs_down);
  const iconNode = [
    ["path", { "d": "M17 14V2" }],
    [
      "path",
      {
        "d": "M9 18.12 10 14H4.17a2 2 0 0 1-1.92-2.56l2.33-8A2 2 0 0 1 6.5 2H20a2 2 0 0 1 2 2v8a2 2 0 0 1-2 2h-2.76a2 2 0 0 0-1.79 1.11L12 22a3.13 3.13 0 0 1-3-3.88Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "thumbs-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Thumbs_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Thumbs_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Thumbs_down = hmr(Thumbs_down, () => Thumbs_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Thumbs_down[HMR].source;
    set(Thumbs_down[HMR].source, module.default[HMR].original);
  });
}
var thumbs_down_default = Thumbs_down;

// node_modules/lucide-svelte/dist/icons/thumbs-up.svelte
Thumbs_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/thumbs-up.svelte";
function Thumbs_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Thumbs_up);
  const iconNode = [
    ["path", { "d": "M7 10v12" }],
    [
      "path",
      {
        "d": "M15 5.88 14 10h5.83a2 2 0 0 1 1.92 2.56l-2.33 8A2 2 0 0 1 17.5 22H4a2 2 0 0 1-2-2v-8a2 2 0 0 1 2-2h2.76a2 2 0 0 0 1.79-1.11L12 2a3.13 3.13 0 0 1 3 3.88Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "thumbs-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Thumbs_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Thumbs_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Thumbs_up = hmr(Thumbs_up, () => Thumbs_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Thumbs_up[HMR].source;
    set(Thumbs_up[HMR].source, module.default[HMR].original);
  });
}
var thumbs_up_default = Thumbs_up;

// node_modules/lucide-svelte/dist/icons/ticket-check.svelte
Ticket_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/ticket-check.svelte";
function Ticket_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ticket_check);
  const iconNode = [
    [
      "path",
      {
        "d": "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"
      }
    ],
    ["path", { "d": "m9 12 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ticket-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ticket_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ticket_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ticket_check = hmr(Ticket_check, () => Ticket_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ticket_check[HMR].source;
    set(Ticket_check[HMR].source, module.default[HMR].original);
  });
}
var ticket_check_default = Ticket_check;

// node_modules/lucide-svelte/dist/icons/ticket-minus.svelte
Ticket_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/ticket-minus.svelte";
function Ticket_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ticket_minus);
  const iconNode = [
    [
      "path",
      {
        "d": "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"
      }
    ],
    ["path", { "d": "M9 12h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ticket-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ticket_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ticket_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ticket_minus = hmr(Ticket_minus, () => Ticket_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ticket_minus[HMR].source;
    set(Ticket_minus[HMR].source, module.default[HMR].original);
  });
}
var ticket_minus_default = Ticket_minus;

// node_modules/lucide-svelte/dist/icons/ticket-percent.svelte
Ticket_percent[FILENAME] = "node_modules/lucide-svelte/dist/icons/ticket-percent.svelte";
function Ticket_percent($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ticket_percent);
  const iconNode = [
    [
      "path",
      {
        "d": "M2 9a3 3 0 1 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 1 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"
      }
    ],
    ["path", { "d": "M9 9h.01" }],
    ["path", { "d": "m15 9-6 6" }],
    ["path", { "d": "M15 15h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ticket-percent" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ticket_percent, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ticket_percent,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ticket_percent = hmr(Ticket_percent, () => Ticket_percent[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ticket_percent[HMR].source;
    set(Ticket_percent[HMR].source, module.default[HMR].original);
  });
}
var ticket_percent_default = Ticket_percent;

// node_modules/lucide-svelte/dist/icons/ticket-plus.svelte
Ticket_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/ticket-plus.svelte";
function Ticket_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ticket_plus);
  const iconNode = [
    [
      "path",
      {
        "d": "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"
      }
    ],
    ["path", { "d": "M9 12h6" }],
    ["path", { "d": "M12 9v6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ticket-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ticket_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ticket_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ticket_plus = hmr(Ticket_plus, () => Ticket_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ticket_plus[HMR].source;
    set(Ticket_plus[HMR].source, module.default[HMR].original);
  });
}
var ticket_plus_default = Ticket_plus;

// node_modules/lucide-svelte/dist/icons/ticket-slash.svelte
Ticket_slash[FILENAME] = "node_modules/lucide-svelte/dist/icons/ticket-slash.svelte";
function Ticket_slash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ticket_slash);
  const iconNode = [
    [
      "path",
      {
        "d": "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"
      }
    ],
    ["path", { "d": "m9.5 14.5 5-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ticket-slash" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ticket_slash, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ticket_slash,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ticket_slash = hmr(Ticket_slash, () => Ticket_slash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ticket_slash[HMR].source;
    set(Ticket_slash[HMR].source, module.default[HMR].original);
  });
}
var ticket_slash_default = Ticket_slash;

// node_modules/lucide-svelte/dist/icons/ticket-x.svelte
Ticket_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/ticket-x.svelte";
function Ticket_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ticket_x);
  const iconNode = [
    [
      "path",
      {
        "d": "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"
      }
    ],
    ["path", { "d": "m9.5 14.5 5-5" }],
    ["path", { "d": "m9.5 9.5 5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ticket-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ticket_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ticket_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ticket_x = hmr(Ticket_x, () => Ticket_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ticket_x[HMR].source;
    set(Ticket_x[HMR].source, module.default[HMR].original);
  });
}
var ticket_x_default = Ticket_x;

// node_modules/lucide-svelte/dist/icons/ticket.svelte
Ticket[FILENAME] = "node_modules/lucide-svelte/dist/icons/ticket.svelte";
function Ticket($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ticket);
  const iconNode = [
    [
      "path",
      {
        "d": "M2 9a3 3 0 0 1 0 6v2a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2v-2a3 3 0 0 1 0-6V7a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2Z"
      }
    ],
    ["path", { "d": "M13 5v2" }],
    ["path", { "d": "M13 17v2" }],
    ["path", { "d": "M13 11v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ticket" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ticket, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ticket,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ticket = hmr(Ticket, () => Ticket[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ticket[HMR].source;
    set(Ticket[HMR].source, module.default[HMR].original);
  });
}
var ticket_default = Ticket;

// node_modules/lucide-svelte/dist/icons/tickets.svelte
Tickets[FILENAME] = "node_modules/lucide-svelte/dist/icons/tickets.svelte";
function Tickets($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tickets);
  const iconNode = [
    [
      "path",
      { "d": "m4.5 8 10.58-5.06a1 1 0 0 1 1.342.488L18.5 8" }
    ],
    ["path", { "d": "M6 10V8" }],
    ["path", { "d": "M6 14v1" }],
    ["path", { "d": "M6 19v2" }],
    [
      "rect",
      { "x": "2", "y": "8", "width": "20", "height": "13", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tickets" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tickets, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tickets,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tickets = hmr(Tickets, () => Tickets[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tickets[HMR].source;
    set(Tickets[HMR].source, module.default[HMR].original);
  });
}
var tickets_default = Tickets;

// node_modules/lucide-svelte/dist/icons/tickets-plane.svelte
Tickets_plane[FILENAME] = "node_modules/lucide-svelte/dist/icons/tickets-plane.svelte";
function Tickets_plane($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tickets_plane);
  const iconNode = [
    ["path", { "d": "M10.5 17h1.227a2 2 0 0 0 1.345-.52L18 12" }],
    ["path", { "d": "m12 13.5 3.75.5" }],
    [
      "path",
      { "d": "m4.5 8 10.58-5.06a1 1 0 0 1 1.342.488L18.5 8" }
    ],
    ["path", { "d": "M6 10V8" }],
    ["path", { "d": "M6 14v1" }],
    ["path", { "d": "M6 19v2" }],
    [
      "rect",
      { "x": "2", "y": "8", "width": "20", "height": "13", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tickets-plane" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tickets_plane, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tickets_plane,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tickets_plane = hmr(Tickets_plane, () => Tickets_plane[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tickets_plane[HMR].source;
    set(Tickets_plane[HMR].source, module.default[HMR].original);
  });
}
var tickets_plane_default = Tickets_plane;

// node_modules/lucide-svelte/dist/icons/timer-off.svelte
Timer_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/timer-off.svelte";
function Timer_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Timer_off);
  const iconNode = [
    ["path", { "d": "M10 2h4" }],
    [
      "path",
      { "d": "M4.6 11a8 8 0 0 0 1.7 8.7 8 8 0 0 0 8.7 1.7" }
    ],
    [
      "path",
      { "d": "M7.4 7.4a8 8 0 0 1 10.3 1 8 8 0 0 1 .9 10.2" }
    ],
    ["path", { "d": "m2 2 20 20" }],
    ["path", { "d": "M12 12v-2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "timer-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Timer_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Timer_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Timer_off = hmr(Timer_off, () => Timer_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Timer_off[HMR].source;
    set(Timer_off[HMR].source, module.default[HMR].original);
  });
}
var timer_off_default = Timer_off;

// node_modules/lucide-svelte/dist/icons/timer.svelte
Timer[FILENAME] = "node_modules/lucide-svelte/dist/icons/timer.svelte";
function Timer($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Timer);
  const iconNode = [
    ["line", { "x1": "10", "x2": "14", "y1": "2", "y2": "2" }],
    ["line", { "x1": "12", "x2": "15", "y1": "14", "y2": "11" }],
    ["circle", { "cx": "12", "cy": "14", "r": "8" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "timer" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Timer, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Timer,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Timer = hmr(Timer, () => Timer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Timer[HMR].source;
    set(Timer[HMR].source, module.default[HMR].original);
  });
}
var timer_default = Timer;

// node_modules/lucide-svelte/dist/icons/timer-reset.svelte
Timer_reset[FILENAME] = "node_modules/lucide-svelte/dist/icons/timer-reset.svelte";
function Timer_reset($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Timer_reset);
  const iconNode = [
    ["path", { "d": "M10 2h4" }],
    ["path", { "d": "M12 14v-4" }],
    [
      "path",
      { "d": "M4 13a8 8 0 0 1 8-7 8 8 0 1 1-5.3 14L4 17.6" }
    ],
    ["path", { "d": "M9 17H4v5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "timer-reset" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Timer_reset, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Timer_reset,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Timer_reset = hmr(Timer_reset, () => Timer_reset[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Timer_reset[HMR].source;
    set(Timer_reset[HMR].source, module.default[HMR].original);
  });
}
var timer_reset_default = Timer_reset;

// node_modules/lucide-svelte/dist/icons/toggle-left.svelte
Toggle_left[FILENAME] = "node_modules/lucide-svelte/dist/icons/toggle-left.svelte";
function Toggle_left($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Toggle_left);
  const iconNode = [
    ["circle", { "cx": "9", "cy": "12", "r": "3" }],
    [
      "rect",
      { "width": "20", "height": "14", "x": "2", "y": "5", "rx": "7" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "toggle-left" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Toggle_left, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Toggle_left,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Toggle_left = hmr(Toggle_left, () => Toggle_left[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toggle_left[HMR].source;
    set(Toggle_left[HMR].source, module.default[HMR].original);
  });
}
var toggle_left_default = Toggle_left;

// node_modules/lucide-svelte/dist/icons/toggle-right.svelte
Toggle_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/toggle-right.svelte";
function Toggle_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Toggle_right);
  const iconNode = [
    ["circle", { "cx": "15", "cy": "12", "r": "3" }],
    [
      "rect",
      { "width": "20", "height": "14", "x": "2", "y": "5", "rx": "7" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "toggle-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Toggle_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Toggle_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Toggle_right = hmr(Toggle_right, () => Toggle_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toggle_right[HMR].source;
    set(Toggle_right[HMR].source, module.default[HMR].original);
  });
}
var toggle_right_default = Toggle_right;

// node_modules/lucide-svelte/dist/icons/toilet.svelte
Toilet[FILENAME] = "node_modules/lucide-svelte/dist/icons/toilet.svelte";
function Toilet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Toilet);
  const iconNode = [
    [
      "path",
      {
        "d": "M7 12h13a1 1 0 0 1 1 1 5 5 0 0 1-5 5h-.598a.5.5 0 0 0-.424.765l1.544 2.47a.5.5 0 0 1-.424.765H5.402a.5.5 0 0 1-.424-.765L7 18"
      }
    ],
    [
      "path",
      { "d": "M8 18a5 5 0 0 1-5-5V4a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v8" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "toilet" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Toilet, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Toilet,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Toilet = hmr(Toilet, () => Toilet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toilet[HMR].source;
    set(Toilet[HMR].source, module.default[HMR].original);
  });
}
var toilet_default = Toilet;

// node_modules/lucide-svelte/dist/icons/tool-case.svelte
Tool_case[FILENAME] = "node_modules/lucide-svelte/dist/icons/tool-case.svelte";
function Tool_case($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tool_case);
  const iconNode = [
    ["path", { "d": "M10 15h4" }],
    [
      "path",
      {
        "d": "m14.817 10.995-.971-1.45 1.034-1.232a2 2 0 0 0-2.025-3.238l-1.82.364L9.91 3.885a2 2 0 0 0-3.625.748L6.141 6.55l-1.725.426a2 2 0 0 0-.19 3.756l.657.27"
      }
    ],
    [
      "path",
      {
        "d": "m18.822 10.995 2.26-5.38a1 1 0 0 0-.557-1.318L16.954 2.9a1 1 0 0 0-1.281.533l-.924 2.122"
      }
    ],
    [
      "path",
      {
        "d": "M4 12.006A1 1 0 0 1 4.994 11H19a1 1 0 0 1 1 1v7a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tool-case" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tool_case, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tool_case,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tool_case = hmr(Tool_case, () => Tool_case[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tool_case[HMR].source;
    set(Tool_case[HMR].source, module.default[HMR].original);
  });
}
var tool_case_default = Tool_case;

// node_modules/lucide-svelte/dist/icons/tornado.svelte
Tornado[FILENAME] = "node_modules/lucide-svelte/dist/icons/tornado.svelte";
function Tornado($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tornado);
  const iconNode = [
    ["path", { "d": "M21 4H3" }],
    ["path", { "d": "M18 8H6" }],
    ["path", { "d": "M19 12H9" }],
    ["path", { "d": "M16 16h-6" }],
    ["path", { "d": "M11 20H9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tornado" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tornado, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tornado,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tornado = hmr(Tornado, () => Tornado[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tornado[HMR].source;
    set(Tornado[HMR].source, module.default[HMR].original);
  });
}
var tornado_default = Tornado;

// node_modules/lucide-svelte/dist/icons/torus.svelte
Torus[FILENAME] = "node_modules/lucide-svelte/dist/icons/torus.svelte";
function Torus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Torus);
  const iconNode = [
    ["ellipse", { "cx": "12", "cy": "11", "rx": "3", "ry": "2" }],
    [
      "ellipse",
      { "cx": "12", "cy": "12.5", "rx": "10", "ry": "8.5" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "torus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Torus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Torus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Torus = hmr(Torus, () => Torus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Torus[HMR].source;
    set(Torus[HMR].source, module.default[HMR].original);
  });
}
var torus_default = Torus;

// node_modules/lucide-svelte/dist/icons/touchpad-off.svelte
Touchpad_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/touchpad-off.svelte";
function Touchpad_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Touchpad_off);
  const iconNode = [
    ["path", { "d": "M12 20v-6" }],
    ["path", { "d": "M19.656 14H22" }],
    ["path", { "d": "M2 14h12" }],
    ["path", { "d": "m2 2 20 20" }],
    ["path", { "d": "M20 20H4a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2" }],
    ["path", { "d": "M9.656 4H20a2 2 0 0 1 2 2v10.344" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "touchpad-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Touchpad_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Touchpad_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Touchpad_off = hmr(Touchpad_off, () => Touchpad_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Touchpad_off[HMR].source;
    set(Touchpad_off[HMR].source, module.default[HMR].original);
  });
}
var touchpad_off_default = Touchpad_off;

// node_modules/lucide-svelte/dist/icons/touchpad.svelte
Touchpad[FILENAME] = "node_modules/lucide-svelte/dist/icons/touchpad.svelte";
function Touchpad($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Touchpad);
  const iconNode = [
    [
      "rect",
      { "width": "20", "height": "16", "x": "2", "y": "4", "rx": "2" }
    ],
    ["path", { "d": "M2 14h20" }],
    ["path", { "d": "M12 20v-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "touchpad" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Touchpad, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Touchpad,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Touchpad = hmr(Touchpad, () => Touchpad[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Touchpad[HMR].source;
    set(Touchpad[HMR].source, module.default[HMR].original);
  });
}
var touchpad_default = Touchpad;

// node_modules/lucide-svelte/dist/icons/tower-control.svelte
Tower_control[FILENAME] = "node_modules/lucide-svelte/dist/icons/tower-control.svelte";
function Tower_control($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tower_control);
  const iconNode = [
    [
      "path",
      {
        "d": "M18.2 12.27 20 6H4l1.8 6.27a1 1 0 0 0 .95.73h10.5a1 1 0 0 0 .96-.73Z"
      }
    ],
    ["path", { "d": "M8 13v9" }],
    ["path", { "d": "M16 22v-9" }],
    ["path", { "d": "m9 6 1 7" }],
    ["path", { "d": "m15 6-1 7" }],
    ["path", { "d": "M12 6V2" }],
    ["path", { "d": "M13 2h-2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tower-control" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tower_control, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tower_control,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tower_control = hmr(Tower_control, () => Tower_control[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tower_control[HMR].source;
    set(Tower_control[HMR].source, module.default[HMR].original);
  });
}
var tower_control_default = Tower_control;

// node_modules/lucide-svelte/dist/icons/toy-brick.svelte
Toy_brick[FILENAME] = "node_modules/lucide-svelte/dist/icons/toy-brick.svelte";
function Toy_brick($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Toy_brick);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "12", "x": "3", "y": "8", "rx": "1" }
    ],
    ["path", { "d": "M10 8V5c0-.6-.4-1-1-1H6a1 1 0 0 0-1 1v3" }],
    ["path", { "d": "M19 8V5c0-.6-.4-1-1-1h-3a1 1 0 0 0-1 1v3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "toy-brick" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Toy_brick, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Toy_brick,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Toy_brick = hmr(Toy_brick, () => Toy_brick[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toy_brick[HMR].source;
    set(Toy_brick[HMR].source, module.default[HMR].original);
  });
}
var toy_brick_default = Toy_brick;

// node_modules/lucide-svelte/dist/icons/tractor.svelte
Tractor[FILENAME] = "node_modules/lucide-svelte/dist/icons/tractor.svelte";
function Tractor($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tractor);
  const iconNode = [
    [
      "path",
      {
        "d": "m10 11 11 .9a1 1 0 0 1 .8 1.1l-.665 4.158a1 1 0 0 1-.988.842H20"
      }
    ],
    ["path", { "d": "M16 18h-5" }],
    ["path", { "d": "M18 5a1 1 0 0 0-1 1v5.573" }],
    ["path", { "d": "M3 4h8.129a1 1 0 0 1 .99.863L13 11.246" }],
    ["path", { "d": "M4 11V4" }],
    ["path", { "d": "M7 15h.01" }],
    ["path", { "d": "M8 10.1V4" }],
    ["circle", { "cx": "18", "cy": "18", "r": "2" }],
    ["circle", { "cx": "7", "cy": "15", "r": "5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tractor" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tractor, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tractor,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tractor = hmr(Tractor, () => Tractor[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tractor[HMR].source;
    set(Tractor[HMR].source, module.default[HMR].original);
  });
}
var tractor_default = Tractor;

// node_modules/lucide-svelte/dist/icons/traffic-cone.svelte
Traffic_cone[FILENAME] = "node_modules/lucide-svelte/dist/icons/traffic-cone.svelte";
function Traffic_cone($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Traffic_cone);
  const iconNode = [
    ["path", { "d": "M16.05 10.966a5 2.5 0 0 1-8.1 0" }],
    [
      "path",
      {
        "d": "m16.923 14.049 4.48 2.04a1 1 0 0 1 .001 1.831l-8.574 3.9a2 2 0 0 1-1.66 0l-8.574-3.91a1 1 0 0 1 0-1.83l4.484-2.04"
      }
    ],
    [
      "path",
      {
        "d": "M16.949 14.14a5 2.5 0 1 1-9.9 0L10.063 3.5a2 2 0 0 1 3.874 0z"
      }
    ],
    ["path", { "d": "M9.194 6.57a5 2.5 0 0 0 5.61 0" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "traffic-cone" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Traffic_cone, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Traffic_cone,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Traffic_cone = hmr(Traffic_cone, () => Traffic_cone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Traffic_cone[HMR].source;
    set(Traffic_cone[HMR].source, module.default[HMR].original);
  });
}
var traffic_cone_default = Traffic_cone;

// node_modules/lucide-svelte/dist/icons/train-front-tunnel.svelte
Train_front_tunnel[FILENAME] = "node_modules/lucide-svelte/dist/icons/train-front-tunnel.svelte";
function Train_front_tunnel($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Train_front_tunnel);
  const iconNode = [
    ["path", { "d": "M2 22V12a10 10 0 1 1 20 0v10" }],
    ["path", { "d": "M15 6.8v1.4a3 2.8 0 1 1-6 0V6.8" }],
    ["path", { "d": "M10 15h.01" }],
    ["path", { "d": "M14 15h.01" }],
    [
      "path",
      {
        "d": "M10 19a4 4 0 0 1-4-4v-3a6 6 0 1 1 12 0v3a4 4 0 0 1-4 4Z"
      }
    ],
    ["path", { "d": "m9 19-2 3" }],
    ["path", { "d": "m15 19 2 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "train-front-tunnel" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Train_front_tunnel, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Train_front_tunnel,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Train_front_tunnel = hmr(Train_front_tunnel, () => Train_front_tunnel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Train_front_tunnel[HMR].source;
    set(Train_front_tunnel[HMR].source, module.default[HMR].original);
  });
}
var train_front_tunnel_default = Train_front_tunnel;

// node_modules/lucide-svelte/dist/icons/train-front.svelte
Train_front[FILENAME] = "node_modules/lucide-svelte/dist/icons/train-front.svelte";
function Train_front($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Train_front);
  const iconNode = [
    ["path", { "d": "M8 3.1V7a4 4 0 0 0 8 0V3.1" }],
    ["path", { "d": "m9 15-1-1" }],
    ["path", { "d": "m15 15 1-1" }],
    [
      "path",
      {
        "d": "M9 19c-2.8 0-5-2.2-5-5v-4a8 8 0 0 1 16 0v4c0 2.8-2.2 5-5 5Z"
      }
    ],
    ["path", { "d": "m8 19-2 3" }],
    ["path", { "d": "m16 19 2 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "train-front" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Train_front, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Train_front,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Train_front = hmr(Train_front, () => Train_front[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Train_front[HMR].source;
    set(Train_front[HMR].source, module.default[HMR].original);
  });
}
var train_front_default = Train_front;

// node_modules/lucide-svelte/dist/icons/train-track.svelte
Train_track[FILENAME] = "node_modules/lucide-svelte/dist/icons/train-track.svelte";
function Train_track($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Train_track);
  const iconNode = [
    ["path", { "d": "M2 17 17 2" }],
    ["path", { "d": "m2 14 8 8" }],
    ["path", { "d": "m5 11 8 8" }],
    ["path", { "d": "m8 8 8 8" }],
    ["path", { "d": "m11 5 8 8" }],
    ["path", { "d": "m14 2 8 8" }],
    ["path", { "d": "M7 22 22 7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "train-track" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Train_track, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Train_track,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Train_track = hmr(Train_track, () => Train_track[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Train_track[HMR].source;
    set(Train_track[HMR].source, module.default[HMR].original);
  });
}
var train_track_default = Train_track;

// node_modules/lucide-svelte/dist/icons/tram-front.svelte
Tram_front[FILENAME] = "node_modules/lucide-svelte/dist/icons/tram-front.svelte";
function Tram_front($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tram_front);
  const iconNode = [
    [
      "rect",
      { "width": "16", "height": "16", "x": "4", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M4 11h16" }],
    ["path", { "d": "M12 3v8" }],
    ["path", { "d": "m8 19-2 3" }],
    ["path", { "d": "m18 22-2-3" }],
    ["path", { "d": "M8 15h.01" }],
    ["path", { "d": "M16 15h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tram-front" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tram_front, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tram_front,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tram_front = hmr(Tram_front, () => Tram_front[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tram_front[HMR].source;
    set(Tram_front[HMR].source, module.default[HMR].original);
  });
}
var tram_front_default = Tram_front;

// node_modules/lucide-svelte/dist/icons/transgender.svelte
Transgender[FILENAME] = "node_modules/lucide-svelte/dist/icons/transgender.svelte";
function Transgender($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Transgender);
  const iconNode = [
    ["path", { "d": "M12 16v6" }],
    ["path", { "d": "M14 20h-4" }],
    ["path", { "d": "M18 2h4v4" }],
    ["path", { "d": "m2 2 7.17 7.17" }],
    ["path", { "d": "M2 5.355V2h3.357" }],
    ["path", { "d": "m22 2-7.17 7.17" }],
    ["path", { "d": "M8 5 5 8" }],
    ["circle", { "cx": "12", "cy": "12", "r": "4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "transgender" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Transgender, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Transgender,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Transgender = hmr(Transgender, () => Transgender[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Transgender[HMR].source;
    set(Transgender[HMR].source, module.default[HMR].original);
  });
}
var transgender_default = Transgender;

// node_modules/lucide-svelte/dist/icons/trash-2.svelte
Trash_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/trash-2.svelte";
function Trash_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Trash_2);
  const iconNode = [
    ["path", { "d": "M10 11v6" }],
    ["path", { "d": "M14 11v6" }],
    ["path", { "d": "M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6" }],
    ["path", { "d": "M3 6h18" }],
    ["path", { "d": "M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "trash-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Trash_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Trash_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Trash_2 = hmr(Trash_2, () => Trash_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Trash_2[HMR].source;
    set(Trash_2[HMR].source, module.default[HMR].original);
  });
}
var trash_2_default = Trash_2;

// node_modules/lucide-svelte/dist/icons/trash.svelte
Trash[FILENAME] = "node_modules/lucide-svelte/dist/icons/trash.svelte";
function Trash($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Trash);
  const iconNode = [
    ["path", { "d": "M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6" }],
    ["path", { "d": "M3 6h18" }],
    ["path", { "d": "M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "trash" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Trash, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Trash,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Trash = hmr(Trash, () => Trash[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Trash[HMR].source;
    set(Trash[HMR].source, module.default[HMR].original);
  });
}
var trash_default = Trash;

// node_modules/lucide-svelte/dist/icons/tree-deciduous.svelte
Tree_deciduous[FILENAME] = "node_modules/lucide-svelte/dist/icons/tree-deciduous.svelte";
function Tree_deciduous($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tree_deciduous);
  const iconNode = [
    [
      "path",
      {
        "d": "M8 19a4 4 0 0 1-2.24-7.32A3.5 3.5 0 0 1 9 6.03V6a3 3 0 1 1 6 0v.04a3.5 3.5 0 0 1 3.24 5.65A4 4 0 0 1 16 19Z"
      }
    ],
    ["path", { "d": "M12 19v3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tree-deciduous" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tree_deciduous, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tree_deciduous,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tree_deciduous = hmr(Tree_deciduous, () => Tree_deciduous[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tree_deciduous[HMR].source;
    set(Tree_deciduous[HMR].source, module.default[HMR].original);
  });
}
var tree_deciduous_default = Tree_deciduous;

// node_modules/lucide-svelte/dist/icons/tree-palm.svelte
Tree_palm[FILENAME] = "node_modules/lucide-svelte/dist/icons/tree-palm.svelte";
function Tree_palm($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tree_palm);
  const iconNode = [
    [
      "path",
      { "d": "M13 8c0-2.76-2.46-5-5.5-5S2 5.24 2 8h2l1-1 1 1h4" }
    ],
    [
      "path",
      {
        "d": "M13 7.14A5.82 5.82 0 0 1 16.5 6c3.04 0 5.5 2.24 5.5 5h-3l-1-1-1 1h-3"
      }
    ],
    [
      "path",
      {
        "d": "M5.89 9.71c-2.15 2.15-2.3 5.47-.35 7.43l4.24-4.25.7-.7.71-.71 2.12-2.12c-1.95-1.96-5.27-1.8-7.42.35"
      }
    ],
    [
      "path",
      { "d": "M11 15.5c.5 2.5-.17 4.5-1 6.5h4c2-5.5-.5-12-1-14" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tree-palm" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tree_palm, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tree_palm,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tree_palm = hmr(Tree_palm, () => Tree_palm[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tree_palm[HMR].source;
    set(Tree_palm[HMR].source, module.default[HMR].original);
  });
}
var tree_palm_default = Tree_palm;

// node_modules/lucide-svelte/dist/icons/tree-pine.svelte
Tree_pine[FILENAME] = "node_modules/lucide-svelte/dist/icons/tree-pine.svelte";
function Tree_pine($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tree_pine);
  const iconNode = [
    [
      "path",
      {
        "d": "m17 14 3 3.3a1 1 0 0 1-.7 1.7H4.7a1 1 0 0 1-.7-1.7L7 14h-.3a1 1 0 0 1-.7-1.7L9 9h-.2A1 1 0 0 1 8 7.3L12 3l4 4.3a1 1 0 0 1-.8 1.7H15l3 3.3a1 1 0 0 1-.7 1.7H17Z"
      }
    ],
    ["path", { "d": "M12 22v-3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tree-pine" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tree_pine, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tree_pine,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tree_pine = hmr(Tree_pine, () => Tree_pine[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tree_pine[HMR].source;
    set(Tree_pine[HMR].source, module.default[HMR].original);
  });
}
var tree_pine_default = Tree_pine;

// node_modules/lucide-svelte/dist/icons/trees.svelte
Trees[FILENAME] = "node_modules/lucide-svelte/dist/icons/trees.svelte";
function Trees($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Trees);
  const iconNode = [
    [
      "path",
      {
        "d": "M10 10v.2A3 3 0 0 1 8.9 16H5a3 3 0 0 1-1-5.8V10a3 3 0 0 1 6 0Z"
      }
    ],
    ["path", { "d": "M7 16v6" }],
    ["path", { "d": "M13 19v3" }],
    [
      "path",
      {
        "d": "M12 19h8.3a1 1 0 0 0 .7-1.7L18 14h.3a1 1 0 0 0 .7-1.7L16 9h.2a1 1 0 0 0 .8-1.7L13 3l-1.4 1.5"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "trees" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Trees, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Trees,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Trees = hmr(Trees, () => Trees[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Trees[HMR].source;
    set(Trees[HMR].source, module.default[HMR].original);
  });
}
var trees_default = Trees;

// node_modules/lucide-svelte/dist/icons/trello.svelte
Trello[FILENAME] = "node_modules/lucide-svelte/dist/icons/trello.svelte";
function Trello($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Trello);
  const iconNode = [
    [
      "rect",
      {
        "width": "18",
        "height": "18",
        "x": "3",
        "y": "3",
        "rx": "2",
        "ry": "2"
      }
    ],
    ["rect", { "width": "3", "height": "9", "x": "7", "y": "7" }],
    ["rect", { "width": "3", "height": "5", "x": "14", "y": "7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "trello" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Trello, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Trello,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Trello = hmr(Trello, () => Trello[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Trello[HMR].source;
    set(Trello[HMR].source, module.default[HMR].original);
  });
}
var trello_default = Trello;

// node_modules/lucide-svelte/dist/icons/trending-down.svelte
Trending_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/trending-down.svelte";
function Trending_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Trending_down);
  const iconNode = [
    ["path", { "d": "M16 17h6v-6" }],
    ["path", { "d": "m22 17-8.5-8.5-5 5L2 7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "trending-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Trending_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Trending_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Trending_down = hmr(Trending_down, () => Trending_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Trending_down[HMR].source;
    set(Trending_down[HMR].source, module.default[HMR].original);
  });
}
var trending_down_default = Trending_down;

// node_modules/lucide-svelte/dist/icons/trending-up-down.svelte
Trending_up_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/trending-up-down.svelte";
function Trending_up_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Trending_up_down);
  const iconNode = [
    ["path", { "d": "M14.828 14.828 21 21" }],
    ["path", { "d": "M21 16v5h-5" }],
    ["path", { "d": "m21 3-9 9-4-4-6 6" }],
    ["path", { "d": "M21 8V3h-5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "trending-up-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Trending_up_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Trending_up_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Trending_up_down = hmr(Trending_up_down, () => Trending_up_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Trending_up_down[HMR].source;
    set(Trending_up_down[HMR].source, module.default[HMR].original);
  });
}
var trending_up_down_default = Trending_up_down;

// node_modules/lucide-svelte/dist/icons/trending-up.svelte
Trending_up[FILENAME] = "node_modules/lucide-svelte/dist/icons/trending-up.svelte";
function Trending_up($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Trending_up);
  const iconNode = [
    ["path", { "d": "M16 7h6v6" }],
    ["path", { "d": "m22 7-8.5 8.5-5-5L2 17" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "trending-up" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Trending_up, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Trending_up,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Trending_up = hmr(Trending_up, () => Trending_up[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Trending_up[HMR].source;
    set(Trending_up[HMR].source, module.default[HMR].original);
  });
}
var trending_up_default = Trending_up;

// node_modules/lucide-svelte/dist/icons/triangle-alert.svelte
Triangle_alert[FILENAME] = "node_modules/lucide-svelte/dist/icons/triangle-alert.svelte";
function Triangle_alert($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Triangle_alert);
  const iconNode = [
    [
      "path",
      {
        "d": "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3"
      }
    ],
    ["path", { "d": "M12 9v4" }],
    ["path", { "d": "M12 17h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "triangle-alert" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Triangle_alert, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Triangle_alert,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Triangle_alert = hmr(Triangle_alert, () => Triangle_alert[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Triangle_alert[HMR].source;
    set(Triangle_alert[HMR].source, module.default[HMR].original);
  });
}
var triangle_alert_default = Triangle_alert;

// node_modules/lucide-svelte/dist/icons/triangle-dashed.svelte
Triangle_dashed[FILENAME] = "node_modules/lucide-svelte/dist/icons/triangle-dashed.svelte";
function Triangle_dashed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Triangle_dashed);
  const iconNode = [
    ["path", { "d": "M10.17 4.193a2 2 0 0 1 3.666.013" }],
    ["path", { "d": "M14 21h2" }],
    ["path", { "d": "m15.874 7.743 1 1.732" }],
    ["path", { "d": "m18.849 12.952 1 1.732" }],
    ["path", { "d": "M21.824 18.18a2 2 0 0 1-1.835 2.824" }],
    ["path", { "d": "M4.024 21a2 2 0 0 1-1.839-2.839" }],
    ["path", { "d": "m5.136 12.952-1 1.732" }],
    ["path", { "d": "M8 21h2" }],
    ["path", { "d": "m8.102 7.743-1 1.732" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "triangle-dashed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Triangle_dashed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Triangle_dashed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Triangle_dashed = hmr(Triangle_dashed, () => Triangle_dashed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Triangle_dashed[HMR].source;
    set(Triangle_dashed[HMR].source, module.default[HMR].original);
  });
}
var triangle_dashed_default = Triangle_dashed;

// node_modules/lucide-svelte/dist/icons/triangle-right.svelte
Triangle_right[FILENAME] = "node_modules/lucide-svelte/dist/icons/triangle-right.svelte";
function Triangle_right($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Triangle_right);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 18a2 2 0 0 1-2 2H3c-1.1 0-1.3-.6-.4-1.3L20.4 4.3c.9-.7 1.6-.4 1.6.7Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "triangle-right" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Triangle_right, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Triangle_right,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Triangle_right = hmr(Triangle_right, () => Triangle_right[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Triangle_right[HMR].source;
    set(Triangle_right[HMR].source, module.default[HMR].original);
  });
}
var triangle_right_default = Triangle_right;

// node_modules/lucide-svelte/dist/icons/triangle.svelte
Triangle[FILENAME] = "node_modules/lucide-svelte/dist/icons/triangle.svelte";
function Triangle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Triangle);
  const iconNode = [
    [
      "path",
      {
        "d": "M13.73 4a2 2 0 0 0-3.46 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "triangle" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Triangle, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Triangle,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Triangle = hmr(Triangle, () => Triangle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Triangle[HMR].source;
    set(Triangle[HMR].source, module.default[HMR].original);
  });
}
var triangle_default = Triangle;

// node_modules/lucide-svelte/dist/icons/trophy.svelte
Trophy[FILENAME] = "node_modules/lucide-svelte/dist/icons/trophy.svelte";
function Trophy($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Trophy);
  const iconNode = [
    [
      "path",
      {
        "d": "M10 14.66v1.626a2 2 0 0 1-.976 1.696A5 5 0 0 0 7 21.978"
      }
    ],
    [
      "path",
      {
        "d": "M14 14.66v1.626a2 2 0 0 0 .976 1.696A5 5 0 0 1 17 21.978"
      }
    ],
    ["path", { "d": "M18 9h1.5a1 1 0 0 0 0-5H18" }],
    ["path", { "d": "M4 22h16" }],
    [
      "path",
      { "d": "M6 9a6 6 0 0 0 12 0V3a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1z" }
    ],
    ["path", { "d": "M6 9H4.5a1 1 0 0 1 0-5H6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "trophy" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Trophy, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Trophy,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Trophy = hmr(Trophy, () => Trophy[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Trophy[HMR].source;
    set(Trophy[HMR].source, module.default[HMR].original);
  });
}
var trophy_default = Trophy;

// node_modules/lucide-svelte/dist/icons/truck-electric.svelte
Truck_electric[FILENAME] = "node_modules/lucide-svelte/dist/icons/truck-electric.svelte";
function Truck_electric($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Truck_electric);
  const iconNode = [
    ["path", { "d": "M14 19V7a2 2 0 0 0-2-2H9" }],
    ["path", { "d": "M15 19H9" }],
    [
      "path",
      {
        "d": "M19 19h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.62L18.3 9.38a1 1 0 0 0-.78-.38H14"
      }
    ],
    ["path", { "d": "M2 13v5a1 1 0 0 0 1 1h2" }],
    [
      "path",
      {
        "d": "M4 3 2.15 5.15a.495.495 0 0 0 .35.86h2.15a.47.47 0 0 1 .35.86L3 9.02"
      }
    ],
    ["circle", { "cx": "17", "cy": "19", "r": "2" }],
    ["circle", { "cx": "7", "cy": "19", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "truck-electric" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Truck_electric, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Truck_electric,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Truck_electric = hmr(Truck_electric, () => Truck_electric[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Truck_electric[HMR].source;
    set(Truck_electric[HMR].source, module.default[HMR].original);
  });
}
var truck_electric_default = Truck_electric;

// node_modules/lucide-svelte/dist/icons/turkish-lira.svelte
Turkish_lira[FILENAME] = "node_modules/lucide-svelte/dist/icons/turkish-lira.svelte";
function Turkish_lira($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Turkish_lira);
  const iconNode = [
    ["path", { "d": "M15 4 5 9" }],
    ["path", { "d": "m15 8.5-10 5" }],
    ["path", { "d": "M18 12a9 9 0 0 1-9 9V3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "turkish-lira" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Turkish_lira, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Turkish_lira,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Turkish_lira = hmr(Turkish_lira, () => Turkish_lira[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Turkish_lira[HMR].source;
    set(Turkish_lira[HMR].source, module.default[HMR].original);
  });
}
var turkish_lira_default = Turkish_lira;

// node_modules/lucide-svelte/dist/icons/truck.svelte
Truck[FILENAME] = "node_modules/lucide-svelte/dist/icons/truck.svelte";
function Truck($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Truck);
  const iconNode = [
    [
      "path",
      {
        "d": "M14 18V6a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v11a1 1 0 0 0 1 1h2"
      }
    ],
    ["path", { "d": "M15 18H9" }],
    [
      "path",
      {
        "d": "M19 18h2a1 1 0 0 0 1-1v-3.65a1 1 0 0 0-.22-.624l-3.48-4.35A1 1 0 0 0 17.52 8H14"
      }
    ],
    ["circle", { "cx": "17", "cy": "18", "r": "2" }],
    ["circle", { "cx": "7", "cy": "18", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "truck" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Truck, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Truck,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Truck = hmr(Truck, () => Truck[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Truck[HMR].source;
    set(Truck[HMR].source, module.default[HMR].original);
  });
}
var truck_default = Truck;

// node_modules/lucide-svelte/dist/icons/turntable.svelte
Turntable[FILENAME] = "node_modules/lucide-svelte/dist/icons/turntable.svelte";
function Turntable($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Turntable);
  const iconNode = [
    ["path", { "d": "M10 12.01h.01" }],
    ["path", { "d": "M18 8v4a8 8 0 0 1-1.07 4" }],
    ["circle", { "cx": "10", "cy": "12", "r": "4" }],
    [
      "rect",
      { "x": "2", "y": "4", "width": "20", "height": "16", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "turntable" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Turntable, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Turntable,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Turntable = hmr(Turntable, () => Turntable[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Turntable[HMR].source;
    set(Turntable[HMR].source, module.default[HMR].original);
  });
}
var turntable_default = Turntable;

// node_modules/lucide-svelte/dist/icons/turtle.svelte
Turtle[FILENAME] = "node_modules/lucide-svelte/dist/icons/turtle.svelte";
function Turtle($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Turtle);
  const iconNode = [
    [
      "path",
      {
        "d": "m12 10 2 4v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3a8 8 0 1 0-16 0v3a1 1 0 0 0 1 1h2a1 1 0 0 0 1-1v-3l2-4h4Z"
      }
    ],
    ["path", { "d": "M4.82 7.9 8 10" }],
    ["path", { "d": "M15.18 7.9 12 10" }],
    ["path", { "d": "M16.93 10H20a2 2 0 0 1 0 4H2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "turtle" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Turtle, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Turtle,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Turtle = hmr(Turtle, () => Turtle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Turtle[HMR].source;
    set(Turtle[HMR].source, module.default[HMR].original);
  });
}
var turtle_default = Turtle;

// node_modules/lucide-svelte/dist/icons/tv-minimal-play.svelte
Tv_minimal_play[FILENAME] = "node_modules/lucide-svelte/dist/icons/tv-minimal-play.svelte";
function Tv_minimal_play($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tv_minimal_play);
  const iconNode = [
    [
      "path",
      {
        "d": "M15.033 9.44a.647.647 0 0 1 0 1.12l-4.065 2.352a.645.645 0 0 1-.968-.56V7.648a.645.645 0 0 1 .967-.56z"
      }
    ],
    ["path", { "d": "M7 21h10" }],
    [
      "rect",
      { "width": "20", "height": "14", "x": "2", "y": "3", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tv-minimal-play" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tv_minimal_play, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tv_minimal_play,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tv_minimal_play = hmr(Tv_minimal_play, () => Tv_minimal_play[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tv_minimal_play[HMR].source;
    set(Tv_minimal_play[HMR].source, module.default[HMR].original);
  });
}
var tv_minimal_play_default = Tv_minimal_play;

// node_modules/lucide-svelte/dist/icons/tv-minimal.svelte
Tv_minimal[FILENAME] = "node_modules/lucide-svelte/dist/icons/tv-minimal.svelte";
function Tv_minimal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tv_minimal);
  const iconNode = [
    ["path", { "d": "M7 21h10" }],
    [
      "rect",
      { "width": "20", "height": "14", "x": "2", "y": "3", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tv-minimal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tv_minimal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tv_minimal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tv_minimal = hmr(Tv_minimal, () => Tv_minimal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tv_minimal[HMR].source;
    set(Tv_minimal[HMR].source, module.default[HMR].original);
  });
}
var tv_minimal_default = Tv_minimal;

// node_modules/lucide-svelte/dist/icons/tv.svelte
Tv[FILENAME] = "node_modules/lucide-svelte/dist/icons/tv.svelte";
function Tv($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Tv);
  const iconNode = [
    ["path", { "d": "m17 2-5 5-5-5" }],
    [
      "rect",
      { "width": "20", "height": "15", "x": "2", "y": "7", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "tv" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Tv, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Tv,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Tv = hmr(Tv, () => Tv[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tv[HMR].source;
    set(Tv[HMR].source, module.default[HMR].original);
  });
}
var tv_default = Tv;

// node_modules/lucide-svelte/dist/icons/twitch.svelte
Twitch[FILENAME] = "node_modules/lucide-svelte/dist/icons/twitch.svelte";
function Twitch($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Twitch);
  const iconNode = [
    ["path", { "d": "M21 2H3v16h5v4l4-4h5l4-4V2zm-10 9V7m5 4V7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "twitch" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Twitch, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Twitch,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Twitch = hmr(Twitch, () => Twitch[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Twitch[HMR].source;
    set(Twitch[HMR].source, module.default[HMR].original);
  });
}
var twitch_default = Twitch;

// node_modules/lucide-svelte/dist/icons/twitter.svelte
Twitter[FILENAME] = "node_modules/lucide-svelte/dist/icons/twitter.svelte";
function Twitter($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Twitter);
  const iconNode = [
    [
      "path",
      {
        "d": "M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "twitter" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Twitter, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Twitter,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Twitter = hmr(Twitter, () => Twitter[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Twitter[HMR].source;
    set(Twitter[HMR].source, module.default[HMR].original);
  });
}
var twitter_default = Twitter;

// node_modules/lucide-svelte/dist/icons/type-outline.svelte
Type_outline[FILENAME] = "node_modules/lucide-svelte/dist/icons/type-outline.svelte";
function Type_outline($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Type_outline);
  const iconNode = [
    [
      "path",
      {
        "d": "M14 16.5a.5.5 0 0 0 .5.5h.5a2 2 0 0 1 0 4H9a2 2 0 0 1 0-4h.5a.5.5 0 0 0 .5-.5v-9a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5V8a2 2 0 0 1-4 0V5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v3a2 2 0 0 1-4 0v-.5a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "type-outline" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Type_outline, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Type_outline,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Type_outline = hmr(Type_outline, () => Type_outline[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Type_outline[HMR].source;
    set(Type_outline[HMR].source, module.default[HMR].original);
  });
}
var type_outline_default = Type_outline;

// node_modules/lucide-svelte/dist/icons/type.svelte
Type[FILENAME] = "node_modules/lucide-svelte/dist/icons/type.svelte";
function Type($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Type);
  const iconNode = [
    ["path", { "d": "M12 4v16" }],
    ["path", { "d": "M4 7V5a1 1 0 0 1 1-1h14a1 1 0 0 1 1 1v2" }],
    ["path", { "d": "M9 20h6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "type" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Type, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Type,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Type = hmr(Type, () => Type[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Type[HMR].source;
    set(Type[HMR].source, module.default[HMR].original);
  });
}
var type_default = Type;

// node_modules/lucide-svelte/dist/icons/umbrella-off.svelte
Umbrella_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/umbrella-off.svelte";
function Umbrella_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Umbrella_off);
  const iconNode = [
    ["path", { "d": "M12 2v1" }],
    [
      "path",
      {
        "d": "M15.5 21a1.85 1.85 0 0 1-3.5-1v-8H2a10 10 0 0 1 3.428-6.575"
      }
    ],
    ["path", { "d": "M17.5 12H22A10 10 0 0 0 9.004 3.455" }],
    ["path", { "d": "m2 2 20 20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "umbrella-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Umbrella_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Umbrella_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Umbrella_off = hmr(Umbrella_off, () => Umbrella_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Umbrella_off[HMR].source;
    set(Umbrella_off[HMR].source, module.default[HMR].original);
  });
}
var umbrella_off_default = Umbrella_off;

// node_modules/lucide-svelte/dist/icons/umbrella.svelte
Umbrella[FILENAME] = "node_modules/lucide-svelte/dist/icons/umbrella.svelte";
function Umbrella($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Umbrella);
  const iconNode = [
    ["path", { "d": "M22 12a10.06 10.06 1 0 0-20 0Z" }],
    ["path", { "d": "M12 12v8a2 2 0 0 0 4 0" }],
    ["path", { "d": "M12 2v1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "umbrella" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Umbrella, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Umbrella,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Umbrella = hmr(Umbrella, () => Umbrella[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Umbrella[HMR].source;
    set(Umbrella[HMR].source, module.default[HMR].original);
  });
}
var umbrella_default = Umbrella;

// node_modules/lucide-svelte/dist/icons/underline.svelte
Underline[FILENAME] = "node_modules/lucide-svelte/dist/icons/underline.svelte";
function Underline($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Underline);
  const iconNode = [
    ["path", { "d": "M6 4v6a6 6 0 0 0 12 0V4" }],
    ["line", { "x1": "4", "x2": "20", "y1": "20", "y2": "20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "underline" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Underline, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Underline,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Underline = hmr(Underline, () => Underline[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Underline[HMR].source;
    set(Underline[HMR].source, module.default[HMR].original);
  });
}
var underline_default = Underline;

// node_modules/lucide-svelte/dist/icons/undo-2.svelte
Undo_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/undo-2.svelte";
function Undo_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Undo_2);
  const iconNode = [
    ["path", { "d": "M9 14 4 9l5-5" }],
    [
      "path",
      {
        "d": "M4 9h10.5a5.5 5.5 0 0 1 5.5 5.5a5.5 5.5 0 0 1-5.5 5.5H11"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "undo-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Undo_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Undo_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Undo_2 = hmr(Undo_2, () => Undo_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Undo_2[HMR].source;
    set(Undo_2[HMR].source, module.default[HMR].original);
  });
}
var undo_2_default = Undo_2;

// node_modules/lucide-svelte/dist/icons/undo-dot.svelte
Undo_dot[FILENAME] = "node_modules/lucide-svelte/dist/icons/undo-dot.svelte";
function Undo_dot($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Undo_dot);
  const iconNode = [
    ["path", { "d": "M21 17a9 9 0 0 0-15-6.7L3 13" }],
    ["path", { "d": "M3 7v6h6" }],
    ["circle", { "cx": "12", "cy": "17", "r": "1" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "undo-dot" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Undo_dot, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Undo_dot,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Undo_dot = hmr(Undo_dot, () => Undo_dot[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Undo_dot[HMR].source;
    set(Undo_dot[HMR].source, module.default[HMR].original);
  });
}
var undo_dot_default = Undo_dot;

// node_modules/lucide-svelte/dist/icons/undo.svelte
Undo[FILENAME] = "node_modules/lucide-svelte/dist/icons/undo.svelte";
function Undo($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Undo);
  const iconNode = [
    ["path", { "d": "M3 7v6h6" }],
    ["path", { "d": "M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "undo" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Undo, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Undo,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Undo = hmr(Undo, () => Undo[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Undo[HMR].source;
    set(Undo[HMR].source, module.default[HMR].original);
  });
}
var undo_default = Undo;

// node_modules/lucide-svelte/dist/icons/unfold-horizontal.svelte
Unfold_horizontal[FILENAME] = "node_modules/lucide-svelte/dist/icons/unfold-horizontal.svelte";
function Unfold_horizontal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Unfold_horizontal);
  const iconNode = [
    ["path", { "d": "M16 12h6" }],
    ["path", { "d": "M8 12H2" }],
    ["path", { "d": "M12 2v2" }],
    ["path", { "d": "M12 8v2" }],
    ["path", { "d": "M12 14v2" }],
    ["path", { "d": "M12 20v2" }],
    ["path", { "d": "m19 15 3-3-3-3" }],
    ["path", { "d": "m5 9-3 3 3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "unfold-horizontal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Unfold_horizontal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Unfold_horizontal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Unfold_horizontal = hmr(Unfold_horizontal, () => Unfold_horizontal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Unfold_horizontal[HMR].source;
    set(Unfold_horizontal[HMR].source, module.default[HMR].original);
  });
}
var unfold_horizontal_default = Unfold_horizontal;

// node_modules/lucide-svelte/dist/icons/unfold-vertical.svelte
Unfold_vertical[FILENAME] = "node_modules/lucide-svelte/dist/icons/unfold-vertical.svelte";
function Unfold_vertical($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Unfold_vertical);
  const iconNode = [
    ["path", { "d": "M12 22v-6" }],
    ["path", { "d": "M12 8V2" }],
    ["path", { "d": "M4 12H2" }],
    ["path", { "d": "M10 12H8" }],
    ["path", { "d": "M16 12h-2" }],
    ["path", { "d": "M22 12h-2" }],
    ["path", { "d": "m15 19-3 3-3-3" }],
    ["path", { "d": "m15 5-3-3-3 3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "unfold-vertical" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Unfold_vertical, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Unfold_vertical,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Unfold_vertical = hmr(Unfold_vertical, () => Unfold_vertical[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Unfold_vertical[HMR].source;
    set(Unfold_vertical[HMR].source, module.default[HMR].original);
  });
}
var unfold_vertical_default = Unfold_vertical;

// node_modules/lucide-svelte/dist/icons/ungroup.svelte
Ungroup[FILENAME] = "node_modules/lucide-svelte/dist/icons/ungroup.svelte";
function Ungroup($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Ungroup);
  const iconNode = [
    [
      "rect",
      { "width": "8", "height": "6", "x": "5", "y": "4", "rx": "1" }
    ],
    [
      "rect",
      { "width": "8", "height": "6", "x": "11", "y": "14", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "ungroup" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Ungroup, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Ungroup,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Ungroup = hmr(Ungroup, () => Ungroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ungroup[HMR].source;
    set(Ungroup[HMR].source, module.default[HMR].original);
  });
}
var ungroup_default = Ungroup;

// node_modules/lucide-svelte/dist/icons/university.svelte
University[FILENAME] = "node_modules/lucide-svelte/dist/icons/university.svelte";
function University($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, University);
  const iconNode = [
    ["path", { "d": "M14 21v-3a2 2 0 0 0-4 0v3" }],
    ["path", { "d": "M18 12h.01" }],
    ["path", { "d": "M18 16h.01" }],
    [
      "path",
      {
        "d": "M22 7a1 1 0 0 0-1-1h-2a2 2 0 0 1-1.143-.359L13.143 2.36a2 2 0 0 0-2.286-.001L6.143 5.64A2 2 0 0 1 5 6H3a1 1 0 0 0-1 1v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2z"
      }
    ],
    ["path", { "d": "M6 12h.01" }],
    ["path", { "d": "M6 16h.01" }],
    ["circle", { "cx": "12", "cy": "10", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "university" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(University, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    University,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  University = hmr(University, () => University[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = University[HMR].source;
    set(University[HMR].source, module.default[HMR].original);
  });
}
var university_default = University;

// node_modules/lucide-svelte/dist/icons/unlink-2.svelte
Unlink_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/unlink-2.svelte";
function Unlink_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Unlink_2);
  const iconNode = [
    [
      "path",
      { "d": "M15 7h2a5 5 0 0 1 0 10h-2m-6 0H7A5 5 0 0 1 7 7h2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "unlink-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Unlink_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Unlink_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Unlink_2 = hmr(Unlink_2, () => Unlink_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Unlink_2[HMR].source;
    set(Unlink_2[HMR].source, module.default[HMR].original);
  });
}
var unlink_2_default = Unlink_2;

// node_modules/lucide-svelte/dist/icons/unlink.svelte
Unlink[FILENAME] = "node_modules/lucide-svelte/dist/icons/unlink.svelte";
function Unlink($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Unlink);
  const iconNode = [
    [
      "path",
      {
        "d": "m18.84 12.25 1.72-1.71h-.02a5.004 5.004 0 0 0-.12-7.07 5.006 5.006 0 0 0-6.95 0l-1.72 1.71"
      }
    ],
    [
      "path",
      {
        "d": "m5.17 11.75-1.71 1.71a5.004 5.004 0 0 0 .12 7.07 5.006 5.006 0 0 0 6.95 0l1.71-1.71"
      }
    ],
    ["line", { "x1": "8", "x2": "8", "y1": "2", "y2": "5" }],
    ["line", { "x1": "2", "x2": "5", "y1": "8", "y2": "8" }],
    ["line", { "x1": "16", "x2": "16", "y1": "19", "y2": "22" }],
    ["line", { "x1": "19", "x2": "22", "y1": "16", "y2": "16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "unlink" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Unlink, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Unlink,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Unlink = hmr(Unlink, () => Unlink[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Unlink[HMR].source;
    set(Unlink[HMR].source, module.default[HMR].original);
  });
}
var unlink_default = Unlink;

// node_modules/lucide-svelte/dist/icons/unplug.svelte
Unplug[FILENAME] = "node_modules/lucide-svelte/dist/icons/unplug.svelte";
function Unplug($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Unplug);
  const iconNode = [
    ["path", { "d": "m19 5 3-3" }],
    ["path", { "d": "m2 22 3-3" }],
    [
      "path",
      {
        "d": "M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z"
      }
    ],
    ["path", { "d": "M7.5 13.5 10 11" }],
    ["path", { "d": "M10.5 16.5 13 14" }],
    [
      "path",
      {
        "d": "m12 6 6 6 2.3-2.3a2.4 2.4 0 0 0 0-3.4l-2.6-2.6a2.4 2.4 0 0 0-3.4 0Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "unplug" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Unplug, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Unplug,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Unplug = hmr(Unplug, () => Unplug[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Unplug[HMR].source;
    set(Unplug[HMR].source, module.default[HMR].original);
  });
}
var unplug_default = Unplug;

// node_modules/lucide-svelte/dist/icons/upload.svelte
Upload[FILENAME] = "node_modules/lucide-svelte/dist/icons/upload.svelte";
function Upload($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Upload);
  const iconNode = [
    ["path", { "d": "M12 3v12" }],
    ["path", { "d": "m17 8-5-5-5 5" }],
    ["path", { "d": "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "upload" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Upload, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Upload,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Upload = hmr(Upload, () => Upload[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Upload[HMR].source;
    set(Upload[HMR].source, module.default[HMR].original);
  });
}
var upload_default = Upload;

// node_modules/lucide-svelte/dist/icons/usb.svelte
Usb[FILENAME] = "node_modules/lucide-svelte/dist/icons/usb.svelte";
function Usb($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Usb);
  const iconNode = [
    ["circle", { "cx": "10", "cy": "7", "r": "1" }],
    ["circle", { "cx": "4", "cy": "20", "r": "1" }],
    ["path", { "d": "M4.7 19.3 19 5" }],
    ["path", { "d": "m21 3-3 1 2 2Z" }],
    ["path", { "d": "M9.26 7.68 5 12l2 5" }],
    ["path", { "d": "m10 14 5 2 3.5-3.5" }],
    ["path", { "d": "m18 12 1-1 1 1-1 1Z" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "usb" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Usb, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Usb,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Usb = hmr(Usb, () => Usb[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Usb[HMR].source;
    set(Usb[HMR].source, module.default[HMR].original);
  });
}
var usb_default = Usb;

// node_modules/lucide-svelte/dist/icons/user-check.svelte
User_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/user-check.svelte";
function User_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, User_check);
  const iconNode = [
    ["path", { "d": "m16 11 2 2 4-4" }],
    ["path", { "d": "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" }],
    ["circle", { "cx": "9", "cy": "7", "r": "4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "user-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(User_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    User_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  User_check = hmr(User_check, () => User_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = User_check[HMR].source;
    set(User_check[HMR].source, module.default[HMR].original);
  });
}
var user_check_default = User_check;

// node_modules/lucide-svelte/dist/icons/user-cog.svelte
User_cog[FILENAME] = "node_modules/lucide-svelte/dist/icons/user-cog.svelte";
function User_cog($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, User_cog);
  const iconNode = [
    ["path", { "d": "M10 15H6a4 4 0 0 0-4 4v2" }],
    ["path", { "d": "m14.305 16.53.923-.382" }],
    ["path", { "d": "m15.228 13.852-.923-.383" }],
    ["path", { "d": "m16.852 12.228-.383-.923" }],
    ["path", { "d": "m16.852 17.772-.383.924" }],
    ["path", { "d": "m19.148 12.228.383-.923" }],
    ["path", { "d": "m19.53 18.696-.382-.924" }],
    ["path", { "d": "m20.772 13.852.924-.383" }],
    ["path", { "d": "m20.772 16.148.924.383" }],
    ["circle", { "cx": "18", "cy": "15", "r": "3" }],
    ["circle", { "cx": "9", "cy": "7", "r": "4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "user-cog" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(User_cog, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    User_cog,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  User_cog = hmr(User_cog, () => User_cog[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = User_cog[HMR].source;
    set(User_cog[HMR].source, module.default[HMR].original);
  });
}
var user_cog_default = User_cog;

// node_modules/lucide-svelte/dist/icons/user-lock.svelte
User_lock[FILENAME] = "node_modules/lucide-svelte/dist/icons/user-lock.svelte";
function User_lock($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, User_lock);
  const iconNode = [
    ["circle", { "cx": "10", "cy": "7", "r": "4" }],
    ["path", { "d": "M10.3 15H7a4 4 0 0 0-4 4v2" }],
    ["path", { "d": "M15 15.5V14a2 2 0 0 1 4 0v1.5" }],
    [
      "rect",
      {
        "width": "8",
        "height": "5",
        "x": "13",
        "y": "16",
        "rx": ".899"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "user-lock" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(User_lock, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    User_lock,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  User_lock = hmr(User_lock, () => User_lock[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = User_lock[HMR].source;
    set(User_lock[HMR].source, module.default[HMR].original);
  });
}
var user_lock_default = User_lock;

// node_modules/lucide-svelte/dist/icons/user-minus.svelte
User_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/user-minus.svelte";
function User_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, User_minus);
  const iconNode = [
    ["path", { "d": "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" }],
    ["circle", { "cx": "9", "cy": "7", "r": "4" }],
    ["line", { "x1": "22", "x2": "16", "y1": "11", "y2": "11" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "user-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(User_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    User_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  User_minus = hmr(User_minus, () => User_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = User_minus[HMR].source;
    set(User_minus[HMR].source, module.default[HMR].original);
  });
}
var user_minus_default = User_minus;

// node_modules/lucide-svelte/dist/icons/user-pen.svelte
User_pen[FILENAME] = "node_modules/lucide-svelte/dist/icons/user-pen.svelte";
function User_pen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, User_pen);
  const iconNode = [
    ["path", { "d": "M11.5 15H7a4 4 0 0 0-4 4v2" }],
    [
      "path",
      {
        "d": "M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"
      }
    ],
    ["circle", { "cx": "10", "cy": "7", "r": "4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "user-pen" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(User_pen, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    User_pen,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  User_pen = hmr(User_pen, () => User_pen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = User_pen[HMR].source;
    set(User_pen[HMR].source, module.default[HMR].original);
  });
}
var user_pen_default = User_pen;

// node_modules/lucide-svelte/dist/icons/user-plus.svelte
User_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/user-plus.svelte";
function User_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, User_plus);
  const iconNode = [
    ["path", { "d": "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" }],
    ["circle", { "cx": "9", "cy": "7", "r": "4" }],
    ["line", { "x1": "19", "x2": "19", "y1": "8", "y2": "14" }],
    ["line", { "x1": "22", "x2": "16", "y1": "11", "y2": "11" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "user-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(User_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    User_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  User_plus = hmr(User_plus, () => User_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = User_plus[HMR].source;
    set(User_plus[HMR].source, module.default[HMR].original);
  });
}
var user_plus_default = User_plus;

// node_modules/lucide-svelte/dist/icons/user-round-check.svelte
User_round_check[FILENAME] = "node_modules/lucide-svelte/dist/icons/user-round-check.svelte";
function User_round_check($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, User_round_check);
  const iconNode = [
    ["path", { "d": "M2 21a8 8 0 0 1 13.292-6" }],
    ["circle", { "cx": "10", "cy": "8", "r": "5" }],
    ["path", { "d": "m16 19 2 2 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "user-round-check" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(User_round_check, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    User_round_check,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  User_round_check = hmr(User_round_check, () => User_round_check[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = User_round_check[HMR].source;
    set(User_round_check[HMR].source, module.default[HMR].original);
  });
}
var user_round_check_default = User_round_check;

// node_modules/lucide-svelte/dist/icons/user-round-cog.svelte
User_round_cog[FILENAME] = "node_modules/lucide-svelte/dist/icons/user-round-cog.svelte";
function User_round_cog($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, User_round_cog);
  const iconNode = [
    ["path", { "d": "m14.305 19.53.923-.382" }],
    ["path", { "d": "m15.228 16.852-.923-.383" }],
    ["path", { "d": "m16.852 15.228-.383-.923" }],
    ["path", { "d": "m16.852 20.772-.383.924" }],
    ["path", { "d": "m19.148 15.228.383-.923" }],
    ["path", { "d": "m19.53 21.696-.382-.924" }],
    ["path", { "d": "M2 21a8 8 0 0 1 10.434-7.62" }],
    ["path", { "d": "m20.772 16.852.924-.383" }],
    ["path", { "d": "m20.772 19.148.924.383" }],
    ["circle", { "cx": "10", "cy": "8", "r": "5" }],
    ["circle", { "cx": "18", "cy": "18", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "user-round-cog" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(User_round_cog, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    User_round_cog,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  User_round_cog = hmr(User_round_cog, () => User_round_cog[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = User_round_cog[HMR].source;
    set(User_round_cog[HMR].source, module.default[HMR].original);
  });
}
var user_round_cog_default = User_round_cog;

// node_modules/lucide-svelte/dist/icons/user-round-minus.svelte
User_round_minus[FILENAME] = "node_modules/lucide-svelte/dist/icons/user-round-minus.svelte";
function User_round_minus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, User_round_minus);
  const iconNode = [
    ["path", { "d": "M2 21a8 8 0 0 1 13.292-6" }],
    ["circle", { "cx": "10", "cy": "8", "r": "5" }],
    ["path", { "d": "M22 19h-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "user-round-minus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(User_round_minus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    User_round_minus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  User_round_minus = hmr(User_round_minus, () => User_round_minus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = User_round_minus[HMR].source;
    set(User_round_minus[HMR].source, module.default[HMR].original);
  });
}
var user_round_minus_default = User_round_minus;

// node_modules/lucide-svelte/dist/icons/user-round-pen.svelte
User_round_pen[FILENAME] = "node_modules/lucide-svelte/dist/icons/user-round-pen.svelte";
function User_round_pen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, User_round_pen);
  const iconNode = [
    ["path", { "d": "M2 21a8 8 0 0 1 10.821-7.487" }],
    [
      "path",
      {
        "d": "M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"
      }
    ],
    ["circle", { "cx": "10", "cy": "8", "r": "5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "user-round-pen" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(User_round_pen, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    User_round_pen,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  User_round_pen = hmr(User_round_pen, () => User_round_pen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = User_round_pen[HMR].source;
    set(User_round_pen[HMR].source, module.default[HMR].original);
  });
}
var user_round_pen_default = User_round_pen;

// node_modules/lucide-svelte/dist/icons/user-round-search.svelte
User_round_search[FILENAME] = "node_modules/lucide-svelte/dist/icons/user-round-search.svelte";
function User_round_search($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, User_round_search);
  const iconNode = [
    ["circle", { "cx": "10", "cy": "8", "r": "5" }],
    ["path", { "d": "M2 21a8 8 0 0 1 10.434-7.62" }],
    ["circle", { "cx": "18", "cy": "18", "r": "3" }],
    ["path", { "d": "m22 22-1.9-1.9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "user-round-search" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(User_round_search, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    User_round_search,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  User_round_search = hmr(User_round_search, () => User_round_search[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = User_round_search[HMR].source;
    set(User_round_search[HMR].source, module.default[HMR].original);
  });
}
var user_round_search_default = User_round_search;

// node_modules/lucide-svelte/dist/icons/user-round-plus.svelte
User_round_plus[FILENAME] = "node_modules/lucide-svelte/dist/icons/user-round-plus.svelte";
function User_round_plus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, User_round_plus);
  const iconNode = [
    ["path", { "d": "M2 21a8 8 0 0 1 13.292-6" }],
    ["circle", { "cx": "10", "cy": "8", "r": "5" }],
    ["path", { "d": "M19 16v6" }],
    ["path", { "d": "M22 19h-6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "user-round-plus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(User_round_plus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    User_round_plus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  User_round_plus = hmr(User_round_plus, () => User_round_plus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = User_round_plus[HMR].source;
    set(User_round_plus[HMR].source, module.default[HMR].original);
  });
}
var user_round_plus_default = User_round_plus;

// node_modules/lucide-svelte/dist/icons/user-round-x.svelte
User_round_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/user-round-x.svelte";
function User_round_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, User_round_x);
  const iconNode = [
    ["path", { "d": "M2 21a8 8 0 0 1 11.873-7" }],
    ["circle", { "cx": "10", "cy": "8", "r": "5" }],
    ["path", { "d": "m17 17 5 5" }],
    ["path", { "d": "m22 17-5 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "user-round-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(User_round_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    User_round_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  User_round_x = hmr(User_round_x, () => User_round_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = User_round_x[HMR].source;
    set(User_round_x[HMR].source, module.default[HMR].original);
  });
}
var user_round_x_default = User_round_x;

// node_modules/lucide-svelte/dist/icons/user-round.svelte
User_round[FILENAME] = "node_modules/lucide-svelte/dist/icons/user-round.svelte";
function User_round($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, User_round);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "8", "r": "5" }],
    ["path", { "d": "M20 21a8 8 0 0 0-16 0" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "user-round" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(User_round, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    User_round,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  User_round = hmr(User_round, () => User_round[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = User_round[HMR].source;
    set(User_round[HMR].source, module.default[HMR].original);
  });
}
var user_round_default = User_round;

// node_modules/lucide-svelte/dist/icons/user-search.svelte
User_search[FILENAME] = "node_modules/lucide-svelte/dist/icons/user-search.svelte";
function User_search($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, User_search);
  const iconNode = [
    ["circle", { "cx": "10", "cy": "7", "r": "4" }],
    ["path", { "d": "M10.3 15H7a4 4 0 0 0-4 4v2" }],
    ["circle", { "cx": "17", "cy": "17", "r": "3" }],
    ["path", { "d": "m21 21-1.9-1.9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "user-search" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(User_search, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    User_search,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  User_search = hmr(User_search, () => User_search[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = User_search[HMR].source;
    set(User_search[HMR].source, module.default[HMR].original);
  });
}
var user_search_default = User_search;

// node_modules/lucide-svelte/dist/icons/user-star.svelte
User_star[FILENAME] = "node_modules/lucide-svelte/dist/icons/user-star.svelte";
function User_star($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, User_star);
  const iconNode = [
    [
      "path",
      {
        "d": "M16.051 12.616a1 1 0 0 1 1.909.024l.737 1.452a1 1 0 0 0 .737.535l1.634.256a1 1 0 0 1 .588 1.806l-1.172 1.168a1 1 0 0 0-.282.866l.259 1.613a1 1 0 0 1-1.541 1.134l-1.465-.75a1 1 0 0 0-.912 0l-1.465.75a1 1 0 0 1-1.539-1.133l.258-1.613a1 1 0 0 0-.282-.866l-1.156-1.153a1 1 0 0 1 .572-1.822l1.633-.256a1 1 0 0 0 .737-.535z"
      }
    ],
    ["path", { "d": "M8 15H7a4 4 0 0 0-4 4v2" }],
    ["circle", { "cx": "10", "cy": "7", "r": "4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "user-star" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(User_star, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    User_star,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  User_star = hmr(User_star, () => User_star[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = User_star[HMR].source;
    set(User_star[HMR].source, module.default[HMR].original);
  });
}
var user_star_default = User_star;

// node_modules/lucide-svelte/dist/icons/user-x.svelte
User_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/user-x.svelte";
function User_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, User_x);
  const iconNode = [
    ["path", { "d": "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" }],
    ["circle", { "cx": "9", "cy": "7", "r": "4" }],
    ["line", { "x1": "17", "x2": "22", "y1": "8", "y2": "13" }],
    ["line", { "x1": "22", "x2": "17", "y1": "8", "y2": "13" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "user-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(User_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    User_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  User_x = hmr(User_x, () => User_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = User_x[HMR].source;
    set(User_x[HMR].source, module.default[HMR].original);
  });
}
var user_x_default = User_x;

// node_modules/lucide-svelte/dist/icons/user.svelte
User[FILENAME] = "node_modules/lucide-svelte/dist/icons/user.svelte";
function User($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, User);
  const iconNode = [
    ["path", { "d": "M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2" }],
    ["circle", { "cx": "12", "cy": "7", "r": "4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "user" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(User, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    User,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  User = hmr(User, () => User[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = User[HMR].source;
    set(User[HMR].source, module.default[HMR].original);
  });
}
var user_default = User;

// node_modules/lucide-svelte/dist/icons/users-round.svelte
Users_round[FILENAME] = "node_modules/lucide-svelte/dist/icons/users-round.svelte";
function Users_round($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Users_round);
  const iconNode = [
    ["path", { "d": "M18 21a8 8 0 0 0-16 0" }],
    ["circle", { "cx": "10", "cy": "8", "r": "5" }],
    ["path", { "d": "M22 20c0-3.37-2-6.5-4-8a5 5 0 0 0-.45-8.3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "users-round" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Users_round, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Users_round,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Users_round = hmr(Users_round, () => Users_round[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Users_round[HMR].source;
    set(Users_round[HMR].source, module.default[HMR].original);
  });
}
var users_round_default = Users_round;

// node_modules/lucide-svelte/dist/icons/users.svelte
Users[FILENAME] = "node_modules/lucide-svelte/dist/icons/users.svelte";
function Users($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Users);
  const iconNode = [
    ["path", { "d": "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" }],
    ["path", { "d": "M16 3.128a4 4 0 0 1 0 7.744" }],
    ["path", { "d": "M22 21v-2a4 4 0 0 0-3-3.87" }],
    ["circle", { "cx": "9", "cy": "7", "r": "4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "users" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Users, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Users,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Users = hmr(Users, () => Users[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Users[HMR].source;
    set(Users[HMR].source, module.default[HMR].original);
  });
}
var users_default = Users;

// node_modules/lucide-svelte/dist/icons/utensils-crossed.svelte
Utensils_crossed[FILENAME] = "node_modules/lucide-svelte/dist/icons/utensils-crossed.svelte";
function Utensils_crossed($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Utensils_crossed);
  const iconNode = [
    [
      "path",
      {
        "d": "m16 2-2.3 2.3a3 3 0 0 0 0 4.2l1.8 1.8a3 3 0 0 0 4.2 0L22 8"
      }
    ],
    [
      "path",
      {
        "d": "M15 15 3.3 3.3a4.2 4.2 0 0 0 0 6l7.3 7.3c.7.7 2 .7 2.8 0L15 15Zm0 0 7 7"
      }
    ],
    ["path", { "d": "m2.1 21.8 6.4-6.3" }],
    ["path", { "d": "m19 5-7 7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "utensils-crossed" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Utensils_crossed, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Utensils_crossed,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Utensils_crossed = hmr(Utensils_crossed, () => Utensils_crossed[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Utensils_crossed[HMR].source;
    set(Utensils_crossed[HMR].source, module.default[HMR].original);
  });
}
var utensils_crossed_default = Utensils_crossed;

// node_modules/lucide-svelte/dist/icons/utensils.svelte
Utensils[FILENAME] = "node_modules/lucide-svelte/dist/icons/utensils.svelte";
function Utensils($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Utensils);
  const iconNode = [
    ["path", { "d": "M3 2v7c0 1.1.9 2 2 2h4a2 2 0 0 0 2-2V2" }],
    ["path", { "d": "M7 2v20" }],
    [
      "path",
      { "d": "M21 15V2a5 5 0 0 0-5 5v6c0 1.1.9 2 2 2h3Zm0 0v7" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "utensils" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Utensils, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Utensils,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Utensils = hmr(Utensils, () => Utensils[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Utensils[HMR].source;
    set(Utensils[HMR].source, module.default[HMR].original);
  });
}
var utensils_default = Utensils;

// node_modules/lucide-svelte/dist/icons/utility-pole.svelte
Utility_pole[FILENAME] = "node_modules/lucide-svelte/dist/icons/utility-pole.svelte";
function Utility_pole($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Utility_pole);
  const iconNode = [
    ["path", { "d": "M12 2v20" }],
    ["path", { "d": "M2 5h20" }],
    ["path", { "d": "M3 3v2" }],
    ["path", { "d": "M7 3v2" }],
    ["path", { "d": "M17 3v2" }],
    ["path", { "d": "M21 3v2" }],
    ["path", { "d": "m19 5-7 7-7-7" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "utility-pole" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Utility_pole, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Utility_pole,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Utility_pole = hmr(Utility_pole, () => Utility_pole[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Utility_pole[HMR].source;
    set(Utility_pole[HMR].source, module.default[HMR].original);
  });
}
var utility_pole_default = Utility_pole;

// node_modules/lucide-svelte/dist/icons/variable.svelte
Variable[FILENAME] = "node_modules/lucide-svelte/dist/icons/variable.svelte";
function Variable($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Variable);
  const iconNode = [
    ["path", { "d": "M8 21s-4-3-4-9 4-9 4-9" }],
    ["path", { "d": "M16 3s4 3 4 9-4 9-4 9" }],
    ["line", { "x1": "15", "x2": "9", "y1": "9", "y2": "15" }],
    ["line", { "x1": "9", "x2": "15", "y1": "9", "y2": "15" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "variable" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Variable, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Variable,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Variable = hmr(Variable, () => Variable[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Variable[HMR].source;
    set(Variable[HMR].source, module.default[HMR].original);
  });
}
var variable_default = Variable;

// node_modules/lucide-svelte/dist/icons/vault.svelte
Vault[FILENAME] = "node_modules/lucide-svelte/dist/icons/vault.svelte";
function Vault($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Vault);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    [
      "circle",
      { "cx": "7.5", "cy": "7.5", "r": ".5", "fill": "currentColor" }
    ],
    ["path", { "d": "m7.9 7.9 2.7 2.7" }],
    [
      "circle",
      { "cx": "16.5", "cy": "7.5", "r": ".5", "fill": "currentColor" }
    ],
    ["path", { "d": "m13.4 10.6 2.7-2.7" }],
    [
      "circle",
      { "cx": "7.5", "cy": "16.5", "r": ".5", "fill": "currentColor" }
    ],
    ["path", { "d": "m7.9 16.1 2.7-2.7" }],
    [
      "circle",
      {
        "cx": "16.5",
        "cy": "16.5",
        "r": ".5",
        "fill": "currentColor"
      }
    ],
    ["path", { "d": "m13.4 13.4 2.7 2.7" }],
    ["circle", { "cx": "12", "cy": "12", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "vault" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Vault, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Vault,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Vault = hmr(Vault, () => Vault[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Vault[HMR].source;
    set(Vault[HMR].source, module.default[HMR].original);
  });
}
var vault_default = Vault;

// node_modules/lucide-svelte/dist/icons/vector-square.svelte
Vector_square[FILENAME] = "node_modules/lucide-svelte/dist/icons/vector-square.svelte";
function Vector_square($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Vector_square);
  const iconNode = [
    ["path", { "d": "M19.5 7a24 24 0 0 1 0 10" }],
    ["path", { "d": "M4.5 7a24 24 0 0 0 0 10" }],
    ["path", { "d": "M7 19.5a24 24 0 0 0 10 0" }],
    ["path", { "d": "M7 4.5a24 24 0 0 1 10 0" }],
    [
      "rect",
      { "x": "17", "y": "17", "width": "5", "height": "5", "rx": "1" }
    ],
    [
      "rect",
      { "x": "17", "y": "2", "width": "5", "height": "5", "rx": "1" }
    ],
    [
      "rect",
      { "x": "2", "y": "17", "width": "5", "height": "5", "rx": "1" }
    ],
    [
      "rect",
      { "x": "2", "y": "2", "width": "5", "height": "5", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "vector-square" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Vector_square, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Vector_square,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Vector_square = hmr(Vector_square, () => Vector_square[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Vector_square[HMR].source;
    set(Vector_square[HMR].source, module.default[HMR].original);
  });
}
var vector_square_default = Vector_square;

// node_modules/lucide-svelte/dist/icons/vegan.svelte
Vegan[FILENAME] = "node_modules/lucide-svelte/dist/icons/vegan.svelte";
function Vegan($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Vegan);
  const iconNode = [
    ["path", { "d": "M16 8q6 0 6-6-6 0-6 6" }],
    ["path", { "d": "M17.41 3.59a10 10 0 1 0 3 3" }],
    [
      "path",
      { "d": "M2 2a26.6 26.6 0 0 1 10 20c.9-6.82 1.5-9.5 4-14" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "vegan" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Vegan, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Vegan,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Vegan = hmr(Vegan, () => Vegan[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Vegan[HMR].source;
    set(Vegan[HMR].source, module.default[HMR].original);
  });
}
var vegan_default = Vegan;

// node_modules/lucide-svelte/dist/icons/venetian-mask.svelte
Venetian_mask[FILENAME] = "node_modules/lucide-svelte/dist/icons/venetian-mask.svelte";
function Venetian_mask($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Venetian_mask);
  const iconNode = [
    ["path", { "d": "M18 11c-1.5 0-2.5.5-3 2" }],
    [
      "path",
      {
        "d": "M4 6a2 2 0 0 0-2 2v4a5 5 0 0 0 5 5 8 8 0 0 1 5 2 8 8 0 0 1 5-2 5 5 0 0 0 5-5V8a2 2 0 0 0-2-2h-3a8 8 0 0 0-5 2 8 8 0 0 0-5-2z"
      }
    ],
    ["path", { "d": "M6 11c1.5 0 2.5.5 3 2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "venetian-mask" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Venetian_mask, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Venetian_mask,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Venetian_mask = hmr(Venetian_mask, () => Venetian_mask[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Venetian_mask[HMR].source;
    set(Venetian_mask[HMR].source, module.default[HMR].original);
  });
}
var venetian_mask_default = Venetian_mask;

// node_modules/lucide-svelte/dist/icons/venus-and-mars.svelte
Venus_and_mars[FILENAME] = "node_modules/lucide-svelte/dist/icons/venus-and-mars.svelte";
function Venus_and_mars($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Venus_and_mars);
  const iconNode = [
    ["path", { "d": "M10 20h4" }],
    ["path", { "d": "M12 16v6" }],
    ["path", { "d": "M17 2h4v4" }],
    ["path", { "d": "m21 2-5.46 5.46" }],
    ["circle", { "cx": "12", "cy": "11", "r": "5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "venus-and-mars" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Venus_and_mars, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Venus_and_mars,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Venus_and_mars = hmr(Venus_and_mars, () => Venus_and_mars[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Venus_and_mars[HMR].source;
    set(Venus_and_mars[HMR].source, module.default[HMR].original);
  });
}
var venus_and_mars_default = Venus_and_mars;

// node_modules/lucide-svelte/dist/icons/venus.svelte
Venus[FILENAME] = "node_modules/lucide-svelte/dist/icons/venus.svelte";
function Venus($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Venus);
  const iconNode = [
    ["path", { "d": "M12 15v7" }],
    ["path", { "d": "M9 19h6" }],
    ["circle", { "cx": "12", "cy": "9", "r": "6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "venus" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Venus, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Venus,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Venus = hmr(Venus, () => Venus[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Venus[HMR].source;
    set(Venus[HMR].source, module.default[HMR].original);
  });
}
var venus_default = Venus;

// node_modules/lucide-svelte/dist/icons/vibrate-off.svelte
Vibrate_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/vibrate-off.svelte";
function Vibrate_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Vibrate_off);
  const iconNode = [
    ["path", { "d": "m2 8 2 2-2 2 2 2-2 2" }],
    ["path", { "d": "m22 8-2 2 2 2-2 2 2 2" }],
    [
      "path",
      { "d": "M8 8v10c0 .55.45 1 1 1h6c.55 0 1-.45 1-1v-2" }
    ],
    ["path", { "d": "M16 10.34V6c0-.55-.45-1-1-1h-4.34" }],
    ["line", { "x1": "2", "x2": "22", "y1": "2", "y2": "22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "vibrate-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Vibrate_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Vibrate_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Vibrate_off = hmr(Vibrate_off, () => Vibrate_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Vibrate_off[HMR].source;
    set(Vibrate_off[HMR].source, module.default[HMR].original);
  });
}
var vibrate_off_default = Vibrate_off;

// node_modules/lucide-svelte/dist/icons/vibrate.svelte
Vibrate[FILENAME] = "node_modules/lucide-svelte/dist/icons/vibrate.svelte";
function Vibrate($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Vibrate);
  const iconNode = [
    ["path", { "d": "m2 8 2 2-2 2 2 2-2 2" }],
    ["path", { "d": "m22 8-2 2 2 2-2 2 2 2" }],
    [
      "rect",
      { "width": "8", "height": "14", "x": "8", "y": "5", "rx": "1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "vibrate" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Vibrate, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Vibrate,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Vibrate = hmr(Vibrate, () => Vibrate[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Vibrate[HMR].source;
    set(Vibrate[HMR].source, module.default[HMR].original);
  });
}
var vibrate_default = Vibrate;

// node_modules/lucide-svelte/dist/icons/video-off.svelte
Video_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/video-off.svelte";
function Video_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Video_off);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.66 6H14a2 2 0 0 1 2 2v2.5l5.248-3.062A.5.5 0 0 1 22 7.87v8.196"
      }
    ],
    [
      "path",
      {
        "d": "M16 16a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h2"
      }
    ],
    ["path", { "d": "m2 2 20 20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "video-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Video_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Video_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Video_off = hmr(Video_off, () => Video_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Video_off[HMR].source;
    set(Video_off[HMR].source, module.default[HMR].original);
  });
}
var video_off_default = Video_off;

// node_modules/lucide-svelte/dist/icons/video.svelte
Video[FILENAME] = "node_modules/lucide-svelte/dist/icons/video.svelte";
function Video($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Video);
  const iconNode = [
    [
      "path",
      {
        "d": "m16 13 5.223 3.482a.5.5 0 0 0 .777-.416V7.87a.5.5 0 0 0-.752-.432L16 10.5"
      }
    ],
    [
      "rect",
      { "x": "2", "y": "6", "width": "14", "height": "12", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "video" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Video, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Video,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Video = hmr(Video, () => Video[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Video[HMR].source;
    set(Video[HMR].source, module.default[HMR].original);
  });
}
var video_default = Video;

// node_modules/lucide-svelte/dist/icons/videotape.svelte
Videotape[FILENAME] = "node_modules/lucide-svelte/dist/icons/videotape.svelte";
function Videotape($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Videotape);
  const iconNode = [
    [
      "rect",
      { "width": "20", "height": "16", "x": "2", "y": "4", "rx": "2" }
    ],
    ["path", { "d": "M2 8h20" }],
    ["circle", { "cx": "8", "cy": "14", "r": "2" }],
    ["path", { "d": "M8 12h8" }],
    ["circle", { "cx": "16", "cy": "14", "r": "2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "videotape" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Videotape, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Videotape,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Videotape = hmr(Videotape, () => Videotape[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Videotape[HMR].source;
    set(Videotape[HMR].source, module.default[HMR].original);
  });
}
var videotape_default = Videotape;

// node_modules/lucide-svelte/dist/icons/view.svelte
View[FILENAME] = "node_modules/lucide-svelte/dist/icons/view.svelte";
function View($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, View);
  const iconNode = [
    ["path", { "d": "M21 17v2a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-2" }],
    ["path", { "d": "M21 7V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v2" }],
    ["circle", { "cx": "12", "cy": "12", "r": "1" }],
    [
      "path",
      {
        "d": "M18.944 12.33a1 1 0 0 0 0-.66 7.5 7.5 0 0 0-13.888 0 1 1 0 0 0 0 .66 7.5 7.5 0 0 0 13.888 0"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "view" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(View, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    View,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  View = hmr(View, () => View[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = View[HMR].source;
    set(View[HMR].source, module.default[HMR].original);
  });
}
var view_default = View;

// node_modules/lucide-svelte/dist/icons/voicemail.svelte
Voicemail[FILENAME] = "node_modules/lucide-svelte/dist/icons/voicemail.svelte";
function Voicemail($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Voicemail);
  const iconNode = [
    ["circle", { "cx": "6", "cy": "12", "r": "4" }],
    ["circle", { "cx": "18", "cy": "12", "r": "4" }],
    ["line", { "x1": "6", "x2": "18", "y1": "16", "y2": "16" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "voicemail" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Voicemail, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Voicemail,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Voicemail = hmr(Voicemail, () => Voicemail[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Voicemail[HMR].source;
    set(Voicemail[HMR].source, module.default[HMR].original);
  });
}
var voicemail_default = Voicemail;

// node_modules/lucide-svelte/dist/icons/volleyball.svelte
Volleyball[FILENAME] = "node_modules/lucide-svelte/dist/icons/volleyball.svelte";
function Volleyball($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Volleyball);
  const iconNode = [
    ["path", { "d": "M11.1 7.1a16.55 16.55 0 0 1 10.9 4" }],
    ["path", { "d": "M12 12a12.6 12.6 0 0 1-8.7 5" }],
    ["path", { "d": "M16.8 13.6a16.55 16.55 0 0 1-9 7.5" }],
    [
      "path",
      { "d": "M20.7 17a12.8 12.8 0 0 0-8.7-5 13.3 13.3 0 0 1 0-10" }
    ],
    ["path", { "d": "M6.3 3.8a16.55 16.55 0 0 0 1.9 11.5" }],
    ["circle", { "cx": "12", "cy": "12", "r": "10" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "volleyball" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Volleyball, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Volleyball,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Volleyball = hmr(Volleyball, () => Volleyball[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Volleyball[HMR].source;
    set(Volleyball[HMR].source, module.default[HMR].original);
  });
}
var volleyball_default = Volleyball;

// node_modules/lucide-svelte/dist/icons/volume-1.svelte
Volume_1[FILENAME] = "node_modules/lucide-svelte/dist/icons/volume-1.svelte";
function Volume_1($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Volume_1);
  const iconNode = [
    [
      "path",
      {
        "d": "M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"
      }
    ],
    ["path", { "d": "M16 9a5 5 0 0 1 0 6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "volume-1" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Volume_1, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Volume_1,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Volume_1 = hmr(Volume_1, () => Volume_1[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Volume_1[HMR].source;
    set(Volume_1[HMR].source, module.default[HMR].original);
  });
}
var volume_1_default = Volume_1;

// node_modules/lucide-svelte/dist/icons/volume-2.svelte
Volume_2[FILENAME] = "node_modules/lucide-svelte/dist/icons/volume-2.svelte";
function Volume_2($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Volume_2);
  const iconNode = [
    [
      "path",
      {
        "d": "M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"
      }
    ],
    ["path", { "d": "M16 9a5 5 0 0 1 0 6" }],
    ["path", { "d": "M19.364 18.364a9 9 0 0 0 0-12.728" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "volume-2" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Volume_2, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Volume_2,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Volume_2 = hmr(Volume_2, () => Volume_2[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Volume_2[HMR].source;
    set(Volume_2[HMR].source, module.default[HMR].original);
  });
}
var volume_2_default = Volume_2;

// node_modules/lucide-svelte/dist/icons/volume-off.svelte
Volume_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/volume-off.svelte";
function Volume_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Volume_off);
  const iconNode = [
    ["path", { "d": "M16 9a5 5 0 0 1 .95 2.293" }],
    ["path", { "d": "M19.364 5.636a9 9 0 0 1 1.889 9.96" }],
    ["path", { "d": "m2 2 20 20" }],
    [
      "path",
      {
        "d": "m7 7-.587.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298V11"
      }
    ],
    ["path", { "d": "M9.828 4.172A.686.686 0 0 1 11 4.657v.686" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "volume-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Volume_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Volume_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Volume_off = hmr(Volume_off, () => Volume_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Volume_off[HMR].source;
    set(Volume_off[HMR].source, module.default[HMR].original);
  });
}
var volume_off_default = Volume_off;

// node_modules/lucide-svelte/dist/icons/volume-x.svelte
Volume_x[FILENAME] = "node_modules/lucide-svelte/dist/icons/volume-x.svelte";
function Volume_x($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Volume_x);
  const iconNode = [
    [
      "path",
      {
        "d": "M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"
      }
    ],
    ["line", { "x1": "22", "x2": "16", "y1": "9", "y2": "15" }],
    ["line", { "x1": "16", "x2": "22", "y1": "9", "y2": "15" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "volume-x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Volume_x, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Volume_x,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Volume_x = hmr(Volume_x, () => Volume_x[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Volume_x[HMR].source;
    set(Volume_x[HMR].source, module.default[HMR].original);
  });
}
var volume_x_default = Volume_x;

// node_modules/lucide-svelte/dist/icons/volume.svelte
Volume[FILENAME] = "node_modules/lucide-svelte/dist/icons/volume.svelte";
function Volume($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Volume);
  const iconNode = [
    [
      "path",
      {
        "d": "M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "volume" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Volume, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Volume,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Volume = hmr(Volume, () => Volume[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Volume[HMR].source;
    set(Volume[HMR].source, module.default[HMR].original);
  });
}
var volume_default = Volume;

// node_modules/lucide-svelte/dist/icons/vote.svelte
Vote[FILENAME] = "node_modules/lucide-svelte/dist/icons/vote.svelte";
function Vote($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Vote);
  const iconNode = [
    ["path", { "d": "m9 12 2 2 4-4" }],
    [
      "path",
      { "d": "M5 7c0-1.1.9-2 2-2h10a2 2 0 0 1 2 2v12H5V7Z" }
    ],
    ["path", { "d": "M22 19H2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "vote" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Vote, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Vote,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Vote = hmr(Vote, () => Vote[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Vote[HMR].source;
    set(Vote[HMR].source, module.default[HMR].original);
  });
}
var vote_default = Vote;

// node_modules/lucide-svelte/dist/icons/wallet-cards.svelte
Wallet_cards[FILENAME] = "node_modules/lucide-svelte/dist/icons/wallet-cards.svelte";
function Wallet_cards($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wallet_cards);
  const iconNode = [
    [
      "rect",
      { "width": "18", "height": "18", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M3 9a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2" }],
    [
      "path",
      {
        "d": "M3 11h3c.8 0 1.6.3 2.1.9l1.1.9c1.6 1.6 4.1 1.6 5.7 0l1.1-.9c.5-.5 1.3-.9 2.1-.9H21"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wallet-cards" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wallet_cards, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wallet_cards,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wallet_cards = hmr(Wallet_cards, () => Wallet_cards[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wallet_cards[HMR].source;
    set(Wallet_cards[HMR].source, module.default[HMR].original);
  });
}
var wallet_cards_default = Wallet_cards;

// node_modules/lucide-svelte/dist/icons/wallet-minimal.svelte
Wallet_minimal[FILENAME] = "node_modules/lucide-svelte/dist/icons/wallet-minimal.svelte";
function Wallet_minimal($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wallet_minimal);
  const iconNode = [
    ["path", { "d": "M17 14h.01" }],
    [
      "path",
      {
        "d": "M7 7h12a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wallet-minimal" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wallet_minimal, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wallet_minimal,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wallet_minimal = hmr(Wallet_minimal, () => Wallet_minimal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wallet_minimal[HMR].source;
    set(Wallet_minimal[HMR].source, module.default[HMR].original);
  });
}
var wallet_minimal_default = Wallet_minimal;

// node_modules/lucide-svelte/dist/icons/wallet.svelte
Wallet[FILENAME] = "node_modules/lucide-svelte/dist/icons/wallet.svelte";
function Wallet($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wallet);
  const iconNode = [
    [
      "path",
      {
        "d": "M19 7V4a1 1 0 0 0-1-1H5a2 2 0 0 0 0 4h15a1 1 0 0 1 1 1v4h-3a2 2 0 0 0 0 4h3a1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1"
      }
    ],
    ["path", { "d": "M3 5v14a2 2 0 0 0 2 2h15a1 1 0 0 0 1-1v-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wallet" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wallet, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wallet,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wallet = hmr(Wallet, () => Wallet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wallet[HMR].source;
    set(Wallet[HMR].source, module.default[HMR].original);
  });
}
var wallet_default = Wallet;

// node_modules/lucide-svelte/dist/icons/wallpaper.svelte
Wallpaper[FILENAME] = "node_modules/lucide-svelte/dist/icons/wallpaper.svelte";
function Wallpaper($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wallpaper);
  const iconNode = [
    ["circle", { "cx": "8", "cy": "9", "r": "2" }],
    [
      "path",
      {
        "d": "m9 17 6.1-6.1a2 2 0 0 1 2.81.01L22 15V5a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2"
      }
    ],
    ["path", { "d": "M8 21h8" }],
    ["path", { "d": "M12 17v4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wallpaper" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wallpaper, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wallpaper,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wallpaper = hmr(Wallpaper, () => Wallpaper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wallpaper[HMR].source;
    set(Wallpaper[HMR].source, module.default[HMR].original);
  });
}
var wallpaper_default = Wallpaper;

// node_modules/lucide-svelte/dist/icons/wand-sparkles.svelte
Wand_sparkles[FILENAME] = "node_modules/lucide-svelte/dist/icons/wand-sparkles.svelte";
function Wand_sparkles($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wand_sparkles);
  const iconNode = [
    [
      "path",
      {
        "d": "m21.64 3.64-1.28-1.28a1.21 1.21 0 0 0-1.72 0L2.36 18.64a1.21 1.21 0 0 0 0 1.72l1.28 1.28a1.2 1.2 0 0 0 1.72 0L21.64 5.36a1.2 1.2 0 0 0 0-1.72"
      }
    ],
    ["path", { "d": "m14 7 3 3" }],
    ["path", { "d": "M5 6v4" }],
    ["path", { "d": "M19 14v4" }],
    ["path", { "d": "M10 2v2" }],
    ["path", { "d": "M7 8H3" }],
    ["path", { "d": "M21 16h-4" }],
    ["path", { "d": "M11 3H9" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wand-sparkles" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wand_sparkles, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wand_sparkles,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wand_sparkles = hmr(Wand_sparkles, () => Wand_sparkles[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wand_sparkles[HMR].source;
    set(Wand_sparkles[HMR].source, module.default[HMR].original);
  });
}
var wand_sparkles_default = Wand_sparkles;

// node_modules/lucide-svelte/dist/icons/wand.svelte
Wand[FILENAME] = "node_modules/lucide-svelte/dist/icons/wand.svelte";
function Wand($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wand);
  const iconNode = [
    ["path", { "d": "M15 4V2" }],
    ["path", { "d": "M15 16v-2" }],
    ["path", { "d": "M8 9h2" }],
    ["path", { "d": "M20 9h2" }],
    ["path", { "d": "M17.8 11.8 19 13" }],
    ["path", { "d": "M15 9h.01" }],
    ["path", { "d": "M17.8 6.2 19 5" }],
    ["path", { "d": "m3 21 9-9" }],
    ["path", { "d": "M12.2 6.2 11 5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wand" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wand, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wand,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wand = hmr(Wand, () => Wand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wand[HMR].source;
    set(Wand[HMR].source, module.default[HMR].original);
  });
}
var wand_default = Wand;

// node_modules/lucide-svelte/dist/icons/warehouse.svelte
Warehouse[FILENAME] = "node_modules/lucide-svelte/dist/icons/warehouse.svelte";
function Warehouse($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Warehouse);
  const iconNode = [
    [
      "path",
      { "d": "M18 21V10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1v11" }
    ],
    [
      "path",
      {
        "d": "M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V8a2 2 0 0 1 1.132-1.803l7.95-3.974a2 2 0 0 1 1.837 0l7.948 3.974A2 2 0 0 1 22 8z"
      }
    ],
    ["path", { "d": "M6 13h12" }],
    ["path", { "d": "M6 17h12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "warehouse" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Warehouse, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Warehouse,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Warehouse = hmr(Warehouse, () => Warehouse[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Warehouse[HMR].source;
    set(Warehouse[HMR].source, module.default[HMR].original);
  });
}
var warehouse_default = Warehouse;

// node_modules/lucide-svelte/dist/icons/washing-machine.svelte
Washing_machine[FILENAME] = "node_modules/lucide-svelte/dist/icons/washing-machine.svelte";
function Washing_machine($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Washing_machine);
  const iconNode = [
    ["path", { "d": "M3 6h3" }],
    ["path", { "d": "M17 6h.01" }],
    [
      "rect",
      { "width": "18", "height": "20", "x": "3", "y": "2", "rx": "2" }
    ],
    ["circle", { "cx": "12", "cy": "13", "r": "5" }],
    [
      "path",
      { "d": "M12 18a2.5 2.5 0 0 0 0-5 2.5 2.5 0 0 1 0-5" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "washing-machine" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Washing_machine, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Washing_machine,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Washing_machine = hmr(Washing_machine, () => Washing_machine[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Washing_machine[HMR].source;
    set(Washing_machine[HMR].source, module.default[HMR].original);
  });
}
var washing_machine_default = Washing_machine;

// node_modules/lucide-svelte/dist/icons/watch.svelte
Watch[FILENAME] = "node_modules/lucide-svelte/dist/icons/watch.svelte";
function Watch($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Watch);
  const iconNode = [
    ["path", { "d": "M12 10v2.2l1.6 1" }],
    [
      "path",
      {
        "d": "m16.13 7.66-.81-4.05a2 2 0 0 0-2-1.61h-2.68a2 2 0 0 0-2 1.61l-.78 4.05"
      }
    ],
    [
      "path",
      {
        "d": "m7.88 16.36.8 4a2 2 0 0 0 2 1.61h2.72a2 2 0 0 0 2-1.61l.81-4.05"
      }
    ],
    ["circle", { "cx": "12", "cy": "12", "r": "6" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "watch" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Watch, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Watch,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Watch = hmr(Watch, () => Watch[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Watch[HMR].source;
    set(Watch[HMR].source, module.default[HMR].original);
  });
}
var watch_default = Watch;

// node_modules/lucide-svelte/dist/icons/waves-ladder.svelte
Waves_ladder[FILENAME] = "node_modules/lucide-svelte/dist/icons/waves-ladder.svelte";
function Waves_ladder($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Waves_ladder);
  const iconNode = [
    ["path", { "d": "M19 5a2 2 0 0 0-2 2v11" }],
    [
      "path",
      {
        "d": "M2 18c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"
      }
    ],
    ["path", { "d": "M7 13h10" }],
    ["path", { "d": "M7 9h10" }],
    ["path", { "d": "M9 5a2 2 0 0 0-2 2v11" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "waves-ladder" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Waves_ladder, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Waves_ladder,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Waves_ladder = hmr(Waves_ladder, () => Waves_ladder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Waves_ladder[HMR].source;
    set(Waves_ladder[HMR].source, module.default[HMR].original);
  });
}
var waves_ladder_default = Waves_ladder;

// node_modules/lucide-svelte/dist/icons/waves.svelte
Waves[FILENAME] = "node_modules/lucide-svelte/dist/icons/waves.svelte";
function Waves($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Waves);
  const iconNode = [
    [
      "path",
      {
        "d": "M2 6c.6.5 1.2 1 2.5 1C7 7 7 5 9.5 5c2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"
      }
    ],
    [
      "path",
      {
        "d": "M2 12c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"
      }
    ],
    [
      "path",
      {
        "d": "M2 18c.6.5 1.2 1 2.5 1 2.5 0 2.5-2 5-2 2.6 0 2.4 2 5 2 2.5 0 2.5-2 5-2 1.3 0 1.9.5 2.5 1"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "waves" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Waves, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Waves,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Waves = hmr(Waves, () => Waves[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Waves[HMR].source;
    set(Waves[HMR].source, module.default[HMR].original);
  });
}
var waves_default = Waves;

// node_modules/lucide-svelte/dist/icons/waypoints.svelte
Waypoints[FILENAME] = "node_modules/lucide-svelte/dist/icons/waypoints.svelte";
function Waypoints($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Waypoints);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "4.5", "r": "2.5" }],
    ["path", { "d": "m10.2 6.3-3.9 3.9" }],
    ["circle", { "cx": "4.5", "cy": "12", "r": "2.5" }],
    ["path", { "d": "M7 12h10" }],
    ["circle", { "cx": "19.5", "cy": "12", "r": "2.5" }],
    ["path", { "d": "m13.8 17.7 3.9-3.9" }],
    ["circle", { "cx": "12", "cy": "19.5", "r": "2.5" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "waypoints" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Waypoints, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Waypoints,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Waypoints = hmr(Waypoints, () => Waypoints[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Waypoints[HMR].source;
    set(Waypoints[HMR].source, module.default[HMR].original);
  });
}
var waypoints_default = Waypoints;

// node_modules/lucide-svelte/dist/icons/webcam.svelte
Webcam[FILENAME] = "node_modules/lucide-svelte/dist/icons/webcam.svelte";
function Webcam($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Webcam);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "10", "r": "8" }],
    ["circle", { "cx": "12", "cy": "10", "r": "3" }],
    ["path", { "d": "M7 22h10" }],
    ["path", { "d": "M12 22v-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "webcam" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Webcam, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Webcam,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Webcam = hmr(Webcam, () => Webcam[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Webcam[HMR].source;
    set(Webcam[HMR].source, module.default[HMR].original);
  });
}
var webcam_default = Webcam;

// node_modules/lucide-svelte/dist/icons/webhook-off.svelte
Webhook_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/webhook-off.svelte";
function Webhook_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Webhook_off);
  const iconNode = [
    [
      "path",
      { "d": "M17 17h-5c-1.09-.02-1.94.92-2.5 1.9A3 3 0 1 1 2.57 15" }
    ],
    ["path", { "d": "M9 3.4a4 4 0 0 1 6.52.66" }],
    ["path", { "d": "m6 17 3.1-5.8a2.5 2.5 0 0 0 .057-2.05" }],
    ["path", { "d": "M20.3 20.3a4 4 0 0 1-2.3.7" }],
    ["path", { "d": "M18.6 13a4 4 0 0 1 3.357 3.414" }],
    ["path", { "d": "m12 6 .6 1" }],
    ["path", { "d": "m2 2 20 20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "webhook-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Webhook_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Webhook_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Webhook_off = hmr(Webhook_off, () => Webhook_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Webhook_off[HMR].source;
    set(Webhook_off[HMR].source, module.default[HMR].original);
  });
}
var webhook_off_default = Webhook_off;

// node_modules/lucide-svelte/dist/icons/webhook.svelte
Webhook[FILENAME] = "node_modules/lucide-svelte/dist/icons/webhook.svelte";
function Webhook($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Webhook);
  const iconNode = [
    [
      "path",
      {
        "d": "M18 16.98h-5.99c-1.1 0-1.95.94-2.48 1.9A4 4 0 0 1 2 17c.01-.7.2-1.4.57-2"
      }
    ],
    [
      "path",
      {
        "d": "m6 17 3.13-5.78c.53-.97.1-2.18-.5-3.1a4 4 0 1 1 6.89-4.06"
      }
    ],
    [
      "path",
      {
        "d": "m12 6 3.13 5.73C15.66 12.7 16.9 13 18 13a4 4 0 0 1 0 8"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "webhook" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Webhook, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Webhook,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Webhook = hmr(Webhook, () => Webhook[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Webhook[HMR].source;
    set(Webhook[HMR].source, module.default[HMR].original);
  });
}
var webhook_default = Webhook;

// node_modules/lucide-svelte/dist/icons/weight.svelte
Weight[FILENAME] = "node_modules/lucide-svelte/dist/icons/weight.svelte";
function Weight($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Weight);
  const iconNode = [
    ["circle", { "cx": "12", "cy": "5", "r": "3" }],
    [
      "path",
      {
        "d": "M6.5 8a2 2 0 0 0-1.905 1.46L2.1 18.5A2 2 0 0 0 4 21h16a2 2 0 0 0 1.925-2.54L19.4 9.5A2 2 0 0 0 17.48 8Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "weight" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Weight, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Weight,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Weight = hmr(Weight, () => Weight[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Weight[HMR].source;
    set(Weight[HMR].source, module.default[HMR].original);
  });
}
var weight_default = Weight;

// node_modules/lucide-svelte/dist/icons/wheat-off.svelte
Wheat_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/wheat-off.svelte";
function Wheat_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wheat_off);
  const iconNode = [
    ["path", { "d": "m2 22 10-10" }],
    ["path", { "d": "m16 8-1.17 1.17" }],
    [
      "path",
      {
        "d": "M3.47 12.53 5 11l1.53 1.53a3.5 3.5 0 0 1 0 4.94L5 19l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z"
      }
    ],
    [
      "path",
      {
        "d": "m8 8-.53.53a3.5 3.5 0 0 0 0 4.94L9 15l1.53-1.53c.55-.55.88-1.25.98-1.97"
      }
    ],
    [
      "path",
      {
        "d": "M10.91 5.26c.15-.26.34-.51.56-.73L13 3l1.53 1.53a3.5 3.5 0 0 1 .28 4.62"
      }
    ],
    [
      "path",
      { "d": "M20 2h2v2a4 4 0 0 1-4 4h-2V6a4 4 0 0 1 4-4Z" }
    ],
    [
      "path",
      {
        "d": "M11.47 17.47 13 19l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L5 19l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z"
      }
    ],
    [
      "path",
      {
        "d": "m16 16-.53.53a3.5 3.5 0 0 1-4.94 0L9 15l1.53-1.53a3.49 3.49 0 0 1 1.97-.98"
      }
    ],
    [
      "path",
      {
        "d": "M18.74 13.09c.26-.15.51-.34.73-.56L21 11l-1.53-1.53a3.5 3.5 0 0 0-4.62-.28"
      }
    ],
    ["line", { "x1": "2", "x2": "22", "y1": "2", "y2": "22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wheat-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wheat_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wheat_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wheat_off = hmr(Wheat_off, () => Wheat_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wheat_off[HMR].source;
    set(Wheat_off[HMR].source, module.default[HMR].original);
  });
}
var wheat_off_default = Wheat_off;

// node_modules/lucide-svelte/dist/icons/wheat.svelte
Wheat[FILENAME] = "node_modules/lucide-svelte/dist/icons/wheat.svelte";
function Wheat($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wheat);
  const iconNode = [
    ["path", { "d": "M2 22 16 8" }],
    [
      "path",
      {
        "d": "M3.47 12.53 5 11l1.53 1.53a3.5 3.5 0 0 1 0 4.94L5 19l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z"
      }
    ],
    [
      "path",
      {
        "d": "M7.47 8.53 9 7l1.53 1.53a3.5 3.5 0 0 1 0 4.94L9 15l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z"
      }
    ],
    [
      "path",
      {
        "d": "M11.47 4.53 13 3l1.53 1.53a3.5 3.5 0 0 1 0 4.94L13 11l-1.53-1.53a3.5 3.5 0 0 1 0-4.94Z"
      }
    ],
    [
      "path",
      { "d": "M20 2h2v2a4 4 0 0 1-4 4h-2V6a4 4 0 0 1 4-4Z" }
    ],
    [
      "path",
      {
        "d": "M11.47 17.47 13 19l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L5 19l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z"
      }
    ],
    [
      "path",
      {
        "d": "M15.47 13.47 17 15l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L9 15l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z"
      }
    ],
    [
      "path",
      {
        "d": "M19.47 9.47 21 11l-1.53 1.53a3.5 3.5 0 0 1-4.94 0L13 11l1.53-1.53a3.5 3.5 0 0 1 4.94 0Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wheat" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wheat, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wheat,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wheat = hmr(Wheat, () => Wheat[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wheat[HMR].source;
    set(Wheat[HMR].source, module.default[HMR].original);
  });
}
var wheat_default = Wheat;

// node_modules/lucide-svelte/dist/icons/whole-word.svelte
Whole_word[FILENAME] = "node_modules/lucide-svelte/dist/icons/whole-word.svelte";
function Whole_word($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Whole_word);
  const iconNode = [
    ["circle", { "cx": "7", "cy": "12", "r": "3" }],
    ["path", { "d": "M10 9v6" }],
    ["circle", { "cx": "17", "cy": "12", "r": "3" }],
    ["path", { "d": "M14 7v8" }],
    [
      "path",
      { "d": "M22 17v1c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-1" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "whole-word" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Whole_word, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Whole_word,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Whole_word = hmr(Whole_word, () => Whole_word[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Whole_word[HMR].source;
    set(Whole_word[HMR].source, module.default[HMR].original);
  });
}
var whole_word_default = Whole_word;

// node_modules/lucide-svelte/dist/icons/wifi-cog.svelte
Wifi_cog[FILENAME] = "node_modules/lucide-svelte/dist/icons/wifi-cog.svelte";
function Wifi_cog($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wifi_cog);
  const iconNode = [
    ["path", { "d": "m14.305 19.53.923-.382" }],
    ["path", { "d": "m15.228 16.852-.923-.383" }],
    ["path", { "d": "m16.852 15.228-.383-.923" }],
    ["path", { "d": "m16.852 20.772-.383.924" }],
    ["path", { "d": "m19.148 15.228.383-.923" }],
    ["path", { "d": "m19.53 21.696-.382-.924" }],
    ["path", { "d": "M2 7.82a15 15 0 0 1 20 0" }],
    ["path", { "d": "m20.772 16.852.924-.383" }],
    ["path", { "d": "m20.772 19.148.924.383" }],
    ["path", { "d": "M5 11.858a10 10 0 0 1 11.5-1.785" }],
    ["path", { "d": "M8.5 15.429a5 5 0 0 1 2.413-1.31" }],
    ["circle", { "cx": "18", "cy": "18", "r": "3" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wifi-cog" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wifi_cog, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wifi_cog,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wifi_cog = hmr(Wifi_cog, () => Wifi_cog[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wifi_cog[HMR].source;
    set(Wifi_cog[HMR].source, module.default[HMR].original);
  });
}
var wifi_cog_default = Wifi_cog;

// node_modules/lucide-svelte/dist/icons/wifi-high.svelte
Wifi_high[FILENAME] = "node_modules/lucide-svelte/dist/icons/wifi-high.svelte";
function Wifi_high($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wifi_high);
  const iconNode = [
    ["path", { "d": "M12 20h.01" }],
    ["path", { "d": "M5 12.859a10 10 0 0 1 14 0" }],
    ["path", { "d": "M8.5 16.429a5 5 0 0 1 7 0" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wifi-high" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wifi_high, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wifi_high,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wifi_high = hmr(Wifi_high, () => Wifi_high[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wifi_high[HMR].source;
    set(Wifi_high[HMR].source, module.default[HMR].original);
  });
}
var wifi_high_default = Wifi_high;

// node_modules/lucide-svelte/dist/icons/wifi-low.svelte
Wifi_low[FILENAME] = "node_modules/lucide-svelte/dist/icons/wifi-low.svelte";
function Wifi_low($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wifi_low);
  const iconNode = [
    ["path", { "d": "M12 20h.01" }],
    ["path", { "d": "M8.5 16.429a5 5 0 0 1 7 0" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wifi-low" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wifi_low, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wifi_low,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wifi_low = hmr(Wifi_low, () => Wifi_low[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wifi_low[HMR].source;
    set(Wifi_low[HMR].source, module.default[HMR].original);
  });
}
var wifi_low_default = Wifi_low;

// node_modules/lucide-svelte/dist/icons/wifi-off.svelte
Wifi_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/wifi-off.svelte";
function Wifi_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wifi_off);
  const iconNode = [
    ["path", { "d": "M12 20h.01" }],
    ["path", { "d": "M8.5 16.429a5 5 0 0 1 7 0" }],
    ["path", { "d": "M5 12.859a10 10 0 0 1 5.17-2.69" }],
    ["path", { "d": "M19 12.859a10 10 0 0 0-2.007-1.523" }],
    ["path", { "d": "M2 8.82a15 15 0 0 1 4.177-2.643" }],
    ["path", { "d": "M22 8.82a15 15 0 0 0-11.288-3.764" }],
    ["path", { "d": "m2 2 20 20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wifi-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wifi_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wifi_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wifi_off = hmr(Wifi_off, () => Wifi_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wifi_off[HMR].source;
    set(Wifi_off[HMR].source, module.default[HMR].original);
  });
}
var wifi_off_default = Wifi_off;

// node_modules/lucide-svelte/dist/icons/wifi-pen.svelte
Wifi_pen[FILENAME] = "node_modules/lucide-svelte/dist/icons/wifi-pen.svelte";
function Wifi_pen($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wifi_pen);
  const iconNode = [
    ["path", { "d": "M2 8.82a15 15 0 0 1 20 0" }],
    [
      "path",
      {
        "d": "M21.378 16.626a1 1 0 0 0-3.004-3.004l-4.01 4.012a2 2 0 0 0-.506.854l-.837 2.87a.5.5 0 0 0 .62.62l2.87-.837a2 2 0 0 0 .854-.506z"
      }
    ],
    ["path", { "d": "M5 12.859a10 10 0 0 1 10.5-2.222" }],
    ["path", { "d": "M8.5 16.429a5 5 0 0 1 3-1.406" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wifi-pen" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wifi_pen, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wifi_pen,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wifi_pen = hmr(Wifi_pen, () => Wifi_pen[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wifi_pen[HMR].source;
    set(Wifi_pen[HMR].source, module.default[HMR].original);
  });
}
var wifi_pen_default = Wifi_pen;

// node_modules/lucide-svelte/dist/icons/wifi-sync.svelte
Wifi_sync[FILENAME] = "node_modules/lucide-svelte/dist/icons/wifi-sync.svelte";
function Wifi_sync($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wifi_sync);
  const iconNode = [
    [
      "path",
      { "d": "M11.965 10.105v4L13.5 12.5a5 5 0 0 1 8 1.5" }
    ],
    ["path", { "d": "M11.965 14.105h4" }],
    [
      "path",
      { "d": "M17.965 18.105h4L20.43 19.71a5 5 0 0 1-8-1.5" }
    ],
    ["path", { "d": "M2 8.82a15 15 0 0 1 20 0" }],
    ["path", { "d": "M21.965 22.105v-4" }],
    ["path", { "d": "M5 12.86a10 10 0 0 1 3-2.032" }],
    ["path", { "d": "M8.5 16.429h.01" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wifi-sync" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wifi_sync, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wifi_sync,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wifi_sync = hmr(Wifi_sync, () => Wifi_sync[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wifi_sync[HMR].source;
    set(Wifi_sync[HMR].source, module.default[HMR].original);
  });
}
var wifi_sync_default = Wifi_sync;

// node_modules/lucide-svelte/dist/icons/wifi-zero.svelte
Wifi_zero[FILENAME] = "node_modules/lucide-svelte/dist/icons/wifi-zero.svelte";
function Wifi_zero($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wifi_zero);
  const iconNode = [["path", { "d": "M12 20h.01" }]];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wifi-zero" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wifi_zero, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wifi_zero,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wifi_zero = hmr(Wifi_zero, () => Wifi_zero[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wifi_zero[HMR].source;
    set(Wifi_zero[HMR].source, module.default[HMR].original);
  });
}
var wifi_zero_default = Wifi_zero;

// node_modules/lucide-svelte/dist/icons/wifi.svelte
Wifi[FILENAME] = "node_modules/lucide-svelte/dist/icons/wifi.svelte";
function Wifi($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wifi);
  const iconNode = [
    ["path", { "d": "M12 20h.01" }],
    ["path", { "d": "M2 8.82a15 15 0 0 1 20 0" }],
    ["path", { "d": "M5 12.859a10 10 0 0 1 14 0" }],
    ["path", { "d": "M8.5 16.429a5 5 0 0 1 7 0" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wifi" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wifi, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wifi,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wifi = hmr(Wifi, () => Wifi[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wifi[HMR].source;
    set(Wifi[HMR].source, module.default[HMR].original);
  });
}
var wifi_default = Wifi;

// node_modules/lucide-svelte/dist/icons/wind-arrow-down.svelte
Wind_arrow_down[FILENAME] = "node_modules/lucide-svelte/dist/icons/wind-arrow-down.svelte";
function Wind_arrow_down($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wind_arrow_down);
  const iconNode = [
    ["path", { "d": "M10 2v8" }],
    ["path", { "d": "M12.8 21.6A2 2 0 1 0 14 18H2" }],
    ["path", { "d": "M17.5 10a2.5 2.5 0 1 1 2 4H2" }],
    ["path", { "d": "m6 6 4 4 4-4" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wind-arrow-down" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wind_arrow_down, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wind_arrow_down,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wind_arrow_down = hmr(Wind_arrow_down, () => Wind_arrow_down[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wind_arrow_down[HMR].source;
    set(Wind_arrow_down[HMR].source, module.default[HMR].original);
  });
}
var wind_arrow_down_default = Wind_arrow_down;

// node_modules/lucide-svelte/dist/icons/wind.svelte
Wind[FILENAME] = "node_modules/lucide-svelte/dist/icons/wind.svelte";
function Wind($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wind);
  const iconNode = [
    ["path", { "d": "M12.8 19.6A2 2 0 1 0 14 16H2" }],
    ["path", { "d": "M17.5 8a2.5 2.5 0 1 1 2 4H2" }],
    ["path", { "d": "M9.8 4.4A2 2 0 1 1 11 8H2" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wind" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wind, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wind,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wind = hmr(Wind, () => Wind[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wind[HMR].source;
    set(Wind[HMR].source, module.default[HMR].original);
  });
}
var wind_default = Wind;

// node_modules/lucide-svelte/dist/icons/wine-off.svelte
Wine_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/wine-off.svelte";
function Wine_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wine_off);
  const iconNode = [
    ["path", { "d": "M8 22h8" }],
    ["path", { "d": "M7 10h3m7 0h-1.343" }],
    ["path", { "d": "M12 15v7" }],
    [
      "path",
      {
        "d": "M7.307 7.307A12.33 12.33 0 0 0 7 10a5 5 0 0 0 7.391 4.391M8.638 2.981C8.75 2.668 8.872 2.34 9 2h6c1.5 4 2 6 2 8 0 .407-.05.809-.145 1.198"
      }
    ],
    ["line", { "x1": "2", "x2": "22", "y1": "2", "y2": "22" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wine-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wine_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wine_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wine_off = hmr(Wine_off, () => Wine_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wine_off[HMR].source;
    set(Wine_off[HMR].source, module.default[HMR].original);
  });
}
var wine_off_default = Wine_off;

// node_modules/lucide-svelte/dist/icons/wine.svelte
Wine[FILENAME] = "node_modules/lucide-svelte/dist/icons/wine.svelte";
function Wine($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wine);
  const iconNode = [
    ["path", { "d": "M8 22h8" }],
    ["path", { "d": "M7 10h10" }],
    ["path", { "d": "M12 15v7" }],
    [
      "path",
      {
        "d": "M12 15a5 5 0 0 0 5-5c0-2-.5-4-2-8H9c-1.5 4-2 6-2 8a5 5 0 0 0 5 5Z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wine" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wine, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wine,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wine = hmr(Wine, () => Wine[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wine[HMR].source;
    set(Wine[HMR].source, module.default[HMR].original);
  });
}
var wine_default = Wine;

// node_modules/lucide-svelte/dist/icons/workflow.svelte
Workflow[FILENAME] = "node_modules/lucide-svelte/dist/icons/workflow.svelte";
function Workflow($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Workflow);
  const iconNode = [
    [
      "rect",
      { "width": "8", "height": "8", "x": "3", "y": "3", "rx": "2" }
    ],
    ["path", { "d": "M7 11v4a2 2 0 0 0 2 2h4" }],
    [
      "rect",
      { "width": "8", "height": "8", "x": "13", "y": "13", "rx": "2" }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "workflow" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Workflow, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Workflow,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Workflow = hmr(Workflow, () => Workflow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Workflow[HMR].source;
    set(Workflow[HMR].source, module.default[HMR].original);
  });
}
var workflow_default = Workflow;

// node_modules/lucide-svelte/dist/icons/worm.svelte
Worm[FILENAME] = "node_modules/lucide-svelte/dist/icons/worm.svelte";
function Worm($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Worm);
  const iconNode = [
    ["path", { "d": "m19 12-1.5 3" }],
    ["path", { "d": "M19.63 18.81 22 20" }],
    [
      "path",
      {
        "d": "M6.47 8.23a1.68 1.68 0 0 1 2.44 1.93l-.64 2.08a6.76 6.76 0 0 0 10.16 7.67l.42-.27a1 1 0 1 0-2.73-4.21l-.42.27a1.76 1.76 0 0 1-2.63-1.99l.64-2.08A6.66 6.66 0 0 0 3.94 3.9l-.7.4a1 1 0 1 0 2.55 4.34z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "worm" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Worm, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Worm,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Worm = hmr(Worm, () => Worm[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Worm[HMR].source;
    set(Worm[HMR].source, module.default[HMR].original);
  });
}
var worm_default = Worm;

// node_modules/lucide-svelte/dist/icons/wrap-text.svelte
Wrap_text[FILENAME] = "node_modules/lucide-svelte/dist/icons/wrap-text.svelte";
function Wrap_text($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wrap_text);
  const iconNode = [
    ["path", { "d": "m16 16-2 2 2 2" }],
    ["path", { "d": "M3 12h15a3 3 0 1 1 0 6h-4" }],
    ["path", { "d": "M3 18h7" }],
    ["path", { "d": "M3 6h18" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wrap-text" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wrap_text, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wrap_text,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wrap_text = hmr(Wrap_text, () => Wrap_text[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wrap_text[HMR].source;
    set(Wrap_text[HMR].source, module.default[HMR].original);
  });
}
var wrap_text_default = Wrap_text;

// node_modules/lucide-svelte/dist/icons/wrench.svelte
Wrench[FILENAME] = "node_modules/lucide-svelte/dist/icons/wrench.svelte";
function Wrench($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Wrench);
  const iconNode = [
    [
      "path",
      {
        "d": "M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.106-3.105c.32-.322.863-.22.983.218a6 6 0 0 1-8.259 7.057l-7.91 7.91a1 1 0 0 1-2.999-3l7.91-7.91a6 6 0 0 1 7.057-8.259c.438.12.54.662.219.984z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "wrench" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Wrench, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Wrench,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Wrench = hmr(Wrench, () => Wrench[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Wrench[HMR].source;
    set(Wrench[HMR].source, module.default[HMR].original);
  });
}
var wrench_default = Wrench;

// node_modules/lucide-svelte/dist/icons/x.svelte
X[FILENAME] = "node_modules/lucide-svelte/dist/icons/x.svelte";
function X($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, X);
  const iconNode = [
    ["path", { "d": "M18 6 6 18" }],
    ["path", { "d": "m6 6 12 12" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "x" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(X, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    X,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  X = hmr(X, () => X[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = X[HMR].source;
    set(X[HMR].source, module.default[HMR].original);
  });
}
var x_default = X;

// node_modules/lucide-svelte/dist/icons/youtube.svelte
Youtube[FILENAME] = "node_modules/lucide-svelte/dist/icons/youtube.svelte";
function Youtube($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Youtube);
  const iconNode = [
    [
      "path",
      {
        "d": "M2.5 17a24.12 24.12 0 0 1 0-10 2 2 0 0 1 1.4-1.4 49.56 49.56 0 0 1 16.2 0A2 2 0 0 1 21.5 7a24.12 24.12 0 0 1 0 10 2 2 0 0 1-1.4 1.4 49.55 49.55 0 0 1-16.2 0A2 2 0 0 1 2.5 17"
      }
    ],
    ["path", { "d": "m10 15 5-3-5-3z" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "youtube" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Youtube, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Youtube,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Youtube = hmr(Youtube, () => Youtube[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Youtube[HMR].source;
    set(Youtube[HMR].source, module.default[HMR].original);
  });
}
var youtube_default = Youtube;

// node_modules/lucide-svelte/dist/icons/zap-off.svelte
Zap_off[FILENAME] = "node_modules/lucide-svelte/dist/icons/zap-off.svelte";
function Zap_off($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Zap_off);
  const iconNode = [
    [
      "path",
      {
        "d": "M10.513 4.856 13.12 2.17a.5.5 0 0 1 .86.46l-1.377 4.317"
      }
    ],
    [
      "path",
      { "d": "M15.656 10H20a1 1 0 0 1 .78 1.63l-1.72 1.773" }
    ],
    [
      "path",
      {
        "d": "M16.273 16.273 10.88 21.83a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14H4a1 1 0 0 1-.78-1.63l4.507-4.643"
      }
    ],
    ["path", { "d": "m2 2 20 20" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "zap-off" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Zap_off, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Zap_off,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Zap_off = hmr(Zap_off, () => Zap_off[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Zap_off[HMR].source;
    set(Zap_off[HMR].source, module.default[HMR].original);
  });
}
var zap_off_default = Zap_off;

// node_modules/lucide-svelte/dist/icons/zap.svelte
Zap[FILENAME] = "node_modules/lucide-svelte/dist/icons/zap.svelte";
function Zap($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Zap);
  const iconNode = [
    [
      "path",
      {
        "d": "M4 14a1 1 0 0 1-.78-1.63l9.9-10.2a.5.5 0 0 1 .86.46l-1.92 6.02A1 1 0 0 0 13 10h7a1 1 0 0 1 .78 1.63l-9.9 10.2a.5.5 0 0 1-.86-.46l1.92-6.02A1 1 0 0 0 11 14z"
      }
    ]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "zap" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Zap, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Zap,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Zap = hmr(Zap, () => Zap[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Zap[HMR].source;
    set(Zap[HMR].source, module.default[HMR].original);
  });
}
var zap_default = Zap;

// node_modules/lucide-svelte/dist/icons/zoom-in.svelte
Zoom_in[FILENAME] = "node_modules/lucide-svelte/dist/icons/zoom-in.svelte";
function Zoom_in($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Zoom_in);
  const iconNode = [
    ["circle", { "cx": "11", "cy": "11", "r": "8" }],
    [
      "line",
      { "x1": "21", "x2": "16.65", "y1": "21", "y2": "16.65" }
    ],
    ["line", { "x1": "11", "x2": "11", "y1": "8", "y2": "14" }],
    ["line", { "x1": "8", "x2": "14", "y1": "11", "y2": "11" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "zoom-in" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Zoom_in, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Zoom_in,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Zoom_in = hmr(Zoom_in, () => Zoom_in[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Zoom_in[HMR].source;
    set(Zoom_in[HMR].source, module.default[HMR].original);
  });
}
var zoom_in_default = Zoom_in;

// node_modules/lucide-svelte/dist/icons/zoom-out.svelte
Zoom_out[FILENAME] = "node_modules/lucide-svelte/dist/icons/zoom-out.svelte";
function Zoom_out($$anchor, $$props) {
  check_target(new.target);
  const $$sanitized_props = legacy_rest_props($$props, ["children", "$$slots", "$$events", "$$legacy"]);
  push($$props, false, Zoom_out);
  const iconNode = [
    ["circle", { "cx": "11", "cy": "11", "r": "8" }],
    [
      "line",
      { "x1": "21", "x2": "16.65", "y1": "21", "y2": "16.65" }
    ],
    ["line", { "x1": "8", "x2": "14", "y1": "11", "y2": "11" }]
  ];
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Icon_default(node, spread_props({ name: "zoom-out" }, () => $$sanitized_props, {
      get iconNode() {
        return iconNode;
      },
      children: wrap_snippet(Zoom_out, ($$anchor2, $$slotProps) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        slot(node_1, $$props, "default", {}, null);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    })),
    "component",
    Zoom_out,
    36,
    0,
    { componentTag: "Icon" }
  );
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Zoom_out = hmr(Zoom_out, () => Zoom_out[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Zoom_out[HMR].source;
    set(Zoom_out[HMR].source, module.default[HMR].original);
  });
}
var zoom_out_default = Zoom_out;
export {
  a_arrow_down_default as AArrowDown,
  a_arrow_down_default as AArrowDownIcon,
  a_arrow_up_default as AArrowUp,
  a_arrow_up_default as AArrowUpIcon,
  a_large_small_default as ALargeSmall,
  a_large_small_default as ALargeSmallIcon,
  accessibility_default as Accessibility,
  accessibility_default as AccessibilityIcon,
  activity_default as Activity,
  activity_default as ActivityIcon,
  square_activity_default as ActivitySquare,
  square_activity_default as ActivitySquareIcon,
  air_vent_default as AirVent,
  air_vent_default as AirVentIcon,
  airplay_default as Airplay,
  airplay_default as AirplayIcon,
  alarm_clock_check_default as AlarmCheck,
  alarm_clock_check_default as AlarmCheckIcon,
  alarm_clock_default as AlarmClock,
  alarm_clock_check_default as AlarmClockCheck,
  alarm_clock_check_default as AlarmClockCheckIcon,
  alarm_clock_default as AlarmClockIcon,
  alarm_clock_minus_default as AlarmClockMinus,
  alarm_clock_minus_default as AlarmClockMinusIcon,
  alarm_clock_off_default as AlarmClockOff,
  alarm_clock_off_default as AlarmClockOffIcon,
  alarm_clock_plus_default as AlarmClockPlus,
  alarm_clock_plus_default as AlarmClockPlusIcon,
  alarm_clock_minus_default as AlarmMinus,
  alarm_clock_minus_default as AlarmMinusIcon,
  alarm_clock_plus_default as AlarmPlus,
  alarm_clock_plus_default as AlarmPlusIcon,
  alarm_smoke_default as AlarmSmoke,
  alarm_smoke_default as AlarmSmokeIcon,
  album_default as Album,
  album_default as AlbumIcon,
  circle_alert_default as AlertCircle,
  circle_alert_default as AlertCircleIcon,
  octagon_alert_default as AlertOctagon,
  octagon_alert_default as AlertOctagonIcon,
  triangle_alert_default as AlertTriangle,
  triangle_alert_default as AlertTriangleIcon,
  align_center_default as AlignCenter,
  align_center_horizontal_default as AlignCenterHorizontal,
  align_center_horizontal_default as AlignCenterHorizontalIcon,
  align_center_default as AlignCenterIcon,
  align_center_vertical_default as AlignCenterVertical,
  align_center_vertical_default as AlignCenterVerticalIcon,
  align_end_horizontal_default as AlignEndHorizontal,
  align_end_horizontal_default as AlignEndHorizontalIcon,
  align_end_vertical_default as AlignEndVertical,
  align_end_vertical_default as AlignEndVerticalIcon,
  align_horizontal_distribute_center_default as AlignHorizontalDistributeCenter,
  align_horizontal_distribute_center_default as AlignHorizontalDistributeCenterIcon,
  align_horizontal_distribute_end_default as AlignHorizontalDistributeEnd,
  align_horizontal_distribute_end_default as AlignHorizontalDistributeEndIcon,
  align_horizontal_distribute_start_default as AlignHorizontalDistributeStart,
  align_horizontal_distribute_start_default as AlignHorizontalDistributeStartIcon,
  align_horizontal_justify_center_default as AlignHorizontalJustifyCenter,
  align_horizontal_justify_center_default as AlignHorizontalJustifyCenterIcon,
  align_horizontal_justify_end_default as AlignHorizontalJustifyEnd,
  align_horizontal_justify_end_default as AlignHorizontalJustifyEndIcon,
  align_horizontal_justify_start_default as AlignHorizontalJustifyStart,
  align_horizontal_justify_start_default as AlignHorizontalJustifyStartIcon,
  align_horizontal_space_around_default as AlignHorizontalSpaceAround,
  align_horizontal_space_around_default as AlignHorizontalSpaceAroundIcon,
  align_horizontal_space_between_default as AlignHorizontalSpaceBetween,
  align_horizontal_space_between_default as AlignHorizontalSpaceBetweenIcon,
  align_justify_default as AlignJustify,
  align_justify_default as AlignJustifyIcon,
  align_left_default as AlignLeft,
  align_left_default as AlignLeftIcon,
  align_right_default as AlignRight,
  align_right_default as AlignRightIcon,
  align_start_horizontal_default as AlignStartHorizontal,
  align_start_horizontal_default as AlignStartHorizontalIcon,
  align_start_vertical_default as AlignStartVertical,
  align_start_vertical_default as AlignStartVerticalIcon,
  align_vertical_distribute_center_default as AlignVerticalDistributeCenter,
  align_vertical_distribute_center_default as AlignVerticalDistributeCenterIcon,
  align_vertical_distribute_end_default as AlignVerticalDistributeEnd,
  align_vertical_distribute_end_default as AlignVerticalDistributeEndIcon,
  align_vertical_distribute_start_default as AlignVerticalDistributeStart,
  align_vertical_distribute_start_default as AlignVerticalDistributeStartIcon,
  align_vertical_justify_center_default as AlignVerticalJustifyCenter,
  align_vertical_justify_center_default as AlignVerticalJustifyCenterIcon,
  align_vertical_justify_end_default as AlignVerticalJustifyEnd,
  align_vertical_justify_end_default as AlignVerticalJustifyEndIcon,
  align_vertical_justify_start_default as AlignVerticalJustifyStart,
  align_vertical_justify_start_default as AlignVerticalJustifyStartIcon,
  align_vertical_space_around_default as AlignVerticalSpaceAround,
  align_vertical_space_around_default as AlignVerticalSpaceAroundIcon,
  align_vertical_space_between_default as AlignVerticalSpaceBetween,
  align_vertical_space_between_default as AlignVerticalSpaceBetweenIcon,
  ambulance_default as Ambulance,
  ambulance_default as AmbulanceIcon,
  ampersand_default as Ampersand,
  ampersand_default as AmpersandIcon,
  ampersands_default as Ampersands,
  ampersands_default as AmpersandsIcon,
  amphora_default as Amphora,
  amphora_default as AmphoraIcon,
  anchor_default as Anchor,
  anchor_default as AnchorIcon,
  angry_default as Angry,
  angry_default as AngryIcon,
  annoyed_default as Annoyed,
  annoyed_default as AnnoyedIcon,
  antenna_default as Antenna,
  antenna_default as AntennaIcon,
  anvil_default as Anvil,
  anvil_default as AnvilIcon,
  aperture_default as Aperture,
  aperture_default as ApertureIcon,
  app_window_default as AppWindow,
  app_window_default as AppWindowIcon,
  app_window_mac_default as AppWindowMac,
  app_window_mac_default as AppWindowMacIcon,
  apple_default as Apple,
  apple_default as AppleIcon,
  archive_default as Archive,
  archive_default as ArchiveIcon,
  archive_restore_default as ArchiveRestore,
  archive_restore_default as ArchiveRestoreIcon,
  archive_x_default as ArchiveX,
  archive_x_default as ArchiveXIcon,
  chart_area_default as AreaChart,
  chart_area_default as AreaChartIcon,
  armchair_default as Armchair,
  armchair_default as ArmchairIcon,
  arrow_big_down_default as ArrowBigDown,
  arrow_big_down_dash_default as ArrowBigDownDash,
  arrow_big_down_dash_default as ArrowBigDownDashIcon,
  arrow_big_down_default as ArrowBigDownIcon,
  arrow_big_left_default as ArrowBigLeft,
  arrow_big_left_dash_default as ArrowBigLeftDash,
  arrow_big_left_dash_default as ArrowBigLeftDashIcon,
  arrow_big_left_default as ArrowBigLeftIcon,
  arrow_big_right_default as ArrowBigRight,
  arrow_big_right_dash_default as ArrowBigRightDash,
  arrow_big_right_dash_default as ArrowBigRightDashIcon,
  arrow_big_right_default as ArrowBigRightIcon,
  arrow_big_up_default as ArrowBigUp,
  arrow_big_up_dash_default as ArrowBigUpDash,
  arrow_big_up_dash_default as ArrowBigUpDashIcon,
  arrow_big_up_default as ArrowBigUpIcon,
  arrow_down_default as ArrowDown,
  arrow_down_0_1_default as ArrowDown01,
  arrow_down_0_1_default as ArrowDown01Icon,
  arrow_down_1_0_default as ArrowDown10,
  arrow_down_1_0_default as ArrowDown10Icon,
  arrow_down_a_z_default as ArrowDownAZ,
  arrow_down_a_z_default as ArrowDownAZIcon,
  arrow_down_a_z_default as ArrowDownAz,
  arrow_down_a_z_default as ArrowDownAzIcon,
  circle_arrow_down_default as ArrowDownCircle,
  circle_arrow_down_default as ArrowDownCircleIcon,
  arrow_down_from_line_default as ArrowDownFromLine,
  arrow_down_from_line_default as ArrowDownFromLineIcon,
  arrow_down_default as ArrowDownIcon,
  arrow_down_left_default as ArrowDownLeft,
  circle_arrow_out_down_left_default as ArrowDownLeftFromCircle,
  circle_arrow_out_down_left_default as ArrowDownLeftFromCircleIcon,
  square_arrow_out_down_left_default as ArrowDownLeftFromSquare,
  square_arrow_out_down_left_default as ArrowDownLeftFromSquareIcon,
  arrow_down_left_default as ArrowDownLeftIcon,
  square_arrow_down_left_default as ArrowDownLeftSquare,
  square_arrow_down_left_default as ArrowDownLeftSquareIcon,
  arrow_down_narrow_wide_default as ArrowDownNarrowWide,
  arrow_down_narrow_wide_default as ArrowDownNarrowWideIcon,
  arrow_down_right_default as ArrowDownRight,
  circle_arrow_out_down_right_default as ArrowDownRightFromCircle,
  circle_arrow_out_down_right_default as ArrowDownRightFromCircleIcon,
  square_arrow_out_down_right_default as ArrowDownRightFromSquare,
  square_arrow_out_down_right_default as ArrowDownRightFromSquareIcon,
  arrow_down_right_default as ArrowDownRightIcon,
  square_arrow_down_right_default as ArrowDownRightSquare,
  square_arrow_down_right_default as ArrowDownRightSquareIcon,
  square_arrow_down_default as ArrowDownSquare,
  square_arrow_down_default as ArrowDownSquareIcon,
  arrow_down_to_dot_default as ArrowDownToDot,
  arrow_down_to_dot_default as ArrowDownToDotIcon,
  arrow_down_to_line_default as ArrowDownToLine,
  arrow_down_to_line_default as ArrowDownToLineIcon,
  arrow_down_up_default as ArrowDownUp,
  arrow_down_up_default as ArrowDownUpIcon,
  arrow_down_wide_narrow_default as ArrowDownWideNarrow,
  arrow_down_wide_narrow_default as ArrowDownWideNarrowIcon,
  arrow_down_z_a_default as ArrowDownZA,
  arrow_down_z_a_default as ArrowDownZAIcon,
  arrow_down_z_a_default as ArrowDownZa,
  arrow_down_z_a_default as ArrowDownZaIcon,
  arrow_left_default as ArrowLeft,
  circle_arrow_left_default as ArrowLeftCircle,
  circle_arrow_left_default as ArrowLeftCircleIcon,
  arrow_left_from_line_default as ArrowLeftFromLine,
  arrow_left_from_line_default as ArrowLeftFromLineIcon,
  arrow_left_default as ArrowLeftIcon,
  arrow_left_right_default as ArrowLeftRight,
  arrow_left_right_default as ArrowLeftRightIcon,
  square_arrow_left_default as ArrowLeftSquare,
  square_arrow_left_default as ArrowLeftSquareIcon,
  arrow_left_to_line_default as ArrowLeftToLine,
  arrow_left_to_line_default as ArrowLeftToLineIcon,
  arrow_right_default as ArrowRight,
  circle_arrow_right_default as ArrowRightCircle,
  circle_arrow_right_default as ArrowRightCircleIcon,
  arrow_right_from_line_default as ArrowRightFromLine,
  arrow_right_from_line_default as ArrowRightFromLineIcon,
  arrow_right_default as ArrowRightIcon,
  arrow_right_left_default as ArrowRightLeft,
  arrow_right_left_default as ArrowRightLeftIcon,
  square_arrow_right_default as ArrowRightSquare,
  square_arrow_right_default as ArrowRightSquareIcon,
  arrow_right_to_line_default as ArrowRightToLine,
  arrow_right_to_line_default as ArrowRightToLineIcon,
  arrow_up_default as ArrowUp,
  arrow_up_0_1_default as ArrowUp01,
  arrow_up_0_1_default as ArrowUp01Icon,
  arrow_up_1_0_default as ArrowUp10,
  arrow_up_1_0_default as ArrowUp10Icon,
  arrow_up_a_z_default as ArrowUpAZ,
  arrow_up_a_z_default as ArrowUpAZIcon,
  arrow_up_a_z_default as ArrowUpAz,
  arrow_up_a_z_default as ArrowUpAzIcon,
  circle_arrow_up_default as ArrowUpCircle,
  circle_arrow_up_default as ArrowUpCircleIcon,
  arrow_up_down_default as ArrowUpDown,
  arrow_up_down_default as ArrowUpDownIcon,
  arrow_up_from_dot_default as ArrowUpFromDot,
  arrow_up_from_dot_default as ArrowUpFromDotIcon,
  arrow_up_from_line_default as ArrowUpFromLine,
  arrow_up_from_line_default as ArrowUpFromLineIcon,
  arrow_up_default as ArrowUpIcon,
  arrow_up_left_default as ArrowUpLeft,
  circle_arrow_out_up_left_default as ArrowUpLeftFromCircle,
  circle_arrow_out_up_left_default as ArrowUpLeftFromCircleIcon,
  square_arrow_out_up_left_default as ArrowUpLeftFromSquare,
  square_arrow_out_up_left_default as ArrowUpLeftFromSquareIcon,
  arrow_up_left_default as ArrowUpLeftIcon,
  square_arrow_up_left_default as ArrowUpLeftSquare,
  square_arrow_up_left_default as ArrowUpLeftSquareIcon,
  arrow_up_narrow_wide_default as ArrowUpNarrowWide,
  arrow_up_narrow_wide_default as ArrowUpNarrowWideIcon,
  arrow_up_right_default as ArrowUpRight,
  circle_arrow_out_up_right_default as ArrowUpRightFromCircle,
  circle_arrow_out_up_right_default as ArrowUpRightFromCircleIcon,
  square_arrow_out_up_right_default as ArrowUpRightFromSquare,
  square_arrow_out_up_right_default as ArrowUpRightFromSquareIcon,
  arrow_up_right_default as ArrowUpRightIcon,
  square_arrow_up_right_default as ArrowUpRightSquare,
  square_arrow_up_right_default as ArrowUpRightSquareIcon,
  square_arrow_up_default as ArrowUpSquare,
  square_arrow_up_default as ArrowUpSquareIcon,
  arrow_up_to_line_default as ArrowUpToLine,
  arrow_up_to_line_default as ArrowUpToLineIcon,
  arrow_up_wide_narrow_default as ArrowUpWideNarrow,
  arrow_up_wide_narrow_default as ArrowUpWideNarrowIcon,
  arrow_up_z_a_default as ArrowUpZA,
  arrow_up_z_a_default as ArrowUpZAIcon,
  arrow_up_z_a_default as ArrowUpZa,
  arrow_up_z_a_default as ArrowUpZaIcon,
  arrows_up_from_line_default as ArrowsUpFromLine,
  arrows_up_from_line_default as ArrowsUpFromLineIcon,
  asterisk_default as Asterisk,
  asterisk_default as AsteriskIcon,
  square_asterisk_default as AsteriskSquare,
  square_asterisk_default as AsteriskSquareIcon,
  at_sign_default as AtSign,
  at_sign_default as AtSignIcon,
  atom_default as Atom,
  atom_default as AtomIcon,
  audio_lines_default as AudioLines,
  audio_lines_default as AudioLinesIcon,
  audio_waveform_default as AudioWaveform,
  audio_waveform_default as AudioWaveformIcon,
  award_default as Award,
  award_default as AwardIcon,
  axe_default as Axe,
  axe_default as AxeIcon,
  axis_3d_default as Axis3D,
  axis_3d_default as Axis3DIcon,
  axis_3d_default as Axis3d,
  axis_3d_default as Axis3dIcon,
  baby_default as Baby,
  baby_default as BabyIcon,
  backpack_default as Backpack,
  backpack_default as BackpackIcon,
  badge_default as Badge,
  badge_alert_default as BadgeAlert,
  badge_alert_default as BadgeAlertIcon,
  badge_cent_default as BadgeCent,
  badge_cent_default as BadgeCentIcon,
  badge_check_default as BadgeCheck,
  badge_check_default as BadgeCheckIcon,
  badge_dollar_sign_default as BadgeDollarSign,
  badge_dollar_sign_default as BadgeDollarSignIcon,
  badge_euro_default as BadgeEuro,
  badge_euro_default as BadgeEuroIcon,
  badge_question_mark_default as BadgeHelp,
  badge_question_mark_default as BadgeHelpIcon,
  badge_default as BadgeIcon,
  badge_indian_rupee_default as BadgeIndianRupee,
  badge_indian_rupee_default as BadgeIndianRupeeIcon,
  badge_info_default as BadgeInfo,
  badge_info_default as BadgeInfoIcon,
  badge_japanese_yen_default as BadgeJapaneseYen,
  badge_japanese_yen_default as BadgeJapaneseYenIcon,
  badge_minus_default as BadgeMinus,
  badge_minus_default as BadgeMinusIcon,
  badge_percent_default as BadgePercent,
  badge_percent_default as BadgePercentIcon,
  badge_plus_default as BadgePlus,
  badge_plus_default as BadgePlusIcon,
  badge_pound_sterling_default as BadgePoundSterling,
  badge_pound_sterling_default as BadgePoundSterlingIcon,
  badge_question_mark_default as BadgeQuestionMark,
  badge_question_mark_default as BadgeQuestionMarkIcon,
  badge_russian_ruble_default as BadgeRussianRuble,
  badge_russian_ruble_default as BadgeRussianRubleIcon,
  badge_swiss_franc_default as BadgeSwissFranc,
  badge_swiss_franc_default as BadgeSwissFrancIcon,
  badge_turkish_lira_default as BadgeTurkishLira,
  badge_turkish_lira_default as BadgeTurkishLiraIcon,
  badge_x_default as BadgeX,
  badge_x_default as BadgeXIcon,
  baggage_claim_default as BaggageClaim,
  baggage_claim_default as BaggageClaimIcon,
  ban_default as Ban,
  ban_default as BanIcon,
  banana_default as Banana,
  banana_default as BananaIcon,
  bandage_default as Bandage,
  bandage_default as BandageIcon,
  banknote_default as Banknote,
  banknote_arrow_down_default as BanknoteArrowDown,
  banknote_arrow_down_default as BanknoteArrowDownIcon,
  banknote_arrow_up_default as BanknoteArrowUp,
  banknote_arrow_up_default as BanknoteArrowUpIcon,
  banknote_default as BanknoteIcon,
  banknote_x_default as BanknoteX,
  banknote_x_default as BanknoteXIcon,
  chart_no_axes_column_increasing_default as BarChart,
  chart_no_axes_column_default as BarChart2,
  chart_no_axes_column_default as BarChart2Icon,
  chart_column_default as BarChart3,
  chart_column_default as BarChart3Icon,
  chart_column_increasing_default as BarChart4,
  chart_column_increasing_default as BarChart4Icon,
  chart_column_big_default as BarChartBig,
  chart_column_big_default as BarChartBigIcon,
  chart_bar_default as BarChartHorizontal,
  chart_bar_big_default as BarChartHorizontalBig,
  chart_bar_big_default as BarChartHorizontalBigIcon,
  chart_bar_default as BarChartHorizontalIcon,
  chart_no_axes_column_increasing_default as BarChartIcon,
  barcode_default as Barcode,
  barcode_default as BarcodeIcon,
  barrel_default as Barrel,
  barrel_default as BarrelIcon,
  baseline_default as Baseline,
  baseline_default as BaselineIcon,
  bath_default as Bath,
  bath_default as BathIcon,
  battery_default as Battery,
  battery_charging_default as BatteryCharging,
  battery_charging_default as BatteryChargingIcon,
  battery_full_default as BatteryFull,
  battery_full_default as BatteryFullIcon,
  battery_default as BatteryIcon,
  battery_low_default as BatteryLow,
  battery_low_default as BatteryLowIcon,
  battery_medium_default as BatteryMedium,
  battery_medium_default as BatteryMediumIcon,
  battery_plus_default as BatteryPlus,
  battery_plus_default as BatteryPlusIcon,
  battery_warning_default as BatteryWarning,
  battery_warning_default as BatteryWarningIcon,
  beaker_default as Beaker,
  beaker_default as BeakerIcon,
  bean_default as Bean,
  bean_default as BeanIcon,
  bean_off_default as BeanOff,
  bean_off_default as BeanOffIcon,
  bed_default as Bed,
  bed_double_default as BedDouble,
  bed_double_default as BedDoubleIcon,
  bed_default as BedIcon,
  bed_single_default as BedSingle,
  bed_single_default as BedSingleIcon,
  beef_default as Beef,
  beef_default as BeefIcon,
  beer_default as Beer,
  beer_default as BeerIcon,
  beer_off_default as BeerOff,
  beer_off_default as BeerOffIcon,
  bell_default as Bell,
  bell_dot_default as BellDot,
  bell_dot_default as BellDotIcon,
  bell_electric_default as BellElectric,
  bell_electric_default as BellElectricIcon,
  bell_default as BellIcon,
  bell_minus_default as BellMinus,
  bell_minus_default as BellMinusIcon,
  bell_off_default as BellOff,
  bell_off_default as BellOffIcon,
  bell_plus_default as BellPlus,
  bell_plus_default as BellPlusIcon,
  bell_ring_default as BellRing,
  bell_ring_default as BellRingIcon,
  between_horizontal_end_default as BetweenHorizonalEnd,
  between_horizontal_end_default as BetweenHorizonalEndIcon,
  between_horizontal_start_default as BetweenHorizonalStart,
  between_horizontal_start_default as BetweenHorizonalStartIcon,
  between_horizontal_end_default as BetweenHorizontalEnd,
  between_horizontal_end_default as BetweenHorizontalEndIcon,
  between_horizontal_start_default as BetweenHorizontalStart,
  between_horizontal_start_default as BetweenHorizontalStartIcon,
  between_vertical_end_default as BetweenVerticalEnd,
  between_vertical_end_default as BetweenVerticalEndIcon,
  between_vertical_start_default as BetweenVerticalStart,
  between_vertical_start_default as BetweenVerticalStartIcon,
  biceps_flexed_default as BicepsFlexed,
  biceps_flexed_default as BicepsFlexedIcon,
  bike_default as Bike,
  bike_default as BikeIcon,
  binary_default as Binary,
  binary_default as BinaryIcon,
  binoculars_default as Binoculars,
  binoculars_default as BinocularsIcon,
  biohazard_default as Biohazard,
  biohazard_default as BiohazardIcon,
  bird_default as Bird,
  bird_default as BirdIcon,
  bitcoin_default as Bitcoin,
  bitcoin_default as BitcoinIcon,
  blend_default as Blend,
  blend_default as BlendIcon,
  blinds_default as Blinds,
  blinds_default as BlindsIcon,
  blocks_default as Blocks,
  blocks_default as BlocksIcon,
  bluetooth_default as Bluetooth,
  bluetooth_connected_default as BluetoothConnected,
  bluetooth_connected_default as BluetoothConnectedIcon,
  bluetooth_default as BluetoothIcon,
  bluetooth_off_default as BluetoothOff,
  bluetooth_off_default as BluetoothOffIcon,
  bluetooth_searching_default as BluetoothSearching,
  bluetooth_searching_default as BluetoothSearchingIcon,
  bold_default as Bold,
  bold_default as BoldIcon,
  bolt_default as Bolt,
  bolt_default as BoltIcon,
  bomb_default as Bomb,
  bomb_default as BombIcon,
  bone_default as Bone,
  bone_default as BoneIcon,
  book_default as Book,
  book_a_default as BookA,
  book_a_default as BookAIcon,
  book_alert_default as BookAlert,
  book_alert_default as BookAlertIcon,
  book_audio_default as BookAudio,
  book_audio_default as BookAudioIcon,
  book_check_default as BookCheck,
  book_check_default as BookCheckIcon,
  book_copy_default as BookCopy,
  book_copy_default as BookCopyIcon,
  book_dashed_default as BookDashed,
  book_dashed_default as BookDashedIcon,
  book_down_default as BookDown,
  book_down_default as BookDownIcon,
  book_headphones_default as BookHeadphones,
  book_headphones_default as BookHeadphonesIcon,
  book_heart_default as BookHeart,
  book_heart_default as BookHeartIcon,
  book_default as BookIcon,
  book_image_default as BookImage,
  book_image_default as BookImageIcon,
  book_key_default as BookKey,
  book_key_default as BookKeyIcon,
  book_lock_default as BookLock,
  book_lock_default as BookLockIcon,
  book_marked_default as BookMarked,
  book_marked_default as BookMarkedIcon,
  book_minus_default as BookMinus,
  book_minus_default as BookMinusIcon,
  book_open_default as BookOpen,
  book_open_check_default as BookOpenCheck,
  book_open_check_default as BookOpenCheckIcon,
  book_open_default as BookOpenIcon,
  book_open_text_default as BookOpenText,
  book_open_text_default as BookOpenTextIcon,
  book_plus_default as BookPlus,
  book_plus_default as BookPlusIcon,
  book_dashed_default as BookTemplate,
  book_dashed_default as BookTemplateIcon,
  book_text_default as BookText,
  book_text_default as BookTextIcon,
  book_type_default as BookType,
  book_type_default as BookTypeIcon,
  book_up_default as BookUp,
  book_up_2_default as BookUp2,
  book_up_2_default as BookUp2Icon,
  book_up_default as BookUpIcon,
  book_user_default as BookUser,
  book_user_default as BookUserIcon,
  book_x_default as BookX,
  book_x_default as BookXIcon,
  bookmark_default as Bookmark,
  bookmark_check_default as BookmarkCheck,
  bookmark_check_default as BookmarkCheckIcon,
  bookmark_default as BookmarkIcon,
  bookmark_minus_default as BookmarkMinus,
  bookmark_minus_default as BookmarkMinusIcon,
  bookmark_plus_default as BookmarkPlus,
  bookmark_plus_default as BookmarkPlusIcon,
  bookmark_x_default as BookmarkX,
  bookmark_x_default as BookmarkXIcon,
  boom_box_default as BoomBox,
  boom_box_default as BoomBoxIcon,
  bot_default as Bot,
  bot_default as BotIcon,
  bot_message_square_default as BotMessageSquare,
  bot_message_square_default as BotMessageSquareIcon,
  bot_off_default as BotOff,
  bot_off_default as BotOffIcon,
  bottle_wine_default as BottleWine,
  bottle_wine_default as BottleWineIcon,
  bow_arrow_default as BowArrow,
  bow_arrow_default as BowArrowIcon,
  box_default as Box,
  box_default as BoxIcon,
  square_dashed_default as BoxSelect,
  square_dashed_default as BoxSelectIcon,
  boxes_default as Boxes,
  boxes_default as BoxesIcon,
  braces_default as Braces,
  braces_default as BracesIcon,
  brackets_default as Brackets,
  brackets_default as BracketsIcon,
  brain_default as Brain,
  brain_circuit_default as BrainCircuit,
  brain_circuit_default as BrainCircuitIcon,
  brain_cog_default as BrainCog,
  brain_cog_default as BrainCogIcon,
  brain_default as BrainIcon,
  brick_wall_default as BrickWall,
  brick_wall_fire_default as BrickWallFire,
  brick_wall_fire_default as BrickWallFireIcon,
  brick_wall_default as BrickWallIcon,
  briefcase_default as Briefcase,
  briefcase_business_default as BriefcaseBusiness,
  briefcase_business_default as BriefcaseBusinessIcon,
  briefcase_conveyor_belt_default as BriefcaseConveyorBelt,
  briefcase_conveyor_belt_default as BriefcaseConveyorBeltIcon,
  briefcase_default as BriefcaseIcon,
  briefcase_medical_default as BriefcaseMedical,
  briefcase_medical_default as BriefcaseMedicalIcon,
  bring_to_front_default as BringToFront,
  bring_to_front_default as BringToFrontIcon,
  brush_default as Brush,
  brush_cleaning_default as BrushCleaning,
  brush_cleaning_default as BrushCleaningIcon,
  brush_default as BrushIcon,
  bubbles_default as Bubbles,
  bubbles_default as BubblesIcon,
  bug_default as Bug,
  bug_default as BugIcon,
  bug_off_default as BugOff,
  bug_off_default as BugOffIcon,
  bug_play_default as BugPlay,
  bug_play_default as BugPlayIcon,
  building_default as Building,
  building_2_default as Building2,
  building_2_default as Building2Icon,
  building_default as BuildingIcon,
  bus_default as Bus,
  bus_front_default as BusFront,
  bus_front_default as BusFrontIcon,
  bus_default as BusIcon,
  cable_default as Cable,
  cable_car_default as CableCar,
  cable_car_default as CableCarIcon,
  cable_default as CableIcon,
  cake_default as Cake,
  cake_default as CakeIcon,
  cake_slice_default as CakeSlice,
  cake_slice_default as CakeSliceIcon,
  calculator_default as Calculator,
  calculator_default as CalculatorIcon,
  calendar_default as Calendar,
  calendar_1_default as Calendar1,
  calendar_1_default as Calendar1Icon,
  calendar_arrow_down_default as CalendarArrowDown,
  calendar_arrow_down_default as CalendarArrowDownIcon,
  calendar_arrow_up_default as CalendarArrowUp,
  calendar_arrow_up_default as CalendarArrowUpIcon,
  calendar_check_default as CalendarCheck,
  calendar_check_2_default as CalendarCheck2,
  calendar_check_2_default as CalendarCheck2Icon,
  calendar_check_default as CalendarCheckIcon,
  calendar_clock_default as CalendarClock,
  calendar_clock_default as CalendarClockIcon,
  calendar_cog_default as CalendarCog,
  calendar_cog_default as CalendarCogIcon,
  calendar_days_default as CalendarDays,
  calendar_days_default as CalendarDaysIcon,
  calendar_fold_default as CalendarFold,
  calendar_fold_default as CalendarFoldIcon,
  calendar_heart_default as CalendarHeart,
  calendar_heart_default as CalendarHeartIcon,
  calendar_default as CalendarIcon,
  calendar_minus_default as CalendarMinus,
  calendar_minus_2_default as CalendarMinus2,
  calendar_minus_2_default as CalendarMinus2Icon,
  calendar_minus_default as CalendarMinusIcon,
  calendar_off_default as CalendarOff,
  calendar_off_default as CalendarOffIcon,
  calendar_plus_default as CalendarPlus,
  calendar_plus_2_default as CalendarPlus2,
  calendar_plus_2_default as CalendarPlus2Icon,
  calendar_plus_default as CalendarPlusIcon,
  calendar_range_default as CalendarRange,
  calendar_range_default as CalendarRangeIcon,
  calendar_search_default as CalendarSearch,
  calendar_search_default as CalendarSearchIcon,
  calendar_sync_default as CalendarSync,
  calendar_sync_default as CalendarSyncIcon,
  calendar_x_default as CalendarX,
  calendar_x_2_default as CalendarX2,
  calendar_x_2_default as CalendarX2Icon,
  calendar_x_default as CalendarXIcon,
  camera_default as Camera,
  camera_default as CameraIcon,
  camera_off_default as CameraOff,
  camera_off_default as CameraOffIcon,
  chart_candlestick_default as CandlestickChart,
  chart_candlestick_default as CandlestickChartIcon,
  candy_default as Candy,
  candy_cane_default as CandyCane,
  candy_cane_default as CandyCaneIcon,
  candy_default as CandyIcon,
  candy_off_default as CandyOff,
  candy_off_default as CandyOffIcon,
  cannabis_default as Cannabis,
  cannabis_default as CannabisIcon,
  captions_default as Captions,
  captions_default as CaptionsIcon,
  captions_off_default as CaptionsOff,
  captions_off_default as CaptionsOffIcon,
  car_default as Car,
  car_front_default as CarFront,
  car_front_default as CarFrontIcon,
  car_default as CarIcon,
  car_taxi_front_default as CarTaxiFront,
  car_taxi_front_default as CarTaxiFrontIcon,
  caravan_default as Caravan,
  caravan_default as CaravanIcon,
  card_sim_default as CardSim,
  card_sim_default as CardSimIcon,
  carrot_default as Carrot,
  carrot_default as CarrotIcon,
  case_lower_default as CaseLower,
  case_lower_default as CaseLowerIcon,
  case_sensitive_default as CaseSensitive,
  case_sensitive_default as CaseSensitiveIcon,
  case_upper_default as CaseUpper,
  case_upper_default as CaseUpperIcon,
  cassette_tape_default as CassetteTape,
  cassette_tape_default as CassetteTapeIcon,
  cast_default as Cast,
  cast_default as CastIcon,
  castle_default as Castle,
  castle_default as CastleIcon,
  cat_default as Cat,
  cat_default as CatIcon,
  cctv_default as Cctv,
  cctv_default as CctvIcon,
  chart_area_default as ChartArea,
  chart_area_default as ChartAreaIcon,
  chart_bar_default as ChartBar,
  chart_bar_big_default as ChartBarBig,
  chart_bar_big_default as ChartBarBigIcon,
  chart_bar_decreasing_default as ChartBarDecreasing,
  chart_bar_decreasing_default as ChartBarDecreasingIcon,
  chart_bar_default as ChartBarIcon,
  chart_bar_increasing_default as ChartBarIncreasing,
  chart_bar_increasing_default as ChartBarIncreasingIcon,
  chart_bar_stacked_default as ChartBarStacked,
  chart_bar_stacked_default as ChartBarStackedIcon,
  chart_candlestick_default as ChartCandlestick,
  chart_candlestick_default as ChartCandlestickIcon,
  chart_column_default as ChartColumn,
  chart_column_big_default as ChartColumnBig,
  chart_column_big_default as ChartColumnBigIcon,
  chart_column_decreasing_default as ChartColumnDecreasing,
  chart_column_decreasing_default as ChartColumnDecreasingIcon,
  chart_column_default as ChartColumnIcon,
  chart_column_increasing_default as ChartColumnIncreasing,
  chart_column_increasing_default as ChartColumnIncreasingIcon,
  chart_column_stacked_default as ChartColumnStacked,
  chart_column_stacked_default as ChartColumnStackedIcon,
  chart_gantt_default as ChartGantt,
  chart_gantt_default as ChartGanttIcon,
  chart_line_default as ChartLine,
  chart_line_default as ChartLineIcon,
  chart_network_default as ChartNetwork,
  chart_network_default as ChartNetworkIcon,
  chart_no_axes_column_default as ChartNoAxesColumn,
  chart_no_axes_column_decreasing_default as ChartNoAxesColumnDecreasing,
  chart_no_axes_column_decreasing_default as ChartNoAxesColumnDecreasingIcon,
  chart_no_axes_column_default as ChartNoAxesColumnIcon,
  chart_no_axes_column_increasing_default as ChartNoAxesColumnIncreasing,
  chart_no_axes_column_increasing_default as ChartNoAxesColumnIncreasingIcon,
  chart_no_axes_combined_default as ChartNoAxesCombined,
  chart_no_axes_combined_default as ChartNoAxesCombinedIcon,
  chart_no_axes_gantt_default as ChartNoAxesGantt,
  chart_no_axes_gantt_default as ChartNoAxesGanttIcon,
  chart_pie_default as ChartPie,
  chart_pie_default as ChartPieIcon,
  chart_scatter_default as ChartScatter,
  chart_scatter_default as ChartScatterIcon,
  chart_spline_default as ChartSpline,
  chart_spline_default as ChartSplineIcon,
  check_default as Check,
  check_check_default as CheckCheck,
  check_check_default as CheckCheckIcon,
  circle_check_big_default as CheckCircle,
  circle_check_default as CheckCircle2,
  circle_check_default as CheckCircle2Icon,
  circle_check_big_default as CheckCircleIcon,
  check_default as CheckIcon,
  check_line_default as CheckLine,
  check_line_default as CheckLineIcon,
  square_check_big_default as CheckSquare,
  square_check_default as CheckSquare2,
  square_check_default as CheckSquare2Icon,
  square_check_big_default as CheckSquareIcon,
  chef_hat_default as ChefHat,
  chef_hat_default as ChefHatIcon,
  cherry_default as Cherry,
  cherry_default as CherryIcon,
  chevron_down_default as ChevronDown,
  circle_chevron_down_default as ChevronDownCircle,
  circle_chevron_down_default as ChevronDownCircleIcon,
  chevron_down_default as ChevronDownIcon,
  square_chevron_down_default as ChevronDownSquare,
  square_chevron_down_default as ChevronDownSquareIcon,
  chevron_first_default as ChevronFirst,
  chevron_first_default as ChevronFirstIcon,
  chevron_last_default as ChevronLast,
  chevron_last_default as ChevronLastIcon,
  chevron_left_default as ChevronLeft,
  circle_chevron_left_default as ChevronLeftCircle,
  circle_chevron_left_default as ChevronLeftCircleIcon,
  chevron_left_default as ChevronLeftIcon,
  square_chevron_left_default as ChevronLeftSquare,
  square_chevron_left_default as ChevronLeftSquareIcon,
  chevron_right_default as ChevronRight,
  circle_chevron_right_default as ChevronRightCircle,
  circle_chevron_right_default as ChevronRightCircleIcon,
  chevron_right_default as ChevronRightIcon,
  square_chevron_right_default as ChevronRightSquare,
  square_chevron_right_default as ChevronRightSquareIcon,
  chevron_up_default as ChevronUp,
  circle_chevron_up_default as ChevronUpCircle,
  circle_chevron_up_default as ChevronUpCircleIcon,
  chevron_up_default as ChevronUpIcon,
  square_chevron_up_default as ChevronUpSquare,
  square_chevron_up_default as ChevronUpSquareIcon,
  chevrons_down_default as ChevronsDown,
  chevrons_down_default as ChevronsDownIcon,
  chevrons_down_up_default as ChevronsDownUp,
  chevrons_down_up_default as ChevronsDownUpIcon,
  chevrons_left_default as ChevronsLeft,
  chevrons_left_default as ChevronsLeftIcon,
  chevrons_left_right_default as ChevronsLeftRight,
  chevrons_left_right_ellipsis_default as ChevronsLeftRightEllipsis,
  chevrons_left_right_ellipsis_default as ChevronsLeftRightEllipsisIcon,
  chevrons_left_right_default as ChevronsLeftRightIcon,
  chevrons_right_default as ChevronsRight,
  chevrons_right_default as ChevronsRightIcon,
  chevrons_right_left_default as ChevronsRightLeft,
  chevrons_right_left_default as ChevronsRightLeftIcon,
  chevrons_up_default as ChevronsUp,
  chevrons_up_down_default as ChevronsUpDown,
  chevrons_up_down_default as ChevronsUpDownIcon,
  chevrons_up_default as ChevronsUpIcon,
  chrome_default as Chrome,
  chrome_default as ChromeIcon,
  church_default as Church,
  church_default as ChurchIcon,
  cigarette_default as Cigarette,
  cigarette_default as CigaretteIcon,
  cigarette_off_default as CigaretteOff,
  cigarette_off_default as CigaretteOffIcon,
  circle_default as Circle,
  circle_alert_default as CircleAlert,
  circle_alert_default as CircleAlertIcon,
  circle_arrow_down_default as CircleArrowDown,
  circle_arrow_down_default as CircleArrowDownIcon,
  circle_arrow_left_default as CircleArrowLeft,
  circle_arrow_left_default as CircleArrowLeftIcon,
  circle_arrow_out_down_left_default as CircleArrowOutDownLeft,
  circle_arrow_out_down_left_default as CircleArrowOutDownLeftIcon,
  circle_arrow_out_down_right_default as CircleArrowOutDownRight,
  circle_arrow_out_down_right_default as CircleArrowOutDownRightIcon,
  circle_arrow_out_up_left_default as CircleArrowOutUpLeft,
  circle_arrow_out_up_left_default as CircleArrowOutUpLeftIcon,
  circle_arrow_out_up_right_default as CircleArrowOutUpRight,
  circle_arrow_out_up_right_default as CircleArrowOutUpRightIcon,
  circle_arrow_right_default as CircleArrowRight,
  circle_arrow_right_default as CircleArrowRightIcon,
  circle_arrow_up_default as CircleArrowUp,
  circle_arrow_up_default as CircleArrowUpIcon,
  circle_check_default as CircleCheck,
  circle_check_big_default as CircleCheckBig,
  circle_check_big_default as CircleCheckBigIcon,
  circle_check_default as CircleCheckIcon,
  circle_chevron_down_default as CircleChevronDown,
  circle_chevron_down_default as CircleChevronDownIcon,
  circle_chevron_left_default as CircleChevronLeft,
  circle_chevron_left_default as CircleChevronLeftIcon,
  circle_chevron_right_default as CircleChevronRight,
  circle_chevron_right_default as CircleChevronRightIcon,
  circle_chevron_up_default as CircleChevronUp,
  circle_chevron_up_default as CircleChevronUpIcon,
  circle_dashed_default as CircleDashed,
  circle_dashed_default as CircleDashedIcon,
  circle_divide_default as CircleDivide,
  circle_divide_default as CircleDivideIcon,
  circle_dollar_sign_default as CircleDollarSign,
  circle_dollar_sign_default as CircleDollarSignIcon,
  circle_dot_default as CircleDot,
  circle_dot_dashed_default as CircleDotDashed,
  circle_dot_dashed_default as CircleDotDashedIcon,
  circle_dot_default as CircleDotIcon,
  circle_ellipsis_default as CircleEllipsis,
  circle_ellipsis_default as CircleEllipsisIcon,
  circle_equal_default as CircleEqual,
  circle_equal_default as CircleEqualIcon,
  circle_fading_arrow_up_default as CircleFadingArrowUp,
  circle_fading_arrow_up_default as CircleFadingArrowUpIcon,
  circle_fading_plus_default as CircleFadingPlus,
  circle_fading_plus_default as CircleFadingPlusIcon,
  circle_gauge_default as CircleGauge,
  circle_gauge_default as CircleGaugeIcon,
  circle_question_mark_default as CircleHelp,
  circle_question_mark_default as CircleHelpIcon,
  circle_default as CircleIcon,
  circle_minus_default as CircleMinus,
  circle_minus_default as CircleMinusIcon,
  circle_off_default as CircleOff,
  circle_off_default as CircleOffIcon,
  circle_parking_default as CircleParking,
  circle_parking_default as CircleParkingIcon,
  circle_parking_off_default as CircleParkingOff,
  circle_parking_off_default as CircleParkingOffIcon,
  circle_pause_default as CirclePause,
  circle_pause_default as CirclePauseIcon,
  circle_percent_default as CirclePercent,
  circle_percent_default as CirclePercentIcon,
  circle_play_default as CirclePlay,
  circle_play_default as CirclePlayIcon,
  circle_plus_default as CirclePlus,
  circle_plus_default as CirclePlusIcon,
  circle_pound_sterling_default as CirclePoundSterling,
  circle_pound_sterling_default as CirclePoundSterlingIcon,
  circle_power_default as CirclePower,
  circle_power_default as CirclePowerIcon,
  circle_question_mark_default as CircleQuestionMark,
  circle_question_mark_default as CircleQuestionMarkIcon,
  circle_slash_default as CircleSlash,
  circle_slash_2_default as CircleSlash2,
  circle_slash_2_default as CircleSlash2Icon,
  circle_slash_default as CircleSlashIcon,
  circle_slash_2_default as CircleSlashed,
  circle_slash_2_default as CircleSlashedIcon,
  circle_small_default as CircleSmall,
  circle_small_default as CircleSmallIcon,
  circle_stop_default as CircleStop,
  circle_stop_default as CircleStopIcon,
  circle_user_default as CircleUser,
  circle_user_default as CircleUserIcon,
  circle_user_round_default as CircleUserRound,
  circle_user_round_default as CircleUserRoundIcon,
  circle_x_default as CircleX,
  circle_x_default as CircleXIcon,
  circuit_board_default as CircuitBoard,
  circuit_board_default as CircuitBoardIcon,
  citrus_default as Citrus,
  citrus_default as CitrusIcon,
  clapperboard_default as Clapperboard,
  clapperboard_default as ClapperboardIcon,
  clipboard_default as Clipboard,
  clipboard_check_default as ClipboardCheck,
  clipboard_check_default as ClipboardCheckIcon,
  clipboard_clock_default as ClipboardClock,
  clipboard_clock_default as ClipboardClockIcon,
  clipboard_copy_default as ClipboardCopy,
  clipboard_copy_default as ClipboardCopyIcon,
  clipboard_pen_default as ClipboardEdit,
  clipboard_pen_default as ClipboardEditIcon,
  clipboard_default as ClipboardIcon,
  clipboard_list_default as ClipboardList,
  clipboard_list_default as ClipboardListIcon,
  clipboard_minus_default as ClipboardMinus,
  clipboard_minus_default as ClipboardMinusIcon,
  clipboard_paste_default as ClipboardPaste,
  clipboard_paste_default as ClipboardPasteIcon,
  clipboard_pen_default as ClipboardPen,
  clipboard_pen_default as ClipboardPenIcon,
  clipboard_pen_line_default as ClipboardPenLine,
  clipboard_pen_line_default as ClipboardPenLineIcon,
  clipboard_plus_default as ClipboardPlus,
  clipboard_plus_default as ClipboardPlusIcon,
  clipboard_pen_line_default as ClipboardSignature,
  clipboard_pen_line_default as ClipboardSignatureIcon,
  clipboard_type_default as ClipboardType,
  clipboard_type_default as ClipboardTypeIcon,
  clipboard_x_default as ClipboardX,
  clipboard_x_default as ClipboardXIcon,
  clock_default as Clock,
  clock_1_default as Clock1,
  clock_10_default as Clock10,
  clock_10_default as Clock10Icon,
  clock_11_default as Clock11,
  clock_11_default as Clock11Icon,
  clock_12_default as Clock12,
  clock_12_default as Clock12Icon,
  clock_1_default as Clock1Icon,
  clock_2_default as Clock2,
  clock_2_default as Clock2Icon,
  clock_3_default as Clock3,
  clock_3_default as Clock3Icon,
  clock_4_default as Clock4,
  clock_4_default as Clock4Icon,
  clock_5_default as Clock5,
  clock_5_default as Clock5Icon,
  clock_6_default as Clock6,
  clock_6_default as Clock6Icon,
  clock_7_default as Clock7,
  clock_7_default as Clock7Icon,
  clock_8_default as Clock8,
  clock_8_default as Clock8Icon,
  clock_9_default as Clock9,
  clock_9_default as Clock9Icon,
  clock_alert_default as ClockAlert,
  clock_alert_default as ClockAlertIcon,
  clock_arrow_down_default as ClockArrowDown,
  clock_arrow_down_default as ClockArrowDownIcon,
  clock_arrow_up_default as ClockArrowUp,
  clock_arrow_up_default as ClockArrowUpIcon,
  clock_fading_default as ClockFading,
  clock_fading_default as ClockFadingIcon,
  clock_default as ClockIcon,
  clock_plus_default as ClockPlus,
  clock_plus_default as ClockPlusIcon,
  closed_caption_default as ClosedCaption,
  closed_caption_default as ClosedCaptionIcon,
  cloud_default as Cloud,
  cloud_alert_default as CloudAlert,
  cloud_alert_default as CloudAlertIcon,
  cloud_check_default as CloudCheck,
  cloud_check_default as CloudCheckIcon,
  cloud_cog_default as CloudCog,
  cloud_cog_default as CloudCogIcon,
  cloud_download_default as CloudDownload,
  cloud_download_default as CloudDownloadIcon,
  cloud_drizzle_default as CloudDrizzle,
  cloud_drizzle_default as CloudDrizzleIcon,
  cloud_fog_default as CloudFog,
  cloud_fog_default as CloudFogIcon,
  cloud_hail_default as CloudHail,
  cloud_hail_default as CloudHailIcon,
  cloud_default as CloudIcon,
  cloud_lightning_default as CloudLightning,
  cloud_lightning_default as CloudLightningIcon,
  cloud_moon_default as CloudMoon,
  cloud_moon_default as CloudMoonIcon,
  cloud_moon_rain_default as CloudMoonRain,
  cloud_moon_rain_default as CloudMoonRainIcon,
  cloud_off_default as CloudOff,
  cloud_off_default as CloudOffIcon,
  cloud_rain_default as CloudRain,
  cloud_rain_default as CloudRainIcon,
  cloud_rain_wind_default as CloudRainWind,
  cloud_rain_wind_default as CloudRainWindIcon,
  cloud_snow_default as CloudSnow,
  cloud_snow_default as CloudSnowIcon,
  cloud_sun_default as CloudSun,
  cloud_sun_default as CloudSunIcon,
  cloud_sun_rain_default as CloudSunRain,
  cloud_sun_rain_default as CloudSunRainIcon,
  cloud_upload_default as CloudUpload,
  cloud_upload_default as CloudUploadIcon,
  cloudy_default as Cloudy,
  cloudy_default as CloudyIcon,
  clover_default as Clover,
  clover_default as CloverIcon,
  club_default as Club,
  club_default as ClubIcon,
  code_default as Code,
  code_xml_default as Code2,
  code_xml_default as Code2Icon,
  code_default as CodeIcon,
  square_code_default as CodeSquare,
  square_code_default as CodeSquareIcon,
  code_xml_default as CodeXml,
  code_xml_default as CodeXmlIcon,
  codepen_default as Codepen,
  codepen_default as CodepenIcon,
  codesandbox_default as Codesandbox,
  codesandbox_default as CodesandboxIcon,
  coffee_default as Coffee,
  coffee_default as CoffeeIcon,
  cog_default as Cog,
  cog_default as CogIcon,
  coins_default as Coins,
  coins_default as CoinsIcon,
  columns_2_default as Columns,
  columns_2_default as Columns2,
  columns_2_default as Columns2Icon,
  columns_3_default as Columns3,
  columns_3_cog_default as Columns3Cog,
  columns_3_cog_default as Columns3CogIcon,
  columns_3_default as Columns3Icon,
  columns_4_default as Columns4,
  columns_4_default as Columns4Icon,
  columns_2_default as ColumnsIcon,
  columns_3_cog_default as ColumnsSettings,
  columns_3_cog_default as ColumnsSettingsIcon,
  combine_default as Combine,
  combine_default as CombineIcon,
  command_default as Command,
  command_default as CommandIcon,
  compass_default as Compass,
  compass_default as CompassIcon,
  component_default as Component,
  component_default as ComponentIcon,
  computer_default as Computer,
  computer_default as ComputerIcon,
  concierge_bell_default as ConciergeBell,
  concierge_bell_default as ConciergeBellIcon,
  cone_default as Cone,
  cone_default as ConeIcon,
  construction_default as Construction,
  construction_default as ConstructionIcon,
  contact_default as Contact,
  contact_round_default as Contact2,
  contact_round_default as Contact2Icon,
  contact_default as ContactIcon,
  contact_round_default as ContactRound,
  contact_round_default as ContactRoundIcon,
  container_default as Container,
  container_default as ContainerIcon,
  contrast_default as Contrast,
  contrast_default as ContrastIcon,
  cookie_default as Cookie,
  cookie_default as CookieIcon,
  cooking_pot_default as CookingPot,
  cooking_pot_default as CookingPotIcon,
  copy_default as Copy,
  copy_check_default as CopyCheck,
  copy_check_default as CopyCheckIcon,
  copy_default as CopyIcon,
  copy_minus_default as CopyMinus,
  copy_minus_default as CopyMinusIcon,
  copy_plus_default as CopyPlus,
  copy_plus_default as CopyPlusIcon,
  copy_slash_default as CopySlash,
  copy_slash_default as CopySlashIcon,
  copy_x_default as CopyX,
  copy_x_default as CopyXIcon,
  copyleft_default as Copyleft,
  copyleft_default as CopyleftIcon,
  copyright_default as Copyright,
  copyright_default as CopyrightIcon,
  corner_down_left_default as CornerDownLeft,
  corner_down_left_default as CornerDownLeftIcon,
  corner_down_right_default as CornerDownRight,
  corner_down_right_default as CornerDownRightIcon,
  corner_left_down_default as CornerLeftDown,
  corner_left_down_default as CornerLeftDownIcon,
  corner_left_up_default as CornerLeftUp,
  corner_left_up_default as CornerLeftUpIcon,
  corner_right_down_default as CornerRightDown,
  corner_right_down_default as CornerRightDownIcon,
  corner_right_up_default as CornerRightUp,
  corner_right_up_default as CornerRightUpIcon,
  corner_up_left_default as CornerUpLeft,
  corner_up_left_default as CornerUpLeftIcon,
  corner_up_right_default as CornerUpRight,
  corner_up_right_default as CornerUpRightIcon,
  cpu_default as Cpu,
  cpu_default as CpuIcon,
  creative_commons_default as CreativeCommons,
  creative_commons_default as CreativeCommonsIcon,
  credit_card_default as CreditCard,
  credit_card_default as CreditCardIcon,
  croissant_default as Croissant,
  croissant_default as CroissantIcon,
  crop_default as Crop,
  crop_default as CropIcon,
  cross_default as Cross,
  cross_default as CrossIcon,
  crosshair_default as Crosshair,
  crosshair_default as CrosshairIcon,
  crown_default as Crown,
  crown_default as CrownIcon,
  cuboid_default as Cuboid,
  cuboid_default as CuboidIcon,
  cup_soda_default as CupSoda,
  cup_soda_default as CupSodaIcon,
  braces_default as CurlyBraces,
  braces_default as CurlyBracesIcon,
  currency_default as Currency,
  currency_default as CurrencyIcon,
  cylinder_default as Cylinder,
  cylinder_default as CylinderIcon,
  dam_default as Dam,
  dam_default as DamIcon,
  database_default as Database,
  database_backup_default as DatabaseBackup,
  database_backup_default as DatabaseBackupIcon,
  database_default as DatabaseIcon,
  database_zap_default as DatabaseZap,
  database_zap_default as DatabaseZapIcon,
  decimals_arrow_left_default as DecimalsArrowLeft,
  decimals_arrow_left_default as DecimalsArrowLeftIcon,
  decimals_arrow_right_default as DecimalsArrowRight,
  decimals_arrow_right_default as DecimalsArrowRightIcon,
  delete_default as Delete,
  delete_default as DeleteIcon,
  dessert_default as Dessert,
  dessert_default as DessertIcon,
  diameter_default as Diameter,
  diameter_default as DiameterIcon,
  diamond_default as Diamond,
  diamond_default as DiamondIcon,
  diamond_minus_default as DiamondMinus,
  diamond_minus_default as DiamondMinusIcon,
  diamond_percent_default as DiamondPercent,
  diamond_percent_default as DiamondPercentIcon,
  diamond_plus_default as DiamondPlus,
  diamond_plus_default as DiamondPlusIcon,
  dice_1_default as Dice1,
  dice_1_default as Dice1Icon,
  dice_2_default as Dice2,
  dice_2_default as Dice2Icon,
  dice_3_default as Dice3,
  dice_3_default as Dice3Icon,
  dice_4_default as Dice4,
  dice_4_default as Dice4Icon,
  dice_5_default as Dice5,
  dice_5_default as Dice5Icon,
  dice_6_default as Dice6,
  dice_6_default as Dice6Icon,
  dices_default as Dices,
  dices_default as DicesIcon,
  diff_default as Diff,
  diff_default as DiffIcon,
  disc_default as Disc,
  disc_2_default as Disc2,
  disc_2_default as Disc2Icon,
  disc_3_default as Disc3,
  disc_3_default as Disc3Icon,
  disc_album_default as DiscAlbum,
  disc_album_default as DiscAlbumIcon,
  disc_default as DiscIcon,
  divide_default as Divide,
  circle_divide_default as DivideCircle,
  circle_divide_default as DivideCircleIcon,
  divide_default as DivideIcon,
  square_divide_default as DivideSquare,
  square_divide_default as DivideSquareIcon,
  dna_default as Dna,
  dna_default as DnaIcon,
  dna_off_default as DnaOff,
  dna_off_default as DnaOffIcon,
  dock_default as Dock,
  dock_default as DockIcon,
  dog_default as Dog,
  dog_default as DogIcon,
  dollar_sign_default as DollarSign,
  dollar_sign_default as DollarSignIcon,
  donut_default as Donut,
  donut_default as DonutIcon,
  door_closed_default as DoorClosed,
  door_closed_default as DoorClosedIcon,
  door_closed_locked_default as DoorClosedLocked,
  door_closed_locked_default as DoorClosedLockedIcon,
  door_open_default as DoorOpen,
  door_open_default as DoorOpenIcon,
  dot_default as Dot,
  dot_default as DotIcon,
  square_dot_default as DotSquare,
  square_dot_default as DotSquareIcon,
  download_default as Download,
  cloud_download_default as DownloadCloud,
  cloud_download_default as DownloadCloudIcon,
  download_default as DownloadIcon,
  drafting_compass_default as DraftingCompass,
  drafting_compass_default as DraftingCompassIcon,
  drama_default as Drama,
  drama_default as DramaIcon,
  dribbble_default as Dribbble,
  dribbble_default as DribbbleIcon,
  drill_default as Drill,
  drill_default as DrillIcon,
  drone_default as Drone,
  drone_default as DroneIcon,
  droplet_default as Droplet,
  droplet_default as DropletIcon,
  droplet_off_default as DropletOff,
  droplet_off_default as DropletOffIcon,
  droplets_default as Droplets,
  droplets_default as DropletsIcon,
  drum_default as Drum,
  drum_default as DrumIcon,
  drumstick_default as Drumstick,
  drumstick_default as DrumstickIcon,
  dumbbell_default as Dumbbell,
  dumbbell_default as DumbbellIcon,
  ear_default as Ear,
  ear_default as EarIcon,
  ear_off_default as EarOff,
  ear_off_default as EarOffIcon,
  earth_default as Earth,
  earth_default as EarthIcon,
  earth_lock_default as EarthLock,
  earth_lock_default as EarthLockIcon,
  eclipse_default as Eclipse,
  eclipse_default as EclipseIcon,
  square_pen_default as Edit,
  pen_default as Edit2,
  pen_default as Edit2Icon,
  pen_line_default as Edit3,
  pen_line_default as Edit3Icon,
  square_pen_default as EditIcon,
  egg_default as Egg,
  egg_fried_default as EggFried,
  egg_fried_default as EggFriedIcon,
  egg_default as EggIcon,
  egg_off_default as EggOff,
  egg_off_default as EggOffIcon,
  ellipsis_default as Ellipsis,
  ellipsis_default as EllipsisIcon,
  ellipsis_vertical_default as EllipsisVertical,
  ellipsis_vertical_default as EllipsisVerticalIcon,
  equal_default as Equal,
  equal_approximately_default as EqualApproximately,
  equal_approximately_default as EqualApproximatelyIcon,
  equal_default as EqualIcon,
  equal_not_default as EqualNot,
  equal_not_default as EqualNotIcon,
  square_equal_default as EqualSquare,
  square_equal_default as EqualSquareIcon,
  eraser_default as Eraser,
  eraser_default as EraserIcon,
  ethernet_port_default as EthernetPort,
  ethernet_port_default as EthernetPortIcon,
  euro_default as Euro,
  euro_default as EuroIcon,
  expand_default as Expand,
  expand_default as ExpandIcon,
  external_link_default as ExternalLink,
  external_link_default as ExternalLinkIcon,
  eye_default as Eye,
  eye_closed_default as EyeClosed,
  eye_closed_default as EyeClosedIcon,
  eye_default as EyeIcon,
  eye_off_default as EyeOff,
  eye_off_default as EyeOffIcon,
  facebook_default as Facebook,
  facebook_default as FacebookIcon,
  factory_default as Factory,
  factory_default as FactoryIcon,
  fan_default as Fan,
  fan_default as FanIcon,
  fast_forward_default as FastForward,
  fast_forward_default as FastForwardIcon,
  feather_default as Feather,
  feather_default as FeatherIcon,
  fence_default as Fence,
  fence_default as FenceIcon,
  ferris_wheel_default as FerrisWheel,
  ferris_wheel_default as FerrisWheelIcon,
  figma_default as Figma,
  figma_default as FigmaIcon,
  file_default as File,
  file_archive_default as FileArchive,
  file_archive_default as FileArchiveIcon,
  file_audio_default as FileAudio,
  file_audio_2_default as FileAudio2,
  file_audio_2_default as FileAudio2Icon,
  file_audio_default as FileAudioIcon,
  file_axis_3d_default as FileAxis3D,
  file_axis_3d_default as FileAxis3DIcon,
  file_axis_3d_default as FileAxis3d,
  file_axis_3d_default as FileAxis3dIcon,
  file_badge_default as FileBadge,
  file_badge_2_default as FileBadge2,
  file_badge_2_default as FileBadge2Icon,
  file_badge_default as FileBadgeIcon,
  file_chart_column_increasing_default as FileBarChart,
  file_chart_column_default as FileBarChart2,
  file_chart_column_default as FileBarChart2Icon,
  file_chart_column_increasing_default as FileBarChartIcon,
  file_box_default as FileBox,
  file_box_default as FileBoxIcon,
  file_chart_column_default as FileChartColumn,
  file_chart_column_default as FileChartColumnIcon,
  file_chart_column_increasing_default as FileChartColumnIncreasing,
  file_chart_column_increasing_default as FileChartColumnIncreasingIcon,
  file_chart_line_default as FileChartLine,
  file_chart_line_default as FileChartLineIcon,
  file_chart_pie_default as FileChartPie,
  file_chart_pie_default as FileChartPieIcon,
  file_check_default as FileCheck,
  file_check_2_default as FileCheck2,
  file_check_2_default as FileCheck2Icon,
  file_check_default as FileCheckIcon,
  file_clock_default as FileClock,
  file_clock_default as FileClockIcon,
  file_code_default as FileCode,
  file_code_2_default as FileCode2,
  file_code_2_default as FileCode2Icon,
  file_code_default as FileCodeIcon,
  file_cog_default as FileCog,
  file_cog_default as FileCog2,
  file_cog_default as FileCog2Icon,
  file_cog_default as FileCogIcon,
  file_diff_default as FileDiff,
  file_diff_default as FileDiffIcon,
  file_digit_default as FileDigit,
  file_digit_default as FileDigitIcon,
  file_down_default as FileDown,
  file_down_default as FileDownIcon,
  file_pen_default as FileEdit,
  file_pen_default as FileEditIcon,
  file_heart_default as FileHeart,
  file_heart_default as FileHeartIcon,
  file_default as FileIcon,
  file_image_default as FileImage,
  file_image_default as FileImageIcon,
  file_input_default as FileInput,
  file_input_default as FileInputIcon,
  file_json_default as FileJson,
  file_json_2_default as FileJson2,
  file_json_2_default as FileJson2Icon,
  file_json_default as FileJsonIcon,
  file_key_default as FileKey,
  file_key_2_default as FileKey2,
  file_key_2_default as FileKey2Icon,
  file_key_default as FileKeyIcon,
  file_chart_line_default as FileLineChart,
  file_chart_line_default as FileLineChartIcon,
  file_lock_default as FileLock,
  file_lock_2_default as FileLock2,
  file_lock_2_default as FileLock2Icon,
  file_lock_default as FileLockIcon,
  file_minus_default as FileMinus,
  file_minus_2_default as FileMinus2,
  file_minus_2_default as FileMinus2Icon,
  file_minus_default as FileMinusIcon,
  file_music_default as FileMusic,
  file_music_default as FileMusicIcon,
  file_output_default as FileOutput,
  file_output_default as FileOutputIcon,
  file_pen_default as FilePen,
  file_pen_default as FilePenIcon,
  file_pen_line_default as FilePenLine,
  file_pen_line_default as FilePenLineIcon,
  file_chart_pie_default as FilePieChart,
  file_chart_pie_default as FilePieChartIcon,
  file_play_default as FilePlay,
  file_play_default as FilePlayIcon,
  file_plus_default as FilePlus,
  file_plus_2_default as FilePlus2,
  file_plus_2_default as FilePlus2Icon,
  file_plus_default as FilePlusIcon,
  file_question_mark_default as FileQuestion,
  file_question_mark_default as FileQuestionIcon,
  file_question_mark_default as FileQuestionMark,
  file_question_mark_default as FileQuestionMarkIcon,
  file_scan_default as FileScan,
  file_scan_default as FileScanIcon,
  file_search_default as FileSearch,
  file_search_2_default as FileSearch2,
  file_search_2_default as FileSearch2Icon,
  file_search_default as FileSearchIcon,
  file_pen_line_default as FileSignature,
  file_pen_line_default as FileSignatureIcon,
  file_sliders_default as FileSliders,
  file_sliders_default as FileSlidersIcon,
  file_spreadsheet_default as FileSpreadsheet,
  file_spreadsheet_default as FileSpreadsheetIcon,
  file_stack_default as FileStack,
  file_stack_default as FileStackIcon,
  file_symlink_default as FileSymlink,
  file_symlink_default as FileSymlinkIcon,
  file_terminal_default as FileTerminal,
  file_terminal_default as FileTerminalIcon,
  file_text_default as FileText,
  file_text_default as FileTextIcon,
  file_type_default as FileType,
  file_type_2_default as FileType2,
  file_type_2_default as FileType2Icon,
  file_type_default as FileTypeIcon,
  file_up_default as FileUp,
  file_up_default as FileUpIcon,
  file_user_default as FileUser,
  file_user_default as FileUserIcon,
  file_play_default as FileVideo,
  file_video_camera_default as FileVideo2,
  file_video_camera_default as FileVideo2Icon,
  file_video_camera_default as FileVideoCamera,
  file_video_camera_default as FileVideoCameraIcon,
  file_play_default as FileVideoIcon,
  file_volume_default as FileVolume,
  file_volume_2_default as FileVolume2,
  file_volume_2_default as FileVolume2Icon,
  file_volume_default as FileVolumeIcon,
  file_warning_default as FileWarning,
  file_warning_default as FileWarningIcon,
  file_x_default as FileX,
  file_x_2_default as FileX2,
  file_x_2_default as FileX2Icon,
  file_x_default as FileXIcon,
  files_default as Files,
  files_default as FilesIcon,
  film_default as Film,
  film_default as FilmIcon,
  funnel_default as Filter,
  funnel_default as FilterIcon,
  funnel_x_default as FilterX,
  funnel_x_default as FilterXIcon,
  fingerprint_default as Fingerprint,
  fingerprint_default as FingerprintIcon,
  fire_extinguisher_default as FireExtinguisher,
  fire_extinguisher_default as FireExtinguisherIcon,
  fish_default as Fish,
  fish_default as FishIcon,
  fish_off_default as FishOff,
  fish_off_default as FishOffIcon,
  fish_symbol_default as FishSymbol,
  fish_symbol_default as FishSymbolIcon,
  flag_default as Flag,
  flag_default as FlagIcon,
  flag_off_default as FlagOff,
  flag_off_default as FlagOffIcon,
  flag_triangle_left_default as FlagTriangleLeft,
  flag_triangle_left_default as FlagTriangleLeftIcon,
  flag_triangle_right_default as FlagTriangleRight,
  flag_triangle_right_default as FlagTriangleRightIcon,
  flame_default as Flame,
  flame_default as FlameIcon,
  flame_kindling_default as FlameKindling,
  flame_kindling_default as FlameKindlingIcon,
  flashlight_default as Flashlight,
  flashlight_default as FlashlightIcon,
  flashlight_off_default as FlashlightOff,
  flashlight_off_default as FlashlightOffIcon,
  flask_conical_default as FlaskConical,
  flask_conical_default as FlaskConicalIcon,
  flask_conical_off_default as FlaskConicalOff,
  flask_conical_off_default as FlaskConicalOffIcon,
  flask_round_default as FlaskRound,
  flask_round_default as FlaskRoundIcon,
  flip_horizontal_default as FlipHorizontal,
  flip_horizontal_2_default as FlipHorizontal2,
  flip_horizontal_2_default as FlipHorizontal2Icon,
  flip_horizontal_default as FlipHorizontalIcon,
  flip_vertical_default as FlipVertical,
  flip_vertical_2_default as FlipVertical2,
  flip_vertical_2_default as FlipVertical2Icon,
  flip_vertical_default as FlipVerticalIcon,
  flower_default as Flower,
  flower_2_default as Flower2,
  flower_2_default as Flower2Icon,
  flower_default as FlowerIcon,
  focus_default as Focus,
  focus_default as FocusIcon,
  fold_horizontal_default as FoldHorizontal,
  fold_horizontal_default as FoldHorizontalIcon,
  fold_vertical_default as FoldVertical,
  fold_vertical_default as FoldVerticalIcon,
  folder_default as Folder,
  folder_archive_default as FolderArchive,
  folder_archive_default as FolderArchiveIcon,
  folder_check_default as FolderCheck,
  folder_check_default as FolderCheckIcon,
  folder_clock_default as FolderClock,
  folder_clock_default as FolderClockIcon,
  folder_closed_default as FolderClosed,
  folder_closed_default as FolderClosedIcon,
  folder_code_default as FolderCode,
  folder_code_default as FolderCodeIcon,
  folder_cog_default as FolderCog,
  folder_cog_default as FolderCog2,
  folder_cog_default as FolderCog2Icon,
  folder_cog_default as FolderCogIcon,
  folder_dot_default as FolderDot,
  folder_dot_default as FolderDotIcon,
  folder_down_default as FolderDown,
  folder_down_default as FolderDownIcon,
  folder_pen_default as FolderEdit,
  folder_pen_default as FolderEditIcon,
  folder_git_default as FolderGit,
  folder_git_2_default as FolderGit2,
  folder_git_2_default as FolderGit2Icon,
  folder_git_default as FolderGitIcon,
  folder_heart_default as FolderHeart,
  folder_heart_default as FolderHeartIcon,
  folder_default as FolderIcon,
  folder_input_default as FolderInput,
  folder_input_default as FolderInputIcon,
  folder_kanban_default as FolderKanban,
  folder_kanban_default as FolderKanbanIcon,
  folder_key_default as FolderKey,
  folder_key_default as FolderKeyIcon,
  folder_lock_default as FolderLock,
  folder_lock_default as FolderLockIcon,
  folder_minus_default as FolderMinus,
  folder_minus_default as FolderMinusIcon,
  folder_open_default as FolderOpen,
  folder_open_dot_default as FolderOpenDot,
  folder_open_dot_default as FolderOpenDotIcon,
  folder_open_default as FolderOpenIcon,
  folder_output_default as FolderOutput,
  folder_output_default as FolderOutputIcon,
  folder_pen_default as FolderPen,
  folder_pen_default as FolderPenIcon,
  folder_plus_default as FolderPlus,
  folder_plus_default as FolderPlusIcon,
  folder_root_default as FolderRoot,
  folder_root_default as FolderRootIcon,
  folder_search_default as FolderSearch,
  folder_search_2_default as FolderSearch2,
  folder_search_2_default as FolderSearch2Icon,
  folder_search_default as FolderSearchIcon,
  folder_symlink_default as FolderSymlink,
  folder_symlink_default as FolderSymlinkIcon,
  folder_sync_default as FolderSync,
  folder_sync_default as FolderSyncIcon,
  folder_tree_default as FolderTree,
  folder_tree_default as FolderTreeIcon,
  folder_up_default as FolderUp,
  folder_up_default as FolderUpIcon,
  folder_x_default as FolderX,
  folder_x_default as FolderXIcon,
  folders_default as Folders,
  folders_default as FoldersIcon,
  footprints_default as Footprints,
  footprints_default as FootprintsIcon,
  utensils_default as ForkKnife,
  utensils_crossed_default as ForkKnifeCrossed,
  utensils_crossed_default as ForkKnifeCrossedIcon,
  utensils_default as ForkKnifeIcon,
  forklift_default as Forklift,
  forklift_default as ForkliftIcon,
  rectangle_ellipsis_default as FormInput,
  rectangle_ellipsis_default as FormInputIcon,
  forward_default as Forward,
  forward_default as ForwardIcon,
  frame_default as Frame,
  frame_default as FrameIcon,
  framer_default as Framer,
  framer_default as FramerIcon,
  frown_default as Frown,
  frown_default as FrownIcon,
  fuel_default as Fuel,
  fuel_default as FuelIcon,
  fullscreen_default as Fullscreen,
  fullscreen_default as FullscreenIcon,
  square_function_default as FunctionSquare,
  square_function_default as FunctionSquareIcon,
  funnel_default as Funnel,
  funnel_default as FunnelIcon,
  funnel_plus_default as FunnelPlus,
  funnel_plus_default as FunnelPlusIcon,
  funnel_x_default as FunnelX,
  funnel_x_default as FunnelXIcon,
  gallery_horizontal_default as GalleryHorizontal,
  gallery_horizontal_end_default as GalleryHorizontalEnd,
  gallery_horizontal_end_default as GalleryHorizontalEndIcon,
  gallery_horizontal_default as GalleryHorizontalIcon,
  gallery_thumbnails_default as GalleryThumbnails,
  gallery_thumbnails_default as GalleryThumbnailsIcon,
  gallery_vertical_default as GalleryVertical,
  gallery_vertical_end_default as GalleryVerticalEnd,
  gallery_vertical_end_default as GalleryVerticalEndIcon,
  gallery_vertical_default as GalleryVerticalIcon,
  gamepad_default as Gamepad,
  gamepad_2_default as Gamepad2,
  gamepad_2_default as Gamepad2Icon,
  gamepad_default as GamepadIcon,
  chart_no_axes_gantt_default as GanttChart,
  chart_no_axes_gantt_default as GanttChartIcon,
  square_chart_gantt_default as GanttChartSquare,
  square_chart_gantt_default as GanttChartSquareIcon,
  gauge_default as Gauge,
  circle_gauge_default as GaugeCircle,
  circle_gauge_default as GaugeCircleIcon,
  gauge_default as GaugeIcon,
  gavel_default as Gavel,
  gavel_default as GavelIcon,
  gem_default as Gem,
  gem_default as GemIcon,
  georgian_lari_default as GeorgianLari,
  georgian_lari_default as GeorgianLariIcon,
  ghost_default as Ghost,
  ghost_default as GhostIcon,
  gift_default as Gift,
  gift_default as GiftIcon,
  git_branch_default as GitBranch,
  git_branch_default as GitBranchIcon,
  git_branch_plus_default as GitBranchPlus,
  git_branch_plus_default as GitBranchPlusIcon,
  git_commit_horizontal_default as GitCommit,
  git_commit_horizontal_default as GitCommitHorizontal,
  git_commit_horizontal_default as GitCommitHorizontalIcon,
  git_commit_horizontal_default as GitCommitIcon,
  git_commit_vertical_default as GitCommitVertical,
  git_commit_vertical_default as GitCommitVerticalIcon,
  git_compare_default as GitCompare,
  git_compare_arrows_default as GitCompareArrows,
  git_compare_arrows_default as GitCompareArrowsIcon,
  git_compare_default as GitCompareIcon,
  git_fork_default as GitFork,
  git_fork_default as GitForkIcon,
  git_graph_default as GitGraph,
  git_graph_default as GitGraphIcon,
  git_merge_default as GitMerge,
  git_merge_default as GitMergeIcon,
  git_pull_request_default as GitPullRequest,
  git_pull_request_arrow_default as GitPullRequestArrow,
  git_pull_request_arrow_default as GitPullRequestArrowIcon,
  git_pull_request_closed_default as GitPullRequestClosed,
  git_pull_request_closed_default as GitPullRequestClosedIcon,
  git_pull_request_create_default as GitPullRequestCreate,
  git_pull_request_create_arrow_default as GitPullRequestCreateArrow,
  git_pull_request_create_arrow_default as GitPullRequestCreateArrowIcon,
  git_pull_request_create_default as GitPullRequestCreateIcon,
  git_pull_request_draft_default as GitPullRequestDraft,
  git_pull_request_draft_default as GitPullRequestDraftIcon,
  git_pull_request_default as GitPullRequestIcon,
  github_default as Github,
  github_default as GithubIcon,
  gitlab_default as Gitlab,
  gitlab_default as GitlabIcon,
  glass_water_default as GlassWater,
  glass_water_default as GlassWaterIcon,
  glasses_default as Glasses,
  glasses_default as GlassesIcon,
  globe_default as Globe,
  earth_default as Globe2,
  earth_default as Globe2Icon,
  globe_default as GlobeIcon,
  globe_lock_default as GlobeLock,
  globe_lock_default as GlobeLockIcon,
  goal_default as Goal,
  goal_default as GoalIcon,
  gpu_default as Gpu,
  gpu_default as GpuIcon,
  hand_grab_default as Grab,
  hand_grab_default as GrabIcon,
  graduation_cap_default as GraduationCap,
  graduation_cap_default as GraduationCapIcon,
  grape_default as Grape,
  grape_default as GrapeIcon,
  grid_3x3_default as Grid,
  grid_2x2_default as Grid2X2,
  grid_2x2_check_default as Grid2X2Check,
  grid_2x2_check_default as Grid2X2CheckIcon,
  grid_2x2_default as Grid2X2Icon,
  grid_2x2_plus_default as Grid2X2Plus,
  grid_2x2_plus_default as Grid2X2PlusIcon,
  grid_2x2_x_default as Grid2X2X,
  grid_2x2_x_default as Grid2X2XIcon,
  grid_2x2_default as Grid2x2,
  grid_2x2_check_default as Grid2x2Check,
  grid_2x2_check_default as Grid2x2CheckIcon,
  grid_2x2_default as Grid2x2Icon,
  grid_2x2_plus_default as Grid2x2Plus,
  grid_2x2_plus_default as Grid2x2PlusIcon,
  grid_2x2_x_default as Grid2x2X,
  grid_2x2_x_default as Grid2x2XIcon,
  grid_3x3_default as Grid3X3,
  grid_3x3_default as Grid3X3Icon,
  grid_3x2_default as Grid3x2,
  grid_3x2_default as Grid3x2Icon,
  grid_3x3_default as Grid3x3,
  grid_3x3_default as Grid3x3Icon,
  grid_3x3_default as GridIcon,
  grip_default as Grip,
  grip_horizontal_default as GripHorizontal,
  grip_horizontal_default as GripHorizontalIcon,
  grip_default as GripIcon,
  grip_vertical_default as GripVertical,
  grip_vertical_default as GripVerticalIcon,
  group_default as Group,
  group_default as GroupIcon,
  guitar_default as Guitar,
  guitar_default as GuitarIcon,
  ham_default as Ham,
  ham_default as HamIcon,
  hamburger_default as Hamburger,
  hamburger_default as HamburgerIcon,
  hammer_default as Hammer,
  hammer_default as HammerIcon,
  hand_default as Hand,
  hand_coins_default as HandCoins,
  hand_coins_default as HandCoinsIcon,
  hand_fist_default as HandFist,
  hand_fist_default as HandFistIcon,
  hand_grab_default as HandGrab,
  hand_grab_default as HandGrabIcon,
  hand_heart_default as HandHeart,
  hand_heart_default as HandHeartIcon,
  hand_helping_default as HandHelping,
  hand_helping_default as HandHelpingIcon,
  hand_default as HandIcon,
  hand_metal_default as HandMetal,
  hand_metal_default as HandMetalIcon,
  hand_platter_default as HandPlatter,
  hand_platter_default as HandPlatterIcon,
  handbag_default as Handbag,
  handbag_default as HandbagIcon,
  handshake_default as Handshake,
  handshake_default as HandshakeIcon,
  hard_drive_default as HardDrive,
  hard_drive_download_default as HardDriveDownload,
  hard_drive_download_default as HardDriveDownloadIcon,
  hard_drive_default as HardDriveIcon,
  hard_drive_upload_default as HardDriveUpload,
  hard_drive_upload_default as HardDriveUploadIcon,
  hard_hat_default as HardHat,
  hard_hat_default as HardHatIcon,
  hash_default as Hash,
  hash_default as HashIcon,
  hat_glasses_default as HatGlasses,
  hat_glasses_default as HatGlassesIcon,
  haze_default as Haze,
  haze_default as HazeIcon,
  hdmi_port_default as HdmiPort,
  hdmi_port_default as HdmiPortIcon,
  heading_default as Heading,
  heading_1_default as Heading1,
  heading_1_default as Heading1Icon,
  heading_2_default as Heading2,
  heading_2_default as Heading2Icon,
  heading_3_default as Heading3,
  heading_3_default as Heading3Icon,
  heading_4_default as Heading4,
  heading_4_default as Heading4Icon,
  heading_5_default as Heading5,
  heading_5_default as Heading5Icon,
  heading_6_default as Heading6,
  heading_6_default as Heading6Icon,
  heading_default as HeadingIcon,
  headphone_off_default as HeadphoneOff,
  headphone_off_default as HeadphoneOffIcon,
  headphones_default as Headphones,
  headphones_default as HeadphonesIcon,
  headset_default as Headset,
  headset_default as HeadsetIcon,
  heart_default as Heart,
  heart_crack_default as HeartCrack,
  heart_crack_default as HeartCrackIcon,
  heart_handshake_default as HeartHandshake,
  heart_handshake_default as HeartHandshakeIcon,
  heart_default as HeartIcon,
  heart_minus_default as HeartMinus,
  heart_minus_default as HeartMinusIcon,
  heart_off_default as HeartOff,
  heart_off_default as HeartOffIcon,
  heart_plus_default as HeartPlus,
  heart_plus_default as HeartPlusIcon,
  heart_pulse_default as HeartPulse,
  heart_pulse_default as HeartPulseIcon,
  heater_default as Heater,
  heater_default as HeaterIcon,
  circle_question_mark_default as HelpCircle,
  circle_question_mark_default as HelpCircleIcon,
  hand_helping_default as HelpingHand,
  hand_helping_default as HelpingHandIcon,
  hexagon_default as Hexagon,
  hexagon_default as HexagonIcon,
  highlighter_default as Highlighter,
  highlighter_default as HighlighterIcon,
  history_default as History,
  history_default as HistoryIcon,
  house_default as Home,
  house_default as HomeIcon,
  hop_default as Hop,
  hop_default as HopIcon,
  hop_off_default as HopOff,
  hop_off_default as HopOffIcon,
  hospital_default as Hospital,
  hospital_default as HospitalIcon,
  hotel_default as Hotel,
  hotel_default as HotelIcon,
  hourglass_default as Hourglass,
  hourglass_default as HourglassIcon,
  house_default as House,
  house_default as HouseIcon,
  house_plug_default as HousePlug,
  house_plug_default as HousePlugIcon,
  house_plus_default as HousePlus,
  house_plus_default as HousePlusIcon,
  house_wifi_default as HouseWifi,
  house_wifi_default as HouseWifiIcon,
  ice_cream_cone_default as IceCream,
  ice_cream_bowl_default as IceCream2,
  ice_cream_bowl_default as IceCream2Icon,
  ice_cream_bowl_default as IceCreamBowl,
  ice_cream_bowl_default as IceCreamBowlIcon,
  ice_cream_cone_default as IceCreamCone,
  ice_cream_cone_default as IceCreamConeIcon,
  ice_cream_cone_default as IceCreamIcon,
  Icon_default as Icon,
  id_card_default as IdCard,
  id_card_default as IdCardIcon,
  id_card_lanyard_default as IdCardLanyard,
  id_card_lanyard_default as IdCardLanyardIcon,
  image_default as Image,
  image_down_default as ImageDown,
  image_down_default as ImageDownIcon,
  image_default as ImageIcon,
  image_minus_default as ImageMinus,
  image_minus_default as ImageMinusIcon,
  image_off_default as ImageOff,
  image_off_default as ImageOffIcon,
  image_play_default as ImagePlay,
  image_play_default as ImagePlayIcon,
  image_plus_default as ImagePlus,
  image_plus_default as ImagePlusIcon,
  image_up_default as ImageUp,
  image_up_default as ImageUpIcon,
  image_upscale_default as ImageUpscale,
  image_upscale_default as ImageUpscaleIcon,
  images_default as Images,
  images_default as ImagesIcon,
  import_default as Import,
  import_default as ImportIcon,
  inbox_default as Inbox,
  inbox_default as InboxIcon,
  indent_increase_default as Indent,
  indent_decrease_default as IndentDecrease,
  indent_decrease_default as IndentDecreaseIcon,
  indent_increase_default as IndentIcon,
  indent_increase_default as IndentIncrease,
  indent_increase_default as IndentIncreaseIcon,
  indian_rupee_default as IndianRupee,
  indian_rupee_default as IndianRupeeIcon,
  infinity_default as Infinity,
  infinity_default as InfinityIcon,
  info_default as Info,
  info_default as InfoIcon,
  square_mouse_pointer_default as Inspect,
  square_mouse_pointer_default as InspectIcon,
  inspection_panel_default as InspectionPanel,
  inspection_panel_default as InspectionPanelIcon,
  instagram_default as Instagram,
  instagram_default as InstagramIcon,
  italic_default as Italic,
  italic_default as ItalicIcon,
  iteration_ccw_default as IterationCcw,
  iteration_ccw_default as IterationCcwIcon,
  iteration_cw_default as IterationCw,
  iteration_cw_default as IterationCwIcon,
  japanese_yen_default as JapaneseYen,
  japanese_yen_default as JapaneseYenIcon,
  joystick_default as Joystick,
  joystick_default as JoystickIcon,
  kanban_default as Kanban,
  kanban_default as KanbanIcon,
  square_kanban_default as KanbanSquare,
  square_dashed_kanban_default as KanbanSquareDashed,
  square_dashed_kanban_default as KanbanSquareDashedIcon,
  square_kanban_default as KanbanSquareIcon,
  key_default as Key,
  key_default as KeyIcon,
  key_round_default as KeyRound,
  key_round_default as KeyRoundIcon,
  key_square_default as KeySquare,
  key_square_default as KeySquareIcon,
  keyboard_default as Keyboard,
  keyboard_default as KeyboardIcon,
  keyboard_music_default as KeyboardMusic,
  keyboard_music_default as KeyboardMusicIcon,
  keyboard_off_default as KeyboardOff,
  keyboard_off_default as KeyboardOffIcon,
  lamp_default as Lamp,
  lamp_ceiling_default as LampCeiling,
  lamp_ceiling_default as LampCeilingIcon,
  lamp_desk_default as LampDesk,
  lamp_desk_default as LampDeskIcon,
  lamp_floor_default as LampFloor,
  lamp_floor_default as LampFloorIcon,
  lamp_default as LampIcon,
  lamp_wall_down_default as LampWallDown,
  lamp_wall_down_default as LampWallDownIcon,
  lamp_wall_up_default as LampWallUp,
  lamp_wall_up_default as LampWallUpIcon,
  land_plot_default as LandPlot,
  land_plot_default as LandPlotIcon,
  landmark_default as Landmark,
  landmark_default as LandmarkIcon,
  languages_default as Languages,
  languages_default as LanguagesIcon,
  laptop_default as Laptop,
  laptop_minimal_default as Laptop2,
  laptop_minimal_default as Laptop2Icon,
  laptop_default as LaptopIcon,
  laptop_minimal_default as LaptopMinimal,
  laptop_minimal_check_default as LaptopMinimalCheck,
  laptop_minimal_check_default as LaptopMinimalCheckIcon,
  laptop_minimal_default as LaptopMinimalIcon,
  lasso_default as Lasso,
  lasso_default as LassoIcon,
  lasso_select_default as LassoSelect,
  lasso_select_default as LassoSelectIcon,
  laugh_default as Laugh,
  laugh_default as LaughIcon,
  layers_default as Layers,
  layers_2_default as Layers2,
  layers_2_default as Layers2Icon,
  layers_default as Layers3,
  layers_default as Layers3Icon,
  layers_default as LayersIcon,
  panels_top_left_default as Layout,
  layout_dashboard_default as LayoutDashboard,
  layout_dashboard_default as LayoutDashboardIcon,
  layout_grid_default as LayoutGrid,
  layout_grid_default as LayoutGridIcon,
  panels_top_left_default as LayoutIcon,
  layout_list_default as LayoutList,
  layout_list_default as LayoutListIcon,
  layout_panel_left_default as LayoutPanelLeft,
  layout_panel_left_default as LayoutPanelLeftIcon,
  layout_panel_top_default as LayoutPanelTop,
  layout_panel_top_default as LayoutPanelTopIcon,
  layout_template_default as LayoutTemplate,
  layout_template_default as LayoutTemplateIcon,
  leaf_default as Leaf,
  leaf_default as LeafIcon,
  leafy_green_default as LeafyGreen,
  leafy_green_default as LeafyGreenIcon,
  lectern_default as Lectern,
  lectern_default as LecternIcon,
  letter_text_default as LetterText,
  letter_text_default as LetterTextIcon,
  library_default as Library,
  library_big_default as LibraryBig,
  library_big_default as LibraryBigIcon,
  library_default as LibraryIcon,
  square_library_default as LibrarySquare,
  square_library_default as LibrarySquareIcon,
  life_buoy_default as LifeBuoy,
  life_buoy_default as LifeBuoyIcon,
  ligature_default as Ligature,
  ligature_default as LigatureIcon,
  lightbulb_default as Lightbulb,
  lightbulb_default as LightbulbIcon,
  lightbulb_off_default as LightbulbOff,
  lightbulb_off_default as LightbulbOffIcon,
  chart_line_default as LineChart,
  chart_line_default as LineChartIcon,
  line_squiggle_default as LineSquiggle,
  line_squiggle_default as LineSquiggleIcon,
  link_default as Link,
  link_2_default as Link2,
  link_2_default as Link2Icon,
  link_2_off_default as Link2Off,
  link_2_off_default as Link2OffIcon,
  link_default as LinkIcon,
  linkedin_default as Linkedin,
  linkedin_default as LinkedinIcon,
  list_default as List,
  list_check_default as ListCheck,
  list_check_default as ListCheckIcon,
  list_checks_default as ListChecks,
  list_checks_default as ListChecksIcon,
  list_collapse_default as ListCollapse,
  list_collapse_default as ListCollapseIcon,
  list_end_default as ListEnd,
  list_end_default as ListEndIcon,
  list_filter_default as ListFilter,
  list_filter_default as ListFilterIcon,
  list_filter_plus_default as ListFilterPlus,
  list_filter_plus_default as ListFilterPlusIcon,
  list_default as ListIcon,
  list_minus_default as ListMinus,
  list_minus_default as ListMinusIcon,
  list_music_default as ListMusic,
  list_music_default as ListMusicIcon,
  list_ordered_default as ListOrdered,
  list_ordered_default as ListOrderedIcon,
  list_plus_default as ListPlus,
  list_plus_default as ListPlusIcon,
  list_restart_default as ListRestart,
  list_restart_default as ListRestartIcon,
  list_start_default as ListStart,
  list_start_default as ListStartIcon,
  list_todo_default as ListTodo,
  list_todo_default as ListTodoIcon,
  list_tree_default as ListTree,
  list_tree_default as ListTreeIcon,
  list_video_default as ListVideo,
  list_video_default as ListVideoIcon,
  list_x_default as ListX,
  list_x_default as ListXIcon,
  loader_default as Loader,
  loader_circle_default as Loader2,
  loader_circle_default as Loader2Icon,
  loader_circle_default as LoaderCircle,
  loader_circle_default as LoaderCircleIcon,
  loader_default as LoaderIcon,
  loader_pinwheel_default as LoaderPinwheel,
  loader_pinwheel_default as LoaderPinwheelIcon,
  locate_default as Locate,
  locate_fixed_default as LocateFixed,
  locate_fixed_default as LocateFixedIcon,
  locate_default as LocateIcon,
  locate_off_default as LocateOff,
  locate_off_default as LocateOffIcon,
  map_pin_pen_default as LocationEdit,
  map_pin_pen_default as LocationEditIcon,
  lock_default as Lock,
  lock_default as LockIcon,
  lock_keyhole_default as LockKeyhole,
  lock_keyhole_default as LockKeyholeIcon,
  lock_keyhole_open_default as LockKeyholeOpen,
  lock_keyhole_open_default as LockKeyholeOpenIcon,
  lock_open_default as LockOpen,
  lock_open_default as LockOpenIcon,
  log_in_default as LogIn,
  log_in_default as LogInIcon,
  log_out_default as LogOut,
  log_out_default as LogOutIcon,
  logs_default as Logs,
  logs_default as LogsIcon,
  lollipop_default as Lollipop,
  lollipop_default as LollipopIcon,
  a_arrow_down_default as LucideAArrowDown,
  a_arrow_up_default as LucideAArrowUp,
  a_large_small_default as LucideALargeSmall,
  accessibility_default as LucideAccessibility,
  activity_default as LucideActivity,
  square_activity_default as LucideActivitySquare,
  air_vent_default as LucideAirVent,
  airplay_default as LucideAirplay,
  alarm_clock_check_default as LucideAlarmCheck,
  alarm_clock_default as LucideAlarmClock,
  alarm_clock_check_default as LucideAlarmClockCheck,
  alarm_clock_minus_default as LucideAlarmClockMinus,
  alarm_clock_off_default as LucideAlarmClockOff,
  alarm_clock_plus_default as LucideAlarmClockPlus,
  alarm_clock_minus_default as LucideAlarmMinus,
  alarm_clock_plus_default as LucideAlarmPlus,
  alarm_smoke_default as LucideAlarmSmoke,
  album_default as LucideAlbum,
  circle_alert_default as LucideAlertCircle,
  octagon_alert_default as LucideAlertOctagon,
  triangle_alert_default as LucideAlertTriangle,
  align_center_default as LucideAlignCenter,
  align_center_horizontal_default as LucideAlignCenterHorizontal,
  align_center_vertical_default as LucideAlignCenterVertical,
  align_end_horizontal_default as LucideAlignEndHorizontal,
  align_end_vertical_default as LucideAlignEndVertical,
  align_horizontal_distribute_center_default as LucideAlignHorizontalDistributeCenter,
  align_horizontal_distribute_end_default as LucideAlignHorizontalDistributeEnd,
  align_horizontal_distribute_start_default as LucideAlignHorizontalDistributeStart,
  align_horizontal_justify_center_default as LucideAlignHorizontalJustifyCenter,
  align_horizontal_justify_end_default as LucideAlignHorizontalJustifyEnd,
  align_horizontal_justify_start_default as LucideAlignHorizontalJustifyStart,
  align_horizontal_space_around_default as LucideAlignHorizontalSpaceAround,
  align_horizontal_space_between_default as LucideAlignHorizontalSpaceBetween,
  align_justify_default as LucideAlignJustify,
  align_left_default as LucideAlignLeft,
  align_right_default as LucideAlignRight,
  align_start_horizontal_default as LucideAlignStartHorizontal,
  align_start_vertical_default as LucideAlignStartVertical,
  align_vertical_distribute_center_default as LucideAlignVerticalDistributeCenter,
  align_vertical_distribute_end_default as LucideAlignVerticalDistributeEnd,
  align_vertical_distribute_start_default as LucideAlignVerticalDistributeStart,
  align_vertical_justify_center_default as LucideAlignVerticalJustifyCenter,
  align_vertical_justify_end_default as LucideAlignVerticalJustifyEnd,
  align_vertical_justify_start_default as LucideAlignVerticalJustifyStart,
  align_vertical_space_around_default as LucideAlignVerticalSpaceAround,
  align_vertical_space_between_default as LucideAlignVerticalSpaceBetween,
  ambulance_default as LucideAmbulance,
  ampersand_default as LucideAmpersand,
  ampersands_default as LucideAmpersands,
  amphora_default as LucideAmphora,
  anchor_default as LucideAnchor,
  angry_default as LucideAngry,
  annoyed_default as LucideAnnoyed,
  antenna_default as LucideAntenna,
  anvil_default as LucideAnvil,
  aperture_default as LucideAperture,
  app_window_default as LucideAppWindow,
  app_window_mac_default as LucideAppWindowMac,
  apple_default as LucideApple,
  archive_default as LucideArchive,
  archive_restore_default as LucideArchiveRestore,
  archive_x_default as LucideArchiveX,
  chart_area_default as LucideAreaChart,
  armchair_default as LucideArmchair,
  arrow_big_down_default as LucideArrowBigDown,
  arrow_big_down_dash_default as LucideArrowBigDownDash,
  arrow_big_left_default as LucideArrowBigLeft,
  arrow_big_left_dash_default as LucideArrowBigLeftDash,
  arrow_big_right_default as LucideArrowBigRight,
  arrow_big_right_dash_default as LucideArrowBigRightDash,
  arrow_big_up_default as LucideArrowBigUp,
  arrow_big_up_dash_default as LucideArrowBigUpDash,
  arrow_down_default as LucideArrowDown,
  arrow_down_0_1_default as LucideArrowDown01,
  arrow_down_1_0_default as LucideArrowDown10,
  arrow_down_a_z_default as LucideArrowDownAZ,
  arrow_down_a_z_default as LucideArrowDownAz,
  circle_arrow_down_default as LucideArrowDownCircle,
  arrow_down_from_line_default as LucideArrowDownFromLine,
  arrow_down_left_default as LucideArrowDownLeft,
  circle_arrow_out_down_left_default as LucideArrowDownLeftFromCircle,
  square_arrow_out_down_left_default as LucideArrowDownLeftFromSquare,
  square_arrow_down_left_default as LucideArrowDownLeftSquare,
  arrow_down_narrow_wide_default as LucideArrowDownNarrowWide,
  arrow_down_right_default as LucideArrowDownRight,
  circle_arrow_out_down_right_default as LucideArrowDownRightFromCircle,
  square_arrow_out_down_right_default as LucideArrowDownRightFromSquare,
  square_arrow_down_right_default as LucideArrowDownRightSquare,
  square_arrow_down_default as LucideArrowDownSquare,
  arrow_down_to_dot_default as LucideArrowDownToDot,
  arrow_down_to_line_default as LucideArrowDownToLine,
  arrow_down_up_default as LucideArrowDownUp,
  arrow_down_wide_narrow_default as LucideArrowDownWideNarrow,
  arrow_down_z_a_default as LucideArrowDownZA,
  arrow_down_z_a_default as LucideArrowDownZa,
  arrow_left_default as LucideArrowLeft,
  circle_arrow_left_default as LucideArrowLeftCircle,
  arrow_left_from_line_default as LucideArrowLeftFromLine,
  arrow_left_right_default as LucideArrowLeftRight,
  square_arrow_left_default as LucideArrowLeftSquare,
  arrow_left_to_line_default as LucideArrowLeftToLine,
  arrow_right_default as LucideArrowRight,
  circle_arrow_right_default as LucideArrowRightCircle,
  arrow_right_from_line_default as LucideArrowRightFromLine,
  arrow_right_left_default as LucideArrowRightLeft,
  square_arrow_right_default as LucideArrowRightSquare,
  arrow_right_to_line_default as LucideArrowRightToLine,
  arrow_up_default as LucideArrowUp,
  arrow_up_0_1_default as LucideArrowUp01,
  arrow_up_1_0_default as LucideArrowUp10,
  arrow_up_a_z_default as LucideArrowUpAZ,
  arrow_up_a_z_default as LucideArrowUpAz,
  circle_arrow_up_default as LucideArrowUpCircle,
  arrow_up_down_default as LucideArrowUpDown,
  arrow_up_from_dot_default as LucideArrowUpFromDot,
  arrow_up_from_line_default as LucideArrowUpFromLine,
  arrow_up_left_default as LucideArrowUpLeft,
  circle_arrow_out_up_left_default as LucideArrowUpLeftFromCircle,
  square_arrow_out_up_left_default as LucideArrowUpLeftFromSquare,
  square_arrow_up_left_default as LucideArrowUpLeftSquare,
  arrow_up_narrow_wide_default as LucideArrowUpNarrowWide,
  arrow_up_right_default as LucideArrowUpRight,
  circle_arrow_out_up_right_default as LucideArrowUpRightFromCircle,
  square_arrow_out_up_right_default as LucideArrowUpRightFromSquare,
  square_arrow_up_right_default as LucideArrowUpRightSquare,
  square_arrow_up_default as LucideArrowUpSquare,
  arrow_up_to_line_default as LucideArrowUpToLine,
  arrow_up_wide_narrow_default as LucideArrowUpWideNarrow,
  arrow_up_z_a_default as LucideArrowUpZA,
  arrow_up_z_a_default as LucideArrowUpZa,
  arrows_up_from_line_default as LucideArrowsUpFromLine,
  asterisk_default as LucideAsterisk,
  square_asterisk_default as LucideAsteriskSquare,
  at_sign_default as LucideAtSign,
  atom_default as LucideAtom,
  audio_lines_default as LucideAudioLines,
  audio_waveform_default as LucideAudioWaveform,
  award_default as LucideAward,
  axe_default as LucideAxe,
  axis_3d_default as LucideAxis3D,
  axis_3d_default as LucideAxis3d,
  baby_default as LucideBaby,
  backpack_default as LucideBackpack,
  badge_default as LucideBadge,
  badge_alert_default as LucideBadgeAlert,
  badge_cent_default as LucideBadgeCent,
  badge_check_default as LucideBadgeCheck,
  badge_dollar_sign_default as LucideBadgeDollarSign,
  badge_euro_default as LucideBadgeEuro,
  badge_question_mark_default as LucideBadgeHelp,
  badge_indian_rupee_default as LucideBadgeIndianRupee,
  badge_info_default as LucideBadgeInfo,
  badge_japanese_yen_default as LucideBadgeJapaneseYen,
  badge_minus_default as LucideBadgeMinus,
  badge_percent_default as LucideBadgePercent,
  badge_plus_default as LucideBadgePlus,
  badge_pound_sterling_default as LucideBadgePoundSterling,
  badge_question_mark_default as LucideBadgeQuestionMark,
  badge_russian_ruble_default as LucideBadgeRussianRuble,
  badge_swiss_franc_default as LucideBadgeSwissFranc,
  badge_turkish_lira_default as LucideBadgeTurkishLira,
  badge_x_default as LucideBadgeX,
  baggage_claim_default as LucideBaggageClaim,
  ban_default as LucideBan,
  banana_default as LucideBanana,
  bandage_default as LucideBandage,
  banknote_default as LucideBanknote,
  banknote_arrow_down_default as LucideBanknoteArrowDown,
  banknote_arrow_up_default as LucideBanknoteArrowUp,
  banknote_x_default as LucideBanknoteX,
  chart_no_axes_column_increasing_default as LucideBarChart,
  chart_no_axes_column_default as LucideBarChart2,
  chart_column_default as LucideBarChart3,
  chart_column_increasing_default as LucideBarChart4,
  chart_column_big_default as LucideBarChartBig,
  chart_bar_default as LucideBarChartHorizontal,
  chart_bar_big_default as LucideBarChartHorizontalBig,
  barcode_default as LucideBarcode,
  barrel_default as LucideBarrel,
  baseline_default as LucideBaseline,
  bath_default as LucideBath,
  battery_default as LucideBattery,
  battery_charging_default as LucideBatteryCharging,
  battery_full_default as LucideBatteryFull,
  battery_low_default as LucideBatteryLow,
  battery_medium_default as LucideBatteryMedium,
  battery_plus_default as LucideBatteryPlus,
  battery_warning_default as LucideBatteryWarning,
  beaker_default as LucideBeaker,
  bean_default as LucideBean,
  bean_off_default as LucideBeanOff,
  bed_default as LucideBed,
  bed_double_default as LucideBedDouble,
  bed_single_default as LucideBedSingle,
  beef_default as LucideBeef,
  beer_default as LucideBeer,
  beer_off_default as LucideBeerOff,
  bell_default as LucideBell,
  bell_dot_default as LucideBellDot,
  bell_electric_default as LucideBellElectric,
  bell_minus_default as LucideBellMinus,
  bell_off_default as LucideBellOff,
  bell_plus_default as LucideBellPlus,
  bell_ring_default as LucideBellRing,
  between_horizontal_end_default as LucideBetweenHorizonalEnd,
  between_horizontal_start_default as LucideBetweenHorizonalStart,
  between_horizontal_end_default as LucideBetweenHorizontalEnd,
  between_horizontal_start_default as LucideBetweenHorizontalStart,
  between_vertical_end_default as LucideBetweenVerticalEnd,
  between_vertical_start_default as LucideBetweenVerticalStart,
  biceps_flexed_default as LucideBicepsFlexed,
  bike_default as LucideBike,
  binary_default as LucideBinary,
  binoculars_default as LucideBinoculars,
  biohazard_default as LucideBiohazard,
  bird_default as LucideBird,
  bitcoin_default as LucideBitcoin,
  blend_default as LucideBlend,
  blinds_default as LucideBlinds,
  blocks_default as LucideBlocks,
  bluetooth_default as LucideBluetooth,
  bluetooth_connected_default as LucideBluetoothConnected,
  bluetooth_off_default as LucideBluetoothOff,
  bluetooth_searching_default as LucideBluetoothSearching,
  bold_default as LucideBold,
  bolt_default as LucideBolt,
  bomb_default as LucideBomb,
  bone_default as LucideBone,
  book_default as LucideBook,
  book_a_default as LucideBookA,
  book_alert_default as LucideBookAlert,
  book_audio_default as LucideBookAudio,
  book_check_default as LucideBookCheck,
  book_copy_default as LucideBookCopy,
  book_dashed_default as LucideBookDashed,
  book_down_default as LucideBookDown,
  book_headphones_default as LucideBookHeadphones,
  book_heart_default as LucideBookHeart,
  book_image_default as LucideBookImage,
  book_key_default as LucideBookKey,
  book_lock_default as LucideBookLock,
  book_marked_default as LucideBookMarked,
  book_minus_default as LucideBookMinus,
  book_open_default as LucideBookOpen,
  book_open_check_default as LucideBookOpenCheck,
  book_open_text_default as LucideBookOpenText,
  book_plus_default as LucideBookPlus,
  book_dashed_default as LucideBookTemplate,
  book_text_default as LucideBookText,
  book_type_default as LucideBookType,
  book_up_default as LucideBookUp,
  book_up_2_default as LucideBookUp2,
  book_user_default as LucideBookUser,
  book_x_default as LucideBookX,
  bookmark_default as LucideBookmark,
  bookmark_check_default as LucideBookmarkCheck,
  bookmark_minus_default as LucideBookmarkMinus,
  bookmark_plus_default as LucideBookmarkPlus,
  bookmark_x_default as LucideBookmarkX,
  boom_box_default as LucideBoomBox,
  bot_default as LucideBot,
  bot_message_square_default as LucideBotMessageSquare,
  bot_off_default as LucideBotOff,
  bottle_wine_default as LucideBottleWine,
  bow_arrow_default as LucideBowArrow,
  box_default as LucideBox,
  square_dashed_default as LucideBoxSelect,
  boxes_default as LucideBoxes,
  braces_default as LucideBraces,
  brackets_default as LucideBrackets,
  brain_default as LucideBrain,
  brain_circuit_default as LucideBrainCircuit,
  brain_cog_default as LucideBrainCog,
  brick_wall_default as LucideBrickWall,
  brick_wall_fire_default as LucideBrickWallFire,
  briefcase_default as LucideBriefcase,
  briefcase_business_default as LucideBriefcaseBusiness,
  briefcase_conveyor_belt_default as LucideBriefcaseConveyorBelt,
  briefcase_medical_default as LucideBriefcaseMedical,
  bring_to_front_default as LucideBringToFront,
  brush_default as LucideBrush,
  brush_cleaning_default as LucideBrushCleaning,
  bubbles_default as LucideBubbles,
  bug_default as LucideBug,
  bug_off_default as LucideBugOff,
  bug_play_default as LucideBugPlay,
  building_default as LucideBuilding,
  building_2_default as LucideBuilding2,
  bus_default as LucideBus,
  bus_front_default as LucideBusFront,
  cable_default as LucideCable,
  cable_car_default as LucideCableCar,
  cake_default as LucideCake,
  cake_slice_default as LucideCakeSlice,
  calculator_default as LucideCalculator,
  calendar_default as LucideCalendar,
  calendar_1_default as LucideCalendar1,
  calendar_arrow_down_default as LucideCalendarArrowDown,
  calendar_arrow_up_default as LucideCalendarArrowUp,
  calendar_check_default as LucideCalendarCheck,
  calendar_check_2_default as LucideCalendarCheck2,
  calendar_clock_default as LucideCalendarClock,
  calendar_cog_default as LucideCalendarCog,
  calendar_days_default as LucideCalendarDays,
  calendar_fold_default as LucideCalendarFold,
  calendar_heart_default as LucideCalendarHeart,
  calendar_minus_default as LucideCalendarMinus,
  calendar_minus_2_default as LucideCalendarMinus2,
  calendar_off_default as LucideCalendarOff,
  calendar_plus_default as LucideCalendarPlus,
  calendar_plus_2_default as LucideCalendarPlus2,
  calendar_range_default as LucideCalendarRange,
  calendar_search_default as LucideCalendarSearch,
  calendar_sync_default as LucideCalendarSync,
  calendar_x_default as LucideCalendarX,
  calendar_x_2_default as LucideCalendarX2,
  camera_default as LucideCamera,
  camera_off_default as LucideCameraOff,
  chart_candlestick_default as LucideCandlestickChart,
  candy_default as LucideCandy,
  candy_cane_default as LucideCandyCane,
  candy_off_default as LucideCandyOff,
  cannabis_default as LucideCannabis,
  captions_default as LucideCaptions,
  captions_off_default as LucideCaptionsOff,
  car_default as LucideCar,
  car_front_default as LucideCarFront,
  car_taxi_front_default as LucideCarTaxiFront,
  caravan_default as LucideCaravan,
  card_sim_default as LucideCardSim,
  carrot_default as LucideCarrot,
  case_lower_default as LucideCaseLower,
  case_sensitive_default as LucideCaseSensitive,
  case_upper_default as LucideCaseUpper,
  cassette_tape_default as LucideCassetteTape,
  cast_default as LucideCast,
  castle_default as LucideCastle,
  cat_default as LucideCat,
  cctv_default as LucideCctv,
  chart_area_default as LucideChartArea,
  chart_bar_default as LucideChartBar,
  chart_bar_big_default as LucideChartBarBig,
  chart_bar_decreasing_default as LucideChartBarDecreasing,
  chart_bar_increasing_default as LucideChartBarIncreasing,
  chart_bar_stacked_default as LucideChartBarStacked,
  chart_candlestick_default as LucideChartCandlestick,
  chart_column_default as LucideChartColumn,
  chart_column_big_default as LucideChartColumnBig,
  chart_column_decreasing_default as LucideChartColumnDecreasing,
  chart_column_increasing_default as LucideChartColumnIncreasing,
  chart_column_stacked_default as LucideChartColumnStacked,
  chart_gantt_default as LucideChartGantt,
  chart_line_default as LucideChartLine,
  chart_network_default as LucideChartNetwork,
  chart_no_axes_column_default as LucideChartNoAxesColumn,
  chart_no_axes_column_decreasing_default as LucideChartNoAxesColumnDecreasing,
  chart_no_axes_column_increasing_default as LucideChartNoAxesColumnIncreasing,
  chart_no_axes_combined_default as LucideChartNoAxesCombined,
  chart_no_axes_gantt_default as LucideChartNoAxesGantt,
  chart_pie_default as LucideChartPie,
  chart_scatter_default as LucideChartScatter,
  chart_spline_default as LucideChartSpline,
  check_default as LucideCheck,
  check_check_default as LucideCheckCheck,
  circle_check_big_default as LucideCheckCircle,
  circle_check_default as LucideCheckCircle2,
  check_line_default as LucideCheckLine,
  square_check_big_default as LucideCheckSquare,
  square_check_default as LucideCheckSquare2,
  chef_hat_default as LucideChefHat,
  cherry_default as LucideCherry,
  chevron_down_default as LucideChevronDown,
  circle_chevron_down_default as LucideChevronDownCircle,
  square_chevron_down_default as LucideChevronDownSquare,
  chevron_first_default as LucideChevronFirst,
  chevron_last_default as LucideChevronLast,
  chevron_left_default as LucideChevronLeft,
  circle_chevron_left_default as LucideChevronLeftCircle,
  square_chevron_left_default as LucideChevronLeftSquare,
  chevron_right_default as LucideChevronRight,
  circle_chevron_right_default as LucideChevronRightCircle,
  square_chevron_right_default as LucideChevronRightSquare,
  chevron_up_default as LucideChevronUp,
  circle_chevron_up_default as LucideChevronUpCircle,
  square_chevron_up_default as LucideChevronUpSquare,
  chevrons_down_default as LucideChevronsDown,
  chevrons_down_up_default as LucideChevronsDownUp,
  chevrons_left_default as LucideChevronsLeft,
  chevrons_left_right_default as LucideChevronsLeftRight,
  chevrons_left_right_ellipsis_default as LucideChevronsLeftRightEllipsis,
  chevrons_right_default as LucideChevronsRight,
  chevrons_right_left_default as LucideChevronsRightLeft,
  chevrons_up_default as LucideChevronsUp,
  chevrons_up_down_default as LucideChevronsUpDown,
  chrome_default as LucideChrome,
  church_default as LucideChurch,
  cigarette_default as LucideCigarette,
  cigarette_off_default as LucideCigaretteOff,
  circle_default as LucideCircle,
  circle_alert_default as LucideCircleAlert,
  circle_arrow_down_default as LucideCircleArrowDown,
  circle_arrow_left_default as LucideCircleArrowLeft,
  circle_arrow_out_down_left_default as LucideCircleArrowOutDownLeft,
  circle_arrow_out_down_right_default as LucideCircleArrowOutDownRight,
  circle_arrow_out_up_left_default as LucideCircleArrowOutUpLeft,
  circle_arrow_out_up_right_default as LucideCircleArrowOutUpRight,
  circle_arrow_right_default as LucideCircleArrowRight,
  circle_arrow_up_default as LucideCircleArrowUp,
  circle_check_default as LucideCircleCheck,
  circle_check_big_default as LucideCircleCheckBig,
  circle_chevron_down_default as LucideCircleChevronDown,
  circle_chevron_left_default as LucideCircleChevronLeft,
  circle_chevron_right_default as LucideCircleChevronRight,
  circle_chevron_up_default as LucideCircleChevronUp,
  circle_dashed_default as LucideCircleDashed,
  circle_divide_default as LucideCircleDivide,
  circle_dollar_sign_default as LucideCircleDollarSign,
  circle_dot_default as LucideCircleDot,
  circle_dot_dashed_default as LucideCircleDotDashed,
  circle_ellipsis_default as LucideCircleEllipsis,
  circle_equal_default as LucideCircleEqual,
  circle_fading_arrow_up_default as LucideCircleFadingArrowUp,
  circle_fading_plus_default as LucideCircleFadingPlus,
  circle_gauge_default as LucideCircleGauge,
  circle_question_mark_default as LucideCircleHelp,
  circle_minus_default as LucideCircleMinus,
  circle_off_default as LucideCircleOff,
  circle_parking_default as LucideCircleParking,
  circle_parking_off_default as LucideCircleParkingOff,
  circle_pause_default as LucideCirclePause,
  circle_percent_default as LucideCirclePercent,
  circle_play_default as LucideCirclePlay,
  circle_plus_default as LucideCirclePlus,
  circle_pound_sterling_default as LucideCirclePoundSterling,
  circle_power_default as LucideCirclePower,
  circle_question_mark_default as LucideCircleQuestionMark,
  circle_slash_default as LucideCircleSlash,
  circle_slash_2_default as LucideCircleSlash2,
  circle_slash_2_default as LucideCircleSlashed,
  circle_small_default as LucideCircleSmall,
  circle_stop_default as LucideCircleStop,
  circle_user_default as LucideCircleUser,
  circle_user_round_default as LucideCircleUserRound,
  circle_x_default as LucideCircleX,
  circuit_board_default as LucideCircuitBoard,
  citrus_default as LucideCitrus,
  clapperboard_default as LucideClapperboard,
  clipboard_default as LucideClipboard,
  clipboard_check_default as LucideClipboardCheck,
  clipboard_clock_default as LucideClipboardClock,
  clipboard_copy_default as LucideClipboardCopy,
  clipboard_pen_default as LucideClipboardEdit,
  clipboard_list_default as LucideClipboardList,
  clipboard_minus_default as LucideClipboardMinus,
  clipboard_paste_default as LucideClipboardPaste,
  clipboard_pen_default as LucideClipboardPen,
  clipboard_pen_line_default as LucideClipboardPenLine,
  clipboard_plus_default as LucideClipboardPlus,
  clipboard_pen_line_default as LucideClipboardSignature,
  clipboard_type_default as LucideClipboardType,
  clipboard_x_default as LucideClipboardX,
  clock_default as LucideClock,
  clock_1_default as LucideClock1,
  clock_10_default as LucideClock10,
  clock_11_default as LucideClock11,
  clock_12_default as LucideClock12,
  clock_2_default as LucideClock2,
  clock_3_default as LucideClock3,
  clock_4_default as LucideClock4,
  clock_5_default as LucideClock5,
  clock_6_default as LucideClock6,
  clock_7_default as LucideClock7,
  clock_8_default as LucideClock8,
  clock_9_default as LucideClock9,
  clock_alert_default as LucideClockAlert,
  clock_arrow_down_default as LucideClockArrowDown,
  clock_arrow_up_default as LucideClockArrowUp,
  clock_fading_default as LucideClockFading,
  clock_plus_default as LucideClockPlus,
  closed_caption_default as LucideClosedCaption,
  cloud_default as LucideCloud,
  cloud_alert_default as LucideCloudAlert,
  cloud_check_default as LucideCloudCheck,
  cloud_cog_default as LucideCloudCog,
  cloud_download_default as LucideCloudDownload,
  cloud_drizzle_default as LucideCloudDrizzle,
  cloud_fog_default as LucideCloudFog,
  cloud_hail_default as LucideCloudHail,
  cloud_lightning_default as LucideCloudLightning,
  cloud_moon_default as LucideCloudMoon,
  cloud_moon_rain_default as LucideCloudMoonRain,
  cloud_off_default as LucideCloudOff,
  cloud_rain_default as LucideCloudRain,
  cloud_rain_wind_default as LucideCloudRainWind,
  cloud_snow_default as LucideCloudSnow,
  cloud_sun_default as LucideCloudSun,
  cloud_sun_rain_default as LucideCloudSunRain,
  cloud_upload_default as LucideCloudUpload,
  cloudy_default as LucideCloudy,
  clover_default as LucideClover,
  club_default as LucideClub,
  code_default as LucideCode,
  code_xml_default as LucideCode2,
  square_code_default as LucideCodeSquare,
  code_xml_default as LucideCodeXml,
  codepen_default as LucideCodepen,
  codesandbox_default as LucideCodesandbox,
  coffee_default as LucideCoffee,
  cog_default as LucideCog,
  coins_default as LucideCoins,
  columns_2_default as LucideColumns,
  columns_2_default as LucideColumns2,
  columns_3_default as LucideColumns3,
  columns_3_cog_default as LucideColumns3Cog,
  columns_4_default as LucideColumns4,
  columns_3_cog_default as LucideColumnsSettings,
  combine_default as LucideCombine,
  command_default as LucideCommand,
  compass_default as LucideCompass,
  component_default as LucideComponent,
  computer_default as LucideComputer,
  concierge_bell_default as LucideConciergeBell,
  cone_default as LucideCone,
  construction_default as LucideConstruction,
  contact_default as LucideContact,
  contact_round_default as LucideContact2,
  contact_round_default as LucideContactRound,
  container_default as LucideContainer,
  contrast_default as LucideContrast,
  cookie_default as LucideCookie,
  cooking_pot_default as LucideCookingPot,
  copy_default as LucideCopy,
  copy_check_default as LucideCopyCheck,
  copy_minus_default as LucideCopyMinus,
  copy_plus_default as LucideCopyPlus,
  copy_slash_default as LucideCopySlash,
  copy_x_default as LucideCopyX,
  copyleft_default as LucideCopyleft,
  copyright_default as LucideCopyright,
  corner_down_left_default as LucideCornerDownLeft,
  corner_down_right_default as LucideCornerDownRight,
  corner_left_down_default as LucideCornerLeftDown,
  corner_left_up_default as LucideCornerLeftUp,
  corner_right_down_default as LucideCornerRightDown,
  corner_right_up_default as LucideCornerRightUp,
  corner_up_left_default as LucideCornerUpLeft,
  corner_up_right_default as LucideCornerUpRight,
  cpu_default as LucideCpu,
  creative_commons_default as LucideCreativeCommons,
  credit_card_default as LucideCreditCard,
  croissant_default as LucideCroissant,
  crop_default as LucideCrop,
  cross_default as LucideCross,
  crosshair_default as LucideCrosshair,
  crown_default as LucideCrown,
  cuboid_default as LucideCuboid,
  cup_soda_default as LucideCupSoda,
  braces_default as LucideCurlyBraces,
  currency_default as LucideCurrency,
  cylinder_default as LucideCylinder,
  dam_default as LucideDam,
  database_default as LucideDatabase,
  database_backup_default as LucideDatabaseBackup,
  database_zap_default as LucideDatabaseZap,
  decimals_arrow_left_default as LucideDecimalsArrowLeft,
  decimals_arrow_right_default as LucideDecimalsArrowRight,
  delete_default as LucideDelete,
  dessert_default as LucideDessert,
  diameter_default as LucideDiameter,
  diamond_default as LucideDiamond,
  diamond_minus_default as LucideDiamondMinus,
  diamond_percent_default as LucideDiamondPercent,
  diamond_plus_default as LucideDiamondPlus,
  dice_1_default as LucideDice1,
  dice_2_default as LucideDice2,
  dice_3_default as LucideDice3,
  dice_4_default as LucideDice4,
  dice_5_default as LucideDice5,
  dice_6_default as LucideDice6,
  dices_default as LucideDices,
  diff_default as LucideDiff,
  disc_default as LucideDisc,
  disc_2_default as LucideDisc2,
  disc_3_default as LucideDisc3,
  disc_album_default as LucideDiscAlbum,
  divide_default as LucideDivide,
  circle_divide_default as LucideDivideCircle,
  square_divide_default as LucideDivideSquare,
  dna_default as LucideDna,
  dna_off_default as LucideDnaOff,
  dock_default as LucideDock,
  dog_default as LucideDog,
  dollar_sign_default as LucideDollarSign,
  donut_default as LucideDonut,
  door_closed_default as LucideDoorClosed,
  door_closed_locked_default as LucideDoorClosedLocked,
  door_open_default as LucideDoorOpen,
  dot_default as LucideDot,
  square_dot_default as LucideDotSquare,
  download_default as LucideDownload,
  cloud_download_default as LucideDownloadCloud,
  drafting_compass_default as LucideDraftingCompass,
  drama_default as LucideDrama,
  dribbble_default as LucideDribbble,
  drill_default as LucideDrill,
  drone_default as LucideDrone,
  droplet_default as LucideDroplet,
  droplet_off_default as LucideDropletOff,
  droplets_default as LucideDroplets,
  drum_default as LucideDrum,
  drumstick_default as LucideDrumstick,
  dumbbell_default as LucideDumbbell,
  ear_default as LucideEar,
  ear_off_default as LucideEarOff,
  earth_default as LucideEarth,
  earth_lock_default as LucideEarthLock,
  eclipse_default as LucideEclipse,
  square_pen_default as LucideEdit,
  pen_default as LucideEdit2,
  pen_line_default as LucideEdit3,
  egg_default as LucideEgg,
  egg_fried_default as LucideEggFried,
  egg_off_default as LucideEggOff,
  ellipsis_default as LucideEllipsis,
  ellipsis_vertical_default as LucideEllipsisVertical,
  equal_default as LucideEqual,
  equal_approximately_default as LucideEqualApproximately,
  equal_not_default as LucideEqualNot,
  square_equal_default as LucideEqualSquare,
  eraser_default as LucideEraser,
  ethernet_port_default as LucideEthernetPort,
  euro_default as LucideEuro,
  expand_default as LucideExpand,
  external_link_default as LucideExternalLink,
  eye_default as LucideEye,
  eye_closed_default as LucideEyeClosed,
  eye_off_default as LucideEyeOff,
  facebook_default as LucideFacebook,
  factory_default as LucideFactory,
  fan_default as LucideFan,
  fast_forward_default as LucideFastForward,
  feather_default as LucideFeather,
  fence_default as LucideFence,
  ferris_wheel_default as LucideFerrisWheel,
  figma_default as LucideFigma,
  file_default as LucideFile,
  file_archive_default as LucideFileArchive,
  file_audio_default as LucideFileAudio,
  file_audio_2_default as LucideFileAudio2,
  file_axis_3d_default as LucideFileAxis3D,
  file_axis_3d_default as LucideFileAxis3d,
  file_badge_default as LucideFileBadge,
  file_badge_2_default as LucideFileBadge2,
  file_chart_column_increasing_default as LucideFileBarChart,
  file_chart_column_default as LucideFileBarChart2,
  file_box_default as LucideFileBox,
  file_chart_column_default as LucideFileChartColumn,
  file_chart_column_increasing_default as LucideFileChartColumnIncreasing,
  file_chart_line_default as LucideFileChartLine,
  file_chart_pie_default as LucideFileChartPie,
  file_check_default as LucideFileCheck,
  file_check_2_default as LucideFileCheck2,
  file_clock_default as LucideFileClock,
  file_code_default as LucideFileCode,
  file_code_2_default as LucideFileCode2,
  file_cog_default as LucideFileCog,
  file_cog_default as LucideFileCog2,
  file_diff_default as LucideFileDiff,
  file_digit_default as LucideFileDigit,
  file_down_default as LucideFileDown,
  file_pen_default as LucideFileEdit,
  file_heart_default as LucideFileHeart,
  file_image_default as LucideFileImage,
  file_input_default as LucideFileInput,
  file_json_default as LucideFileJson,
  file_json_2_default as LucideFileJson2,
  file_key_default as LucideFileKey,
  file_key_2_default as LucideFileKey2,
  file_chart_line_default as LucideFileLineChart,
  file_lock_default as LucideFileLock,
  file_lock_2_default as LucideFileLock2,
  file_minus_default as LucideFileMinus,
  file_minus_2_default as LucideFileMinus2,
  file_music_default as LucideFileMusic,
  file_output_default as LucideFileOutput,
  file_pen_default as LucideFilePen,
  file_pen_line_default as LucideFilePenLine,
  file_chart_pie_default as LucideFilePieChart,
  file_play_default as LucideFilePlay,
  file_plus_default as LucideFilePlus,
  file_plus_2_default as LucideFilePlus2,
  file_question_mark_default as LucideFileQuestion,
  file_question_mark_default as LucideFileQuestionMark,
  file_scan_default as LucideFileScan,
  file_search_default as LucideFileSearch,
  file_search_2_default as LucideFileSearch2,
  file_pen_line_default as LucideFileSignature,
  file_sliders_default as LucideFileSliders,
  file_spreadsheet_default as LucideFileSpreadsheet,
  file_stack_default as LucideFileStack,
  file_symlink_default as LucideFileSymlink,
  file_terminal_default as LucideFileTerminal,
  file_text_default as LucideFileText,
  file_type_default as LucideFileType,
  file_type_2_default as LucideFileType2,
  file_up_default as LucideFileUp,
  file_user_default as LucideFileUser,
  file_play_default as LucideFileVideo,
  file_video_camera_default as LucideFileVideo2,
  file_video_camera_default as LucideFileVideoCamera,
  file_volume_default as LucideFileVolume,
  file_volume_2_default as LucideFileVolume2,
  file_warning_default as LucideFileWarning,
  file_x_default as LucideFileX,
  file_x_2_default as LucideFileX2,
  files_default as LucideFiles,
  film_default as LucideFilm,
  funnel_default as LucideFilter,
  funnel_x_default as LucideFilterX,
  fingerprint_default as LucideFingerprint,
  fire_extinguisher_default as LucideFireExtinguisher,
  fish_default as LucideFish,
  fish_off_default as LucideFishOff,
  fish_symbol_default as LucideFishSymbol,
  flag_default as LucideFlag,
  flag_off_default as LucideFlagOff,
  flag_triangle_left_default as LucideFlagTriangleLeft,
  flag_triangle_right_default as LucideFlagTriangleRight,
  flame_default as LucideFlame,
  flame_kindling_default as LucideFlameKindling,
  flashlight_default as LucideFlashlight,
  flashlight_off_default as LucideFlashlightOff,
  flask_conical_default as LucideFlaskConical,
  flask_conical_off_default as LucideFlaskConicalOff,
  flask_round_default as LucideFlaskRound,
  flip_horizontal_default as LucideFlipHorizontal,
  flip_horizontal_2_default as LucideFlipHorizontal2,
  flip_vertical_default as LucideFlipVertical,
  flip_vertical_2_default as LucideFlipVertical2,
  flower_default as LucideFlower,
  flower_2_default as LucideFlower2,
  focus_default as LucideFocus,
  fold_horizontal_default as LucideFoldHorizontal,
  fold_vertical_default as LucideFoldVertical,
  folder_default as LucideFolder,
  folder_archive_default as LucideFolderArchive,
  folder_check_default as LucideFolderCheck,
  folder_clock_default as LucideFolderClock,
  folder_closed_default as LucideFolderClosed,
  folder_code_default as LucideFolderCode,
  folder_cog_default as LucideFolderCog,
  folder_cog_default as LucideFolderCog2,
  folder_dot_default as LucideFolderDot,
  folder_down_default as LucideFolderDown,
  folder_pen_default as LucideFolderEdit,
  folder_git_default as LucideFolderGit,
  folder_git_2_default as LucideFolderGit2,
  folder_heart_default as LucideFolderHeart,
  folder_input_default as LucideFolderInput,
  folder_kanban_default as LucideFolderKanban,
  folder_key_default as LucideFolderKey,
  folder_lock_default as LucideFolderLock,
  folder_minus_default as LucideFolderMinus,
  folder_open_default as LucideFolderOpen,
  folder_open_dot_default as LucideFolderOpenDot,
  folder_output_default as LucideFolderOutput,
  folder_pen_default as LucideFolderPen,
  folder_plus_default as LucideFolderPlus,
  folder_root_default as LucideFolderRoot,
  folder_search_default as LucideFolderSearch,
  folder_search_2_default as LucideFolderSearch2,
  folder_symlink_default as LucideFolderSymlink,
  folder_sync_default as LucideFolderSync,
  folder_tree_default as LucideFolderTree,
  folder_up_default as LucideFolderUp,
  folder_x_default as LucideFolderX,
  folders_default as LucideFolders,
  footprints_default as LucideFootprints,
  utensils_default as LucideForkKnife,
  utensils_crossed_default as LucideForkKnifeCrossed,
  forklift_default as LucideForklift,
  rectangle_ellipsis_default as LucideFormInput,
  forward_default as LucideForward,
  frame_default as LucideFrame,
  framer_default as LucideFramer,
  frown_default as LucideFrown,
  fuel_default as LucideFuel,
  fullscreen_default as LucideFullscreen,
  square_function_default as LucideFunctionSquare,
  funnel_default as LucideFunnel,
  funnel_plus_default as LucideFunnelPlus,
  funnel_x_default as LucideFunnelX,
  gallery_horizontal_default as LucideGalleryHorizontal,
  gallery_horizontal_end_default as LucideGalleryHorizontalEnd,
  gallery_thumbnails_default as LucideGalleryThumbnails,
  gallery_vertical_default as LucideGalleryVertical,
  gallery_vertical_end_default as LucideGalleryVerticalEnd,
  gamepad_default as LucideGamepad,
  gamepad_2_default as LucideGamepad2,
  chart_no_axes_gantt_default as LucideGanttChart,
  square_chart_gantt_default as LucideGanttChartSquare,
  gauge_default as LucideGauge,
  circle_gauge_default as LucideGaugeCircle,
  gavel_default as LucideGavel,
  gem_default as LucideGem,
  georgian_lari_default as LucideGeorgianLari,
  ghost_default as LucideGhost,
  gift_default as LucideGift,
  git_branch_default as LucideGitBranch,
  git_branch_plus_default as LucideGitBranchPlus,
  git_commit_horizontal_default as LucideGitCommit,
  git_commit_horizontal_default as LucideGitCommitHorizontal,
  git_commit_vertical_default as LucideGitCommitVertical,
  git_compare_default as LucideGitCompare,
  git_compare_arrows_default as LucideGitCompareArrows,
  git_fork_default as LucideGitFork,
  git_graph_default as LucideGitGraph,
  git_merge_default as LucideGitMerge,
  git_pull_request_default as LucideGitPullRequest,
  git_pull_request_arrow_default as LucideGitPullRequestArrow,
  git_pull_request_closed_default as LucideGitPullRequestClosed,
  git_pull_request_create_default as LucideGitPullRequestCreate,
  git_pull_request_create_arrow_default as LucideGitPullRequestCreateArrow,
  git_pull_request_draft_default as LucideGitPullRequestDraft,
  github_default as LucideGithub,
  gitlab_default as LucideGitlab,
  glass_water_default as LucideGlassWater,
  glasses_default as LucideGlasses,
  globe_default as LucideGlobe,
  earth_default as LucideGlobe2,
  globe_lock_default as LucideGlobeLock,
  goal_default as LucideGoal,
  gpu_default as LucideGpu,
  hand_grab_default as LucideGrab,
  graduation_cap_default as LucideGraduationCap,
  grape_default as LucideGrape,
  grid_3x3_default as LucideGrid,
  grid_2x2_default as LucideGrid2X2,
  grid_2x2_check_default as LucideGrid2X2Check,
  grid_2x2_plus_default as LucideGrid2X2Plus,
  grid_2x2_x_default as LucideGrid2X2X,
  grid_2x2_default as LucideGrid2x2,
  grid_2x2_check_default as LucideGrid2x2Check,
  grid_2x2_plus_default as LucideGrid2x2Plus,
  grid_2x2_x_default as LucideGrid2x2X,
  grid_3x3_default as LucideGrid3X3,
  grid_3x2_default as LucideGrid3x2,
  grid_3x3_default as LucideGrid3x3,
  grip_default as LucideGrip,
  grip_horizontal_default as LucideGripHorizontal,
  grip_vertical_default as LucideGripVertical,
  group_default as LucideGroup,
  guitar_default as LucideGuitar,
  ham_default as LucideHam,
  hamburger_default as LucideHamburger,
  hammer_default as LucideHammer,
  hand_default as LucideHand,
  hand_coins_default as LucideHandCoins,
  hand_fist_default as LucideHandFist,
  hand_grab_default as LucideHandGrab,
  hand_heart_default as LucideHandHeart,
  hand_helping_default as LucideHandHelping,
  hand_metal_default as LucideHandMetal,
  hand_platter_default as LucideHandPlatter,
  handbag_default as LucideHandbag,
  handshake_default as LucideHandshake,
  hard_drive_default as LucideHardDrive,
  hard_drive_download_default as LucideHardDriveDownload,
  hard_drive_upload_default as LucideHardDriveUpload,
  hard_hat_default as LucideHardHat,
  hash_default as LucideHash,
  hat_glasses_default as LucideHatGlasses,
  haze_default as LucideHaze,
  hdmi_port_default as LucideHdmiPort,
  heading_default as LucideHeading,
  heading_1_default as LucideHeading1,
  heading_2_default as LucideHeading2,
  heading_3_default as LucideHeading3,
  heading_4_default as LucideHeading4,
  heading_5_default as LucideHeading5,
  heading_6_default as LucideHeading6,
  headphone_off_default as LucideHeadphoneOff,
  headphones_default as LucideHeadphones,
  headset_default as LucideHeadset,
  heart_default as LucideHeart,
  heart_crack_default as LucideHeartCrack,
  heart_handshake_default as LucideHeartHandshake,
  heart_minus_default as LucideHeartMinus,
  heart_off_default as LucideHeartOff,
  heart_plus_default as LucideHeartPlus,
  heart_pulse_default as LucideHeartPulse,
  heater_default as LucideHeater,
  circle_question_mark_default as LucideHelpCircle,
  hand_helping_default as LucideHelpingHand,
  hexagon_default as LucideHexagon,
  highlighter_default as LucideHighlighter,
  history_default as LucideHistory,
  house_default as LucideHome,
  hop_default as LucideHop,
  hop_off_default as LucideHopOff,
  hospital_default as LucideHospital,
  hotel_default as LucideHotel,
  hourglass_default as LucideHourglass,
  house_default as LucideHouse,
  house_plug_default as LucideHousePlug,
  house_plus_default as LucideHousePlus,
  house_wifi_default as LucideHouseWifi,
  ice_cream_cone_default as LucideIceCream,
  ice_cream_bowl_default as LucideIceCream2,
  ice_cream_bowl_default as LucideIceCreamBowl,
  ice_cream_cone_default as LucideIceCreamCone,
  id_card_default as LucideIdCard,
  id_card_lanyard_default as LucideIdCardLanyard,
  image_default as LucideImage,
  image_down_default as LucideImageDown,
  image_minus_default as LucideImageMinus,
  image_off_default as LucideImageOff,
  image_play_default as LucideImagePlay,
  image_plus_default as LucideImagePlus,
  image_up_default as LucideImageUp,
  image_upscale_default as LucideImageUpscale,
  images_default as LucideImages,
  import_default as LucideImport,
  inbox_default as LucideInbox,
  indent_increase_default as LucideIndent,
  indent_decrease_default as LucideIndentDecrease,
  indent_increase_default as LucideIndentIncrease,
  indian_rupee_default as LucideIndianRupee,
  infinity_default as LucideInfinity,
  info_default as LucideInfo,
  square_mouse_pointer_default as LucideInspect,
  inspection_panel_default as LucideInspectionPanel,
  instagram_default as LucideInstagram,
  italic_default as LucideItalic,
  iteration_ccw_default as LucideIterationCcw,
  iteration_cw_default as LucideIterationCw,
  japanese_yen_default as LucideJapaneseYen,
  joystick_default as LucideJoystick,
  kanban_default as LucideKanban,
  square_kanban_default as LucideKanbanSquare,
  square_dashed_kanban_default as LucideKanbanSquareDashed,
  key_default as LucideKey,
  key_round_default as LucideKeyRound,
  key_square_default as LucideKeySquare,
  keyboard_default as LucideKeyboard,
  keyboard_music_default as LucideKeyboardMusic,
  keyboard_off_default as LucideKeyboardOff,
  lamp_default as LucideLamp,
  lamp_ceiling_default as LucideLampCeiling,
  lamp_desk_default as LucideLampDesk,
  lamp_floor_default as LucideLampFloor,
  lamp_wall_down_default as LucideLampWallDown,
  lamp_wall_up_default as LucideLampWallUp,
  land_plot_default as LucideLandPlot,
  landmark_default as LucideLandmark,
  languages_default as LucideLanguages,
  laptop_default as LucideLaptop,
  laptop_minimal_default as LucideLaptop2,
  laptop_minimal_default as LucideLaptopMinimal,
  laptop_minimal_check_default as LucideLaptopMinimalCheck,
  lasso_default as LucideLasso,
  lasso_select_default as LucideLassoSelect,
  laugh_default as LucideLaugh,
  layers_default as LucideLayers,
  layers_2_default as LucideLayers2,
  layers_default as LucideLayers3,
  panels_top_left_default as LucideLayout,
  layout_dashboard_default as LucideLayoutDashboard,
  layout_grid_default as LucideLayoutGrid,
  layout_list_default as LucideLayoutList,
  layout_panel_left_default as LucideLayoutPanelLeft,
  layout_panel_top_default as LucideLayoutPanelTop,
  layout_template_default as LucideLayoutTemplate,
  leaf_default as LucideLeaf,
  leafy_green_default as LucideLeafyGreen,
  lectern_default as LucideLectern,
  letter_text_default as LucideLetterText,
  library_default as LucideLibrary,
  library_big_default as LucideLibraryBig,
  square_library_default as LucideLibrarySquare,
  life_buoy_default as LucideLifeBuoy,
  ligature_default as LucideLigature,
  lightbulb_default as LucideLightbulb,
  lightbulb_off_default as LucideLightbulbOff,
  chart_line_default as LucideLineChart,
  line_squiggle_default as LucideLineSquiggle,
  link_default as LucideLink,
  link_2_default as LucideLink2,
  link_2_off_default as LucideLink2Off,
  linkedin_default as LucideLinkedin,
  list_default as LucideList,
  list_check_default as LucideListCheck,
  list_checks_default as LucideListChecks,
  list_collapse_default as LucideListCollapse,
  list_end_default as LucideListEnd,
  list_filter_default as LucideListFilter,
  list_filter_plus_default as LucideListFilterPlus,
  list_minus_default as LucideListMinus,
  list_music_default as LucideListMusic,
  list_ordered_default as LucideListOrdered,
  list_plus_default as LucideListPlus,
  list_restart_default as LucideListRestart,
  list_start_default as LucideListStart,
  list_todo_default as LucideListTodo,
  list_tree_default as LucideListTree,
  list_video_default as LucideListVideo,
  list_x_default as LucideListX,
  loader_default as LucideLoader,
  loader_circle_default as LucideLoader2,
  loader_circle_default as LucideLoaderCircle,
  loader_pinwheel_default as LucideLoaderPinwheel,
  locate_default as LucideLocate,
  locate_fixed_default as LucideLocateFixed,
  locate_off_default as LucideLocateOff,
  map_pin_pen_default as LucideLocationEdit,
  lock_default as LucideLock,
  lock_keyhole_default as LucideLockKeyhole,
  lock_keyhole_open_default as LucideLockKeyholeOpen,
  lock_open_default as LucideLockOpen,
  log_in_default as LucideLogIn,
  log_out_default as LucideLogOut,
  logs_default as LucideLogs,
  lollipop_default as LucideLollipop,
  luggage_default as LucideLuggage,
  square_m_default as LucideMSquare,
  magnet_default as LucideMagnet,
  mail_default as LucideMail,
  mail_check_default as LucideMailCheck,
  mail_minus_default as LucideMailMinus,
  mail_open_default as LucideMailOpen,
  mail_plus_default as LucideMailPlus,
  mail_question_mark_default as LucideMailQuestion,
  mail_question_mark_default as LucideMailQuestionMark,
  mail_search_default as LucideMailSearch,
  mail_warning_default as LucideMailWarning,
  mail_x_default as LucideMailX,
  mailbox_default as LucideMailbox,
  mails_default as LucideMails,
  map_default as LucideMap,
  map_minus_default as LucideMapMinus,
  map_pin_default as LucideMapPin,
  map_pin_check_default as LucideMapPinCheck,
  map_pin_check_inside_default as LucideMapPinCheckInside,
  map_pin_house_default as LucideMapPinHouse,
  map_pin_minus_default as LucideMapPinMinus,
  map_pin_minus_inside_default as LucideMapPinMinusInside,
  map_pin_off_default as LucideMapPinOff,
  map_pin_pen_default as LucideMapPinPen,
  map_pin_plus_default as LucideMapPinPlus,
  map_pin_plus_inside_default as LucideMapPinPlusInside,
  map_pin_x_default as LucideMapPinX,
  map_pin_x_inside_default as LucideMapPinXInside,
  map_pinned_default as LucideMapPinned,
  map_plus_default as LucideMapPlus,
  mars_default as LucideMars,
  mars_stroke_default as LucideMarsStroke,
  martini_default as LucideMartini,
  maximize_default as LucideMaximize,
  maximize_2_default as LucideMaximize2,
  medal_default as LucideMedal,
  megaphone_default as LucideMegaphone,
  megaphone_off_default as LucideMegaphoneOff,
  meh_default as LucideMeh,
  memory_stick_default as LucideMemoryStick,
  menu_default as LucideMenu,
  square_menu_default as LucideMenuSquare,
  merge_default as LucideMerge,
  message_circle_default as LucideMessageCircle,
  message_circle_code_default as LucideMessageCircleCode,
  message_circle_dashed_default as LucideMessageCircleDashed,
  message_circle_heart_default as LucideMessageCircleHeart,
  message_circle_more_default as LucideMessageCircleMore,
  message_circle_off_default as LucideMessageCircleOff,
  message_circle_plus_default as LucideMessageCirclePlus,
  message_circle_question_mark_default as LucideMessageCircleQuestion,
  message_circle_question_mark_default as LucideMessageCircleQuestionMark,
  message_circle_reply_default as LucideMessageCircleReply,
  message_circle_warning_default as LucideMessageCircleWarning,
  message_circle_x_default as LucideMessageCircleX,
  message_square_default as LucideMessageSquare,
  message_square_code_default as LucideMessageSquareCode,
  message_square_dashed_default as LucideMessageSquareDashed,
  message_square_diff_default as LucideMessageSquareDiff,
  message_square_dot_default as LucideMessageSquareDot,
  message_square_heart_default as LucideMessageSquareHeart,
  message_square_lock_default as LucideMessageSquareLock,
  message_square_more_default as LucideMessageSquareMore,
  message_square_off_default as LucideMessageSquareOff,
  message_square_plus_default as LucideMessageSquarePlus,
  message_square_quote_default as LucideMessageSquareQuote,
  message_square_reply_default as LucideMessageSquareReply,
  message_square_share_default as LucideMessageSquareShare,
  message_square_text_default as LucideMessageSquareText,
  message_square_warning_default as LucideMessageSquareWarning,
  message_square_x_default as LucideMessageSquareX,
  messages_square_default as LucideMessagesSquare,
  mic_default as LucideMic,
  mic_vocal_default as LucideMic2,
  mic_off_default as LucideMicOff,
  mic_vocal_default as LucideMicVocal,
  microchip_default as LucideMicrochip,
  microscope_default as LucideMicroscope,
  microwave_default as LucideMicrowave,
  milestone_default as LucideMilestone,
  milk_default as LucideMilk,
  milk_off_default as LucideMilkOff,
  minimize_default as LucideMinimize,
  minimize_2_default as LucideMinimize2,
  minus_default as LucideMinus,
  circle_minus_default as LucideMinusCircle,
  square_minus_default as LucideMinusSquare,
  monitor_default as LucideMonitor,
  monitor_check_default as LucideMonitorCheck,
  monitor_cog_default as LucideMonitorCog,
  monitor_dot_default as LucideMonitorDot,
  monitor_down_default as LucideMonitorDown,
  monitor_off_default as LucideMonitorOff,
  monitor_pause_default as LucideMonitorPause,
  monitor_play_default as LucideMonitorPlay,
  monitor_smartphone_default as LucideMonitorSmartphone,
  monitor_speaker_default as LucideMonitorSpeaker,
  monitor_stop_default as LucideMonitorStop,
  monitor_up_default as LucideMonitorUp,
  monitor_x_default as LucideMonitorX,
  moon_default as LucideMoon,
  moon_star_default as LucideMoonStar,
  ellipsis_default as LucideMoreHorizontal,
  ellipsis_vertical_default as LucideMoreVertical,
  mountain_default as LucideMountain,
  mountain_snow_default as LucideMountainSnow,
  mouse_default as LucideMouse,
  mouse_off_default as LucideMouseOff,
  mouse_pointer_default as LucideMousePointer,
  mouse_pointer_2_default as LucideMousePointer2,
  mouse_pointer_ban_default as LucideMousePointerBan,
  mouse_pointer_click_default as LucideMousePointerClick,
  square_dashed_mouse_pointer_default as LucideMousePointerSquareDashed,
  move_default as LucideMove,
  move_3d_default as LucideMove3D,
  move_3d_default as LucideMove3d,
  move_diagonal_default as LucideMoveDiagonal,
  move_diagonal_2_default as LucideMoveDiagonal2,
  move_down_default as LucideMoveDown,
  move_down_left_default as LucideMoveDownLeft,
  move_down_right_default as LucideMoveDownRight,
  move_horizontal_default as LucideMoveHorizontal,
  move_left_default as LucideMoveLeft,
  move_right_default as LucideMoveRight,
  move_up_default as LucideMoveUp,
  move_up_left_default as LucideMoveUpLeft,
  move_up_right_default as LucideMoveUpRight,
  move_vertical_default as LucideMoveVertical,
  music_default as LucideMusic,
  music_2_default as LucideMusic2,
  music_3_default as LucideMusic3,
  music_4_default as LucideMusic4,
  navigation_default as LucideNavigation,
  navigation_2_default as LucideNavigation2,
  navigation_2_off_default as LucideNavigation2Off,
  navigation_off_default as LucideNavigationOff,
  network_default as LucideNetwork,
  newspaper_default as LucideNewspaper,
  nfc_default as LucideNfc,
  non_binary_default as LucideNonBinary,
  notebook_default as LucideNotebook,
  notebook_pen_default as LucideNotebookPen,
  notebook_tabs_default as LucideNotebookTabs,
  notebook_text_default as LucideNotebookText,
  notepad_text_default as LucideNotepadText,
  notepad_text_dashed_default as LucideNotepadTextDashed,
  nut_default as LucideNut,
  nut_off_default as LucideNutOff,
  octagon_default as LucideOctagon,
  octagon_alert_default as LucideOctagonAlert,
  octagon_minus_default as LucideOctagonMinus,
  octagon_pause_default as LucideOctagonPause,
  octagon_x_default as LucideOctagonX,
  omega_default as LucideOmega,
  option_default as LucideOption,
  orbit_default as LucideOrbit,
  origami_default as LucideOrigami,
  indent_decrease_default as LucideOutdent,
  package_default as LucidePackage,
  package_2_default as LucidePackage2,
  package_check_default as LucidePackageCheck,
  package_minus_default as LucidePackageMinus,
  package_open_default as LucidePackageOpen,
  package_plus_default as LucidePackagePlus,
  package_search_default as LucidePackageSearch,
  package_x_default as LucidePackageX,
  paint_bucket_default as LucidePaintBucket,
  paint_roller_default as LucidePaintRoller,
  paintbrush_default as LucidePaintbrush,
  paintbrush_vertical_default as LucidePaintbrush2,
  paintbrush_vertical_default as LucidePaintbrushVertical,
  palette_default as LucidePalette,
  tree_palm_default as LucidePalmtree,
  panda_default as LucidePanda,
  panel_bottom_default as LucidePanelBottom,
  panel_bottom_close_default as LucidePanelBottomClose,
  panel_bottom_dashed_default as LucidePanelBottomDashed,
  panel_bottom_dashed_default as LucidePanelBottomInactive,
  panel_bottom_open_default as LucidePanelBottomOpen,
  panel_left_default as LucidePanelLeft,
  panel_left_close_default as LucidePanelLeftClose,
  panel_left_dashed_default as LucidePanelLeftDashed,
  panel_left_dashed_default as LucidePanelLeftInactive,
  panel_left_open_default as LucidePanelLeftOpen,
  panel_right_default as LucidePanelRight,
  panel_right_close_default as LucidePanelRightClose,
  panel_right_dashed_default as LucidePanelRightDashed,
  panel_right_dashed_default as LucidePanelRightInactive,
  panel_right_open_default as LucidePanelRightOpen,
  panel_top_default as LucidePanelTop,
  panel_top_close_default as LucidePanelTopClose,
  panel_top_dashed_default as LucidePanelTopDashed,
  panel_top_dashed_default as LucidePanelTopInactive,
  panel_top_open_default as LucidePanelTopOpen,
  panels_left_bottom_default as LucidePanelsLeftBottom,
  columns_3_default as LucidePanelsLeftRight,
  panels_right_bottom_default as LucidePanelsRightBottom,
  rows_3_default as LucidePanelsTopBottom,
  panels_top_left_default as LucidePanelsTopLeft,
  paperclip_default as LucidePaperclip,
  parentheses_default as LucideParentheses,
  circle_parking_default as LucideParkingCircle,
  circle_parking_off_default as LucideParkingCircleOff,
  parking_meter_default as LucideParkingMeter,
  square_parking_default as LucideParkingSquare,
  square_parking_off_default as LucideParkingSquareOff,
  party_popper_default as LucidePartyPopper,
  pause_default as LucidePause,
  circle_pause_default as LucidePauseCircle,
  octagon_pause_default as LucidePauseOctagon,
  paw_print_default as LucidePawPrint,
  pc_case_default as LucidePcCase,
  pen_default as LucidePen,
  square_pen_default as LucidePenBox,
  pen_line_default as LucidePenLine,
  pen_off_default as LucidePenOff,
  square_pen_default as LucidePenSquare,
  pen_tool_default as LucidePenTool,
  pencil_default as LucidePencil,
  pencil_line_default as LucidePencilLine,
  pencil_off_default as LucidePencilOff,
  pencil_ruler_default as LucidePencilRuler,
  pentagon_default as LucidePentagon,
  percent_default as LucidePercent,
  circle_percent_default as LucidePercentCircle,
  diamond_percent_default as LucidePercentDiamond,
  square_percent_default as LucidePercentSquare,
  person_standing_default as LucidePersonStanding,
  philippine_peso_default as LucidePhilippinePeso,
  phone_default as LucidePhone,
  phone_call_default as LucidePhoneCall,
  phone_forwarded_default as LucidePhoneForwarded,
  phone_incoming_default as LucidePhoneIncoming,
  phone_missed_default as LucidePhoneMissed,
  phone_off_default as LucidePhoneOff,
  phone_outgoing_default as LucidePhoneOutgoing,
  pi_default as LucidePi,
  square_pi_default as LucidePiSquare,
  piano_default as LucidePiano,
  pickaxe_default as LucidePickaxe,
  picture_in_picture_default as LucidePictureInPicture,
  picture_in_picture_2_default as LucidePictureInPicture2,
  chart_pie_default as LucidePieChart,
  piggy_bank_default as LucidePiggyBank,
  pilcrow_default as LucidePilcrow,
  pilcrow_left_default as LucidePilcrowLeft,
  pilcrow_right_default as LucidePilcrowRight,
  square_pilcrow_default as LucidePilcrowSquare,
  pill_default as LucidePill,
  pill_bottle_default as LucidePillBottle,
  pin_default as LucidePin,
  pin_off_default as LucidePinOff,
  pipette_default as LucidePipette,
  pizza_default as LucidePizza,
  plane_default as LucidePlane,
  plane_landing_default as LucidePlaneLanding,
  plane_takeoff_default as LucidePlaneTakeoff,
  play_default as LucidePlay,
  circle_play_default as LucidePlayCircle,
  square_play_default as LucidePlaySquare,
  plug_default as LucidePlug,
  plug_2_default as LucidePlug2,
  plug_zap_default as LucidePlugZap,
  plug_zap_default as LucidePlugZap2,
  plus_default as LucidePlus,
  circle_plus_default as LucidePlusCircle,
  square_plus_default as LucidePlusSquare,
  pocket_default as LucidePocket,
  pocket_knife_default as LucidePocketKnife,
  podcast_default as LucidePodcast,
  pointer_default as LucidePointer,
  pointer_off_default as LucidePointerOff,
  popcorn_default as LucidePopcorn,
  popsicle_default as LucidePopsicle,
  pound_sterling_default as LucidePoundSterling,
  power_default as LucidePower,
  circle_power_default as LucidePowerCircle,
  power_off_default as LucidePowerOff,
  square_power_default as LucidePowerSquare,
  presentation_default as LucidePresentation,
  printer_default as LucidePrinter,
  printer_check_default as LucidePrinterCheck,
  projector_default as LucideProjector,
  proportions_default as LucideProportions,
  puzzle_default as LucidePuzzle,
  pyramid_default as LucidePyramid,
  qr_code_default as LucideQrCode,
  quote_default as LucideQuote,
  rabbit_default as LucideRabbit,
  radar_default as LucideRadar,
  radiation_default as LucideRadiation,
  radical_default as LucideRadical,
  radio_default as LucideRadio,
  radio_receiver_default as LucideRadioReceiver,
  radio_tower_default as LucideRadioTower,
  radius_default as LucideRadius,
  rail_symbol_default as LucideRailSymbol,
  rainbow_default as LucideRainbow,
  rat_default as LucideRat,
  ratio_default as LucideRatio,
  receipt_default as LucideReceipt,
  receipt_cent_default as LucideReceiptCent,
  receipt_euro_default as LucideReceiptEuro,
  receipt_indian_rupee_default as LucideReceiptIndianRupee,
  receipt_japanese_yen_default as LucideReceiptJapaneseYen,
  receipt_pound_sterling_default as LucideReceiptPoundSterling,
  receipt_russian_ruble_default as LucideReceiptRussianRuble,
  receipt_swiss_franc_default as LucideReceiptSwissFranc,
  receipt_text_default as LucideReceiptText,
  receipt_turkish_lira_default as LucideReceiptTurkishLira,
  rectangle_circle_default as LucideRectangleCircle,
  rectangle_ellipsis_default as LucideRectangleEllipsis,
  rectangle_goggles_default as LucideRectangleGoggles,
  rectangle_horizontal_default as LucideRectangleHorizontal,
  rectangle_vertical_default as LucideRectangleVertical,
  recycle_default as LucideRecycle,
  redo_default as LucideRedo,
  redo_2_default as LucideRedo2,
  redo_dot_default as LucideRedoDot,
  refresh_ccw_default as LucideRefreshCcw,
  refresh_ccw_dot_default as LucideRefreshCcwDot,
  refresh_cw_default as LucideRefreshCw,
  refresh_cw_off_default as LucideRefreshCwOff,
  refrigerator_default as LucideRefrigerator,
  regex_default as LucideRegex,
  remove_formatting_default as LucideRemoveFormatting,
  repeat_default as LucideRepeat,
  repeat_1_default as LucideRepeat1,
  repeat_2_default as LucideRepeat2,
  replace_default as LucideReplace,
  replace_all_default as LucideReplaceAll,
  reply_default as LucideReply,
  reply_all_default as LucideReplyAll,
  rewind_default as LucideRewind,
  ribbon_default as LucideRibbon,
  rocket_default as LucideRocket,
  rocking_chair_default as LucideRockingChair,
  roller_coaster_default as LucideRollerCoaster,
  rotate_3d_default as LucideRotate3D,
  rotate_3d_default as LucideRotate3d,
  rotate_ccw_default as LucideRotateCcw,
  rotate_ccw_key_default as LucideRotateCcwKey,
  rotate_ccw_square_default as LucideRotateCcwSquare,
  rotate_cw_default as LucideRotateCw,
  rotate_cw_square_default as LucideRotateCwSquare,
  route_default as LucideRoute,
  route_off_default as LucideRouteOff,
  router_default as LucideRouter,
  rows_2_default as LucideRows,
  rows_2_default as LucideRows2,
  rows_3_default as LucideRows3,
  rows_4_default as LucideRows4,
  rss_default as LucideRss,
  ruler_default as LucideRuler,
  ruler_dimension_line_default as LucideRulerDimensionLine,
  russian_ruble_default as LucideRussianRuble,
  sailboat_default as LucideSailboat,
  salad_default as LucideSalad,
  sandwich_default as LucideSandwich,
  satellite_default as LucideSatellite,
  satellite_dish_default as LucideSatelliteDish,
  saudi_riyal_default as LucideSaudiRiyal,
  save_default as LucideSave,
  save_all_default as LucideSaveAll,
  save_off_default as LucideSaveOff,
  scale_default as LucideScale,
  scale_3d_default as LucideScale3D,
  scale_3d_default as LucideScale3d,
  scaling_default as LucideScaling,
  scan_default as LucideScan,
  scan_barcode_default as LucideScanBarcode,
  scan_eye_default as LucideScanEye,
  scan_face_default as LucideScanFace,
  scan_heart_default as LucideScanHeart,
  scan_line_default as LucideScanLine,
  scan_qr_code_default as LucideScanQrCode,
  scan_search_default as LucideScanSearch,
  scan_text_default as LucideScanText,
  chart_scatter_default as LucideScatterChart,
  school_default as LucideSchool,
  university_default as LucideSchool2,
  scissors_default as LucideScissors,
  scissors_line_dashed_default as LucideScissorsLineDashed,
  square_scissors_default as LucideScissorsSquare,
  square_bottom_dashed_scissors_default as LucideScissorsSquareDashedBottom,
  screen_share_default as LucideScreenShare,
  screen_share_off_default as LucideScreenShareOff,
  scroll_default as LucideScroll,
  scroll_text_default as LucideScrollText,
  search_default as LucideSearch,
  search_check_default as LucideSearchCheck,
  search_code_default as LucideSearchCode,
  search_slash_default as LucideSearchSlash,
  search_x_default as LucideSearchX,
  section_default as LucideSection,
  send_default as LucideSend,
  send_horizontal_default as LucideSendHorizonal,
  send_horizontal_default as LucideSendHorizontal,
  send_to_back_default as LucideSendToBack,
  separator_horizontal_default as LucideSeparatorHorizontal,
  separator_vertical_default as LucideSeparatorVertical,
  server_default as LucideServer,
  server_cog_default as LucideServerCog,
  server_crash_default as LucideServerCrash,
  server_off_default as LucideServerOff,
  settings_default as LucideSettings,
  settings_2_default as LucideSettings2,
  shapes_default as LucideShapes,
  share_default as LucideShare,
  share_2_default as LucideShare2,
  sheet_default as LucideSheet,
  shell_default as LucideShell,
  shield_default as LucideShield,
  shield_alert_default as LucideShieldAlert,
  shield_ban_default as LucideShieldBan,
  shield_check_default as LucideShieldCheck,
  shield_x_default as LucideShieldClose,
  shield_ellipsis_default as LucideShieldEllipsis,
  shield_half_default as LucideShieldHalf,
  shield_minus_default as LucideShieldMinus,
  shield_off_default as LucideShieldOff,
  shield_plus_default as LucideShieldPlus,
  shield_question_mark_default as LucideShieldQuestion,
  shield_question_mark_default as LucideShieldQuestionMark,
  shield_user_default as LucideShieldUser,
  shield_x_default as LucideShieldX,
  ship_default as LucideShip,
  ship_wheel_default as LucideShipWheel,
  shirt_default as LucideShirt,
  shopping_bag_default as LucideShoppingBag,
  shopping_basket_default as LucideShoppingBasket,
  shopping_cart_default as LucideShoppingCart,
  shovel_default as LucideShovel,
  shower_head_default as LucideShowerHead,
  shredder_default as LucideShredder,
  shrimp_default as LucideShrimp,
  shrink_default as LucideShrink,
  shrub_default as LucideShrub,
  shuffle_default as LucideShuffle,
  panel_left_default as LucideSidebar,
  panel_left_close_default as LucideSidebarClose,
  panel_left_open_default as LucideSidebarOpen,
  sigma_default as LucideSigma,
  square_sigma_default as LucideSigmaSquare,
  signal_default as LucideSignal,
  signal_high_default as LucideSignalHigh,
  signal_low_default as LucideSignalLow,
  signal_medium_default as LucideSignalMedium,
  signal_zero_default as LucideSignalZero,
  signature_default as LucideSignature,
  signpost_default as LucideSignpost,
  signpost_big_default as LucideSignpostBig,
  siren_default as LucideSiren,
  skip_back_default as LucideSkipBack,
  skip_forward_default as LucideSkipForward,
  skull_default as LucideSkull,
  slack_default as LucideSlack,
  slash_default as LucideSlash,
  square_slash_default as LucideSlashSquare,
  slice_default as LucideSlice,
  sliders_vertical_default as LucideSliders,
  sliders_horizontal_default as LucideSlidersHorizontal,
  sliders_vertical_default as LucideSlidersVertical,
  smartphone_default as LucideSmartphone,
  smartphone_charging_default as LucideSmartphoneCharging,
  smartphone_nfc_default as LucideSmartphoneNfc,
  smile_default as LucideSmile,
  smile_plus_default as LucideSmilePlus,
  snail_default as LucideSnail,
  snowflake_default as LucideSnowflake,
  soap_dispenser_droplet_default as LucideSoapDispenserDroplet,
  sofa_default as LucideSofa,
  arrow_up_narrow_wide_default as LucideSortAsc,
  arrow_down_wide_narrow_default as LucideSortDesc,
  soup_default as LucideSoup,
  space_default as LucideSpace,
  spade_default as LucideSpade,
  sparkle_default as LucideSparkle,
  sparkles_default as LucideSparkles,
  speaker_default as LucideSpeaker,
  speech_default as LucideSpeech,
  spell_check_default as LucideSpellCheck,
  spell_check_2_default as LucideSpellCheck2,
  spline_default as LucideSpline,
  spline_pointer_default as LucideSplinePointer,
  split_default as LucideSplit,
  square_split_horizontal_default as LucideSplitSquareHorizontal,
  square_split_vertical_default as LucideSplitSquareVertical,
  spool_default as LucideSpool,
  spotlight_default as LucideSpotlight,
  spray_can_default as LucideSprayCan,
  sprout_default as LucideSprout,
  square_default as LucideSquare,
  square_activity_default as LucideSquareActivity,
  square_arrow_down_default as LucideSquareArrowDown,
  square_arrow_down_left_default as LucideSquareArrowDownLeft,
  square_arrow_down_right_default as LucideSquareArrowDownRight,
  square_arrow_left_default as LucideSquareArrowLeft,
  square_arrow_out_down_left_default as LucideSquareArrowOutDownLeft,
  square_arrow_out_down_right_default as LucideSquareArrowOutDownRight,
  square_arrow_out_up_left_default as LucideSquareArrowOutUpLeft,
  square_arrow_out_up_right_default as LucideSquareArrowOutUpRight,
  square_arrow_right_default as LucideSquareArrowRight,
  square_arrow_up_default as LucideSquareArrowUp,
  square_arrow_up_left_default as LucideSquareArrowUpLeft,
  square_arrow_up_right_default as LucideSquareArrowUpRight,
  square_asterisk_default as LucideSquareAsterisk,
  square_bottom_dashed_scissors_default as LucideSquareBottomDashedScissors,
  square_chart_gantt_default as LucideSquareChartGantt,
  square_check_default as LucideSquareCheck,
  square_check_big_default as LucideSquareCheckBig,
  square_chevron_down_default as LucideSquareChevronDown,
  square_chevron_left_default as LucideSquareChevronLeft,
  square_chevron_right_default as LucideSquareChevronRight,
  square_chevron_up_default as LucideSquareChevronUp,
  square_code_default as LucideSquareCode,
  square_dashed_default as LucideSquareDashed,
  square_dashed_bottom_default as LucideSquareDashedBottom,
  square_dashed_bottom_code_default as LucideSquareDashedBottomCode,
  square_dashed_kanban_default as LucideSquareDashedKanban,
  square_dashed_mouse_pointer_default as LucideSquareDashedMousePointer,
  square_dashed_top_solid_default as LucideSquareDashedTopSolid,
  square_divide_default as LucideSquareDivide,
  square_dot_default as LucideSquareDot,
  square_equal_default as LucideSquareEqual,
  square_function_default as LucideSquareFunction,
  square_chart_gantt_default as LucideSquareGanttChart,
  square_kanban_default as LucideSquareKanban,
  square_library_default as LucideSquareLibrary,
  square_m_default as LucideSquareM,
  square_menu_default as LucideSquareMenu,
  square_minus_default as LucideSquareMinus,
  square_mouse_pointer_default as LucideSquareMousePointer,
  square_parking_default as LucideSquareParking,
  square_parking_off_default as LucideSquareParkingOff,
  square_pause_default as LucideSquarePause,
  square_pen_default as LucideSquarePen,
  square_percent_default as LucideSquarePercent,
  square_pi_default as LucideSquarePi,
  square_pilcrow_default as LucideSquarePilcrow,
  square_play_default as LucideSquarePlay,
  square_plus_default as LucideSquarePlus,
  square_power_default as LucideSquarePower,
  square_radical_default as LucideSquareRadical,
  square_round_corner_default as LucideSquareRoundCorner,
  square_scissors_default as LucideSquareScissors,
  square_sigma_default as LucideSquareSigma,
  square_slash_default as LucideSquareSlash,
  square_split_horizontal_default as LucideSquareSplitHorizontal,
  square_split_vertical_default as LucideSquareSplitVertical,
  square_square_default as LucideSquareSquare,
  square_stack_default as LucideSquareStack,
  square_stop_default as LucideSquareStop,
  square_terminal_default as LucideSquareTerminal,
  square_user_default as LucideSquareUser,
  square_user_round_default as LucideSquareUserRound,
  square_x_default as LucideSquareX,
  squares_exclude_default as LucideSquaresExclude,
  squares_intersect_default as LucideSquaresIntersect,
  squares_subtract_default as LucideSquaresSubtract,
  squares_unite_default as LucideSquaresUnite,
  squircle_default as LucideSquircle,
  squircle_dashed_default as LucideSquircleDashed,
  squirrel_default as LucideSquirrel,
  stamp_default as LucideStamp,
  star_default as LucideStar,
  star_half_default as LucideStarHalf,
  star_off_default as LucideStarOff,
  sparkles_default as LucideStars,
  step_back_default as LucideStepBack,
  step_forward_default as LucideStepForward,
  stethoscope_default as LucideStethoscope,
  sticker_default as LucideSticker,
  sticky_note_default as LucideStickyNote,
  circle_stop_default as LucideStopCircle,
  store_default as LucideStore,
  stretch_horizontal_default as LucideStretchHorizontal,
  stretch_vertical_default as LucideStretchVertical,
  strikethrough_default as LucideStrikethrough,
  subscript_default as LucideSubscript,
  captions_default as LucideSubtitles,
  sun_default as LucideSun,
  sun_dim_default as LucideSunDim,
  sun_medium_default as LucideSunMedium,
  sun_moon_default as LucideSunMoon,
  sun_snow_default as LucideSunSnow,
  sunrise_default as LucideSunrise,
  sunset_default as LucideSunset,
  superscript_default as LucideSuperscript,
  swatch_book_default as LucideSwatchBook,
  swiss_franc_default as LucideSwissFranc,
  switch_camera_default as LucideSwitchCamera,
  sword_default as LucideSword,
  swords_default as LucideSwords,
  syringe_default as LucideSyringe,
  table_default as LucideTable,
  table_2_default as LucideTable2,
  table_cells_merge_default as LucideTableCellsMerge,
  table_cells_split_default as LucideTableCellsSplit,
  table_columns_split_default as LucideTableColumnsSplit,
  columns_3_cog_default as LucideTableConfig,
  table_of_contents_default as LucideTableOfContents,
  table_properties_default as LucideTableProperties,
  table_rows_split_default as LucideTableRowsSplit,
  tablet_default as LucideTablet,
  tablet_smartphone_default as LucideTabletSmartphone,
  tablets_default as LucideTablets,
  tag_default as LucideTag,
  tags_default as LucideTags,
  tally_1_default as LucideTally1,
  tally_2_default as LucideTally2,
  tally_3_default as LucideTally3,
  tally_4_default as LucideTally4,
  tally_5_default as LucideTally5,
  tangent_default as LucideTangent,
  target_default as LucideTarget,
  telescope_default as LucideTelescope,
  tent_default as LucideTent,
  tent_tree_default as LucideTentTree,
  terminal_default as LucideTerminal,
  square_terminal_default as LucideTerminalSquare,
  test_tube_default as LucideTestTube,
  test_tube_diagonal_default as LucideTestTube2,
  test_tube_diagonal_default as LucideTestTubeDiagonal,
  test_tubes_default as LucideTestTubes,
  text_default as LucideText,
  text_cursor_default as LucideTextCursor,
  text_cursor_input_default as LucideTextCursorInput,
  text_quote_default as LucideTextQuote,
  text_search_default as LucideTextSearch,
  text_select_default as LucideTextSelect,
  text_select_default as LucideTextSelection,
  theater_default as LucideTheater,
  thermometer_default as LucideThermometer,
  thermometer_snowflake_default as LucideThermometerSnowflake,
  thermometer_sun_default as LucideThermometerSun,
  thumbs_down_default as LucideThumbsDown,
  thumbs_up_default as LucideThumbsUp,
  ticket_default as LucideTicket,
  ticket_check_default as LucideTicketCheck,
  ticket_minus_default as LucideTicketMinus,
  ticket_percent_default as LucideTicketPercent,
  ticket_plus_default as LucideTicketPlus,
  ticket_slash_default as LucideTicketSlash,
  ticket_x_default as LucideTicketX,
  tickets_default as LucideTickets,
  tickets_plane_default as LucideTicketsPlane,
  timer_default as LucideTimer,
  timer_off_default as LucideTimerOff,
  timer_reset_default as LucideTimerReset,
  toggle_left_default as LucideToggleLeft,
  toggle_right_default as LucideToggleRight,
  toilet_default as LucideToilet,
  tool_case_default as LucideToolCase,
  tornado_default as LucideTornado,
  torus_default as LucideTorus,
  touchpad_default as LucideTouchpad,
  touchpad_off_default as LucideTouchpadOff,
  tower_control_default as LucideTowerControl,
  toy_brick_default as LucideToyBrick,
  tractor_default as LucideTractor,
  traffic_cone_default as LucideTrafficCone,
  tram_front_default as LucideTrain,
  train_front_default as LucideTrainFront,
  train_front_tunnel_default as LucideTrainFrontTunnel,
  train_track_default as LucideTrainTrack,
  tram_front_default as LucideTramFront,
  transgender_default as LucideTransgender,
  trash_default as LucideTrash,
  trash_2_default as LucideTrash2,
  tree_deciduous_default as LucideTreeDeciduous,
  tree_palm_default as LucideTreePalm,
  tree_pine_default as LucideTreePine,
  trees_default as LucideTrees,
  trello_default as LucideTrello,
  trending_down_default as LucideTrendingDown,
  trending_up_default as LucideTrendingUp,
  trending_up_down_default as LucideTrendingUpDown,
  triangle_default as LucideTriangle,
  triangle_alert_default as LucideTriangleAlert,
  triangle_dashed_default as LucideTriangleDashed,
  triangle_right_default as LucideTriangleRight,
  trophy_default as LucideTrophy,
  truck_default as LucideTruck,
  truck_electric_default as LucideTruckElectric,
  turkish_lira_default as LucideTurkishLira,
  turntable_default as LucideTurntable,
  turtle_default as LucideTurtle,
  tv_default as LucideTv,
  tv_minimal_default as LucideTv2,
  tv_minimal_default as LucideTvMinimal,
  tv_minimal_play_default as LucideTvMinimalPlay,
  twitch_default as LucideTwitch,
  twitter_default as LucideTwitter,
  type_default as LucideType,
  type_outline_default as LucideTypeOutline,
  umbrella_default as LucideUmbrella,
  umbrella_off_default as LucideUmbrellaOff,
  underline_default as LucideUnderline,
  undo_default as LucideUndo,
  undo_2_default as LucideUndo2,
  undo_dot_default as LucideUndoDot,
  unfold_horizontal_default as LucideUnfoldHorizontal,
  unfold_vertical_default as LucideUnfoldVertical,
  ungroup_default as LucideUngroup,
  university_default as LucideUniversity,
  unlink_default as LucideUnlink,
  unlink_2_default as LucideUnlink2,
  lock_open_default as LucideUnlock,
  lock_keyhole_open_default as LucideUnlockKeyhole,
  unplug_default as LucideUnplug,
  upload_default as LucideUpload,
  cloud_upload_default as LucideUploadCloud,
  usb_default as LucideUsb,
  user_default as LucideUser,
  user_round_default as LucideUser2,
  user_check_default as LucideUserCheck,
  user_round_check_default as LucideUserCheck2,
  circle_user_default as LucideUserCircle,
  circle_user_round_default as LucideUserCircle2,
  user_cog_default as LucideUserCog,
  user_round_cog_default as LucideUserCog2,
  user_lock_default as LucideUserLock,
  user_minus_default as LucideUserMinus,
  user_round_minus_default as LucideUserMinus2,
  user_pen_default as LucideUserPen,
  user_plus_default as LucideUserPlus,
  user_round_plus_default as LucideUserPlus2,
  user_round_default as LucideUserRound,
  user_round_check_default as LucideUserRoundCheck,
  user_round_cog_default as LucideUserRoundCog,
  user_round_minus_default as LucideUserRoundMinus,
  user_round_pen_default as LucideUserRoundPen,
  user_round_plus_default as LucideUserRoundPlus,
  user_round_search_default as LucideUserRoundSearch,
  user_round_x_default as LucideUserRoundX,
  user_search_default as LucideUserSearch,
  square_user_default as LucideUserSquare,
  square_user_round_default as LucideUserSquare2,
  user_star_default as LucideUserStar,
  user_x_default as LucideUserX,
  user_round_x_default as LucideUserX2,
  users_default as LucideUsers,
  users_round_default as LucideUsers2,
  users_round_default as LucideUsersRound,
  utensils_default as LucideUtensils,
  utensils_crossed_default as LucideUtensilsCrossed,
  utility_pole_default as LucideUtilityPole,
  variable_default as LucideVariable,
  vault_default as LucideVault,
  vector_square_default as LucideVectorSquare,
  vegan_default as LucideVegan,
  venetian_mask_default as LucideVenetianMask,
  venus_default as LucideVenus,
  venus_and_mars_default as LucideVenusAndMars,
  badge_check_default as LucideVerified,
  vibrate_default as LucideVibrate,
  vibrate_off_default as LucideVibrateOff,
  video_default as LucideVideo,
  video_off_default as LucideVideoOff,
  videotape_default as LucideVideotape,
  view_default as LucideView,
  voicemail_default as LucideVoicemail,
  volleyball_default as LucideVolleyball,
  volume_default as LucideVolume,
  volume_1_default as LucideVolume1,
  volume_2_default as LucideVolume2,
  volume_off_default as LucideVolumeOff,
  volume_x_default as LucideVolumeX,
  vote_default as LucideVote,
  wallet_default as LucideWallet,
  wallet_minimal_default as LucideWallet2,
  wallet_cards_default as LucideWalletCards,
  wallet_minimal_default as LucideWalletMinimal,
  wallpaper_default as LucideWallpaper,
  wand_default as LucideWand,
  wand_sparkles_default as LucideWand2,
  wand_sparkles_default as LucideWandSparkles,
  warehouse_default as LucideWarehouse,
  washing_machine_default as LucideWashingMachine,
  watch_default as LucideWatch,
  waves_default as LucideWaves,
  waves_ladder_default as LucideWavesLadder,
  waypoints_default as LucideWaypoints,
  webcam_default as LucideWebcam,
  webhook_default as LucideWebhook,
  webhook_off_default as LucideWebhookOff,
  weight_default as LucideWeight,
  wheat_default as LucideWheat,
  wheat_off_default as LucideWheatOff,
  whole_word_default as LucideWholeWord,
  wifi_default as LucideWifi,
  wifi_cog_default as LucideWifiCog,
  wifi_high_default as LucideWifiHigh,
  wifi_low_default as LucideWifiLow,
  wifi_off_default as LucideWifiOff,
  wifi_pen_default as LucideWifiPen,
  wifi_sync_default as LucideWifiSync,
  wifi_zero_default as LucideWifiZero,
  wind_default as LucideWind,
  wind_arrow_down_default as LucideWindArrowDown,
  wine_default as LucideWine,
  wine_off_default as LucideWineOff,
  workflow_default as LucideWorkflow,
  worm_default as LucideWorm,
  wrap_text_default as LucideWrapText,
  wrench_default as LucideWrench,
  x_default as LucideX,
  circle_x_default as LucideXCircle,
  octagon_x_default as LucideXOctagon,
  square_x_default as LucideXSquare,
  youtube_default as LucideYoutube,
  zap_default as LucideZap,
  zap_off_default as LucideZapOff,
  zoom_in_default as LucideZoomIn,
  zoom_out_default as LucideZoomOut,
  luggage_default as Luggage,
  luggage_default as LuggageIcon,
  square_m_default as MSquare,
  square_m_default as MSquareIcon,
  magnet_default as Magnet,
  magnet_default as MagnetIcon,
  mail_default as Mail,
  mail_check_default as MailCheck,
  mail_check_default as MailCheckIcon,
  mail_default as MailIcon,
  mail_minus_default as MailMinus,
  mail_minus_default as MailMinusIcon,
  mail_open_default as MailOpen,
  mail_open_default as MailOpenIcon,
  mail_plus_default as MailPlus,
  mail_plus_default as MailPlusIcon,
  mail_question_mark_default as MailQuestion,
  mail_question_mark_default as MailQuestionIcon,
  mail_question_mark_default as MailQuestionMark,
  mail_question_mark_default as MailQuestionMarkIcon,
  mail_search_default as MailSearch,
  mail_search_default as MailSearchIcon,
  mail_warning_default as MailWarning,
  mail_warning_default as MailWarningIcon,
  mail_x_default as MailX,
  mail_x_default as MailXIcon,
  mailbox_default as Mailbox,
  mailbox_default as MailboxIcon,
  mails_default as Mails,
  mails_default as MailsIcon,
  map_default as Map,
  map_default as MapIcon,
  map_minus_default as MapMinus,
  map_minus_default as MapMinusIcon,
  map_pin_default as MapPin,
  map_pin_check_default as MapPinCheck,
  map_pin_check_default as MapPinCheckIcon,
  map_pin_check_inside_default as MapPinCheckInside,
  map_pin_check_inside_default as MapPinCheckInsideIcon,
  map_pin_house_default as MapPinHouse,
  map_pin_house_default as MapPinHouseIcon,
  map_pin_default as MapPinIcon,
  map_pin_minus_default as MapPinMinus,
  map_pin_minus_default as MapPinMinusIcon,
  map_pin_minus_inside_default as MapPinMinusInside,
  map_pin_minus_inside_default as MapPinMinusInsideIcon,
  map_pin_off_default as MapPinOff,
  map_pin_off_default as MapPinOffIcon,
  map_pin_pen_default as MapPinPen,
  map_pin_pen_default as MapPinPenIcon,
  map_pin_plus_default as MapPinPlus,
  map_pin_plus_default as MapPinPlusIcon,
  map_pin_plus_inside_default as MapPinPlusInside,
  map_pin_plus_inside_default as MapPinPlusInsideIcon,
  map_pin_x_default as MapPinX,
  map_pin_x_default as MapPinXIcon,
  map_pin_x_inside_default as MapPinXInside,
  map_pin_x_inside_default as MapPinXInsideIcon,
  map_pinned_default as MapPinned,
  map_pinned_default as MapPinnedIcon,
  map_plus_default as MapPlus,
  map_plus_default as MapPlusIcon,
  mars_default as Mars,
  mars_default as MarsIcon,
  mars_stroke_default as MarsStroke,
  mars_stroke_default as MarsStrokeIcon,
  martini_default as Martini,
  martini_default as MartiniIcon,
  maximize_default as Maximize,
  maximize_2_default as Maximize2,
  maximize_2_default as Maximize2Icon,
  maximize_default as MaximizeIcon,
  medal_default as Medal,
  medal_default as MedalIcon,
  megaphone_default as Megaphone,
  megaphone_default as MegaphoneIcon,
  megaphone_off_default as MegaphoneOff,
  megaphone_off_default as MegaphoneOffIcon,
  meh_default as Meh,
  meh_default as MehIcon,
  memory_stick_default as MemoryStick,
  memory_stick_default as MemoryStickIcon,
  menu_default as Menu,
  menu_default as MenuIcon,
  square_menu_default as MenuSquare,
  square_menu_default as MenuSquareIcon,
  merge_default as Merge,
  merge_default as MergeIcon,
  message_circle_default as MessageCircle,
  message_circle_code_default as MessageCircleCode,
  message_circle_code_default as MessageCircleCodeIcon,
  message_circle_dashed_default as MessageCircleDashed,
  message_circle_dashed_default as MessageCircleDashedIcon,
  message_circle_heart_default as MessageCircleHeart,
  message_circle_heart_default as MessageCircleHeartIcon,
  message_circle_default as MessageCircleIcon,
  message_circle_more_default as MessageCircleMore,
  message_circle_more_default as MessageCircleMoreIcon,
  message_circle_off_default as MessageCircleOff,
  message_circle_off_default as MessageCircleOffIcon,
  message_circle_plus_default as MessageCirclePlus,
  message_circle_plus_default as MessageCirclePlusIcon,
  message_circle_question_mark_default as MessageCircleQuestion,
  message_circle_question_mark_default as MessageCircleQuestionIcon,
  message_circle_question_mark_default as MessageCircleQuestionMark,
  message_circle_question_mark_default as MessageCircleQuestionMarkIcon,
  message_circle_reply_default as MessageCircleReply,
  message_circle_reply_default as MessageCircleReplyIcon,
  message_circle_warning_default as MessageCircleWarning,
  message_circle_warning_default as MessageCircleWarningIcon,
  message_circle_x_default as MessageCircleX,
  message_circle_x_default as MessageCircleXIcon,
  message_square_default as MessageSquare,
  message_square_code_default as MessageSquareCode,
  message_square_code_default as MessageSquareCodeIcon,
  message_square_dashed_default as MessageSquareDashed,
  message_square_dashed_default as MessageSquareDashedIcon,
  message_square_diff_default as MessageSquareDiff,
  message_square_diff_default as MessageSquareDiffIcon,
  message_square_dot_default as MessageSquareDot,
  message_square_dot_default as MessageSquareDotIcon,
  message_square_heart_default as MessageSquareHeart,
  message_square_heart_default as MessageSquareHeartIcon,
  message_square_default as MessageSquareIcon,
  message_square_lock_default as MessageSquareLock,
  message_square_lock_default as MessageSquareLockIcon,
  message_square_more_default as MessageSquareMore,
  message_square_more_default as MessageSquareMoreIcon,
  message_square_off_default as MessageSquareOff,
  message_square_off_default as MessageSquareOffIcon,
  message_square_plus_default as MessageSquarePlus,
  message_square_plus_default as MessageSquarePlusIcon,
  message_square_quote_default as MessageSquareQuote,
  message_square_quote_default as MessageSquareQuoteIcon,
  message_square_reply_default as MessageSquareReply,
  message_square_reply_default as MessageSquareReplyIcon,
  message_square_share_default as MessageSquareShare,
  message_square_share_default as MessageSquareShareIcon,
  message_square_text_default as MessageSquareText,
  message_square_text_default as MessageSquareTextIcon,
  message_square_warning_default as MessageSquareWarning,
  message_square_warning_default as MessageSquareWarningIcon,
  message_square_x_default as MessageSquareX,
  message_square_x_default as MessageSquareXIcon,
  messages_square_default as MessagesSquare,
  messages_square_default as MessagesSquareIcon,
  mic_default as Mic,
  mic_vocal_default as Mic2,
  mic_vocal_default as Mic2Icon,
  mic_default as MicIcon,
  mic_off_default as MicOff,
  mic_off_default as MicOffIcon,
  mic_vocal_default as MicVocal,
  mic_vocal_default as MicVocalIcon,
  microchip_default as Microchip,
  microchip_default as MicrochipIcon,
  microscope_default as Microscope,
  microscope_default as MicroscopeIcon,
  microwave_default as Microwave,
  microwave_default as MicrowaveIcon,
  milestone_default as Milestone,
  milestone_default as MilestoneIcon,
  milk_default as Milk,
  milk_default as MilkIcon,
  milk_off_default as MilkOff,
  milk_off_default as MilkOffIcon,
  minimize_default as Minimize,
  minimize_2_default as Minimize2,
  minimize_2_default as Minimize2Icon,
  minimize_default as MinimizeIcon,
  minus_default as Minus,
  circle_minus_default as MinusCircle,
  circle_minus_default as MinusCircleIcon,
  minus_default as MinusIcon,
  square_minus_default as MinusSquare,
  square_minus_default as MinusSquareIcon,
  monitor_default as Monitor,
  monitor_check_default as MonitorCheck,
  monitor_check_default as MonitorCheckIcon,
  monitor_cog_default as MonitorCog,
  monitor_cog_default as MonitorCogIcon,
  monitor_dot_default as MonitorDot,
  monitor_dot_default as MonitorDotIcon,
  monitor_down_default as MonitorDown,
  monitor_down_default as MonitorDownIcon,
  monitor_default as MonitorIcon,
  monitor_off_default as MonitorOff,
  monitor_off_default as MonitorOffIcon,
  monitor_pause_default as MonitorPause,
  monitor_pause_default as MonitorPauseIcon,
  monitor_play_default as MonitorPlay,
  monitor_play_default as MonitorPlayIcon,
  monitor_smartphone_default as MonitorSmartphone,
  monitor_smartphone_default as MonitorSmartphoneIcon,
  monitor_speaker_default as MonitorSpeaker,
  monitor_speaker_default as MonitorSpeakerIcon,
  monitor_stop_default as MonitorStop,
  monitor_stop_default as MonitorStopIcon,
  monitor_up_default as MonitorUp,
  monitor_up_default as MonitorUpIcon,
  monitor_x_default as MonitorX,
  monitor_x_default as MonitorXIcon,
  moon_default as Moon,
  moon_default as MoonIcon,
  moon_star_default as MoonStar,
  moon_star_default as MoonStarIcon,
  ellipsis_default as MoreHorizontal,
  ellipsis_default as MoreHorizontalIcon,
  ellipsis_vertical_default as MoreVertical,
  ellipsis_vertical_default as MoreVerticalIcon,
  mountain_default as Mountain,
  mountain_default as MountainIcon,
  mountain_snow_default as MountainSnow,
  mountain_snow_default as MountainSnowIcon,
  mouse_default as Mouse,
  mouse_default as MouseIcon,
  mouse_off_default as MouseOff,
  mouse_off_default as MouseOffIcon,
  mouse_pointer_default as MousePointer,
  mouse_pointer_2_default as MousePointer2,
  mouse_pointer_2_default as MousePointer2Icon,
  mouse_pointer_ban_default as MousePointerBan,
  mouse_pointer_ban_default as MousePointerBanIcon,
  mouse_pointer_click_default as MousePointerClick,
  mouse_pointer_click_default as MousePointerClickIcon,
  mouse_pointer_default as MousePointerIcon,
  square_dashed_mouse_pointer_default as MousePointerSquareDashed,
  square_dashed_mouse_pointer_default as MousePointerSquareDashedIcon,
  move_default as Move,
  move_3d_default as Move3D,
  move_3d_default as Move3DIcon,
  move_3d_default as Move3d,
  move_3d_default as Move3dIcon,
  move_diagonal_default as MoveDiagonal,
  move_diagonal_2_default as MoveDiagonal2,
  move_diagonal_2_default as MoveDiagonal2Icon,
  move_diagonal_default as MoveDiagonalIcon,
  move_down_default as MoveDown,
  move_down_default as MoveDownIcon,
  move_down_left_default as MoveDownLeft,
  move_down_left_default as MoveDownLeftIcon,
  move_down_right_default as MoveDownRight,
  move_down_right_default as MoveDownRightIcon,
  move_horizontal_default as MoveHorizontal,
  move_horizontal_default as MoveHorizontalIcon,
  move_default as MoveIcon,
  move_left_default as MoveLeft,
  move_left_default as MoveLeftIcon,
  move_right_default as MoveRight,
  move_right_default as MoveRightIcon,
  move_up_default as MoveUp,
  move_up_default as MoveUpIcon,
  move_up_left_default as MoveUpLeft,
  move_up_left_default as MoveUpLeftIcon,
  move_up_right_default as MoveUpRight,
  move_up_right_default as MoveUpRightIcon,
  move_vertical_default as MoveVertical,
  move_vertical_default as MoveVerticalIcon,
  music_default as Music,
  music_2_default as Music2,
  music_2_default as Music2Icon,
  music_3_default as Music3,
  music_3_default as Music3Icon,
  music_4_default as Music4,
  music_4_default as Music4Icon,
  music_default as MusicIcon,
  navigation_default as Navigation,
  navigation_2_default as Navigation2,
  navigation_2_default as Navigation2Icon,
  navigation_2_off_default as Navigation2Off,
  navigation_2_off_default as Navigation2OffIcon,
  navigation_default as NavigationIcon,
  navigation_off_default as NavigationOff,
  navigation_off_default as NavigationOffIcon,
  network_default as Network,
  network_default as NetworkIcon,
  newspaper_default as Newspaper,
  newspaper_default as NewspaperIcon,
  nfc_default as Nfc,
  nfc_default as NfcIcon,
  non_binary_default as NonBinary,
  non_binary_default as NonBinaryIcon,
  notebook_default as Notebook,
  notebook_default as NotebookIcon,
  notebook_pen_default as NotebookPen,
  notebook_pen_default as NotebookPenIcon,
  notebook_tabs_default as NotebookTabs,
  notebook_tabs_default as NotebookTabsIcon,
  notebook_text_default as NotebookText,
  notebook_text_default as NotebookTextIcon,
  notepad_text_default as NotepadText,
  notepad_text_dashed_default as NotepadTextDashed,
  notepad_text_dashed_default as NotepadTextDashedIcon,
  notepad_text_default as NotepadTextIcon,
  nut_default as Nut,
  nut_default as NutIcon,
  nut_off_default as NutOff,
  nut_off_default as NutOffIcon,
  octagon_default as Octagon,
  octagon_alert_default as OctagonAlert,
  octagon_alert_default as OctagonAlertIcon,
  octagon_default as OctagonIcon,
  octagon_minus_default as OctagonMinus,
  octagon_minus_default as OctagonMinusIcon,
  octagon_pause_default as OctagonPause,
  octagon_pause_default as OctagonPauseIcon,
  octagon_x_default as OctagonX,
  octagon_x_default as OctagonXIcon,
  omega_default as Omega,
  omega_default as OmegaIcon,
  option_default as Option,
  option_default as OptionIcon,
  orbit_default as Orbit,
  orbit_default as OrbitIcon,
  origami_default as Origami,
  origami_default as OrigamiIcon,
  indent_decrease_default as Outdent,
  indent_decrease_default as OutdentIcon,
  package_default as Package,
  package_2_default as Package2,
  package_2_default as Package2Icon,
  package_check_default as PackageCheck,
  package_check_default as PackageCheckIcon,
  package_default as PackageIcon,
  package_minus_default as PackageMinus,
  package_minus_default as PackageMinusIcon,
  package_open_default as PackageOpen,
  package_open_default as PackageOpenIcon,
  package_plus_default as PackagePlus,
  package_plus_default as PackagePlusIcon,
  package_search_default as PackageSearch,
  package_search_default as PackageSearchIcon,
  package_x_default as PackageX,
  package_x_default as PackageXIcon,
  paint_bucket_default as PaintBucket,
  paint_bucket_default as PaintBucketIcon,
  paint_roller_default as PaintRoller,
  paint_roller_default as PaintRollerIcon,
  paintbrush_default as Paintbrush,
  paintbrush_vertical_default as Paintbrush2,
  paintbrush_vertical_default as Paintbrush2Icon,
  paintbrush_default as PaintbrushIcon,
  paintbrush_vertical_default as PaintbrushVertical,
  paintbrush_vertical_default as PaintbrushVerticalIcon,
  palette_default as Palette,
  palette_default as PaletteIcon,
  tree_palm_default as Palmtree,
  tree_palm_default as PalmtreeIcon,
  panda_default as Panda,
  panda_default as PandaIcon,
  panel_bottom_default as PanelBottom,
  panel_bottom_close_default as PanelBottomClose,
  panel_bottom_close_default as PanelBottomCloseIcon,
  panel_bottom_dashed_default as PanelBottomDashed,
  panel_bottom_dashed_default as PanelBottomDashedIcon,
  panel_bottom_default as PanelBottomIcon,
  panel_bottom_dashed_default as PanelBottomInactive,
  panel_bottom_dashed_default as PanelBottomInactiveIcon,
  panel_bottom_open_default as PanelBottomOpen,
  panel_bottom_open_default as PanelBottomOpenIcon,
  panel_left_default as PanelLeft,
  panel_left_close_default as PanelLeftClose,
  panel_left_close_default as PanelLeftCloseIcon,
  panel_left_dashed_default as PanelLeftDashed,
  panel_left_dashed_default as PanelLeftDashedIcon,
  panel_left_default as PanelLeftIcon,
  panel_left_dashed_default as PanelLeftInactive,
  panel_left_dashed_default as PanelLeftInactiveIcon,
  panel_left_open_default as PanelLeftOpen,
  panel_left_open_default as PanelLeftOpenIcon,
  panel_right_default as PanelRight,
  panel_right_close_default as PanelRightClose,
  panel_right_close_default as PanelRightCloseIcon,
  panel_right_dashed_default as PanelRightDashed,
  panel_right_dashed_default as PanelRightDashedIcon,
  panel_right_default as PanelRightIcon,
  panel_right_dashed_default as PanelRightInactive,
  panel_right_dashed_default as PanelRightInactiveIcon,
  panel_right_open_default as PanelRightOpen,
  panel_right_open_default as PanelRightOpenIcon,
  panel_top_default as PanelTop,
  panel_top_close_default as PanelTopClose,
  panel_top_close_default as PanelTopCloseIcon,
  panel_top_dashed_default as PanelTopDashed,
  panel_top_dashed_default as PanelTopDashedIcon,
  panel_top_default as PanelTopIcon,
  panel_top_dashed_default as PanelTopInactive,
  panel_top_dashed_default as PanelTopInactiveIcon,
  panel_top_open_default as PanelTopOpen,
  panel_top_open_default as PanelTopOpenIcon,
  panels_left_bottom_default as PanelsLeftBottom,
  panels_left_bottom_default as PanelsLeftBottomIcon,
  columns_3_default as PanelsLeftRight,
  columns_3_default as PanelsLeftRightIcon,
  panels_right_bottom_default as PanelsRightBottom,
  panels_right_bottom_default as PanelsRightBottomIcon,
  rows_3_default as PanelsTopBottom,
  rows_3_default as PanelsTopBottomIcon,
  panels_top_left_default as PanelsTopLeft,
  panels_top_left_default as PanelsTopLeftIcon,
  paperclip_default as Paperclip,
  paperclip_default as PaperclipIcon,
  parentheses_default as Parentheses,
  parentheses_default as ParenthesesIcon,
  circle_parking_default as ParkingCircle,
  circle_parking_default as ParkingCircleIcon,
  circle_parking_off_default as ParkingCircleOff,
  circle_parking_off_default as ParkingCircleOffIcon,
  parking_meter_default as ParkingMeter,
  parking_meter_default as ParkingMeterIcon,
  square_parking_default as ParkingSquare,
  square_parking_default as ParkingSquareIcon,
  square_parking_off_default as ParkingSquareOff,
  square_parking_off_default as ParkingSquareOffIcon,
  party_popper_default as PartyPopper,
  party_popper_default as PartyPopperIcon,
  pause_default as Pause,
  circle_pause_default as PauseCircle,
  circle_pause_default as PauseCircleIcon,
  pause_default as PauseIcon,
  octagon_pause_default as PauseOctagon,
  octagon_pause_default as PauseOctagonIcon,
  paw_print_default as PawPrint,
  paw_print_default as PawPrintIcon,
  pc_case_default as PcCase,
  pc_case_default as PcCaseIcon,
  pen_default as Pen,
  square_pen_default as PenBox,
  square_pen_default as PenBoxIcon,
  pen_default as PenIcon,
  pen_line_default as PenLine,
  pen_line_default as PenLineIcon,
  pen_off_default as PenOff,
  pen_off_default as PenOffIcon,
  square_pen_default as PenSquare,
  square_pen_default as PenSquareIcon,
  pen_tool_default as PenTool,
  pen_tool_default as PenToolIcon,
  pencil_default as Pencil,
  pencil_default as PencilIcon,
  pencil_line_default as PencilLine,
  pencil_line_default as PencilLineIcon,
  pencil_off_default as PencilOff,
  pencil_off_default as PencilOffIcon,
  pencil_ruler_default as PencilRuler,
  pencil_ruler_default as PencilRulerIcon,
  pentagon_default as Pentagon,
  pentagon_default as PentagonIcon,
  percent_default as Percent,
  circle_percent_default as PercentCircle,
  circle_percent_default as PercentCircleIcon,
  diamond_percent_default as PercentDiamond,
  diamond_percent_default as PercentDiamondIcon,
  percent_default as PercentIcon,
  square_percent_default as PercentSquare,
  square_percent_default as PercentSquareIcon,
  person_standing_default as PersonStanding,
  person_standing_default as PersonStandingIcon,
  philippine_peso_default as PhilippinePeso,
  philippine_peso_default as PhilippinePesoIcon,
  phone_default as Phone,
  phone_call_default as PhoneCall,
  phone_call_default as PhoneCallIcon,
  phone_forwarded_default as PhoneForwarded,
  phone_forwarded_default as PhoneForwardedIcon,
  phone_default as PhoneIcon,
  phone_incoming_default as PhoneIncoming,
  phone_incoming_default as PhoneIncomingIcon,
  phone_missed_default as PhoneMissed,
  phone_missed_default as PhoneMissedIcon,
  phone_off_default as PhoneOff,
  phone_off_default as PhoneOffIcon,
  phone_outgoing_default as PhoneOutgoing,
  phone_outgoing_default as PhoneOutgoingIcon,
  pi_default as Pi,
  pi_default as PiIcon,
  square_pi_default as PiSquare,
  square_pi_default as PiSquareIcon,
  piano_default as Piano,
  piano_default as PianoIcon,
  pickaxe_default as Pickaxe,
  pickaxe_default as PickaxeIcon,
  picture_in_picture_default as PictureInPicture,
  picture_in_picture_2_default as PictureInPicture2,
  picture_in_picture_2_default as PictureInPicture2Icon,
  picture_in_picture_default as PictureInPictureIcon,
  chart_pie_default as PieChart,
  chart_pie_default as PieChartIcon,
  piggy_bank_default as PiggyBank,
  piggy_bank_default as PiggyBankIcon,
  pilcrow_default as Pilcrow,
  pilcrow_default as PilcrowIcon,
  pilcrow_left_default as PilcrowLeft,
  pilcrow_left_default as PilcrowLeftIcon,
  pilcrow_right_default as PilcrowRight,
  pilcrow_right_default as PilcrowRightIcon,
  square_pilcrow_default as PilcrowSquare,
  square_pilcrow_default as PilcrowSquareIcon,
  pill_default as Pill,
  pill_bottle_default as PillBottle,
  pill_bottle_default as PillBottleIcon,
  pill_default as PillIcon,
  pin_default as Pin,
  pin_default as PinIcon,
  pin_off_default as PinOff,
  pin_off_default as PinOffIcon,
  pipette_default as Pipette,
  pipette_default as PipetteIcon,
  pizza_default as Pizza,
  pizza_default as PizzaIcon,
  plane_default as Plane,
  plane_default as PlaneIcon,
  plane_landing_default as PlaneLanding,
  plane_landing_default as PlaneLandingIcon,
  plane_takeoff_default as PlaneTakeoff,
  plane_takeoff_default as PlaneTakeoffIcon,
  play_default as Play,
  circle_play_default as PlayCircle,
  circle_play_default as PlayCircleIcon,
  play_default as PlayIcon,
  square_play_default as PlaySquare,
  square_play_default as PlaySquareIcon,
  plug_default as Plug,
  plug_2_default as Plug2,
  plug_2_default as Plug2Icon,
  plug_default as PlugIcon,
  plug_zap_default as PlugZap,
  plug_zap_default as PlugZap2,
  plug_zap_default as PlugZap2Icon,
  plug_zap_default as PlugZapIcon,
  plus_default as Plus,
  circle_plus_default as PlusCircle,
  circle_plus_default as PlusCircleIcon,
  plus_default as PlusIcon,
  square_plus_default as PlusSquare,
  square_plus_default as PlusSquareIcon,
  pocket_default as Pocket,
  pocket_default as PocketIcon,
  pocket_knife_default as PocketKnife,
  pocket_knife_default as PocketKnifeIcon,
  podcast_default as Podcast,
  podcast_default as PodcastIcon,
  pointer_default as Pointer,
  pointer_default as PointerIcon,
  pointer_off_default as PointerOff,
  pointer_off_default as PointerOffIcon,
  popcorn_default as Popcorn,
  popcorn_default as PopcornIcon,
  popsicle_default as Popsicle,
  popsicle_default as PopsicleIcon,
  pound_sterling_default as PoundSterling,
  pound_sterling_default as PoundSterlingIcon,
  power_default as Power,
  circle_power_default as PowerCircle,
  circle_power_default as PowerCircleIcon,
  power_default as PowerIcon,
  power_off_default as PowerOff,
  power_off_default as PowerOffIcon,
  square_power_default as PowerSquare,
  square_power_default as PowerSquareIcon,
  presentation_default as Presentation,
  presentation_default as PresentationIcon,
  printer_default as Printer,
  printer_check_default as PrinterCheck,
  printer_check_default as PrinterCheckIcon,
  printer_default as PrinterIcon,
  projector_default as Projector,
  projector_default as ProjectorIcon,
  proportions_default as Proportions,
  proportions_default as ProportionsIcon,
  puzzle_default as Puzzle,
  puzzle_default as PuzzleIcon,
  pyramid_default as Pyramid,
  pyramid_default as PyramidIcon,
  qr_code_default as QrCode,
  qr_code_default as QrCodeIcon,
  quote_default as Quote,
  quote_default as QuoteIcon,
  rabbit_default as Rabbit,
  rabbit_default as RabbitIcon,
  radar_default as Radar,
  radar_default as RadarIcon,
  radiation_default as Radiation,
  radiation_default as RadiationIcon,
  radical_default as Radical,
  radical_default as RadicalIcon,
  radio_default as Radio,
  radio_default as RadioIcon,
  radio_receiver_default as RadioReceiver,
  radio_receiver_default as RadioReceiverIcon,
  radio_tower_default as RadioTower,
  radio_tower_default as RadioTowerIcon,
  radius_default as Radius,
  radius_default as RadiusIcon,
  rail_symbol_default as RailSymbol,
  rail_symbol_default as RailSymbolIcon,
  rainbow_default as Rainbow,
  rainbow_default as RainbowIcon,
  rat_default as Rat,
  rat_default as RatIcon,
  ratio_default as Ratio,
  ratio_default as RatioIcon,
  receipt_default as Receipt,
  receipt_cent_default as ReceiptCent,
  receipt_cent_default as ReceiptCentIcon,
  receipt_euro_default as ReceiptEuro,
  receipt_euro_default as ReceiptEuroIcon,
  receipt_default as ReceiptIcon,
  receipt_indian_rupee_default as ReceiptIndianRupee,
  receipt_indian_rupee_default as ReceiptIndianRupeeIcon,
  receipt_japanese_yen_default as ReceiptJapaneseYen,
  receipt_japanese_yen_default as ReceiptJapaneseYenIcon,
  receipt_pound_sterling_default as ReceiptPoundSterling,
  receipt_pound_sterling_default as ReceiptPoundSterlingIcon,
  receipt_russian_ruble_default as ReceiptRussianRuble,
  receipt_russian_ruble_default as ReceiptRussianRubleIcon,
  receipt_swiss_franc_default as ReceiptSwissFranc,
  receipt_swiss_franc_default as ReceiptSwissFrancIcon,
  receipt_text_default as ReceiptText,
  receipt_text_default as ReceiptTextIcon,
  receipt_turkish_lira_default as ReceiptTurkishLira,
  receipt_turkish_lira_default as ReceiptTurkishLiraIcon,
  rectangle_circle_default as RectangleCircle,
  rectangle_circle_default as RectangleCircleIcon,
  rectangle_ellipsis_default as RectangleEllipsis,
  rectangle_ellipsis_default as RectangleEllipsisIcon,
  rectangle_goggles_default as RectangleGoggles,
  rectangle_goggles_default as RectangleGogglesIcon,
  rectangle_horizontal_default as RectangleHorizontal,
  rectangle_horizontal_default as RectangleHorizontalIcon,
  rectangle_vertical_default as RectangleVertical,
  rectangle_vertical_default as RectangleVerticalIcon,
  recycle_default as Recycle,
  recycle_default as RecycleIcon,
  redo_default as Redo,
  redo_2_default as Redo2,
  redo_2_default as Redo2Icon,
  redo_dot_default as RedoDot,
  redo_dot_default as RedoDotIcon,
  redo_default as RedoIcon,
  refresh_ccw_default as RefreshCcw,
  refresh_ccw_dot_default as RefreshCcwDot,
  refresh_ccw_dot_default as RefreshCcwDotIcon,
  refresh_ccw_default as RefreshCcwIcon,
  refresh_cw_default as RefreshCw,
  refresh_cw_default as RefreshCwIcon,
  refresh_cw_off_default as RefreshCwOff,
  refresh_cw_off_default as RefreshCwOffIcon,
  refrigerator_default as Refrigerator,
  refrigerator_default as RefrigeratorIcon,
  regex_default as Regex,
  regex_default as RegexIcon,
  remove_formatting_default as RemoveFormatting,
  remove_formatting_default as RemoveFormattingIcon,
  repeat_default as Repeat,
  repeat_1_default as Repeat1,
  repeat_1_default as Repeat1Icon,
  repeat_2_default as Repeat2,
  repeat_2_default as Repeat2Icon,
  repeat_default as RepeatIcon,
  replace_default as Replace,
  replace_all_default as ReplaceAll,
  replace_all_default as ReplaceAllIcon,
  replace_default as ReplaceIcon,
  reply_default as Reply,
  reply_all_default as ReplyAll,
  reply_all_default as ReplyAllIcon,
  reply_default as ReplyIcon,
  rewind_default as Rewind,
  rewind_default as RewindIcon,
  ribbon_default as Ribbon,
  ribbon_default as RibbonIcon,
  rocket_default as Rocket,
  rocket_default as RocketIcon,
  rocking_chair_default as RockingChair,
  rocking_chair_default as RockingChairIcon,
  roller_coaster_default as RollerCoaster,
  roller_coaster_default as RollerCoasterIcon,
  rotate_3d_default as Rotate3D,
  rotate_3d_default as Rotate3DIcon,
  rotate_3d_default as Rotate3d,
  rotate_3d_default as Rotate3dIcon,
  rotate_ccw_default as RotateCcw,
  rotate_ccw_default as RotateCcwIcon,
  rotate_ccw_key_default as RotateCcwKey,
  rotate_ccw_key_default as RotateCcwKeyIcon,
  rotate_ccw_square_default as RotateCcwSquare,
  rotate_ccw_square_default as RotateCcwSquareIcon,
  rotate_cw_default as RotateCw,
  rotate_cw_default as RotateCwIcon,
  rotate_cw_square_default as RotateCwSquare,
  rotate_cw_square_default as RotateCwSquareIcon,
  route_default as Route,
  route_default as RouteIcon,
  route_off_default as RouteOff,
  route_off_default as RouteOffIcon,
  router_default as Router,
  router_default as RouterIcon,
  rows_2_default as Rows,
  rows_2_default as Rows2,
  rows_2_default as Rows2Icon,
  rows_3_default as Rows3,
  rows_3_default as Rows3Icon,
  rows_4_default as Rows4,
  rows_4_default as Rows4Icon,
  rows_2_default as RowsIcon,
  rss_default as Rss,
  rss_default as RssIcon,
  ruler_default as Ruler,
  ruler_dimension_line_default as RulerDimensionLine,
  ruler_dimension_line_default as RulerDimensionLineIcon,
  ruler_default as RulerIcon,
  russian_ruble_default as RussianRuble,
  russian_ruble_default as RussianRubleIcon,
  sailboat_default as Sailboat,
  sailboat_default as SailboatIcon,
  salad_default as Salad,
  salad_default as SaladIcon,
  sandwich_default as Sandwich,
  sandwich_default as SandwichIcon,
  satellite_default as Satellite,
  satellite_dish_default as SatelliteDish,
  satellite_dish_default as SatelliteDishIcon,
  satellite_default as SatelliteIcon,
  saudi_riyal_default as SaudiRiyal,
  saudi_riyal_default as SaudiRiyalIcon,
  save_default as Save,
  save_all_default as SaveAll,
  save_all_default as SaveAllIcon,
  save_default as SaveIcon,
  save_off_default as SaveOff,
  save_off_default as SaveOffIcon,
  scale_default as Scale,
  scale_3d_default as Scale3D,
  scale_3d_default as Scale3DIcon,
  scale_3d_default as Scale3d,
  scale_3d_default as Scale3dIcon,
  scale_default as ScaleIcon,
  scaling_default as Scaling,
  scaling_default as ScalingIcon,
  scan_default as Scan,
  scan_barcode_default as ScanBarcode,
  scan_barcode_default as ScanBarcodeIcon,
  scan_eye_default as ScanEye,
  scan_eye_default as ScanEyeIcon,
  scan_face_default as ScanFace,
  scan_face_default as ScanFaceIcon,
  scan_heart_default as ScanHeart,
  scan_heart_default as ScanHeartIcon,
  scan_default as ScanIcon,
  scan_line_default as ScanLine,
  scan_line_default as ScanLineIcon,
  scan_qr_code_default as ScanQrCode,
  scan_qr_code_default as ScanQrCodeIcon,
  scan_search_default as ScanSearch,
  scan_search_default as ScanSearchIcon,
  scan_text_default as ScanText,
  scan_text_default as ScanTextIcon,
  chart_scatter_default as ScatterChart,
  chart_scatter_default as ScatterChartIcon,
  school_default as School,
  university_default as School2,
  university_default as School2Icon,
  school_default as SchoolIcon,
  scissors_default as Scissors,
  scissors_default as ScissorsIcon,
  scissors_line_dashed_default as ScissorsLineDashed,
  scissors_line_dashed_default as ScissorsLineDashedIcon,
  square_scissors_default as ScissorsSquare,
  square_bottom_dashed_scissors_default as ScissorsSquareDashedBottom,
  square_bottom_dashed_scissors_default as ScissorsSquareDashedBottomIcon,
  square_scissors_default as ScissorsSquareIcon,
  screen_share_default as ScreenShare,
  screen_share_default as ScreenShareIcon,
  screen_share_off_default as ScreenShareOff,
  screen_share_off_default as ScreenShareOffIcon,
  scroll_default as Scroll,
  scroll_default as ScrollIcon,
  scroll_text_default as ScrollText,
  scroll_text_default as ScrollTextIcon,
  search_default as Search,
  search_check_default as SearchCheck,
  search_check_default as SearchCheckIcon,
  search_code_default as SearchCode,
  search_code_default as SearchCodeIcon,
  search_default as SearchIcon,
  search_slash_default as SearchSlash,
  search_slash_default as SearchSlashIcon,
  search_x_default as SearchX,
  search_x_default as SearchXIcon,
  section_default as Section,
  section_default as SectionIcon,
  send_default as Send,
  send_horizontal_default as SendHorizonal,
  send_horizontal_default as SendHorizonalIcon,
  send_horizontal_default as SendHorizontal,
  send_horizontal_default as SendHorizontalIcon,
  send_default as SendIcon,
  send_to_back_default as SendToBack,
  send_to_back_default as SendToBackIcon,
  separator_horizontal_default as SeparatorHorizontal,
  separator_horizontal_default as SeparatorHorizontalIcon,
  separator_vertical_default as SeparatorVertical,
  separator_vertical_default as SeparatorVerticalIcon,
  server_default as Server,
  server_cog_default as ServerCog,
  server_cog_default as ServerCogIcon,
  server_crash_default as ServerCrash,
  server_crash_default as ServerCrashIcon,
  server_default as ServerIcon,
  server_off_default as ServerOff,
  server_off_default as ServerOffIcon,
  settings_default as Settings,
  settings_2_default as Settings2,
  settings_2_default as Settings2Icon,
  settings_default as SettingsIcon,
  shapes_default as Shapes,
  shapes_default as ShapesIcon,
  share_default as Share,
  share_2_default as Share2,
  share_2_default as Share2Icon,
  share_default as ShareIcon,
  sheet_default as Sheet,
  sheet_default as SheetIcon,
  shell_default as Shell,
  shell_default as ShellIcon,
  shield_default as Shield,
  shield_alert_default as ShieldAlert,
  shield_alert_default as ShieldAlertIcon,
  shield_ban_default as ShieldBan,
  shield_ban_default as ShieldBanIcon,
  shield_check_default as ShieldCheck,
  shield_check_default as ShieldCheckIcon,
  shield_x_default as ShieldClose,
  shield_x_default as ShieldCloseIcon,
  shield_ellipsis_default as ShieldEllipsis,
  shield_ellipsis_default as ShieldEllipsisIcon,
  shield_half_default as ShieldHalf,
  shield_half_default as ShieldHalfIcon,
  shield_default as ShieldIcon,
  shield_minus_default as ShieldMinus,
  shield_minus_default as ShieldMinusIcon,
  shield_off_default as ShieldOff,
  shield_off_default as ShieldOffIcon,
  shield_plus_default as ShieldPlus,
  shield_plus_default as ShieldPlusIcon,
  shield_question_mark_default as ShieldQuestion,
  shield_question_mark_default as ShieldQuestionIcon,
  shield_question_mark_default as ShieldQuestionMark,
  shield_question_mark_default as ShieldQuestionMarkIcon,
  shield_user_default as ShieldUser,
  shield_user_default as ShieldUserIcon,
  shield_x_default as ShieldX,
  shield_x_default as ShieldXIcon,
  ship_default as Ship,
  ship_default as ShipIcon,
  ship_wheel_default as ShipWheel,
  ship_wheel_default as ShipWheelIcon,
  shirt_default as Shirt,
  shirt_default as ShirtIcon,
  shopping_bag_default as ShoppingBag,
  shopping_bag_default as ShoppingBagIcon,
  shopping_basket_default as ShoppingBasket,
  shopping_basket_default as ShoppingBasketIcon,
  shopping_cart_default as ShoppingCart,
  shopping_cart_default as ShoppingCartIcon,
  shovel_default as Shovel,
  shovel_default as ShovelIcon,
  shower_head_default as ShowerHead,
  shower_head_default as ShowerHeadIcon,
  shredder_default as Shredder,
  shredder_default as ShredderIcon,
  shrimp_default as Shrimp,
  shrimp_default as ShrimpIcon,
  shrink_default as Shrink,
  shrink_default as ShrinkIcon,
  shrub_default as Shrub,
  shrub_default as ShrubIcon,
  shuffle_default as Shuffle,
  shuffle_default as ShuffleIcon,
  panel_left_default as Sidebar,
  panel_left_close_default as SidebarClose,
  panel_left_close_default as SidebarCloseIcon,
  panel_left_default as SidebarIcon,
  panel_left_open_default as SidebarOpen,
  panel_left_open_default as SidebarOpenIcon,
  sigma_default as Sigma,
  sigma_default as SigmaIcon,
  square_sigma_default as SigmaSquare,
  square_sigma_default as SigmaSquareIcon,
  signal_default as Signal,
  signal_high_default as SignalHigh,
  signal_high_default as SignalHighIcon,
  signal_default as SignalIcon,
  signal_low_default as SignalLow,
  signal_low_default as SignalLowIcon,
  signal_medium_default as SignalMedium,
  signal_medium_default as SignalMediumIcon,
  signal_zero_default as SignalZero,
  signal_zero_default as SignalZeroIcon,
  signature_default as Signature,
  signature_default as SignatureIcon,
  signpost_default as Signpost,
  signpost_big_default as SignpostBig,
  signpost_big_default as SignpostBigIcon,
  signpost_default as SignpostIcon,
  siren_default as Siren,
  siren_default as SirenIcon,
  skip_back_default as SkipBack,
  skip_back_default as SkipBackIcon,
  skip_forward_default as SkipForward,
  skip_forward_default as SkipForwardIcon,
  skull_default as Skull,
  skull_default as SkullIcon,
  slack_default as Slack,
  slack_default as SlackIcon,
  slash_default as Slash,
  slash_default as SlashIcon,
  square_slash_default as SlashSquare,
  square_slash_default as SlashSquareIcon,
  slice_default as Slice,
  slice_default as SliceIcon,
  sliders_vertical_default as Sliders,
  sliders_horizontal_default as SlidersHorizontal,
  sliders_horizontal_default as SlidersHorizontalIcon,
  sliders_vertical_default as SlidersIcon,
  sliders_vertical_default as SlidersVertical,
  sliders_vertical_default as SlidersVerticalIcon,
  smartphone_default as Smartphone,
  smartphone_charging_default as SmartphoneCharging,
  smartphone_charging_default as SmartphoneChargingIcon,
  smartphone_default as SmartphoneIcon,
  smartphone_nfc_default as SmartphoneNfc,
  smartphone_nfc_default as SmartphoneNfcIcon,
  smile_default as Smile,
  smile_default as SmileIcon,
  smile_plus_default as SmilePlus,
  smile_plus_default as SmilePlusIcon,
  snail_default as Snail,
  snail_default as SnailIcon,
  snowflake_default as Snowflake,
  snowflake_default as SnowflakeIcon,
  soap_dispenser_droplet_default as SoapDispenserDroplet,
  soap_dispenser_droplet_default as SoapDispenserDropletIcon,
  sofa_default as Sofa,
  sofa_default as SofaIcon,
  arrow_up_narrow_wide_default as SortAsc,
  arrow_up_narrow_wide_default as SortAscIcon,
  arrow_down_wide_narrow_default as SortDesc,
  arrow_down_wide_narrow_default as SortDescIcon,
  soup_default as Soup,
  soup_default as SoupIcon,
  space_default as Space,
  space_default as SpaceIcon,
  spade_default as Spade,
  spade_default as SpadeIcon,
  sparkle_default as Sparkle,
  sparkle_default as SparkleIcon,
  sparkles_default as Sparkles,
  sparkles_default as SparklesIcon,
  speaker_default as Speaker,
  speaker_default as SpeakerIcon,
  speech_default as Speech,
  speech_default as SpeechIcon,
  spell_check_default as SpellCheck,
  spell_check_2_default as SpellCheck2,
  spell_check_2_default as SpellCheck2Icon,
  spell_check_default as SpellCheckIcon,
  spline_default as Spline,
  spline_default as SplineIcon,
  spline_pointer_default as SplinePointer,
  spline_pointer_default as SplinePointerIcon,
  split_default as Split,
  split_default as SplitIcon,
  square_split_horizontal_default as SplitSquareHorizontal,
  square_split_horizontal_default as SplitSquareHorizontalIcon,
  square_split_vertical_default as SplitSquareVertical,
  square_split_vertical_default as SplitSquareVerticalIcon,
  spool_default as Spool,
  spool_default as SpoolIcon,
  spotlight_default as Spotlight,
  spotlight_default as SpotlightIcon,
  spray_can_default as SprayCan,
  spray_can_default as SprayCanIcon,
  sprout_default as Sprout,
  sprout_default as SproutIcon,
  square_default as Square,
  square_activity_default as SquareActivity,
  square_activity_default as SquareActivityIcon,
  square_arrow_down_default as SquareArrowDown,
  square_arrow_down_default as SquareArrowDownIcon,
  square_arrow_down_left_default as SquareArrowDownLeft,
  square_arrow_down_left_default as SquareArrowDownLeftIcon,
  square_arrow_down_right_default as SquareArrowDownRight,
  square_arrow_down_right_default as SquareArrowDownRightIcon,
  square_arrow_left_default as SquareArrowLeft,
  square_arrow_left_default as SquareArrowLeftIcon,
  square_arrow_out_down_left_default as SquareArrowOutDownLeft,
  square_arrow_out_down_left_default as SquareArrowOutDownLeftIcon,
  square_arrow_out_down_right_default as SquareArrowOutDownRight,
  square_arrow_out_down_right_default as SquareArrowOutDownRightIcon,
  square_arrow_out_up_left_default as SquareArrowOutUpLeft,
  square_arrow_out_up_left_default as SquareArrowOutUpLeftIcon,
  square_arrow_out_up_right_default as SquareArrowOutUpRight,
  square_arrow_out_up_right_default as SquareArrowOutUpRightIcon,
  square_arrow_right_default as SquareArrowRight,
  square_arrow_right_default as SquareArrowRightIcon,
  square_arrow_up_default as SquareArrowUp,
  square_arrow_up_default as SquareArrowUpIcon,
  square_arrow_up_left_default as SquareArrowUpLeft,
  square_arrow_up_left_default as SquareArrowUpLeftIcon,
  square_arrow_up_right_default as SquareArrowUpRight,
  square_arrow_up_right_default as SquareArrowUpRightIcon,
  square_asterisk_default as SquareAsterisk,
  square_asterisk_default as SquareAsteriskIcon,
  square_bottom_dashed_scissors_default as SquareBottomDashedScissors,
  square_bottom_dashed_scissors_default as SquareBottomDashedScissorsIcon,
  square_chart_gantt_default as SquareChartGantt,
  square_chart_gantt_default as SquareChartGanttIcon,
  square_check_default as SquareCheck,
  square_check_big_default as SquareCheckBig,
  square_check_big_default as SquareCheckBigIcon,
  square_check_default as SquareCheckIcon,
  square_chevron_down_default as SquareChevronDown,
  square_chevron_down_default as SquareChevronDownIcon,
  square_chevron_left_default as SquareChevronLeft,
  square_chevron_left_default as SquareChevronLeftIcon,
  square_chevron_right_default as SquareChevronRight,
  square_chevron_right_default as SquareChevronRightIcon,
  square_chevron_up_default as SquareChevronUp,
  square_chevron_up_default as SquareChevronUpIcon,
  square_code_default as SquareCode,
  square_code_default as SquareCodeIcon,
  square_dashed_default as SquareDashed,
  square_dashed_bottom_default as SquareDashedBottom,
  square_dashed_bottom_code_default as SquareDashedBottomCode,
  square_dashed_bottom_code_default as SquareDashedBottomCodeIcon,
  square_dashed_bottom_default as SquareDashedBottomIcon,
  square_dashed_default as SquareDashedIcon,
  square_dashed_kanban_default as SquareDashedKanban,
  square_dashed_kanban_default as SquareDashedKanbanIcon,
  square_dashed_mouse_pointer_default as SquareDashedMousePointer,
  square_dashed_mouse_pointer_default as SquareDashedMousePointerIcon,
  square_dashed_top_solid_default as SquareDashedTopSolid,
  square_dashed_top_solid_default as SquareDashedTopSolidIcon,
  square_divide_default as SquareDivide,
  square_divide_default as SquareDivideIcon,
  square_dot_default as SquareDot,
  square_dot_default as SquareDotIcon,
  square_equal_default as SquareEqual,
  square_equal_default as SquareEqualIcon,
  square_function_default as SquareFunction,
  square_function_default as SquareFunctionIcon,
  square_chart_gantt_default as SquareGanttChart,
  square_chart_gantt_default as SquareGanttChartIcon,
  square_default as SquareIcon,
  square_kanban_default as SquareKanban,
  square_kanban_default as SquareKanbanIcon,
  square_library_default as SquareLibrary,
  square_library_default as SquareLibraryIcon,
  square_m_default as SquareM,
  square_m_default as SquareMIcon,
  square_menu_default as SquareMenu,
  square_menu_default as SquareMenuIcon,
  square_minus_default as SquareMinus,
  square_minus_default as SquareMinusIcon,
  square_mouse_pointer_default as SquareMousePointer,
  square_mouse_pointer_default as SquareMousePointerIcon,
  square_parking_default as SquareParking,
  square_parking_default as SquareParkingIcon,
  square_parking_off_default as SquareParkingOff,
  square_parking_off_default as SquareParkingOffIcon,
  square_pause_default as SquarePause,
  square_pause_default as SquarePauseIcon,
  square_pen_default as SquarePen,
  square_pen_default as SquarePenIcon,
  square_percent_default as SquarePercent,
  square_percent_default as SquarePercentIcon,
  square_pi_default as SquarePi,
  square_pi_default as SquarePiIcon,
  square_pilcrow_default as SquarePilcrow,
  square_pilcrow_default as SquarePilcrowIcon,
  square_play_default as SquarePlay,
  square_play_default as SquarePlayIcon,
  square_plus_default as SquarePlus,
  square_plus_default as SquarePlusIcon,
  square_power_default as SquarePower,
  square_power_default as SquarePowerIcon,
  square_radical_default as SquareRadical,
  square_radical_default as SquareRadicalIcon,
  square_round_corner_default as SquareRoundCorner,
  square_round_corner_default as SquareRoundCornerIcon,
  square_scissors_default as SquareScissors,
  square_scissors_default as SquareScissorsIcon,
  square_sigma_default as SquareSigma,
  square_sigma_default as SquareSigmaIcon,
  square_slash_default as SquareSlash,
  square_slash_default as SquareSlashIcon,
  square_split_horizontal_default as SquareSplitHorizontal,
  square_split_horizontal_default as SquareSplitHorizontalIcon,
  square_split_vertical_default as SquareSplitVertical,
  square_split_vertical_default as SquareSplitVerticalIcon,
  square_square_default as SquareSquare,
  square_square_default as SquareSquareIcon,
  square_stack_default as SquareStack,
  square_stack_default as SquareStackIcon,
  square_stop_default as SquareStop,
  square_stop_default as SquareStopIcon,
  square_terminal_default as SquareTerminal,
  square_terminal_default as SquareTerminalIcon,
  square_user_default as SquareUser,
  square_user_default as SquareUserIcon,
  square_user_round_default as SquareUserRound,
  square_user_round_default as SquareUserRoundIcon,
  square_x_default as SquareX,
  square_x_default as SquareXIcon,
  squares_exclude_default as SquaresExclude,
  squares_exclude_default as SquaresExcludeIcon,
  squares_intersect_default as SquaresIntersect,
  squares_intersect_default as SquaresIntersectIcon,
  squares_subtract_default as SquaresSubtract,
  squares_subtract_default as SquaresSubtractIcon,
  squares_unite_default as SquaresUnite,
  squares_unite_default as SquaresUniteIcon,
  squircle_default as Squircle,
  squircle_dashed_default as SquircleDashed,
  squircle_dashed_default as SquircleDashedIcon,
  squircle_default as SquircleIcon,
  squirrel_default as Squirrel,
  squirrel_default as SquirrelIcon,
  stamp_default as Stamp,
  stamp_default as StampIcon,
  star_default as Star,
  star_half_default as StarHalf,
  star_half_default as StarHalfIcon,
  star_default as StarIcon,
  star_off_default as StarOff,
  star_off_default as StarOffIcon,
  sparkles_default as Stars,
  sparkles_default as StarsIcon,
  step_back_default as StepBack,
  step_back_default as StepBackIcon,
  step_forward_default as StepForward,
  step_forward_default as StepForwardIcon,
  stethoscope_default as Stethoscope,
  stethoscope_default as StethoscopeIcon,
  sticker_default as Sticker,
  sticker_default as StickerIcon,
  sticky_note_default as StickyNote,
  sticky_note_default as StickyNoteIcon,
  circle_stop_default as StopCircle,
  circle_stop_default as StopCircleIcon,
  store_default as Store,
  store_default as StoreIcon,
  stretch_horizontal_default as StretchHorizontal,
  stretch_horizontal_default as StretchHorizontalIcon,
  stretch_vertical_default as StretchVertical,
  stretch_vertical_default as StretchVerticalIcon,
  strikethrough_default as Strikethrough,
  strikethrough_default as StrikethroughIcon,
  subscript_default as Subscript,
  subscript_default as SubscriptIcon,
  captions_default as Subtitles,
  captions_default as SubtitlesIcon,
  sun_default as Sun,
  sun_dim_default as SunDim,
  sun_dim_default as SunDimIcon,
  sun_default as SunIcon,
  sun_medium_default as SunMedium,
  sun_medium_default as SunMediumIcon,
  sun_moon_default as SunMoon,
  sun_moon_default as SunMoonIcon,
  sun_snow_default as SunSnow,
  sun_snow_default as SunSnowIcon,
  sunrise_default as Sunrise,
  sunrise_default as SunriseIcon,
  sunset_default as Sunset,
  sunset_default as SunsetIcon,
  superscript_default as Superscript,
  superscript_default as SuperscriptIcon,
  swatch_book_default as SwatchBook,
  swatch_book_default as SwatchBookIcon,
  swiss_franc_default as SwissFranc,
  swiss_franc_default as SwissFrancIcon,
  switch_camera_default as SwitchCamera,
  switch_camera_default as SwitchCameraIcon,
  sword_default as Sword,
  sword_default as SwordIcon,
  swords_default as Swords,
  swords_default as SwordsIcon,
  syringe_default as Syringe,
  syringe_default as SyringeIcon,
  table_default as Table,
  table_2_default as Table2,
  table_2_default as Table2Icon,
  table_cells_merge_default as TableCellsMerge,
  table_cells_merge_default as TableCellsMergeIcon,
  table_cells_split_default as TableCellsSplit,
  table_cells_split_default as TableCellsSplitIcon,
  table_columns_split_default as TableColumnsSplit,
  table_columns_split_default as TableColumnsSplitIcon,
  columns_3_cog_default as TableConfig,
  columns_3_cog_default as TableConfigIcon,
  table_default as TableIcon,
  table_of_contents_default as TableOfContents,
  table_of_contents_default as TableOfContentsIcon,
  table_properties_default as TableProperties,
  table_properties_default as TablePropertiesIcon,
  table_rows_split_default as TableRowsSplit,
  table_rows_split_default as TableRowsSplitIcon,
  tablet_default as Tablet,
  tablet_default as TabletIcon,
  tablet_smartphone_default as TabletSmartphone,
  tablet_smartphone_default as TabletSmartphoneIcon,
  tablets_default as Tablets,
  tablets_default as TabletsIcon,
  tag_default as Tag,
  tag_default as TagIcon,
  tags_default as Tags,
  tags_default as TagsIcon,
  tally_1_default as Tally1,
  tally_1_default as Tally1Icon,
  tally_2_default as Tally2,
  tally_2_default as Tally2Icon,
  tally_3_default as Tally3,
  tally_3_default as Tally3Icon,
  tally_4_default as Tally4,
  tally_4_default as Tally4Icon,
  tally_5_default as Tally5,
  tally_5_default as Tally5Icon,
  tangent_default as Tangent,
  tangent_default as TangentIcon,
  target_default as Target,
  target_default as TargetIcon,
  telescope_default as Telescope,
  telescope_default as TelescopeIcon,
  tent_default as Tent,
  tent_default as TentIcon,
  tent_tree_default as TentTree,
  tent_tree_default as TentTreeIcon,
  terminal_default as Terminal,
  terminal_default as TerminalIcon,
  square_terminal_default as TerminalSquare,
  square_terminal_default as TerminalSquareIcon,
  test_tube_default as TestTube,
  test_tube_diagonal_default as TestTube2,
  test_tube_diagonal_default as TestTube2Icon,
  test_tube_diagonal_default as TestTubeDiagonal,
  test_tube_diagonal_default as TestTubeDiagonalIcon,
  test_tube_default as TestTubeIcon,
  test_tubes_default as TestTubes,
  test_tubes_default as TestTubesIcon,
  text_default as Text,
  text_cursor_default as TextCursor,
  text_cursor_default as TextCursorIcon,
  text_cursor_input_default as TextCursorInput,
  text_cursor_input_default as TextCursorInputIcon,
  text_default as TextIcon,
  text_quote_default as TextQuote,
  text_quote_default as TextQuoteIcon,
  text_search_default as TextSearch,
  text_search_default as TextSearchIcon,
  text_select_default as TextSelect,
  text_select_default as TextSelectIcon,
  text_select_default as TextSelection,
  text_select_default as TextSelectionIcon,
  theater_default as Theater,
  theater_default as TheaterIcon,
  thermometer_default as Thermometer,
  thermometer_default as ThermometerIcon,
  thermometer_snowflake_default as ThermometerSnowflake,
  thermometer_snowflake_default as ThermometerSnowflakeIcon,
  thermometer_sun_default as ThermometerSun,
  thermometer_sun_default as ThermometerSunIcon,
  thumbs_down_default as ThumbsDown,
  thumbs_down_default as ThumbsDownIcon,
  thumbs_up_default as ThumbsUp,
  thumbs_up_default as ThumbsUpIcon,
  ticket_default as Ticket,
  ticket_check_default as TicketCheck,
  ticket_check_default as TicketCheckIcon,
  ticket_default as TicketIcon,
  ticket_minus_default as TicketMinus,
  ticket_minus_default as TicketMinusIcon,
  ticket_percent_default as TicketPercent,
  ticket_percent_default as TicketPercentIcon,
  ticket_plus_default as TicketPlus,
  ticket_plus_default as TicketPlusIcon,
  ticket_slash_default as TicketSlash,
  ticket_slash_default as TicketSlashIcon,
  ticket_x_default as TicketX,
  ticket_x_default as TicketXIcon,
  tickets_default as Tickets,
  tickets_default as TicketsIcon,
  tickets_plane_default as TicketsPlane,
  tickets_plane_default as TicketsPlaneIcon,
  timer_default as Timer,
  timer_default as TimerIcon,
  timer_off_default as TimerOff,
  timer_off_default as TimerOffIcon,
  timer_reset_default as TimerReset,
  timer_reset_default as TimerResetIcon,
  toggle_left_default as ToggleLeft,
  toggle_left_default as ToggleLeftIcon,
  toggle_right_default as ToggleRight,
  toggle_right_default as ToggleRightIcon,
  toilet_default as Toilet,
  toilet_default as ToiletIcon,
  tool_case_default as ToolCase,
  tool_case_default as ToolCaseIcon,
  tornado_default as Tornado,
  tornado_default as TornadoIcon,
  torus_default as Torus,
  torus_default as TorusIcon,
  touchpad_default as Touchpad,
  touchpad_default as TouchpadIcon,
  touchpad_off_default as TouchpadOff,
  touchpad_off_default as TouchpadOffIcon,
  tower_control_default as TowerControl,
  tower_control_default as TowerControlIcon,
  toy_brick_default as ToyBrick,
  toy_brick_default as ToyBrickIcon,
  tractor_default as Tractor,
  tractor_default as TractorIcon,
  traffic_cone_default as TrafficCone,
  traffic_cone_default as TrafficConeIcon,
  tram_front_default as Train,
  train_front_default as TrainFront,
  train_front_default as TrainFrontIcon,
  train_front_tunnel_default as TrainFrontTunnel,
  train_front_tunnel_default as TrainFrontTunnelIcon,
  tram_front_default as TrainIcon,
  train_track_default as TrainTrack,
  train_track_default as TrainTrackIcon,
  tram_front_default as TramFront,
  tram_front_default as TramFrontIcon,
  transgender_default as Transgender,
  transgender_default as TransgenderIcon,
  trash_default as Trash,
  trash_2_default as Trash2,
  trash_2_default as Trash2Icon,
  trash_default as TrashIcon,
  tree_deciduous_default as TreeDeciduous,
  tree_deciduous_default as TreeDeciduousIcon,
  tree_palm_default as TreePalm,
  tree_palm_default as TreePalmIcon,
  tree_pine_default as TreePine,
  tree_pine_default as TreePineIcon,
  trees_default as Trees,
  trees_default as TreesIcon,
  trello_default as Trello,
  trello_default as TrelloIcon,
  trending_down_default as TrendingDown,
  trending_down_default as TrendingDownIcon,
  trending_up_default as TrendingUp,
  trending_up_down_default as TrendingUpDown,
  trending_up_down_default as TrendingUpDownIcon,
  trending_up_default as TrendingUpIcon,
  triangle_default as Triangle,
  triangle_alert_default as TriangleAlert,
  triangle_alert_default as TriangleAlertIcon,
  triangle_dashed_default as TriangleDashed,
  triangle_dashed_default as TriangleDashedIcon,
  triangle_default as TriangleIcon,
  triangle_right_default as TriangleRight,
  triangle_right_default as TriangleRightIcon,
  trophy_default as Trophy,
  trophy_default as TrophyIcon,
  truck_default as Truck,
  truck_electric_default as TruckElectric,
  truck_electric_default as TruckElectricIcon,
  truck_default as TruckIcon,
  turkish_lira_default as TurkishLira,
  turkish_lira_default as TurkishLiraIcon,
  turntable_default as Turntable,
  turntable_default as TurntableIcon,
  turtle_default as Turtle,
  turtle_default as TurtleIcon,
  tv_default as Tv,
  tv_minimal_default as Tv2,
  tv_minimal_default as Tv2Icon,
  tv_default as TvIcon,
  tv_minimal_default as TvMinimal,
  tv_minimal_default as TvMinimalIcon,
  tv_minimal_play_default as TvMinimalPlay,
  tv_minimal_play_default as TvMinimalPlayIcon,
  twitch_default as Twitch,
  twitch_default as TwitchIcon,
  twitter_default as Twitter,
  twitter_default as TwitterIcon,
  type_default as Type,
  type_default as TypeIcon,
  type_outline_default as TypeOutline,
  type_outline_default as TypeOutlineIcon,
  umbrella_default as Umbrella,
  umbrella_default as UmbrellaIcon,
  umbrella_off_default as UmbrellaOff,
  umbrella_off_default as UmbrellaOffIcon,
  underline_default as Underline,
  underline_default as UnderlineIcon,
  undo_default as Undo,
  undo_2_default as Undo2,
  undo_2_default as Undo2Icon,
  undo_dot_default as UndoDot,
  undo_dot_default as UndoDotIcon,
  undo_default as UndoIcon,
  unfold_horizontal_default as UnfoldHorizontal,
  unfold_horizontal_default as UnfoldHorizontalIcon,
  unfold_vertical_default as UnfoldVertical,
  unfold_vertical_default as UnfoldVerticalIcon,
  ungroup_default as Ungroup,
  ungroup_default as UngroupIcon,
  university_default as University,
  university_default as UniversityIcon,
  unlink_default as Unlink,
  unlink_2_default as Unlink2,
  unlink_2_default as Unlink2Icon,
  unlink_default as UnlinkIcon,
  lock_open_default as Unlock,
  lock_open_default as UnlockIcon,
  lock_keyhole_open_default as UnlockKeyhole,
  lock_keyhole_open_default as UnlockKeyholeIcon,
  unplug_default as Unplug,
  unplug_default as UnplugIcon,
  upload_default as Upload,
  cloud_upload_default as UploadCloud,
  cloud_upload_default as UploadCloudIcon,
  upload_default as UploadIcon,
  usb_default as Usb,
  usb_default as UsbIcon,
  user_default as User,
  user_round_default as User2,
  user_round_default as User2Icon,
  user_check_default as UserCheck,
  user_round_check_default as UserCheck2,
  user_round_check_default as UserCheck2Icon,
  user_check_default as UserCheckIcon,
  circle_user_default as UserCircle,
  circle_user_round_default as UserCircle2,
  circle_user_round_default as UserCircle2Icon,
  circle_user_default as UserCircleIcon,
  user_cog_default as UserCog,
  user_round_cog_default as UserCog2,
  user_round_cog_default as UserCog2Icon,
  user_cog_default as UserCogIcon,
  user_default as UserIcon,
  user_lock_default as UserLock,
  user_lock_default as UserLockIcon,
  user_minus_default as UserMinus,
  user_round_minus_default as UserMinus2,
  user_round_minus_default as UserMinus2Icon,
  user_minus_default as UserMinusIcon,
  user_pen_default as UserPen,
  user_pen_default as UserPenIcon,
  user_plus_default as UserPlus,
  user_round_plus_default as UserPlus2,
  user_round_plus_default as UserPlus2Icon,
  user_plus_default as UserPlusIcon,
  user_round_default as UserRound,
  user_round_check_default as UserRoundCheck,
  user_round_check_default as UserRoundCheckIcon,
  user_round_cog_default as UserRoundCog,
  user_round_cog_default as UserRoundCogIcon,
  user_round_default as UserRoundIcon,
  user_round_minus_default as UserRoundMinus,
  user_round_minus_default as UserRoundMinusIcon,
  user_round_pen_default as UserRoundPen,
  user_round_pen_default as UserRoundPenIcon,
  user_round_plus_default as UserRoundPlus,
  user_round_plus_default as UserRoundPlusIcon,
  user_round_search_default as UserRoundSearch,
  user_round_search_default as UserRoundSearchIcon,
  user_round_x_default as UserRoundX,
  user_round_x_default as UserRoundXIcon,
  user_search_default as UserSearch,
  user_search_default as UserSearchIcon,
  square_user_default as UserSquare,
  square_user_round_default as UserSquare2,
  square_user_round_default as UserSquare2Icon,
  square_user_default as UserSquareIcon,
  user_star_default as UserStar,
  user_star_default as UserStarIcon,
  user_x_default as UserX,
  user_round_x_default as UserX2,
  user_round_x_default as UserX2Icon,
  user_x_default as UserXIcon,
  users_default as Users,
  users_round_default as Users2,
  users_round_default as Users2Icon,
  users_default as UsersIcon,
  users_round_default as UsersRound,
  users_round_default as UsersRoundIcon,
  utensils_default as Utensils,
  utensils_crossed_default as UtensilsCrossed,
  utensils_crossed_default as UtensilsCrossedIcon,
  utensils_default as UtensilsIcon,
  utility_pole_default as UtilityPole,
  utility_pole_default as UtilityPoleIcon,
  variable_default as Variable,
  variable_default as VariableIcon,
  vault_default as Vault,
  vault_default as VaultIcon,
  vector_square_default as VectorSquare,
  vector_square_default as VectorSquareIcon,
  vegan_default as Vegan,
  vegan_default as VeganIcon,
  venetian_mask_default as VenetianMask,
  venetian_mask_default as VenetianMaskIcon,
  venus_default as Venus,
  venus_and_mars_default as VenusAndMars,
  venus_and_mars_default as VenusAndMarsIcon,
  venus_default as VenusIcon,
  badge_check_default as Verified,
  badge_check_default as VerifiedIcon,
  vibrate_default as Vibrate,
  vibrate_default as VibrateIcon,
  vibrate_off_default as VibrateOff,
  vibrate_off_default as VibrateOffIcon,
  video_default as Video,
  video_default as VideoIcon,
  video_off_default as VideoOff,
  video_off_default as VideoOffIcon,
  videotape_default as Videotape,
  videotape_default as VideotapeIcon,
  view_default as View,
  view_default as ViewIcon,
  voicemail_default as Voicemail,
  voicemail_default as VoicemailIcon,
  volleyball_default as Volleyball,
  volleyball_default as VolleyballIcon,
  volume_default as Volume,
  volume_1_default as Volume1,
  volume_1_default as Volume1Icon,
  volume_2_default as Volume2,
  volume_2_default as Volume2Icon,
  volume_default as VolumeIcon,
  volume_off_default as VolumeOff,
  volume_off_default as VolumeOffIcon,
  volume_x_default as VolumeX,
  volume_x_default as VolumeXIcon,
  vote_default as Vote,
  vote_default as VoteIcon,
  wallet_default as Wallet,
  wallet_minimal_default as Wallet2,
  wallet_minimal_default as Wallet2Icon,
  wallet_cards_default as WalletCards,
  wallet_cards_default as WalletCardsIcon,
  wallet_default as WalletIcon,
  wallet_minimal_default as WalletMinimal,
  wallet_minimal_default as WalletMinimalIcon,
  wallpaper_default as Wallpaper,
  wallpaper_default as WallpaperIcon,
  wand_default as Wand,
  wand_sparkles_default as Wand2,
  wand_sparkles_default as Wand2Icon,
  wand_default as WandIcon,
  wand_sparkles_default as WandSparkles,
  wand_sparkles_default as WandSparklesIcon,
  warehouse_default as Warehouse,
  warehouse_default as WarehouseIcon,
  washing_machine_default as WashingMachine,
  washing_machine_default as WashingMachineIcon,
  watch_default as Watch,
  watch_default as WatchIcon,
  waves_default as Waves,
  waves_default as WavesIcon,
  waves_ladder_default as WavesLadder,
  waves_ladder_default as WavesLadderIcon,
  waypoints_default as Waypoints,
  waypoints_default as WaypointsIcon,
  webcam_default as Webcam,
  webcam_default as WebcamIcon,
  webhook_default as Webhook,
  webhook_default as WebhookIcon,
  webhook_off_default as WebhookOff,
  webhook_off_default as WebhookOffIcon,
  weight_default as Weight,
  weight_default as WeightIcon,
  wheat_default as Wheat,
  wheat_default as WheatIcon,
  wheat_off_default as WheatOff,
  wheat_off_default as WheatOffIcon,
  whole_word_default as WholeWord,
  whole_word_default as WholeWordIcon,
  wifi_default as Wifi,
  wifi_cog_default as WifiCog,
  wifi_cog_default as WifiCogIcon,
  wifi_high_default as WifiHigh,
  wifi_high_default as WifiHighIcon,
  wifi_default as WifiIcon,
  wifi_low_default as WifiLow,
  wifi_low_default as WifiLowIcon,
  wifi_off_default as WifiOff,
  wifi_off_default as WifiOffIcon,
  wifi_pen_default as WifiPen,
  wifi_pen_default as WifiPenIcon,
  wifi_sync_default as WifiSync,
  wifi_sync_default as WifiSyncIcon,
  wifi_zero_default as WifiZero,
  wifi_zero_default as WifiZeroIcon,
  wind_default as Wind,
  wind_arrow_down_default as WindArrowDown,
  wind_arrow_down_default as WindArrowDownIcon,
  wind_default as WindIcon,
  wine_default as Wine,
  wine_default as WineIcon,
  wine_off_default as WineOff,
  wine_off_default as WineOffIcon,
  workflow_default as Workflow,
  workflow_default as WorkflowIcon,
  worm_default as Worm,
  worm_default as WormIcon,
  wrap_text_default as WrapText,
  wrap_text_default as WrapTextIcon,
  wrench_default as Wrench,
  wrench_default as WrenchIcon,
  x_default as X,
  circle_x_default as XCircle,
  circle_x_default as XCircleIcon,
  x_default as XIcon,
  octagon_x_default as XOctagon,
  octagon_x_default as XOctagonIcon,
  square_x_default as XSquare,
  square_x_default as XSquareIcon,
  youtube_default as Youtube,
  youtube_default as YoutubeIcon,
  zap_default as Zap,
  zap_default as ZapIcon,
  zap_off_default as ZapOff,
  zap_off_default as ZapOffIcon,
  zoom_in_default as ZoomIn,
  zoom_in_default as ZoomInIcon,
  zoom_out_default as ZoomOut,
  zoom_out_default as ZoomOutIcon,
  defaultAttributes_default as defaultAttributes,
  icons_exports as icons
};
/*! Bundled license information:

lucide-svelte/dist/defaultAttributes.js:
lucide-svelte/dist/icons/index.js:
lucide-svelte/dist/icons/alarm-check.js:
lucide-svelte/dist/icons/alarm-minus.js:
lucide-svelte/dist/icons/alarm-plus.js:
lucide-svelte/dist/icons/arrow-down-az.js:
lucide-svelte/dist/icons/arrow-down-za.js:
lucide-svelte/dist/icons/sort-desc.js:
lucide-svelte/dist/icons/arrow-up-az.js:
lucide-svelte/dist/icons/sort-asc.js:
lucide-svelte/dist/icons/arrow-up-za.js:
lucide-svelte/dist/icons/axis-3-d.js:
lucide-svelte/dist/icons/verified.js:
lucide-svelte/dist/icons/badge-help.js:
lucide-svelte/dist/icons/between-horizonal-end.js:
lucide-svelte/dist/icons/between-horizonal-start.js:
lucide-svelte/dist/icons/book-template.js:
lucide-svelte/dist/icons/curly-braces.js:
lucide-svelte/dist/icons/subtitles.js:
lucide-svelte/dist/icons/area-chart.js:
lucide-svelte/dist/icons/bar-chart-horizontal-big.js:
lucide-svelte/dist/icons/bar-chart-horizontal.js:
lucide-svelte/dist/icons/candlestick-chart.js:
lucide-svelte/dist/icons/bar-chart-big.js:
lucide-svelte/dist/icons/bar-chart-4.js:
lucide-svelte/dist/icons/bar-chart-3.js:
lucide-svelte/dist/icons/line-chart.js:
lucide-svelte/dist/icons/bar-chart.js:
lucide-svelte/dist/icons/bar-chart-2.js:
lucide-svelte/dist/icons/gantt-chart.js:
lucide-svelte/dist/icons/pie-chart.js:
lucide-svelte/dist/icons/scatter-chart.js:
lucide-svelte/dist/icons/alert-circle.js:
lucide-svelte/dist/icons/arrow-down-circle.js:
lucide-svelte/dist/icons/arrow-left-circle.js:
lucide-svelte/dist/icons/arrow-down-left-from-circle.js:
lucide-svelte/dist/icons/arrow-down-right-from-circle.js:
lucide-svelte/dist/icons/arrow-up-left-from-circle.js:
lucide-svelte/dist/icons/arrow-up-right-from-circle.js:
lucide-svelte/dist/icons/arrow-right-circle.js:
lucide-svelte/dist/icons/arrow-up-circle.js:
lucide-svelte/dist/icons/check-circle.js:
lucide-svelte/dist/icons/check-circle-2.js:
lucide-svelte/dist/icons/chevron-down-circle.js:
lucide-svelte/dist/icons/chevron-right-circle.js:
lucide-svelte/dist/icons/chevron-left-circle.js:
lucide-svelte/dist/icons/chevron-up-circle.js:
lucide-svelte/dist/icons/divide-circle.js:
lucide-svelte/dist/icons/gauge-circle.js:
lucide-svelte/dist/icons/minus-circle.js:
lucide-svelte/dist/icons/parking-circle-off.js:
lucide-svelte/dist/icons/parking-circle.js:
lucide-svelte/dist/icons/pause-circle.js:
lucide-svelte/dist/icons/play-circle.js:
lucide-svelte/dist/icons/percent-circle.js:
lucide-svelte/dist/icons/plus-circle.js:
lucide-svelte/dist/icons/power-circle.js:
lucide-svelte/dist/icons/help-circle.js:
lucide-svelte/dist/icons/circle-help.js:
lucide-svelte/dist/icons/circle-slashed.js:
lucide-svelte/dist/icons/stop-circle.js:
lucide-svelte/dist/icons/user-circle-2.js:
lucide-svelte/dist/icons/user-circle.js:
lucide-svelte/dist/icons/x-circle.js:
lucide-svelte/dist/icons/clipboard-signature.js:
lucide-svelte/dist/icons/clipboard-edit.js:
lucide-svelte/dist/icons/download-cloud.js:
lucide-svelte/dist/icons/upload-cloud.js:
lucide-svelte/dist/icons/code-2.js:
lucide-svelte/dist/icons/columns.js:
lucide-svelte/dist/icons/table-config.js:
lucide-svelte/dist/icons/columns-settings.js:
lucide-svelte/dist/icons/panels-left-right.js:
lucide-svelte/dist/icons/contact-2.js:
lucide-svelte/dist/icons/percent-diamond.js:
lucide-svelte/dist/icons/globe-2.js:
lucide-svelte/dist/icons/more-vertical.js:
lucide-svelte/dist/icons/more-horizontal.js:
lucide-svelte/dist/icons/file-axis-3-d.js:
lucide-svelte/dist/icons/file-bar-chart.js:
lucide-svelte/dist/icons/file-bar-chart-2.js:
lucide-svelte/dist/icons/file-line-chart.js:
lucide-svelte/dist/icons/file-pie-chart.js:
lucide-svelte/dist/icons/file-cog-2.js:
lucide-svelte/dist/icons/file-signature.js:
lucide-svelte/dist/icons/file-edit.js:
lucide-svelte/dist/icons/file-video.js:
lucide-svelte/dist/icons/file-question.js:
lucide-svelte/dist/icons/file-video-2.js:
lucide-svelte/dist/icons/folder-cog-2.js:
lucide-svelte/dist/icons/folder-edit.js:
lucide-svelte/dist/icons/filter-x.js:
lucide-svelte/dist/icons/filter.js:
lucide-svelte/dist/icons/git-commit.js:
lucide-svelte/dist/icons/grid-2-x-2-check.js:
lucide-svelte/dist/icons/grid-2-x-2-plus.js:
lucide-svelte/dist/icons/grid-2-x-2-x.js:
lucide-svelte/dist/icons/grid-2-x-2.js:
lucide-svelte/dist/icons/grid.js:
lucide-svelte/dist/icons/grid-3-x-3.js:
lucide-svelte/dist/icons/grab.js:
lucide-svelte/dist/icons/helping-hand.js:
lucide-svelte/dist/icons/home.js:
lucide-svelte/dist/icons/ice-cream-2.js:
lucide-svelte/dist/icons/ice-cream.js:
lucide-svelte/dist/icons/outdent.js:
lucide-svelte/dist/icons/indent.js:
lucide-svelte/dist/icons/laptop-2.js:
lucide-svelte/dist/icons/layers-3.js:
lucide-svelte/dist/icons/loader-2.js:
lucide-svelte/dist/icons/unlock-keyhole.js:
lucide-svelte/dist/icons/unlock.js:
lucide-svelte/dist/icons/mail-question.js:
lucide-svelte/dist/icons/location-edit.js:
lucide-svelte/dist/icons/message-circle-question.js:
lucide-svelte/dist/icons/mic-2.js:
lucide-svelte/dist/icons/move-3-d.js:
lucide-svelte/dist/icons/alert-octagon.js:
lucide-svelte/dist/icons/pause-octagon.js:
lucide-svelte/dist/icons/x-octagon.js:
lucide-svelte/dist/icons/paintbrush-2.js:
lucide-svelte/dist/icons/panel-bottom-inactive.js:
lucide-svelte/dist/icons/panel-left-inactive.js:
lucide-svelte/dist/icons/sidebar-close.js:
lucide-svelte/dist/icons/sidebar-open.js:
lucide-svelte/dist/icons/sidebar.js:
lucide-svelte/dist/icons/panel-right-inactive.js:
lucide-svelte/dist/icons/panel-top-inactive.js:
lucide-svelte/dist/icons/layout.js:
lucide-svelte/dist/icons/edit-3.js:
lucide-svelte/dist/icons/edit-2.js:
lucide-svelte/dist/icons/plug-zap-2.js:
lucide-svelte/dist/icons/form-input.js:
lucide-svelte/dist/icons/rotate-3-d.js:
lucide-svelte/dist/icons/rows.js:
lucide-svelte/dist/icons/panels-top-bottom.js:
lucide-svelte/dist/icons/scale-3-d.js:
lucide-svelte/dist/icons/send-horizonal.js:
lucide-svelte/dist/icons/shield-question.js:
lucide-svelte/dist/icons/shield-close.js:
lucide-svelte/dist/icons/sliders.js:
lucide-svelte/dist/icons/stars.js:
lucide-svelte/dist/icons/activity-square.js:
lucide-svelte/dist/icons/arrow-down-left-square.js:
lucide-svelte/dist/icons/arrow-down-right-square.js:
lucide-svelte/dist/icons/arrow-down-square.js:
lucide-svelte/dist/icons/arrow-left-square.js:
lucide-svelte/dist/icons/arrow-down-right-from-square.js:
lucide-svelte/dist/icons/arrow-up-left-from-square.js:
lucide-svelte/dist/icons/arrow-down-left-from-square.js:
lucide-svelte/dist/icons/arrow-up-right-from-square.js:
lucide-svelte/dist/icons/arrow-right-square.js:
lucide-svelte/dist/icons/arrow-up-left-square.js:
lucide-svelte/dist/icons/arrow-up-square.js:
lucide-svelte/dist/icons/arrow-up-right-square.js:
lucide-svelte/dist/icons/asterisk-square.js:
lucide-svelte/dist/icons/scissors-square-dashed-bottom.js:
lucide-svelte/dist/icons/gantt-chart-square.js:
lucide-svelte/dist/icons/square-gantt-chart.js:
lucide-svelte/dist/icons/check-square.js:
lucide-svelte/dist/icons/check-square-2.js:
lucide-svelte/dist/icons/chevron-down-square.js:
lucide-svelte/dist/icons/chevron-left-square.js:
lucide-svelte/dist/icons/chevron-right-square.js:
lucide-svelte/dist/icons/chevron-up-square.js:
lucide-svelte/dist/icons/code-square.js:
lucide-svelte/dist/icons/kanban-square-dashed.js:
lucide-svelte/dist/icons/mouse-pointer-square-dashed.js:
lucide-svelte/dist/icons/box-select.js:
lucide-svelte/dist/icons/divide-square.js:
lucide-svelte/dist/icons/dot-square.js:
lucide-svelte/dist/icons/equal-square.js:
lucide-svelte/dist/icons/function-square.js:
lucide-svelte/dist/icons/kanban-square.js:
lucide-svelte/dist/icons/library-square.js:
lucide-svelte/dist/icons/m-square.js:
lucide-svelte/dist/icons/menu-square.js:
lucide-svelte/dist/icons/minus-square.js:
lucide-svelte/dist/icons/inspect.js:
lucide-svelte/dist/icons/parking-square-off.js:
lucide-svelte/dist/icons/parking-square.js:
lucide-svelte/dist/icons/pen-box.js:
lucide-svelte/dist/icons/edit.js:
lucide-svelte/dist/icons/pen-square.js:
lucide-svelte/dist/icons/percent-square.js:
lucide-svelte/dist/icons/pi-square.js:
lucide-svelte/dist/icons/play-square.js:
lucide-svelte/dist/icons/pilcrow-square.js:
lucide-svelte/dist/icons/plus-square.js:
lucide-svelte/dist/icons/scissors-square.js:
lucide-svelte/dist/icons/power-square.js:
lucide-svelte/dist/icons/sigma-square.js:
lucide-svelte/dist/icons/slash-square.js:
lucide-svelte/dist/icons/split-square-horizontal.js:
lucide-svelte/dist/icons/split-square-vertical.js:
lucide-svelte/dist/icons/terminal-square.js:
lucide-svelte/dist/icons/user-square-2.js:
lucide-svelte/dist/icons/user-square.js:
lucide-svelte/dist/icons/x-square.js:
lucide-svelte/dist/icons/test-tube-2.js:
lucide-svelte/dist/icons/text-selection.js:
lucide-svelte/dist/icons/train.js:
lucide-svelte/dist/icons/palmtree.js:
lucide-svelte/dist/icons/alert-triangle.js:
lucide-svelte/dist/icons/tv-2.js:
lucide-svelte/dist/icons/school-2.js:
lucide-svelte/dist/icons/user-check-2.js:
lucide-svelte/dist/icons/user-cog-2.js:
lucide-svelte/dist/icons/user-minus-2.js:
lucide-svelte/dist/icons/user-plus-2.js:
lucide-svelte/dist/icons/user-x-2.js:
lucide-svelte/dist/icons/user-2.js:
lucide-svelte/dist/icons/users-2.js:
lucide-svelte/dist/icons/fork-knife-crossed.js:
lucide-svelte/dist/icons/fork-knife.js:
lucide-svelte/dist/icons/wallet-2.js:
lucide-svelte/dist/icons/wand-2.js:
lucide-svelte/dist/aliases/aliases.js:
lucide-svelte/dist/icons/a-arrow-down.js:
lucide-svelte/dist/icons/a-arrow-up.js:
lucide-svelte/dist/icons/a-large-small.js:
lucide-svelte/dist/icons/accessibility.js:
lucide-svelte/dist/icons/activity.js:
lucide-svelte/dist/icons/air-vent.js:
lucide-svelte/dist/icons/airplay.js:
lucide-svelte/dist/icons/alarm-clock-off.js:
lucide-svelte/dist/icons/alarm-clock.js:
lucide-svelte/dist/icons/alarm-smoke.js:
lucide-svelte/dist/icons/album.js:
lucide-svelte/dist/icons/align-center-horizontal.js:
lucide-svelte/dist/icons/align-center-vertical.js:
lucide-svelte/dist/icons/align-center.js:
lucide-svelte/dist/icons/align-end-horizontal.js:
lucide-svelte/dist/icons/align-end-vertical.js:
lucide-svelte/dist/icons/align-horizontal-distribute-center.js:
lucide-svelte/dist/icons/align-horizontal-distribute-end.js:
lucide-svelte/dist/icons/align-horizontal-distribute-start.js:
lucide-svelte/dist/icons/align-horizontal-justify-center.js:
lucide-svelte/dist/icons/align-horizontal-justify-end.js:
lucide-svelte/dist/icons/align-horizontal-justify-start.js:
lucide-svelte/dist/icons/align-horizontal-space-around.js:
lucide-svelte/dist/icons/align-horizontal-space-between.js:
lucide-svelte/dist/icons/align-justify.js:
lucide-svelte/dist/icons/align-left.js:
lucide-svelte/dist/icons/align-right.js:
lucide-svelte/dist/icons/align-start-horizontal.js:
lucide-svelte/dist/icons/align-start-vertical.js:
lucide-svelte/dist/icons/align-vertical-distribute-center.js:
lucide-svelte/dist/icons/align-vertical-distribute-end.js:
lucide-svelte/dist/icons/align-vertical-distribute-start.js:
lucide-svelte/dist/icons/align-vertical-justify-center.js:
lucide-svelte/dist/icons/align-vertical-justify-end.js:
lucide-svelte/dist/icons/align-vertical-justify-start.js:
lucide-svelte/dist/icons/align-vertical-space-around.js:
lucide-svelte/dist/icons/align-vertical-space-between.js:
lucide-svelte/dist/icons/ambulance.js:
lucide-svelte/dist/icons/ampersand.js:
lucide-svelte/dist/icons/ampersands.js:
lucide-svelte/dist/icons/amphora.js:
lucide-svelte/dist/icons/anchor.js:
lucide-svelte/dist/icons/angry.js:
lucide-svelte/dist/icons/annoyed.js:
lucide-svelte/dist/icons/antenna.js:
lucide-svelte/dist/icons/anvil.js:
lucide-svelte/dist/icons/aperture.js:
lucide-svelte/dist/icons/app-window-mac.js:
lucide-svelte/dist/icons/app-window.js:
lucide-svelte/dist/icons/apple.js:
lucide-svelte/dist/icons/archive-restore.js:
lucide-svelte/dist/icons/archive-x.js:
lucide-svelte/dist/icons/archive.js:
lucide-svelte/dist/icons/armchair.js:
lucide-svelte/dist/icons/arrow-big-down-dash.js:
lucide-svelte/dist/icons/arrow-big-down.js:
lucide-svelte/dist/icons/arrow-big-left-dash.js:
lucide-svelte/dist/icons/arrow-big-left.js:
lucide-svelte/dist/icons/arrow-big-right-dash.js:
lucide-svelte/dist/icons/arrow-big-right.js:
lucide-svelte/dist/icons/arrow-big-up-dash.js:
lucide-svelte/dist/icons/arrow-big-up.js:
lucide-svelte/dist/icons/arrow-down-from-line.js:
lucide-svelte/dist/icons/arrow-down-left.js:
lucide-svelte/dist/icons/arrow-down-narrow-wide.js:
lucide-svelte/dist/icons/arrow-down-to-dot.js:
lucide-svelte/dist/icons/arrow-down-right.js:
lucide-svelte/dist/icons/arrow-down-to-line.js:
lucide-svelte/dist/icons/arrow-down-up.js:
lucide-svelte/dist/icons/arrow-down.js:
lucide-svelte/dist/icons/arrow-left-from-line.js:
lucide-svelte/dist/icons/arrow-left-right.js:
lucide-svelte/dist/icons/arrow-left-to-line.js:
lucide-svelte/dist/icons/arrow-left.js:
lucide-svelte/dist/icons/arrow-right-from-line.js:
lucide-svelte/dist/icons/arrow-right-left.js:
lucide-svelte/dist/icons/arrow-right-to-line.js:
lucide-svelte/dist/icons/arrow-right.js:
lucide-svelte/dist/icons/arrow-up-down.js:
lucide-svelte/dist/icons/arrow-up-from-dot.js:
lucide-svelte/dist/icons/arrow-up-from-line.js:
lucide-svelte/dist/icons/arrow-up-left.js:
lucide-svelte/dist/icons/arrow-up-right.js:
lucide-svelte/dist/icons/arrow-up-to-line.js:
lucide-svelte/dist/icons/arrow-up-wide-narrow.js:
lucide-svelte/dist/icons/arrow-up.js:
lucide-svelte/dist/icons/arrows-up-from-line.js:
lucide-svelte/dist/icons/asterisk.js:
lucide-svelte/dist/icons/at-sign.js:
lucide-svelte/dist/icons/atom.js:
lucide-svelte/dist/icons/audio-waveform.js:
lucide-svelte/dist/icons/audio-lines.js:
lucide-svelte/dist/icons/award.js:
lucide-svelte/dist/icons/axe.js:
lucide-svelte/dist/icons/baby.js:
lucide-svelte/dist/icons/backpack.js:
lucide-svelte/dist/icons/badge-alert.js:
lucide-svelte/dist/icons/badge-cent.js:
lucide-svelte/dist/icons/badge-dollar-sign.js:
lucide-svelte/dist/icons/badge-euro.js:
lucide-svelte/dist/icons/badge-indian-rupee.js:
lucide-svelte/dist/icons/badge-info.js:
lucide-svelte/dist/icons/badge-japanese-yen.js:
lucide-svelte/dist/icons/badge-minus.js:
lucide-svelte/dist/icons/badge-percent.js:
lucide-svelte/dist/icons/badge-russian-ruble.js:
lucide-svelte/dist/icons/badge-pound-sterling.js:
lucide-svelte/dist/icons/badge-plus.js:
lucide-svelte/dist/icons/badge-swiss-franc.js:
lucide-svelte/dist/icons/badge-turkish-lira.js:
lucide-svelte/dist/icons/badge-x.js:
lucide-svelte/dist/icons/badge.js:
lucide-svelte/dist/icons/baggage-claim.js:
lucide-svelte/dist/icons/ban.js:
lucide-svelte/dist/icons/banana.js:
lucide-svelte/dist/icons/bandage.js:
lucide-svelte/dist/icons/banknote-arrow-up.js:
lucide-svelte/dist/icons/banknote-arrow-down.js:
lucide-svelte/dist/icons/banknote-x.js:
lucide-svelte/dist/icons/banknote.js:
lucide-svelte/dist/icons/barcode.js:
lucide-svelte/dist/icons/barrel.js:
lucide-svelte/dist/icons/baseline.js:
lucide-svelte/dist/icons/bath.js:
lucide-svelte/dist/icons/battery-charging.js:
lucide-svelte/dist/icons/battery-full.js:
lucide-svelte/dist/icons/battery-low.js:
lucide-svelte/dist/icons/battery-medium.js:
lucide-svelte/dist/icons/battery-plus.js:
lucide-svelte/dist/icons/battery-warning.js:
lucide-svelte/dist/icons/battery.js:
lucide-svelte/dist/icons/beaker.js:
lucide-svelte/dist/icons/bean-off.js:
lucide-svelte/dist/icons/bean.js:
lucide-svelte/dist/icons/bed-double.js:
lucide-svelte/dist/icons/bed-single.js:
lucide-svelte/dist/icons/bed.js:
lucide-svelte/dist/icons/beer-off.js:
lucide-svelte/dist/icons/beef.js:
lucide-svelte/dist/icons/beer.js:
lucide-svelte/dist/icons/bell-dot.js:
lucide-svelte/dist/icons/bell-electric.js:
lucide-svelte/dist/icons/bell-minus.js:
lucide-svelte/dist/icons/bell-off.js:
lucide-svelte/dist/icons/bell-plus.js:
lucide-svelte/dist/icons/bell-ring.js:
lucide-svelte/dist/icons/bell.js:
lucide-svelte/dist/icons/between-vertical-end.js:
lucide-svelte/dist/icons/between-vertical-start.js:
lucide-svelte/dist/icons/biceps-flexed.js:
lucide-svelte/dist/icons/bike.js:
lucide-svelte/dist/icons/binary.js:
lucide-svelte/dist/icons/biohazard.js:
lucide-svelte/dist/icons/binoculars.js:
lucide-svelte/dist/icons/bird.js:
lucide-svelte/dist/icons/bitcoin.js:
lucide-svelte/dist/icons/blend.js:
lucide-svelte/dist/icons/blinds.js:
lucide-svelte/dist/icons/blocks.js:
lucide-svelte/dist/icons/bluetooth-connected.js:
lucide-svelte/dist/icons/bluetooth-off.js:
lucide-svelte/dist/icons/bluetooth-searching.js:
lucide-svelte/dist/icons/bluetooth.js:
lucide-svelte/dist/icons/bold.js:
lucide-svelte/dist/icons/bolt.js:
lucide-svelte/dist/icons/bomb.js:
lucide-svelte/dist/icons/bone.js:
lucide-svelte/dist/icons/book-a.js:
lucide-svelte/dist/icons/book-alert.js:
lucide-svelte/dist/icons/book-audio.js:
lucide-svelte/dist/icons/book-check.js:
lucide-svelte/dist/icons/book-copy.js:
lucide-svelte/dist/icons/book-down.js:
lucide-svelte/dist/icons/book-headphones.js:
lucide-svelte/dist/icons/book-heart.js:
lucide-svelte/dist/icons/book-image.js:
lucide-svelte/dist/icons/book-key.js:
lucide-svelte/dist/icons/book-lock.js:
lucide-svelte/dist/icons/book-marked.js:
lucide-svelte/dist/icons/book-minus.js:
lucide-svelte/dist/icons/book-open-check.js:
lucide-svelte/dist/icons/book-open-text.js:
lucide-svelte/dist/icons/book-open.js:
lucide-svelte/dist/icons/book-plus.js:
lucide-svelte/dist/icons/book-text.js:
lucide-svelte/dist/icons/book-up-2.js:
lucide-svelte/dist/icons/book-type.js:
lucide-svelte/dist/icons/book-up.js:
lucide-svelte/dist/icons/book-user.js:
lucide-svelte/dist/icons/book-x.js:
lucide-svelte/dist/icons/book.js:
lucide-svelte/dist/icons/bookmark-check.js:
lucide-svelte/dist/icons/bookmark-minus.js:
lucide-svelte/dist/icons/bookmark-plus.js:
lucide-svelte/dist/icons/bookmark-x.js:
lucide-svelte/dist/icons/bookmark.js:
lucide-svelte/dist/icons/boom-box.js:
lucide-svelte/dist/icons/bot-message-square.js:
lucide-svelte/dist/icons/bot-off.js:
lucide-svelte/dist/icons/bot.js:
lucide-svelte/dist/icons/bottle-wine.js:
lucide-svelte/dist/icons/bow-arrow.js:
lucide-svelte/dist/icons/box.js:
lucide-svelte/dist/icons/boxes.js:
lucide-svelte/dist/icons/brackets.js:
lucide-svelte/dist/icons/brain-circuit.js:
lucide-svelte/dist/icons/brain-cog.js:
lucide-svelte/dist/icons/brain.js:
lucide-svelte/dist/icons/brick-wall-fire.js:
lucide-svelte/dist/icons/brick-wall.js:
lucide-svelte/dist/icons/briefcase-business.js:
lucide-svelte/dist/icons/briefcase-conveyor-belt.js:
lucide-svelte/dist/icons/briefcase-medical.js:
lucide-svelte/dist/icons/bring-to-front.js:
lucide-svelte/dist/icons/briefcase.js:
lucide-svelte/dist/icons/brush-cleaning.js:
lucide-svelte/dist/icons/brush.js:
lucide-svelte/dist/icons/bubbles.js:
lucide-svelte/dist/icons/bug-off.js:
lucide-svelte/dist/icons/bug-play.js:
lucide-svelte/dist/icons/bug.js:
lucide-svelte/dist/icons/building-2.js:
lucide-svelte/dist/icons/building.js:
lucide-svelte/dist/icons/bus-front.js:
lucide-svelte/dist/icons/bus.js:
lucide-svelte/dist/icons/cable-car.js:
lucide-svelte/dist/icons/cable.js:
lucide-svelte/dist/icons/cake-slice.js:
lucide-svelte/dist/icons/cake.js:
lucide-svelte/dist/icons/calculator.js:
lucide-svelte/dist/icons/calendar-1.js:
lucide-svelte/dist/icons/calendar-arrow-down.js:
lucide-svelte/dist/icons/calendar-arrow-up.js:
lucide-svelte/dist/icons/calendar-check-2.js:
lucide-svelte/dist/icons/calendar-check.js:
lucide-svelte/dist/icons/calendar-clock.js:
lucide-svelte/dist/icons/calendar-cog.js:
lucide-svelte/dist/icons/calendar-days.js:
lucide-svelte/dist/icons/calendar-fold.js:
lucide-svelte/dist/icons/calendar-heart.js:
lucide-svelte/dist/icons/calendar-minus.js:
lucide-svelte/dist/icons/calendar-off.js:
lucide-svelte/dist/icons/calendar-minus-2.js:
lucide-svelte/dist/icons/calendar-plus-2.js:
lucide-svelte/dist/icons/calendar-plus.js:
lucide-svelte/dist/icons/calendar-range.js:
lucide-svelte/dist/icons/calendar-search.js:
lucide-svelte/dist/icons/calendar-sync.js:
lucide-svelte/dist/icons/calendar-x-2.js:
lucide-svelte/dist/icons/calendar-x.js:
lucide-svelte/dist/icons/calendar.js:
lucide-svelte/dist/icons/camera-off.js:
lucide-svelte/dist/icons/candy-cane.js:
lucide-svelte/dist/icons/camera.js:
lucide-svelte/dist/icons/candy.js:
lucide-svelte/dist/icons/candy-off.js:
lucide-svelte/dist/icons/cannabis.js:
lucide-svelte/dist/icons/captions-off.js:
lucide-svelte/dist/icons/car-front.js:
lucide-svelte/dist/icons/car-taxi-front.js:
lucide-svelte/dist/icons/caravan.js:
lucide-svelte/dist/icons/car.js:
lucide-svelte/dist/icons/card-sim.js:
lucide-svelte/dist/icons/carrot.js:
lucide-svelte/dist/icons/case-lower.js:
lucide-svelte/dist/icons/case-sensitive.js:
lucide-svelte/dist/icons/case-upper.js:
lucide-svelte/dist/icons/cassette-tape.js:
lucide-svelte/dist/icons/cast.js:
lucide-svelte/dist/icons/castle.js:
lucide-svelte/dist/icons/cat.js:
lucide-svelte/dist/icons/cctv.js:
lucide-svelte/dist/icons/chart-bar-decreasing.js:
lucide-svelte/dist/icons/chart-bar-increasing.js:
lucide-svelte/dist/icons/chart-bar-stacked.js:
lucide-svelte/dist/icons/chart-column-decreasing.js:
lucide-svelte/dist/icons/chart-column-stacked.js:
lucide-svelte/dist/icons/chart-gantt.js:
lucide-svelte/dist/icons/chart-network.js:
lucide-svelte/dist/icons/chart-no-axes-column-decreasing.js:
lucide-svelte/dist/icons/chart-no-axes-combined.js:
lucide-svelte/dist/icons/chart-spline.js:
lucide-svelte/dist/icons/check-check.js:
lucide-svelte/dist/icons/check-line.js:
lucide-svelte/dist/icons/check.js:
lucide-svelte/dist/icons/chef-hat.js:
lucide-svelte/dist/icons/cherry.js:
lucide-svelte/dist/icons/chevron-down.js:
lucide-svelte/dist/icons/chevron-last.js:
lucide-svelte/dist/icons/chevron-first.js:
lucide-svelte/dist/icons/chevron-left.js:
lucide-svelte/dist/icons/chevron-right.js:
lucide-svelte/dist/icons/chevron-up.js:
lucide-svelte/dist/icons/chevrons-down-up.js:
lucide-svelte/dist/icons/chevrons-left-right-ellipsis.js:
lucide-svelte/dist/icons/chevrons-left-right.js:
lucide-svelte/dist/icons/chevrons-down.js:
lucide-svelte/dist/icons/chevrons-left.js:
lucide-svelte/dist/icons/chevrons-right-left.js:
lucide-svelte/dist/icons/chevrons-right.js:
lucide-svelte/dist/icons/chevrons-up.js:
lucide-svelte/dist/icons/chevrons-up-down.js:
lucide-svelte/dist/icons/chrome.js:
lucide-svelte/dist/icons/church.js:
lucide-svelte/dist/icons/cigarette-off.js:
lucide-svelte/dist/icons/cigarette.js:
lucide-svelte/dist/icons/circle-dashed.js:
lucide-svelte/dist/icons/circle-dollar-sign.js:
lucide-svelte/dist/icons/circle-dot-dashed.js:
lucide-svelte/dist/icons/circle-dot.js:
lucide-svelte/dist/icons/circle-equal.js:
lucide-svelte/dist/icons/circle-ellipsis.js:
lucide-svelte/dist/icons/circle-fading-arrow-up.js:
lucide-svelte/dist/icons/circle-fading-plus.js:
lucide-svelte/dist/icons/circle-off.js:
lucide-svelte/dist/icons/circle-pound-sterling.js:
lucide-svelte/dist/icons/circle-slash.js:
lucide-svelte/dist/icons/circle-small.js:
lucide-svelte/dist/icons/circle.js:
lucide-svelte/dist/icons/circuit-board.js:
lucide-svelte/dist/icons/citrus.js:
lucide-svelte/dist/icons/clapperboard.js:
lucide-svelte/dist/icons/clipboard-check.js:
lucide-svelte/dist/icons/clipboard-clock.js:
lucide-svelte/dist/icons/clipboard-copy.js:
lucide-svelte/dist/icons/clipboard-list.js:
lucide-svelte/dist/icons/clipboard-minus.js:
lucide-svelte/dist/icons/clipboard-paste.js:
lucide-svelte/dist/icons/clipboard-plus.js:
lucide-svelte/dist/icons/clipboard-type.js:
lucide-svelte/dist/icons/clipboard-x.js:
lucide-svelte/dist/icons/clipboard.js:
lucide-svelte/dist/icons/clock-1.js:
lucide-svelte/dist/icons/clock-10.js:
lucide-svelte/dist/icons/clock-12.js:
lucide-svelte/dist/icons/clock-11.js:
lucide-svelte/dist/icons/clock-2.js:
lucide-svelte/dist/icons/clock-3.js:
lucide-svelte/dist/icons/clock-4.js:
lucide-svelte/dist/icons/clock-5.js:
lucide-svelte/dist/icons/clock-6.js:
lucide-svelte/dist/icons/clock-8.js:
lucide-svelte/dist/icons/clock-7.js:
lucide-svelte/dist/icons/clock-9.js:
lucide-svelte/dist/icons/clock-alert.js:
lucide-svelte/dist/icons/clock-arrow-down.js:
lucide-svelte/dist/icons/clock-arrow-up.js:
lucide-svelte/dist/icons/clock-plus.js:
lucide-svelte/dist/icons/clock-fading.js:
lucide-svelte/dist/icons/closed-caption.js:
lucide-svelte/dist/icons/clock.js:
lucide-svelte/dist/icons/cloud-alert.js:
lucide-svelte/dist/icons/cloud-check.js:
lucide-svelte/dist/icons/cloud-cog.js:
lucide-svelte/dist/icons/cloud-drizzle.js:
lucide-svelte/dist/icons/cloud-fog.js:
lucide-svelte/dist/icons/cloud-lightning.js:
lucide-svelte/dist/icons/cloud-hail.js:
lucide-svelte/dist/icons/cloud-moon-rain.js:
lucide-svelte/dist/icons/cloud-moon.js:
lucide-svelte/dist/icons/cloud-off.js:
lucide-svelte/dist/icons/cloud-rain-wind.js:
lucide-svelte/dist/icons/cloud-rain.js:
lucide-svelte/dist/icons/cloud-snow.js:
lucide-svelte/dist/icons/cloud-sun.js:
lucide-svelte/dist/icons/cloud-sun-rain.js:
lucide-svelte/dist/icons/cloud.js:
lucide-svelte/dist/icons/cloudy.js:
lucide-svelte/dist/icons/clover.js:
lucide-svelte/dist/icons/club.js:
lucide-svelte/dist/icons/code.js:
lucide-svelte/dist/icons/codepen.js:
lucide-svelte/dist/icons/codesandbox.js:
lucide-svelte/dist/icons/coffee.js:
lucide-svelte/dist/icons/cog.js:
lucide-svelte/dist/icons/coins.js:
lucide-svelte/dist/icons/columns-4.js:
lucide-svelte/dist/icons/combine.js:
lucide-svelte/dist/icons/compass.js:
lucide-svelte/dist/icons/command.js:
lucide-svelte/dist/icons/component.js:
lucide-svelte/dist/icons/computer.js:
lucide-svelte/dist/icons/cone.js:
lucide-svelte/dist/icons/concierge-bell.js:
lucide-svelte/dist/icons/construction.js:
lucide-svelte/dist/icons/container.js:
lucide-svelte/dist/icons/contrast.js:
lucide-svelte/dist/icons/contact.js:
lucide-svelte/dist/icons/cookie.js:
lucide-svelte/dist/icons/cooking-pot.js:
lucide-svelte/dist/icons/copy-check.js:
lucide-svelte/dist/icons/copy-minus.js:
lucide-svelte/dist/icons/copy-plus.js:
lucide-svelte/dist/icons/copy-x.js:
lucide-svelte/dist/icons/copy-slash.js:
lucide-svelte/dist/icons/copy.js:
lucide-svelte/dist/icons/copyleft.js:
lucide-svelte/dist/icons/copyright.js:
lucide-svelte/dist/icons/corner-down-left.js:
lucide-svelte/dist/icons/corner-down-right.js:
lucide-svelte/dist/icons/corner-left-down.js:
lucide-svelte/dist/icons/corner-left-up.js:
lucide-svelte/dist/icons/corner-right-down.js:
lucide-svelte/dist/icons/corner-right-up.js:
lucide-svelte/dist/icons/corner-up-left.js:
lucide-svelte/dist/icons/cpu.js:
lucide-svelte/dist/icons/corner-up-right.js:
lucide-svelte/dist/icons/creative-commons.js:
lucide-svelte/dist/icons/credit-card.js:
lucide-svelte/dist/icons/croissant.js:
lucide-svelte/dist/icons/crop.js:
lucide-svelte/dist/icons/cross.js:
lucide-svelte/dist/icons/crosshair.js:
lucide-svelte/dist/icons/crown.js:
lucide-svelte/dist/icons/cuboid.js:
lucide-svelte/dist/icons/cup-soda.js:
lucide-svelte/dist/icons/currency.js:
lucide-svelte/dist/icons/cylinder.js:
lucide-svelte/dist/icons/dam.js:
lucide-svelte/dist/icons/database-backup.js:
lucide-svelte/dist/icons/database-zap.js:
lucide-svelte/dist/icons/database.js:
lucide-svelte/dist/icons/decimals-arrow-left.js:
lucide-svelte/dist/icons/decimals-arrow-right.js:
lucide-svelte/dist/icons/delete.js:
lucide-svelte/dist/icons/dessert.js:
lucide-svelte/dist/icons/diameter.js:
lucide-svelte/dist/icons/diamond-minus.js:
lucide-svelte/dist/icons/diamond-plus.js:
lucide-svelte/dist/icons/diamond.js:
lucide-svelte/dist/icons/dice-1.js:
lucide-svelte/dist/icons/dice-2.js:
lucide-svelte/dist/icons/dice-3.js:
lucide-svelte/dist/icons/dice-4.js:
lucide-svelte/dist/icons/dice-5.js:
lucide-svelte/dist/icons/dice-6.js:
lucide-svelte/dist/icons/dices.js:
lucide-svelte/dist/icons/disc-2.js:
lucide-svelte/dist/icons/diff.js:
lucide-svelte/dist/icons/disc-3.js:
lucide-svelte/dist/icons/disc-album.js:
lucide-svelte/dist/icons/disc.js:
lucide-svelte/dist/icons/divide.js:
lucide-svelte/dist/icons/dna-off.js:
lucide-svelte/dist/icons/dock.js:
lucide-svelte/dist/icons/dna.js:
lucide-svelte/dist/icons/dollar-sign.js:
lucide-svelte/dist/icons/donut.js:
lucide-svelte/dist/icons/dog.js:
lucide-svelte/dist/icons/door-closed-locked.js:
lucide-svelte/dist/icons/door-closed.js:
lucide-svelte/dist/icons/door-open.js:
lucide-svelte/dist/icons/dot.js:
lucide-svelte/dist/icons/download.js:
lucide-svelte/dist/icons/drafting-compass.js:
lucide-svelte/dist/icons/drama.js:
lucide-svelte/dist/icons/dribbble.js:
lucide-svelte/dist/icons/drill.js:
lucide-svelte/dist/icons/drone.js:
lucide-svelte/dist/icons/droplet-off.js:
lucide-svelte/dist/icons/droplet.js:
lucide-svelte/dist/icons/droplets.js:
lucide-svelte/dist/icons/drum.js:
lucide-svelte/dist/icons/drumstick.js:
lucide-svelte/dist/icons/dumbbell.js:
lucide-svelte/dist/icons/ear-off.js:
lucide-svelte/dist/icons/ear.js:
lucide-svelte/dist/icons/earth-lock.js:
lucide-svelte/dist/icons/eclipse.js:
lucide-svelte/dist/icons/egg-fried.js:
lucide-svelte/dist/icons/egg-off.js:
lucide-svelte/dist/icons/egg.js:
lucide-svelte/dist/icons/equal-approximately.js:
lucide-svelte/dist/icons/equal-not.js:
lucide-svelte/dist/icons/equal.js:
lucide-svelte/dist/icons/ethernet-port.js:
lucide-svelte/dist/icons/eraser.js:
lucide-svelte/dist/icons/euro.js:
lucide-svelte/dist/icons/expand.js:
lucide-svelte/dist/icons/external-link.js:
lucide-svelte/dist/icons/eye-closed.js:
lucide-svelte/dist/icons/eye-off.js:
lucide-svelte/dist/icons/eye.js:
lucide-svelte/dist/icons/facebook.js:
lucide-svelte/dist/icons/factory.js:
lucide-svelte/dist/icons/fan.js:
lucide-svelte/dist/icons/feather.js:
lucide-svelte/dist/icons/fast-forward.js:
lucide-svelte/dist/icons/fence.js:
lucide-svelte/dist/icons/ferris-wheel.js:
lucide-svelte/dist/icons/file-archive.js:
lucide-svelte/dist/icons/figma.js:
lucide-svelte/dist/icons/file-audio-2.js:
lucide-svelte/dist/icons/file-audio.js:
lucide-svelte/dist/icons/file-badge-2.js:
lucide-svelte/dist/icons/file-badge.js:
lucide-svelte/dist/icons/file-box.js:
lucide-svelte/dist/icons/file-check-2.js:
lucide-svelte/dist/icons/file-check.js:
lucide-svelte/dist/icons/file-clock.js:
lucide-svelte/dist/icons/file-code-2.js:
lucide-svelte/dist/icons/file-code.js:
lucide-svelte/dist/icons/file-diff.js:
lucide-svelte/dist/icons/file-digit.js:
lucide-svelte/dist/icons/file-down.js:
lucide-svelte/dist/icons/file-heart.js:
lucide-svelte/dist/icons/file-image.js:
lucide-svelte/dist/icons/file-input.js:
lucide-svelte/dist/icons/file-json-2.js:
lucide-svelte/dist/icons/file-json.js:
lucide-svelte/dist/icons/file-key.js:
lucide-svelte/dist/icons/file-lock-2.js:
lucide-svelte/dist/icons/file-key-2.js:
lucide-svelte/dist/icons/file-lock.js:
lucide-svelte/dist/icons/file-minus-2.js:
lucide-svelte/dist/icons/file-minus.js:
lucide-svelte/dist/icons/file-music.js:
lucide-svelte/dist/icons/file-output.js:
lucide-svelte/dist/icons/file-plus-2.js:
lucide-svelte/dist/icons/file-plus.js:
lucide-svelte/dist/icons/file-scan.js:
lucide-svelte/dist/icons/file-search-2.js:
lucide-svelte/dist/icons/file-search.js:
lucide-svelte/dist/icons/file-sliders.js:
lucide-svelte/dist/icons/file-spreadsheet.js:
lucide-svelte/dist/icons/file-stack.js:
lucide-svelte/dist/icons/file-terminal.js:
lucide-svelte/dist/icons/file-symlink.js:
lucide-svelte/dist/icons/file-type-2.js:
lucide-svelte/dist/icons/file-text.js:
lucide-svelte/dist/icons/file-type.js:
lucide-svelte/dist/icons/file-up.js:
lucide-svelte/dist/icons/file-user.js:
lucide-svelte/dist/icons/file-volume-2.js:
lucide-svelte/dist/icons/file-volume.js:
lucide-svelte/dist/icons/file-warning.js:
lucide-svelte/dist/icons/file-x-2.js:
lucide-svelte/dist/icons/file-x.js:
lucide-svelte/dist/icons/file.js:
lucide-svelte/dist/icons/files.js:
lucide-svelte/dist/icons/film.js:
lucide-svelte/dist/icons/fingerprint.js:
lucide-svelte/dist/icons/fire-extinguisher.js:
lucide-svelte/dist/icons/fish-off.js:
lucide-svelte/dist/icons/fish-symbol.js:
lucide-svelte/dist/icons/fish.js:
lucide-svelte/dist/icons/flag-off.js:
lucide-svelte/dist/icons/flag-triangle-right.js:
lucide-svelte/dist/icons/flag-triangle-left.js:
lucide-svelte/dist/icons/flag.js:
lucide-svelte/dist/icons/flame-kindling.js:
lucide-svelte/dist/icons/flame.js:
lucide-svelte/dist/icons/flashlight-off.js:
lucide-svelte/dist/icons/flashlight.js:
lucide-svelte/dist/icons/flask-conical-off.js:
lucide-svelte/dist/icons/flask-conical.js:
lucide-svelte/dist/icons/flask-round.js:
lucide-svelte/dist/icons/flip-horizontal-2.js:
lucide-svelte/dist/icons/flip-horizontal.js:
lucide-svelte/dist/icons/flip-vertical-2.js:
lucide-svelte/dist/icons/flip-vertical.js:
lucide-svelte/dist/icons/flower-2.js:
lucide-svelte/dist/icons/focus.js:
lucide-svelte/dist/icons/flower.js:
lucide-svelte/dist/icons/fold-horizontal.js:
lucide-svelte/dist/icons/fold-vertical.js:
lucide-svelte/dist/icons/folder-archive.js:
lucide-svelte/dist/icons/folder-check.js:
lucide-svelte/dist/icons/folder-clock.js:
lucide-svelte/dist/icons/folder-closed.js:
lucide-svelte/dist/icons/folder-code.js:
lucide-svelte/dist/icons/folder-dot.js:
lucide-svelte/dist/icons/folder-down.js:
lucide-svelte/dist/icons/folder-git-2.js:
lucide-svelte/dist/icons/folder-git.js:
lucide-svelte/dist/icons/folder-heart.js:
lucide-svelte/dist/icons/folder-kanban.js:
lucide-svelte/dist/icons/folder-input.js:
lucide-svelte/dist/icons/folder-key.js:
lucide-svelte/dist/icons/folder-lock.js:
lucide-svelte/dist/icons/folder-minus.js:
lucide-svelte/dist/icons/folder-open-dot.js:
lucide-svelte/dist/icons/folder-open.js:
lucide-svelte/dist/icons/folder-output.js:
lucide-svelte/dist/icons/folder-plus.js:
lucide-svelte/dist/icons/folder-root.js:
lucide-svelte/dist/icons/folder-search-2.js:
lucide-svelte/dist/icons/folder-search.js:
lucide-svelte/dist/icons/folder-symlink.js:
lucide-svelte/dist/icons/folder-sync.js:
lucide-svelte/dist/icons/folder-tree.js:
lucide-svelte/dist/icons/folder-up.js:
lucide-svelte/dist/icons/folder-x.js:
lucide-svelte/dist/icons/folder.js:
lucide-svelte/dist/icons/folders.js:
lucide-svelte/dist/icons/footprints.js:
lucide-svelte/dist/icons/forklift.js:
lucide-svelte/dist/icons/forward.js:
lucide-svelte/dist/icons/frame.js:
lucide-svelte/dist/icons/framer.js:
lucide-svelte/dist/icons/frown.js:
lucide-svelte/dist/icons/fuel.js:
lucide-svelte/dist/icons/fullscreen.js:
lucide-svelte/dist/icons/funnel-plus.js:
lucide-svelte/dist/icons/gallery-horizontal-end.js:
lucide-svelte/dist/icons/gallery-horizontal.js:
lucide-svelte/dist/icons/gallery-thumbnails.js:
lucide-svelte/dist/icons/gallery-vertical-end.js:
lucide-svelte/dist/icons/gallery-vertical.js:
lucide-svelte/dist/icons/gamepad-2.js:
lucide-svelte/dist/icons/gamepad.js:
lucide-svelte/dist/icons/gauge.js:
lucide-svelte/dist/icons/gavel.js:
lucide-svelte/dist/icons/gem.js:
lucide-svelte/dist/icons/georgian-lari.js:
lucide-svelte/dist/icons/ghost.js:
lucide-svelte/dist/icons/gift.js:
lucide-svelte/dist/icons/git-branch-plus.js:
lucide-svelte/dist/icons/git-branch.js:
lucide-svelte/dist/icons/git-commit-vertical.js:
lucide-svelte/dist/icons/git-compare-arrows.js:
lucide-svelte/dist/icons/git-compare.js:
lucide-svelte/dist/icons/git-fork.js:
lucide-svelte/dist/icons/git-graph.js:
lucide-svelte/dist/icons/git-merge.js:
lucide-svelte/dist/icons/git-pull-request-arrow.js:
lucide-svelte/dist/icons/git-pull-request-closed.js:
lucide-svelte/dist/icons/git-pull-request-create-arrow.js:
lucide-svelte/dist/icons/git-pull-request-create.js:
lucide-svelte/dist/icons/git-pull-request-draft.js:
lucide-svelte/dist/icons/git-pull-request.js:
lucide-svelte/dist/icons/github.js:
lucide-svelte/dist/icons/gitlab.js:
lucide-svelte/dist/icons/glass-water.js:
lucide-svelte/dist/icons/glasses.js:
lucide-svelte/dist/icons/globe-lock.js:
lucide-svelte/dist/icons/globe.js:
lucide-svelte/dist/icons/goal.js:
lucide-svelte/dist/icons/graduation-cap.js:
lucide-svelte/dist/icons/gpu.js:
lucide-svelte/dist/icons/grape.js:
lucide-svelte/dist/icons/grid-3x2.js:
lucide-svelte/dist/icons/grip-vertical.js:
lucide-svelte/dist/icons/grip-horizontal.js:
lucide-svelte/dist/icons/grip.js:
lucide-svelte/dist/icons/group.js:
lucide-svelte/dist/icons/ham.js:
lucide-svelte/dist/icons/guitar.js:
lucide-svelte/dist/icons/hamburger.js:
lucide-svelte/dist/icons/hammer.js:
lucide-svelte/dist/icons/hand-coins.js:
lucide-svelte/dist/icons/hand-fist.js:
lucide-svelte/dist/icons/hand-heart.js:
lucide-svelte/dist/icons/hand-metal.js:
lucide-svelte/dist/icons/hand-platter.js:
lucide-svelte/dist/icons/hand.js:
lucide-svelte/dist/icons/handbag.js:
lucide-svelte/dist/icons/handshake.js:
lucide-svelte/dist/icons/hard-drive-download.js:
lucide-svelte/dist/icons/hard-drive-upload.js:
lucide-svelte/dist/icons/hard-drive.js:
lucide-svelte/dist/icons/hard-hat.js:
lucide-svelte/dist/icons/hash.js:
lucide-svelte/dist/icons/hat-glasses.js:
lucide-svelte/dist/icons/hdmi-port.js:
lucide-svelte/dist/icons/haze.js:
lucide-svelte/dist/icons/heading-1.js:
lucide-svelte/dist/icons/heading-2.js:
lucide-svelte/dist/icons/heading-3.js:
lucide-svelte/dist/icons/heading-4.js:
lucide-svelte/dist/icons/heading-5.js:
lucide-svelte/dist/icons/heading-6.js:
lucide-svelte/dist/icons/heading.js:
lucide-svelte/dist/icons/headphone-off.js:
lucide-svelte/dist/icons/headphones.js:
lucide-svelte/dist/icons/heart-crack.js:
lucide-svelte/dist/icons/headset.js:
lucide-svelte/dist/icons/heart-handshake.js:
lucide-svelte/dist/icons/heart-minus.js:
lucide-svelte/dist/icons/heart-off.js:
lucide-svelte/dist/icons/heart-plus.js:
lucide-svelte/dist/icons/heart-pulse.js:
lucide-svelte/dist/icons/heart.js:
lucide-svelte/dist/icons/heater.js:
lucide-svelte/dist/icons/highlighter.js:
lucide-svelte/dist/icons/hexagon.js:
lucide-svelte/dist/icons/history.js:
lucide-svelte/dist/icons/hop-off.js:
lucide-svelte/dist/icons/hop.js:
lucide-svelte/dist/icons/hospital.js:
lucide-svelte/dist/icons/hotel.js:
lucide-svelte/dist/icons/hourglass.js:
lucide-svelte/dist/icons/house-plug.js:
lucide-svelte/dist/icons/house-plus.js:
lucide-svelte/dist/icons/house-wifi.js:
lucide-svelte/dist/icons/id-card-lanyard.js:
lucide-svelte/dist/icons/id-card.js:
lucide-svelte/dist/icons/image-down.js:
lucide-svelte/dist/icons/image-minus.js:
lucide-svelte/dist/icons/image-off.js:
lucide-svelte/dist/icons/image-play.js:
lucide-svelte/dist/icons/image-plus.js:
lucide-svelte/dist/icons/image-up.js:
lucide-svelte/dist/icons/image-upscale.js:
lucide-svelte/dist/icons/image.js:
lucide-svelte/dist/icons/images.js:
lucide-svelte/dist/icons/import.js:
lucide-svelte/dist/icons/inbox.js:
lucide-svelte/dist/icons/indian-rupee.js:
lucide-svelte/dist/icons/infinity.js:
lucide-svelte/dist/icons/info.js:
lucide-svelte/dist/icons/inspection-panel.js:
lucide-svelte/dist/icons/instagram.js:
lucide-svelte/dist/icons/italic.js:
lucide-svelte/dist/icons/iteration-cw.js:
lucide-svelte/dist/icons/iteration-ccw.js:
lucide-svelte/dist/icons/japanese-yen.js:
lucide-svelte/dist/icons/joystick.js:
lucide-svelte/dist/icons/key-round.js:
lucide-svelte/dist/icons/kanban.js:
lucide-svelte/dist/icons/key-square.js:
lucide-svelte/dist/icons/key.js:
lucide-svelte/dist/icons/keyboard-off.js:
lucide-svelte/dist/icons/keyboard-music.js:
lucide-svelte/dist/icons/keyboard.js:
lucide-svelte/dist/icons/lamp-ceiling.js:
lucide-svelte/dist/icons/lamp-desk.js:
lucide-svelte/dist/icons/lamp-wall-down.js:
lucide-svelte/dist/icons/lamp-wall-up.js:
lucide-svelte/dist/icons/lamp-floor.js:
lucide-svelte/dist/icons/lamp.js:
lucide-svelte/dist/icons/land-plot.js:
lucide-svelte/dist/icons/landmark.js:
lucide-svelte/dist/icons/languages.js:
lucide-svelte/dist/icons/laptop-minimal-check.js:
lucide-svelte/dist/icons/laptop.js:
lucide-svelte/dist/icons/lasso-select.js:
lucide-svelte/dist/icons/lasso.js:
lucide-svelte/dist/icons/laugh.js:
lucide-svelte/dist/icons/layers-2.js:
lucide-svelte/dist/icons/layout-dashboard.js:
lucide-svelte/dist/icons/layout-grid.js:
lucide-svelte/dist/icons/layout-list.js:
lucide-svelte/dist/icons/layout-panel-left.js:
lucide-svelte/dist/icons/layout-panel-top.js:
lucide-svelte/dist/icons/leaf.js:
lucide-svelte/dist/icons/layout-template.js:
lucide-svelte/dist/icons/lectern.js:
lucide-svelte/dist/icons/leafy-green.js:
lucide-svelte/dist/icons/letter-text.js:
lucide-svelte/dist/icons/library-big.js:
lucide-svelte/dist/icons/life-buoy.js:
lucide-svelte/dist/icons/library.js:
lucide-svelte/dist/icons/ligature.js:
lucide-svelte/dist/icons/lightbulb-off.js:
lucide-svelte/dist/icons/lightbulb.js:
lucide-svelte/dist/icons/link-2-off.js:
lucide-svelte/dist/icons/link-2.js:
lucide-svelte/dist/icons/line-squiggle.js:
lucide-svelte/dist/icons/link.js:
lucide-svelte/dist/icons/linkedin.js:
lucide-svelte/dist/icons/list-check.js:
lucide-svelte/dist/icons/list-checks.js:
lucide-svelte/dist/icons/list-collapse.js:
lucide-svelte/dist/icons/list-end.js:
lucide-svelte/dist/icons/list-filter-plus.js:
lucide-svelte/dist/icons/list-filter.js:
lucide-svelte/dist/icons/list-minus.js:
lucide-svelte/dist/icons/list-ordered.js:
lucide-svelte/dist/icons/list-music.js:
lucide-svelte/dist/icons/list-plus.js:
lucide-svelte/dist/icons/list-start.js:
lucide-svelte/dist/icons/list-restart.js:
lucide-svelte/dist/icons/list-todo.js:
lucide-svelte/dist/icons/list-tree.js:
lucide-svelte/dist/icons/list-video.js:
lucide-svelte/dist/icons/list-x.js:
lucide-svelte/dist/icons/list.js:
lucide-svelte/dist/icons/loader-pinwheel.js:
lucide-svelte/dist/icons/loader.js:
lucide-svelte/dist/icons/locate-fixed.js:
lucide-svelte/dist/icons/locate-off.js:
lucide-svelte/dist/icons/locate.js:
lucide-svelte/dist/icons/lock-keyhole.js:
lucide-svelte/dist/icons/lock.js:
lucide-svelte/dist/icons/log-in.js:
lucide-svelte/dist/icons/log-out.js:
lucide-svelte/dist/icons/logs.js:
lucide-svelte/dist/icons/lollipop.js:
lucide-svelte/dist/icons/luggage.js:
lucide-svelte/dist/icons/magnet.js:
lucide-svelte/dist/icons/mail-check.js:
lucide-svelte/dist/icons/mail-minus.js:
lucide-svelte/dist/icons/mail-open.js:
lucide-svelte/dist/icons/mail-plus.js:
lucide-svelte/dist/icons/mail-search.js:
lucide-svelte/dist/icons/mail-warning.js:
lucide-svelte/dist/icons/mail-x.js:
lucide-svelte/dist/icons/mail.js:
lucide-svelte/dist/icons/mailbox.js:
lucide-svelte/dist/icons/mails.js:
lucide-svelte/dist/icons/map-minus.js:
lucide-svelte/dist/icons/map-pin-check-inside.js:
lucide-svelte/dist/icons/map-pin-check.js:
lucide-svelte/dist/icons/map-pin-house.js:
lucide-svelte/dist/icons/map-pin-minus-inside.js:
lucide-svelte/dist/icons/map-pin-minus.js:
lucide-svelte/dist/icons/map-pin-off.js:
lucide-svelte/dist/icons/map-pin-plus-inside.js:
lucide-svelte/dist/icons/map-pin-plus.js:
lucide-svelte/dist/icons/map-pin-x.js:
lucide-svelte/dist/icons/map-pin-x-inside.js:
lucide-svelte/dist/icons/map-pin.js:
lucide-svelte/dist/icons/map-pinned.js:
lucide-svelte/dist/icons/map-plus.js:
lucide-svelte/dist/icons/map.js:
lucide-svelte/dist/icons/mars-stroke.js:
lucide-svelte/dist/icons/mars.js:
lucide-svelte/dist/icons/martini.js:
lucide-svelte/dist/icons/maximize-2.js:
lucide-svelte/dist/icons/maximize.js:
lucide-svelte/dist/icons/megaphone-off.js:
lucide-svelte/dist/icons/medal.js:
lucide-svelte/dist/icons/megaphone.js:
lucide-svelte/dist/icons/meh.js:
lucide-svelte/dist/icons/memory-stick.js:
lucide-svelte/dist/icons/menu.js:
lucide-svelte/dist/icons/merge.js:
lucide-svelte/dist/icons/message-circle-code.js:
lucide-svelte/dist/icons/message-circle-dashed.js:
lucide-svelte/dist/icons/message-circle-heart.js:
lucide-svelte/dist/icons/message-circle-more.js:
lucide-svelte/dist/icons/message-circle-off.js:
lucide-svelte/dist/icons/message-circle-plus.js:
lucide-svelte/dist/icons/message-circle-reply.js:
lucide-svelte/dist/icons/message-circle-warning.js:
lucide-svelte/dist/icons/message-circle-x.js:
lucide-svelte/dist/icons/message-circle.js:
lucide-svelte/dist/icons/message-square-code.js:
lucide-svelte/dist/icons/message-square-dashed.js:
lucide-svelte/dist/icons/message-square-diff.js:
lucide-svelte/dist/icons/message-square-dot.js:
lucide-svelte/dist/icons/message-square-heart.js:
lucide-svelte/dist/icons/message-square-lock.js:
lucide-svelte/dist/icons/message-square-more.js:
lucide-svelte/dist/icons/message-square-off.js:
lucide-svelte/dist/icons/message-square-plus.js:
lucide-svelte/dist/icons/message-square-quote.js:
lucide-svelte/dist/icons/message-square-reply.js:
lucide-svelte/dist/icons/message-square-share.js:
lucide-svelte/dist/icons/message-square-text.js:
lucide-svelte/dist/icons/message-square-warning.js:
lucide-svelte/dist/icons/message-square-x.js:
lucide-svelte/dist/icons/message-square.js:
lucide-svelte/dist/icons/messages-square.js:
lucide-svelte/dist/icons/mic-off.js:
lucide-svelte/dist/icons/microchip.js:
lucide-svelte/dist/icons/mic.js:
lucide-svelte/dist/icons/microscope.js:
lucide-svelte/dist/icons/microwave.js:
lucide-svelte/dist/icons/milk-off.js:
lucide-svelte/dist/icons/milestone.js:
lucide-svelte/dist/icons/milk.js:
lucide-svelte/dist/icons/minimize-2.js:
lucide-svelte/dist/icons/minimize.js:
lucide-svelte/dist/icons/monitor-check.js:
lucide-svelte/dist/icons/monitor-cog.js:
lucide-svelte/dist/icons/minus.js:
lucide-svelte/dist/icons/monitor-dot.js:
lucide-svelte/dist/icons/monitor-down.js:
lucide-svelte/dist/icons/monitor-pause.js:
lucide-svelte/dist/icons/monitor-off.js:
lucide-svelte/dist/icons/monitor-play.js:
lucide-svelte/dist/icons/monitor-smartphone.js:
lucide-svelte/dist/icons/monitor-speaker.js:
lucide-svelte/dist/icons/monitor-stop.js:
lucide-svelte/dist/icons/monitor-up.js:
lucide-svelte/dist/icons/monitor-x.js:
lucide-svelte/dist/icons/moon-star.js:
lucide-svelte/dist/icons/monitor.js:
lucide-svelte/dist/icons/moon.js:
lucide-svelte/dist/icons/mountain-snow.js:
lucide-svelte/dist/icons/mountain.js:
lucide-svelte/dist/icons/mouse-off.js:
lucide-svelte/dist/icons/mouse-pointer-2.js:
lucide-svelte/dist/icons/mouse-pointer-ban.js:
lucide-svelte/dist/icons/mouse-pointer-click.js:
lucide-svelte/dist/icons/mouse-pointer.js:
lucide-svelte/dist/icons/mouse.js:
lucide-svelte/dist/icons/move-diagonal-2.js:
lucide-svelte/dist/icons/move-diagonal.js:
lucide-svelte/dist/icons/move-down-right.js:
lucide-svelte/dist/icons/move-down-left.js:
lucide-svelte/dist/icons/move-down.js:
lucide-svelte/dist/icons/move-horizontal.js:
lucide-svelte/dist/icons/move-left.js:
lucide-svelte/dist/icons/move-right.js:
lucide-svelte/dist/icons/move-up-left.js:
lucide-svelte/dist/icons/move-up-right.js:
lucide-svelte/dist/icons/move-up.js:
lucide-svelte/dist/icons/move-vertical.js:
lucide-svelte/dist/icons/move.js:
lucide-svelte/dist/icons/music-2.js:
lucide-svelte/dist/icons/music-3.js:
lucide-svelte/dist/icons/music-4.js:
lucide-svelte/dist/icons/music.js:
lucide-svelte/dist/icons/navigation-2-off.js:
lucide-svelte/dist/icons/navigation-off.js:
lucide-svelte/dist/icons/navigation-2.js:
lucide-svelte/dist/icons/navigation.js:
lucide-svelte/dist/icons/network.js:
lucide-svelte/dist/icons/newspaper.js:
lucide-svelte/dist/icons/nfc.js:
lucide-svelte/dist/icons/non-binary.js:
lucide-svelte/dist/icons/notebook-pen.js:
lucide-svelte/dist/icons/notebook-tabs.js:
lucide-svelte/dist/icons/notebook-text.js:
lucide-svelte/dist/icons/notebook.js:
lucide-svelte/dist/icons/notepad-text-dashed.js:
lucide-svelte/dist/icons/nut-off.js:
lucide-svelte/dist/icons/notepad-text.js:
lucide-svelte/dist/icons/nut.js:
lucide-svelte/dist/icons/octagon-minus.js:
lucide-svelte/dist/icons/octagon.js:
lucide-svelte/dist/icons/omega.js:
lucide-svelte/dist/icons/option.js:
lucide-svelte/dist/icons/orbit.js:
lucide-svelte/dist/icons/origami.js:
lucide-svelte/dist/icons/package-2.js:
lucide-svelte/dist/icons/package-check.js:
lucide-svelte/dist/icons/package-minus.js:
lucide-svelte/dist/icons/package-open.js:
lucide-svelte/dist/icons/package-plus.js:
lucide-svelte/dist/icons/package-search.js:
lucide-svelte/dist/icons/package-x.js:
lucide-svelte/dist/icons/package.js:
lucide-svelte/dist/icons/paint-bucket.js:
lucide-svelte/dist/icons/paint-roller.js:
lucide-svelte/dist/icons/paintbrush.js:
lucide-svelte/dist/icons/palette.js:
lucide-svelte/dist/icons/panda.js:
lucide-svelte/dist/icons/panel-bottom-close.js:
lucide-svelte/dist/icons/panel-bottom.js:
lucide-svelte/dist/icons/panel-bottom-open.js:
lucide-svelte/dist/icons/panel-right-close.js:
lucide-svelte/dist/icons/panel-right-open.js:
lucide-svelte/dist/icons/panel-right.js:
lucide-svelte/dist/icons/panel-top-close.js:
lucide-svelte/dist/icons/panel-top-open.js:
lucide-svelte/dist/icons/panel-top.js:
lucide-svelte/dist/icons/panels-left-bottom.js:
lucide-svelte/dist/icons/panels-right-bottom.js:
lucide-svelte/dist/icons/paperclip.js:
lucide-svelte/dist/icons/parentheses.js:
lucide-svelte/dist/icons/parking-meter.js:
lucide-svelte/dist/icons/party-popper.js:
lucide-svelte/dist/icons/pause.js:
lucide-svelte/dist/icons/paw-print.js:
lucide-svelte/dist/icons/pen-off.js:
lucide-svelte/dist/icons/pc-case.js:
lucide-svelte/dist/icons/pen-tool.js:
lucide-svelte/dist/icons/pencil-line.js:
lucide-svelte/dist/icons/pencil-off.js:
lucide-svelte/dist/icons/pencil-ruler.js:
lucide-svelte/dist/icons/pencil.js:
lucide-svelte/dist/icons/pentagon.js:
lucide-svelte/dist/icons/person-standing.js:
lucide-svelte/dist/icons/percent.js:
lucide-svelte/dist/icons/philippine-peso.js:
lucide-svelte/dist/icons/phone-forwarded.js:
lucide-svelte/dist/icons/phone-call.js:
lucide-svelte/dist/icons/phone-missed.js:
lucide-svelte/dist/icons/phone-incoming.js:
lucide-svelte/dist/icons/phone-off.js:
lucide-svelte/dist/icons/phone-outgoing.js:
lucide-svelte/dist/icons/pi.js:
lucide-svelte/dist/icons/phone.js:
lucide-svelte/dist/icons/piano.js:
lucide-svelte/dist/icons/pickaxe.js:
lucide-svelte/dist/icons/picture-in-picture-2.js:
lucide-svelte/dist/icons/piggy-bank.js:
lucide-svelte/dist/icons/picture-in-picture.js:
lucide-svelte/dist/icons/pilcrow-left.js:
lucide-svelte/dist/icons/pilcrow-right.js:
lucide-svelte/dist/icons/pilcrow.js:
lucide-svelte/dist/icons/pill-bottle.js:
lucide-svelte/dist/icons/pin-off.js:
lucide-svelte/dist/icons/pill.js:
lucide-svelte/dist/icons/pipette.js:
lucide-svelte/dist/icons/pin.js:
lucide-svelte/dist/icons/pizza.js:
lucide-svelte/dist/icons/plane-landing.js:
lucide-svelte/dist/icons/plane-takeoff.js:
lucide-svelte/dist/icons/play.js:
lucide-svelte/dist/icons/plane.js:
lucide-svelte/dist/icons/plug-2.js:
lucide-svelte/dist/icons/plug.js:
lucide-svelte/dist/icons/plus.js:
lucide-svelte/dist/icons/pocket-knife.js:
lucide-svelte/dist/icons/pocket.js:
lucide-svelte/dist/icons/pointer-off.js:
lucide-svelte/dist/icons/podcast.js:
lucide-svelte/dist/icons/pointer.js:
lucide-svelte/dist/icons/popcorn.js:
lucide-svelte/dist/icons/popsicle.js:
lucide-svelte/dist/icons/power-off.js:
lucide-svelte/dist/icons/pound-sterling.js:
lucide-svelte/dist/icons/power.js:
lucide-svelte/dist/icons/presentation.js:
lucide-svelte/dist/icons/printer-check.js:
lucide-svelte/dist/icons/printer.js:
lucide-svelte/dist/icons/proportions.js:
lucide-svelte/dist/icons/projector.js:
lucide-svelte/dist/icons/puzzle.js:
lucide-svelte/dist/icons/pyramid.js:
lucide-svelte/dist/icons/quote.js:
lucide-svelte/dist/icons/rabbit.js:
lucide-svelte/dist/icons/qr-code.js:
lucide-svelte/dist/icons/radiation.js:
lucide-svelte/dist/icons/radar.js:
lucide-svelte/dist/icons/radical.js:
lucide-svelte/dist/icons/radio-receiver.js:
lucide-svelte/dist/icons/radio.js:
lucide-svelte/dist/icons/radio-tower.js:
lucide-svelte/dist/icons/radius.js:
lucide-svelte/dist/icons/rail-symbol.js:
lucide-svelte/dist/icons/rat.js:
lucide-svelte/dist/icons/rainbow.js:
lucide-svelte/dist/icons/ratio.js:
lucide-svelte/dist/icons/receipt-cent.js:
lucide-svelte/dist/icons/receipt-euro.js:
lucide-svelte/dist/icons/receipt-indian-rupee.js:
lucide-svelte/dist/icons/receipt-japanese-yen.js:
lucide-svelte/dist/icons/receipt-pound-sterling.js:
lucide-svelte/dist/icons/receipt-russian-ruble.js:
lucide-svelte/dist/icons/receipt-swiss-franc.js:
lucide-svelte/dist/icons/receipt-text.js:
lucide-svelte/dist/icons/receipt-turkish-lira.js:
lucide-svelte/dist/icons/receipt.js:
lucide-svelte/dist/icons/rectangle-circle.js:
lucide-svelte/dist/icons/rectangle-goggles.js:
lucide-svelte/dist/icons/rectangle-horizontal.js:
lucide-svelte/dist/icons/rectangle-vertical.js:
lucide-svelte/dist/icons/recycle.js:
lucide-svelte/dist/icons/redo-2.js:
lucide-svelte/dist/icons/redo-dot.js:
lucide-svelte/dist/icons/redo.js:
lucide-svelte/dist/icons/refresh-ccw-dot.js:
lucide-svelte/dist/icons/refresh-ccw.js:
lucide-svelte/dist/icons/refresh-cw-off.js:
lucide-svelte/dist/icons/refresh-cw.js:
lucide-svelte/dist/icons/refrigerator.js:
lucide-svelte/dist/icons/regex.js:
lucide-svelte/dist/icons/remove-formatting.js:
lucide-svelte/dist/icons/repeat-1.js:
lucide-svelte/dist/icons/repeat-2.js:
lucide-svelte/dist/icons/repeat.js:
lucide-svelte/dist/icons/replace-all.js:
lucide-svelte/dist/icons/reply-all.js:
lucide-svelte/dist/icons/replace.js:
lucide-svelte/dist/icons/reply.js:
lucide-svelte/dist/icons/rewind.js:
lucide-svelte/dist/icons/ribbon.js:
lucide-svelte/dist/icons/rocket.js:
lucide-svelte/dist/icons/rotate-ccw-key.js:
lucide-svelte/dist/icons/rocking-chair.js:
lucide-svelte/dist/icons/roller-coaster.js:
lucide-svelte/dist/icons/rotate-ccw-square.js:
lucide-svelte/dist/icons/rotate-ccw.js:
lucide-svelte/dist/icons/rotate-cw-square.js:
lucide-svelte/dist/icons/rotate-cw.js:
lucide-svelte/dist/icons/route-off.js:
lucide-svelte/dist/icons/route.js:
lucide-svelte/dist/icons/router.js:
lucide-svelte/dist/icons/rows-4.js:
lucide-svelte/dist/icons/rss.js:
lucide-svelte/dist/icons/ruler-dimension-line.js:
lucide-svelte/dist/icons/ruler.js:
lucide-svelte/dist/icons/russian-ruble.js:
lucide-svelte/dist/icons/sailboat.js:
lucide-svelte/dist/icons/salad.js:
lucide-svelte/dist/icons/satellite-dish.js:
lucide-svelte/dist/icons/sandwich.js:
lucide-svelte/dist/icons/satellite.js:
lucide-svelte/dist/icons/saudi-riyal.js:
lucide-svelte/dist/icons/save-off.js:
lucide-svelte/dist/icons/save-all.js:
lucide-svelte/dist/icons/save.js:
lucide-svelte/dist/icons/scale.js:
lucide-svelte/dist/icons/scaling.js:
lucide-svelte/dist/icons/scan-barcode.js:
lucide-svelte/dist/icons/scan-eye.js:
lucide-svelte/dist/icons/scan-face.js:
lucide-svelte/dist/icons/scan-heart.js:
lucide-svelte/dist/icons/scan-line.js:
lucide-svelte/dist/icons/scan-qr-code.js:
lucide-svelte/dist/icons/scan-search.js:
lucide-svelte/dist/icons/scan-text.js:
lucide-svelte/dist/icons/scan.js:
lucide-svelte/dist/icons/school.js:
lucide-svelte/dist/icons/scissors-line-dashed.js:
lucide-svelte/dist/icons/scissors.js:
lucide-svelte/dist/icons/screen-share-off.js:
lucide-svelte/dist/icons/screen-share.js:
lucide-svelte/dist/icons/scroll-text.js:
lucide-svelte/dist/icons/scroll.js:
lucide-svelte/dist/icons/search-check.js:
lucide-svelte/dist/icons/search-code.js:
lucide-svelte/dist/icons/search-x.js:
lucide-svelte/dist/icons/search.js:
lucide-svelte/dist/icons/search-slash.js:
lucide-svelte/dist/icons/section.js:
lucide-svelte/dist/icons/send-to-back.js:
lucide-svelte/dist/icons/send.js:
lucide-svelte/dist/icons/separator-horizontal.js:
lucide-svelte/dist/icons/separator-vertical.js:
lucide-svelte/dist/icons/server-cog.js:
lucide-svelte/dist/icons/server-crash.js:
lucide-svelte/dist/icons/server-off.js:
lucide-svelte/dist/icons/server.js:
lucide-svelte/dist/icons/settings-2.js:
lucide-svelte/dist/icons/settings.js:
lucide-svelte/dist/icons/shapes.js:
lucide-svelte/dist/icons/share-2.js:
lucide-svelte/dist/icons/share.js:
lucide-svelte/dist/icons/sheet.js:
lucide-svelte/dist/icons/shell.js:
lucide-svelte/dist/icons/shield-alert.js:
lucide-svelte/dist/icons/shield-ban.js:
lucide-svelte/dist/icons/shield-check.js:
lucide-svelte/dist/icons/shield-ellipsis.js:
lucide-svelte/dist/icons/shield-half.js:
lucide-svelte/dist/icons/shield-minus.js:
lucide-svelte/dist/icons/shield-off.js:
lucide-svelte/dist/icons/shield-plus.js:
lucide-svelte/dist/icons/shield-user.js:
lucide-svelte/dist/icons/shield.js:
lucide-svelte/dist/icons/ship-wheel.js:
lucide-svelte/dist/icons/ship.js:
lucide-svelte/dist/icons/shirt.js:
lucide-svelte/dist/icons/shopping-bag.js:
lucide-svelte/dist/icons/shopping-basket.js:
lucide-svelte/dist/icons/shopping-cart.js:
lucide-svelte/dist/icons/shovel.js:
lucide-svelte/dist/icons/shredder.js:
lucide-svelte/dist/icons/shower-head.js:
lucide-svelte/dist/icons/shrimp.js:
lucide-svelte/dist/icons/shrink.js:
lucide-svelte/dist/icons/shrub.js:
lucide-svelte/dist/icons/shuffle.js:
lucide-svelte/dist/icons/sigma.js:
lucide-svelte/dist/icons/signal-high.js:
lucide-svelte/dist/icons/signal-low.js:
lucide-svelte/dist/icons/signal-medium.js:
lucide-svelte/dist/icons/signal-zero.js:
lucide-svelte/dist/icons/signal.js:
lucide-svelte/dist/icons/signature.js:
lucide-svelte/dist/icons/signpost-big.js:
lucide-svelte/dist/icons/signpost.js:
lucide-svelte/dist/icons/siren.js:
lucide-svelte/dist/icons/skip-back.js:
lucide-svelte/dist/icons/skip-forward.js:
lucide-svelte/dist/icons/skull.js:
lucide-svelte/dist/icons/slack.js:
lucide-svelte/dist/icons/slash.js:
lucide-svelte/dist/icons/slice.js:
lucide-svelte/dist/icons/sliders-horizontal.js:
lucide-svelte/dist/icons/smartphone-nfc.js:
lucide-svelte/dist/icons/smartphone-charging.js:
lucide-svelte/dist/icons/smartphone.js:
lucide-svelte/dist/icons/smile-plus.js:
lucide-svelte/dist/icons/smile.js:
lucide-svelte/dist/icons/snail.js:
lucide-svelte/dist/icons/snowflake.js:
lucide-svelte/dist/icons/soap-dispenser-droplet.js:
lucide-svelte/dist/icons/sofa.js:
lucide-svelte/dist/icons/soup.js:
lucide-svelte/dist/icons/space.js:
lucide-svelte/dist/icons/spade.js:
lucide-svelte/dist/icons/sparkle.js:
lucide-svelte/dist/icons/speaker.js:
lucide-svelte/dist/icons/spell-check-2.js:
lucide-svelte/dist/icons/speech.js:
lucide-svelte/dist/icons/spell-check.js:
lucide-svelte/dist/icons/spline-pointer.js:
lucide-svelte/dist/icons/spline.js:
lucide-svelte/dist/icons/split.js:
lucide-svelte/dist/icons/spool.js:
lucide-svelte/dist/icons/spotlight.js:
lucide-svelte/dist/icons/spray-can.js:
lucide-svelte/dist/icons/sprout.js:
lucide-svelte/dist/icons/square-dashed-bottom-code.js:
lucide-svelte/dist/icons/square-dashed-bottom.js:
lucide-svelte/dist/icons/square-dashed-top-solid.js:
lucide-svelte/dist/icons/square-pause.js:
lucide-svelte/dist/icons/square-radical.js:
lucide-svelte/dist/icons/square-round-corner.js:
lucide-svelte/dist/icons/square-square.js:
lucide-svelte/dist/icons/square-stack.js:
lucide-svelte/dist/icons/square-stop.js:
lucide-svelte/dist/icons/square.js:
lucide-svelte/dist/icons/squares-exclude.js:
lucide-svelte/dist/icons/squares-intersect.js:
lucide-svelte/dist/icons/squares-subtract.js:
lucide-svelte/dist/icons/squares-unite.js:
lucide-svelte/dist/icons/squircle-dashed.js:
lucide-svelte/dist/icons/squircle.js:
lucide-svelte/dist/icons/stamp.js:
lucide-svelte/dist/icons/squirrel.js:
lucide-svelte/dist/icons/star-off.js:
lucide-svelte/dist/icons/star-half.js:
lucide-svelte/dist/icons/star.js:
lucide-svelte/dist/icons/step-forward.js:
lucide-svelte/dist/icons/step-back.js:
lucide-svelte/dist/icons/stethoscope.js:
lucide-svelte/dist/icons/sticker.js:
lucide-svelte/dist/icons/sticky-note.js:
lucide-svelte/dist/icons/store.js:
lucide-svelte/dist/icons/stretch-vertical.js:
lucide-svelte/dist/icons/stretch-horizontal.js:
lucide-svelte/dist/icons/strikethrough.js:
lucide-svelte/dist/icons/sun-dim.js:
lucide-svelte/dist/icons/subscript.js:
lucide-svelte/dist/icons/sun-medium.js:
lucide-svelte/dist/icons/sun-moon.js:
lucide-svelte/dist/icons/sun-snow.js:
lucide-svelte/dist/icons/sun.js:
lucide-svelte/dist/icons/sunrise.js:
lucide-svelte/dist/icons/sunset.js:
lucide-svelte/dist/icons/superscript.js:
lucide-svelte/dist/icons/swatch-book.js:
lucide-svelte/dist/icons/switch-camera.js:
lucide-svelte/dist/icons/swiss-franc.js:
lucide-svelte/dist/icons/swords.js:
lucide-svelte/dist/icons/table-2.js:
lucide-svelte/dist/icons/sword.js:
lucide-svelte/dist/icons/syringe.js:
lucide-svelte/dist/icons/table-cells-merge.js:
lucide-svelte/dist/icons/table-cells-split.js:
lucide-svelte/dist/icons/table-columns-split.js:
lucide-svelte/dist/icons/table-of-contents.js:
lucide-svelte/dist/icons/table-properties.js:
lucide-svelte/dist/icons/table-rows-split.js:
lucide-svelte/dist/icons/tablet-smartphone.js:
lucide-svelte/dist/icons/table.js:
lucide-svelte/dist/icons/tablet.js:
lucide-svelte/dist/icons/tablets.js:
lucide-svelte/dist/icons/tag.js:
lucide-svelte/dist/icons/tally-1.js:
lucide-svelte/dist/icons/tags.js:
lucide-svelte/dist/icons/tally-2.js:
lucide-svelte/dist/icons/tally-4.js:
lucide-svelte/dist/icons/tally-3.js:
lucide-svelte/dist/icons/tangent.js:
lucide-svelte/dist/icons/tally-5.js:
lucide-svelte/dist/icons/target.js:
lucide-svelte/dist/icons/telescope.js:
lucide-svelte/dist/icons/tent-tree.js:
lucide-svelte/dist/icons/tent.js:
lucide-svelte/dist/icons/terminal.js:
lucide-svelte/dist/icons/test-tube.js:
lucide-svelte/dist/icons/test-tubes.js:
lucide-svelte/dist/icons/text-cursor-input.js:
lucide-svelte/dist/icons/text-cursor.js:
lucide-svelte/dist/icons/text-quote.js:
lucide-svelte/dist/icons/text-search.js:
lucide-svelte/dist/icons/text.js:
lucide-svelte/dist/icons/theater.js:
lucide-svelte/dist/icons/thermometer-snowflake.js:
lucide-svelte/dist/icons/thermometer-sun.js:
lucide-svelte/dist/icons/thumbs-down.js:
lucide-svelte/dist/icons/thermometer.js:
lucide-svelte/dist/icons/thumbs-up.js:
lucide-svelte/dist/icons/ticket-percent.js:
lucide-svelte/dist/icons/ticket-minus.js:
lucide-svelte/dist/icons/ticket-check.js:
lucide-svelte/dist/icons/ticket-plus.js:
lucide-svelte/dist/icons/ticket-slash.js:
lucide-svelte/dist/icons/ticket-x.js:
lucide-svelte/dist/icons/ticket.js:
lucide-svelte/dist/icons/tickets-plane.js:
lucide-svelte/dist/icons/timer-off.js:
lucide-svelte/dist/icons/tickets.js:
lucide-svelte/dist/icons/timer-reset.js:
lucide-svelte/dist/icons/timer.js:
lucide-svelte/dist/icons/toggle-left.js:
lucide-svelte/dist/icons/toggle-right.js:
lucide-svelte/dist/icons/toilet.js:
lucide-svelte/dist/icons/tool-case.js:
lucide-svelte/dist/icons/tornado.js:
lucide-svelte/dist/icons/torus.js:
lucide-svelte/dist/icons/touchpad-off.js:
lucide-svelte/dist/icons/touchpad.js:
lucide-svelte/dist/icons/tower-control.js:
lucide-svelte/dist/icons/toy-brick.js:
lucide-svelte/dist/icons/tractor.js:
lucide-svelte/dist/icons/traffic-cone.js:
lucide-svelte/dist/icons/train-front-tunnel.js:
lucide-svelte/dist/icons/train-front.js:
lucide-svelte/dist/icons/train-track.js:
lucide-svelte/dist/icons/transgender.js:
lucide-svelte/dist/icons/trash-2.js:
lucide-svelte/dist/icons/trash.js:
lucide-svelte/dist/icons/tree-deciduous.js:
lucide-svelte/dist/icons/trees.js:
lucide-svelte/dist/icons/tree-pine.js:
lucide-svelte/dist/icons/trello.js:
lucide-svelte/dist/icons/trending-down.js:
lucide-svelte/dist/icons/trending-up-down.js:
lucide-svelte/dist/icons/trending-up.js:
lucide-svelte/dist/icons/triangle-dashed.js:
lucide-svelte/dist/icons/triangle-right.js:
lucide-svelte/dist/icons/triangle.js:
lucide-svelte/dist/icons/trophy.js:
lucide-svelte/dist/icons/truck-electric.js:
lucide-svelte/dist/icons/turkish-lira.js:
lucide-svelte/dist/icons/truck.js:
lucide-svelte/dist/icons/turntable.js:
lucide-svelte/dist/icons/turtle.js:
lucide-svelte/dist/icons/tv-minimal-play.js:
lucide-svelte/dist/icons/tv.js:
lucide-svelte/dist/icons/twitch.js:
lucide-svelte/dist/icons/twitter.js:
lucide-svelte/dist/icons/type-outline.js:
lucide-svelte/dist/icons/type.js:
lucide-svelte/dist/icons/umbrella-off.js:
lucide-svelte/dist/icons/underline.js:
lucide-svelte/dist/icons/undo-2.js:
lucide-svelte/dist/icons/umbrella.js:
lucide-svelte/dist/icons/undo-dot.js:
lucide-svelte/dist/icons/undo.js:
lucide-svelte/dist/icons/unfold-horizontal.js:
lucide-svelte/dist/icons/unfold-vertical.js:
lucide-svelte/dist/icons/ungroup.js:
lucide-svelte/dist/icons/unlink.js:
lucide-svelte/dist/icons/unlink-2.js:
lucide-svelte/dist/icons/unplug.js:
lucide-svelte/dist/icons/upload.js:
lucide-svelte/dist/icons/usb.js:
lucide-svelte/dist/icons/user-check.js:
lucide-svelte/dist/icons/user-cog.js:
lucide-svelte/dist/icons/user-lock.js:
lucide-svelte/dist/icons/user-minus.js:
lucide-svelte/dist/icons/user-pen.js:
lucide-svelte/dist/icons/user-plus.js:
lucide-svelte/dist/icons/user-round-pen.js:
lucide-svelte/dist/icons/user-round-search.js:
lucide-svelte/dist/icons/user-search.js:
lucide-svelte/dist/icons/user-star.js:
lucide-svelte/dist/icons/user-x.js:
lucide-svelte/dist/icons/user.js:
lucide-svelte/dist/icons/users.js:
lucide-svelte/dist/icons/utility-pole.js:
lucide-svelte/dist/icons/variable.js:
lucide-svelte/dist/icons/vault.js:
lucide-svelte/dist/icons/vector-square.js:
lucide-svelte/dist/icons/venetian-mask.js:
lucide-svelte/dist/icons/vegan.js:
lucide-svelte/dist/icons/venus-and-mars.js:
lucide-svelte/dist/icons/venus.js:
lucide-svelte/dist/icons/vibrate-off.js:
lucide-svelte/dist/icons/vibrate.js:
lucide-svelte/dist/icons/video-off.js:
lucide-svelte/dist/icons/video.js:
lucide-svelte/dist/icons/videotape.js:
lucide-svelte/dist/icons/view.js:
lucide-svelte/dist/icons/voicemail.js:
lucide-svelte/dist/icons/volleyball.js:
lucide-svelte/dist/icons/volume-off.js:
lucide-svelte/dist/icons/volume-1.js:
lucide-svelte/dist/icons/volume-2.js:
lucide-svelte/dist/icons/volume-x.js:
lucide-svelte/dist/icons/volume.js:
lucide-svelte/dist/icons/vote.js:
lucide-svelte/dist/icons/wallet-cards.js:
lucide-svelte/dist/icons/wallet.js:
lucide-svelte/dist/icons/wallpaper.js:
lucide-svelte/dist/icons/wand.js:
lucide-svelte/dist/icons/warehouse.js:
lucide-svelte/dist/icons/washing-machine.js:
lucide-svelte/dist/icons/watch.js:
lucide-svelte/dist/icons/waves-ladder.js:
lucide-svelte/dist/icons/waves.js:
lucide-svelte/dist/icons/waypoints.js:
lucide-svelte/dist/icons/webcam.js:
lucide-svelte/dist/icons/webhook-off.js:
lucide-svelte/dist/icons/webhook.js:
lucide-svelte/dist/icons/weight.js:
lucide-svelte/dist/icons/wheat-off.js:
lucide-svelte/dist/icons/wheat.js:
lucide-svelte/dist/icons/whole-word.js:
lucide-svelte/dist/icons/wifi-cog.js:
lucide-svelte/dist/icons/wifi-high.js:
lucide-svelte/dist/icons/wifi-off.js:
lucide-svelte/dist/icons/wifi-low.js:
lucide-svelte/dist/icons/wifi-pen.js:
lucide-svelte/dist/icons/wifi-sync.js:
lucide-svelte/dist/icons/wifi-zero.js:
lucide-svelte/dist/icons/wifi.js:
lucide-svelte/dist/icons/wind.js:
lucide-svelte/dist/icons/wind-arrow-down.js:
lucide-svelte/dist/icons/wine-off.js:
lucide-svelte/dist/icons/wine.js:
lucide-svelte/dist/icons/workflow.js:
lucide-svelte/dist/icons/worm.js:
lucide-svelte/dist/icons/wrap-text.js:
lucide-svelte/dist/icons/x.js:
lucide-svelte/dist/icons/wrench.js:
lucide-svelte/dist/icons/youtube.js:
lucide-svelte/dist/icons/zap-off.js:
lucide-svelte/dist/icons/zap.js:
lucide-svelte/dist/icons/zoom-in.js:
lucide-svelte/dist/icons/zoom-out.js:
lucide-svelte/dist/icons/arrow-down-0-1.js:
lucide-svelte/dist/icons/arrow-down-1-0.js:
lucide-svelte/dist/icons/arrow-up-0-1.js:
lucide-svelte/dist/icons/arrow-up-1-0.js:
lucide-svelte/dist/icons/alarm-clock-check.js:
lucide-svelte/dist/icons/alarm-clock-minus.js:
lucide-svelte/dist/icons/alarm-clock-plus.js:
lucide-svelte/dist/icons/arrow-down-a-z.js:
lucide-svelte/dist/icons/arrow-down-z-a.js:
lucide-svelte/dist/icons/arrow-down-wide-narrow.js:
lucide-svelte/dist/icons/arrow-up-a-z.js:
lucide-svelte/dist/icons/arrow-up-narrow-wide.js:
lucide-svelte/dist/icons/arrow-up-z-a.js:
lucide-svelte/dist/icons/axis-3d.js:
lucide-svelte/dist/icons/badge-check.js:
lucide-svelte/dist/icons/badge-question-mark.js:
lucide-svelte/dist/icons/between-horizontal-end.js:
lucide-svelte/dist/icons/between-horizontal-start.js:
lucide-svelte/dist/icons/book-dashed.js:
lucide-svelte/dist/icons/braces.js:
lucide-svelte/dist/icons/captions.js:
lucide-svelte/dist/icons/chart-area.js:
lucide-svelte/dist/icons/chart-bar-big.js:
lucide-svelte/dist/icons/chart-bar.js:
lucide-svelte/dist/icons/chart-candlestick.js:
lucide-svelte/dist/icons/chart-column-big.js:
lucide-svelte/dist/icons/chart-column-increasing.js:
lucide-svelte/dist/icons/chart-column.js:
lucide-svelte/dist/icons/chart-line.js:
lucide-svelte/dist/icons/chart-no-axes-column-increasing.js:
lucide-svelte/dist/icons/chart-no-axes-column.js:
lucide-svelte/dist/icons/chart-no-axes-gantt.js:
lucide-svelte/dist/icons/chart-pie.js:
lucide-svelte/dist/icons/chart-scatter.js:
lucide-svelte/dist/icons/circle-alert.js:
lucide-svelte/dist/icons/circle-arrow-down.js:
lucide-svelte/dist/icons/circle-arrow-left.js:
lucide-svelte/dist/icons/circle-arrow-out-down-left.js:
lucide-svelte/dist/icons/circle-arrow-out-down-right.js:
lucide-svelte/dist/icons/circle-arrow-out-up-left.js:
lucide-svelte/dist/icons/circle-arrow-out-up-right.js:
lucide-svelte/dist/icons/circle-arrow-right.js:
lucide-svelte/dist/icons/circle-check-big.js:
lucide-svelte/dist/icons/circle-arrow-up.js:
lucide-svelte/dist/icons/circle-check.js:
lucide-svelte/dist/icons/circle-chevron-down.js:
lucide-svelte/dist/icons/circle-chevron-left.js:
lucide-svelte/dist/icons/circle-chevron-right.js:
lucide-svelte/dist/icons/circle-chevron-up.js:
lucide-svelte/dist/icons/circle-divide.js:
lucide-svelte/dist/icons/circle-gauge.js:
lucide-svelte/dist/icons/circle-minus.js:
lucide-svelte/dist/icons/circle-parking-off.js:
lucide-svelte/dist/icons/circle-parking.js:
lucide-svelte/dist/icons/circle-pause.js:
lucide-svelte/dist/icons/circle-play.js:
lucide-svelte/dist/icons/circle-percent.js:
lucide-svelte/dist/icons/circle-plus.js:
lucide-svelte/dist/icons/circle-power.js:
lucide-svelte/dist/icons/circle-question-mark.js:
lucide-svelte/dist/icons/circle-slash-2.js:
lucide-svelte/dist/icons/circle-stop.js:
lucide-svelte/dist/icons/circle-user-round.js:
lucide-svelte/dist/icons/circle-user.js:
lucide-svelte/dist/icons/circle-x.js:
lucide-svelte/dist/icons/clipboard-pen-line.js:
lucide-svelte/dist/icons/clipboard-pen.js:
lucide-svelte/dist/icons/cloud-download.js:
lucide-svelte/dist/icons/cloud-upload.js:
lucide-svelte/dist/icons/code-xml.js:
lucide-svelte/dist/icons/columns-2.js:
lucide-svelte/dist/icons/columns-3-cog.js:
lucide-svelte/dist/icons/columns-3.js:
lucide-svelte/dist/icons/contact-round.js:
lucide-svelte/dist/icons/diamond-percent.js:
lucide-svelte/dist/icons/earth.js:
lucide-svelte/dist/icons/ellipsis-vertical.js:
lucide-svelte/dist/icons/ellipsis.js:
lucide-svelte/dist/icons/file-axis-3d.js:
lucide-svelte/dist/icons/file-chart-column-increasing.js:
lucide-svelte/dist/icons/file-chart-column.js:
lucide-svelte/dist/icons/file-chart-line.js:
lucide-svelte/dist/icons/file-chart-pie.js:
lucide-svelte/dist/icons/file-cog.js:
lucide-svelte/dist/icons/file-pen-line.js:
lucide-svelte/dist/icons/file-pen.js:
lucide-svelte/dist/icons/file-play.js:
lucide-svelte/dist/icons/file-question-mark.js:
lucide-svelte/dist/icons/file-video-camera.js:
lucide-svelte/dist/icons/folder-cog.js:
lucide-svelte/dist/icons/folder-pen.js:
lucide-svelte/dist/icons/funnel-x.js:
lucide-svelte/dist/icons/funnel.js:
lucide-svelte/dist/icons/git-commit-horizontal.js:
lucide-svelte/dist/icons/grid-2x2-check.js:
lucide-svelte/dist/icons/grid-2x2-plus.js:
lucide-svelte/dist/icons/grid-2x2-x.js:
lucide-svelte/dist/icons/grid-3x3.js:
lucide-svelte/dist/icons/grid-2x2.js:
lucide-svelte/dist/icons/hand-grab.js:
lucide-svelte/dist/icons/hand-helping.js:
lucide-svelte/dist/icons/house.js:
lucide-svelte/dist/icons/ice-cream-bowl.js:
lucide-svelte/dist/icons/ice-cream-cone.js:
lucide-svelte/dist/icons/indent-decrease.js:
lucide-svelte/dist/icons/indent-increase.js:
lucide-svelte/dist/icons/laptop-minimal.js:
lucide-svelte/dist/icons/layers.js:
lucide-svelte/dist/icons/loader-circle.js:
lucide-svelte/dist/icons/lock-keyhole-open.js:
lucide-svelte/dist/icons/lock-open.js:
lucide-svelte/dist/icons/mail-question-mark.js:
lucide-svelte/dist/icons/map-pin-pen.js:
lucide-svelte/dist/icons/message-circle-question-mark.js:
lucide-svelte/dist/icons/mic-vocal.js:
lucide-svelte/dist/icons/move-3d.js:
lucide-svelte/dist/icons/octagon-alert.js:
lucide-svelte/dist/icons/octagon-pause.js:
lucide-svelte/dist/icons/octagon-x.js:
lucide-svelte/dist/icons/paintbrush-vertical.js:
lucide-svelte/dist/icons/panel-bottom-dashed.js:
lucide-svelte/dist/icons/panel-left-dashed.js:
lucide-svelte/dist/icons/panel-left-close.js:
lucide-svelte/dist/icons/panel-left-open.js:
lucide-svelte/dist/icons/panel-left.js:
lucide-svelte/dist/icons/panel-right-dashed.js:
lucide-svelte/dist/icons/panel-top-dashed.js:
lucide-svelte/dist/icons/panels-top-left.js:
lucide-svelte/dist/icons/pen-line.js:
lucide-svelte/dist/icons/pen.js:
lucide-svelte/dist/icons/plug-zap.js:
lucide-svelte/dist/icons/rectangle-ellipsis.js:
lucide-svelte/dist/icons/rotate-3d.js:
lucide-svelte/dist/icons/rows-2.js:
lucide-svelte/dist/icons/rows-3.js:
lucide-svelte/dist/icons/scale-3d.js:
lucide-svelte/dist/icons/send-horizontal.js:
lucide-svelte/dist/icons/shield-question-mark.js:
lucide-svelte/dist/icons/shield-x.js:
lucide-svelte/dist/icons/sliders-vertical.js:
lucide-svelte/dist/icons/sparkles.js:
lucide-svelte/dist/icons/square-arrow-down-left.js:
lucide-svelte/dist/icons/square-activity.js:
lucide-svelte/dist/icons/square-arrow-down-right.js:
lucide-svelte/dist/icons/square-arrow-down.js:
lucide-svelte/dist/icons/square-arrow-left.js:
lucide-svelte/dist/icons/square-arrow-out-down-right.js:
lucide-svelte/dist/icons/square-arrow-out-up-left.js:
lucide-svelte/dist/icons/square-arrow-out-down-left.js:
lucide-svelte/dist/icons/square-arrow-out-up-right.js:
lucide-svelte/dist/icons/square-arrow-up-left.js:
lucide-svelte/dist/icons/square-arrow-right.js:
lucide-svelte/dist/icons/square-arrow-up.js:
lucide-svelte/dist/icons/square-arrow-up-right.js:
lucide-svelte/dist/icons/square-asterisk.js:
lucide-svelte/dist/icons/square-bottom-dashed-scissors.js:
lucide-svelte/dist/icons/square-check-big.js:
lucide-svelte/dist/icons/square-chart-gantt.js:
lucide-svelte/dist/icons/square-check.js:
lucide-svelte/dist/icons/square-chevron-down.js:
lucide-svelte/dist/icons/square-chevron-left.js:
lucide-svelte/dist/icons/square-chevron-right.js:
lucide-svelte/dist/icons/square-chevron-up.js:
lucide-svelte/dist/icons/square-code.js:
lucide-svelte/dist/icons/square-dashed-kanban.js:
lucide-svelte/dist/icons/square-dashed-mouse-pointer.js:
lucide-svelte/dist/icons/square-dashed.js:
lucide-svelte/dist/icons/square-divide.js:
lucide-svelte/dist/icons/square-dot.js:
lucide-svelte/dist/icons/square-equal.js:
lucide-svelte/dist/icons/square-function.js:
lucide-svelte/dist/icons/square-kanban.js:
lucide-svelte/dist/icons/square-library.js:
lucide-svelte/dist/icons/square-m.js:
lucide-svelte/dist/icons/square-menu.js:
lucide-svelte/dist/icons/square-minus.js:
lucide-svelte/dist/icons/square-mouse-pointer.js:
lucide-svelte/dist/icons/square-parking-off.js:
lucide-svelte/dist/icons/square-parking.js:
lucide-svelte/dist/icons/square-pen.js:
lucide-svelte/dist/icons/square-percent.js:
lucide-svelte/dist/icons/square-pi.js:
lucide-svelte/dist/icons/square-play.js:
lucide-svelte/dist/icons/square-pilcrow.js:
lucide-svelte/dist/icons/square-plus.js:
lucide-svelte/dist/icons/square-scissors.js:
lucide-svelte/dist/icons/square-power.js:
lucide-svelte/dist/icons/square-sigma.js:
lucide-svelte/dist/icons/square-slash.js:
lucide-svelte/dist/icons/square-split-horizontal.js:
lucide-svelte/dist/icons/square-split-vertical.js:
lucide-svelte/dist/icons/square-terminal.js:
lucide-svelte/dist/icons/square-user-round.js:
lucide-svelte/dist/icons/square-user.js:
lucide-svelte/dist/icons/square-x.js:
lucide-svelte/dist/icons/test-tube-diagonal.js:
lucide-svelte/dist/icons/text-select.js:
lucide-svelte/dist/icons/tram-front.js:
lucide-svelte/dist/icons/tree-palm.js:
lucide-svelte/dist/icons/triangle-alert.js:
lucide-svelte/dist/icons/tv-minimal.js:
lucide-svelte/dist/icons/university.js:
lucide-svelte/dist/icons/user-round-check.js:
lucide-svelte/dist/icons/user-round-cog.js:
lucide-svelte/dist/icons/user-round-minus.js:
lucide-svelte/dist/icons/user-round-plus.js:
lucide-svelte/dist/icons/user-round-x.js:
lucide-svelte/dist/icons/user-round.js:
lucide-svelte/dist/icons/users-round.js:
lucide-svelte/dist/icons/utensils-crossed.js:
lucide-svelte/dist/icons/utensils.js:
lucide-svelte/dist/icons/wallet-minimal.js:
lucide-svelte/dist/icons/wand-sparkles.js:
lucide-svelte/dist/aliases/prefixed.js:
lucide-svelte/dist/aliases/suffixed.js:
lucide-svelte/dist/aliases/index.js:
lucide-svelte/dist/types.js:
lucide-svelte/dist/lucide-svelte.js:
  (**
   * @license lucide-svelte v0.536.0 - ISC
   *
   * ISC License
   * 
   * Copyright (c) for portions of Lucide are held by Cole Bemis 2013-2022 as part of Feather (MIT). All other copyright (c) for Lucide are held by Lucide Contributors 2022.
   * 
   * Permission to use, copy, modify, and/or distribute this software for any
   * purpose with or without fee is hereby granted, provided that the above
   * copyright notice and this permission notice appear in all copies.
   * 
   * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   * 
   *)

lucide-svelte/dist/icons/a-arrow-down.svelte:
lucide-svelte/dist/icons/a-arrow-up.svelte:
lucide-svelte/dist/icons/accessibility.svelte:
lucide-svelte/dist/icons/a-large-small.svelte:
lucide-svelte/dist/icons/activity.svelte:
lucide-svelte/dist/icons/air-vent.svelte:
lucide-svelte/dist/icons/airplay.svelte:
lucide-svelte/dist/icons/alarm-clock-check.svelte:
lucide-svelte/dist/icons/alarm-clock-minus.svelte:
lucide-svelte/dist/icons/alarm-clock-off.svelte:
lucide-svelte/dist/icons/alarm-clock-plus.svelte:
lucide-svelte/dist/icons/alarm-clock.svelte:
lucide-svelte/dist/icons/alarm-smoke.svelte:
lucide-svelte/dist/icons/album.svelte:
lucide-svelte/dist/icons/align-center-horizontal.svelte:
lucide-svelte/dist/icons/align-center-vertical.svelte:
lucide-svelte/dist/icons/align-center.svelte:
lucide-svelte/dist/icons/align-end-horizontal.svelte:
lucide-svelte/dist/icons/align-end-vertical.svelte:
lucide-svelte/dist/icons/align-horizontal-distribute-center.svelte:
lucide-svelte/dist/icons/align-horizontal-distribute-end.svelte:
lucide-svelte/dist/icons/align-horizontal-distribute-start.svelte:
lucide-svelte/dist/icons/align-horizontal-justify-end.svelte:
lucide-svelte/dist/icons/align-horizontal-justify-center.svelte:
lucide-svelte/dist/icons/align-horizontal-justify-start.svelte:
lucide-svelte/dist/icons/align-horizontal-space-around.svelte:
lucide-svelte/dist/icons/align-horizontal-space-between.svelte:
lucide-svelte/dist/icons/align-left.svelte:
lucide-svelte/dist/icons/align-justify.svelte:
lucide-svelte/dist/icons/align-right.svelte:
lucide-svelte/dist/icons/align-start-horizontal.svelte:
lucide-svelte/dist/icons/align-start-vertical.svelte:
lucide-svelte/dist/icons/align-vertical-distribute-center.svelte:
lucide-svelte/dist/icons/align-vertical-distribute-end.svelte:
lucide-svelte/dist/icons/align-vertical-distribute-start.svelte:
lucide-svelte/dist/icons/align-vertical-justify-end.svelte:
lucide-svelte/dist/icons/align-vertical-justify-center.svelte:
lucide-svelte/dist/icons/align-vertical-justify-start.svelte:
lucide-svelte/dist/icons/align-vertical-space-between.svelte:
lucide-svelte/dist/icons/align-vertical-space-around.svelte:
lucide-svelte/dist/icons/ambulance.svelte:
lucide-svelte/dist/icons/ampersand.svelte:
lucide-svelte/dist/icons/ampersands.svelte:
lucide-svelte/dist/icons/amphora.svelte:
lucide-svelte/dist/icons/anchor.svelte:
lucide-svelte/dist/icons/angry.svelte:
lucide-svelte/dist/icons/annoyed.svelte:
lucide-svelte/dist/icons/antenna.svelte:
lucide-svelte/dist/icons/anvil.svelte:
lucide-svelte/dist/icons/aperture.svelte:
lucide-svelte/dist/icons/app-window-mac.svelte:
lucide-svelte/dist/icons/app-window.svelte:
lucide-svelte/dist/icons/apple.svelte:
lucide-svelte/dist/icons/archive-restore.svelte:
lucide-svelte/dist/icons/archive-x.svelte:
lucide-svelte/dist/icons/archive.svelte:
lucide-svelte/dist/icons/armchair.svelte:
lucide-svelte/dist/icons/arrow-big-down-dash.svelte:
lucide-svelte/dist/icons/arrow-big-down.svelte:
lucide-svelte/dist/icons/arrow-big-left-dash.svelte:
lucide-svelte/dist/icons/arrow-big-left.svelte:
lucide-svelte/dist/icons/arrow-big-right-dash.svelte:
lucide-svelte/dist/icons/arrow-big-right.svelte:
lucide-svelte/dist/icons/arrow-big-up-dash.svelte:
lucide-svelte/dist/icons/arrow-big-up.svelte:
lucide-svelte/dist/icons/arrow-down-0-1.svelte:
lucide-svelte/dist/icons/arrow-down-1-0.svelte:
lucide-svelte/dist/icons/arrow-down-a-z.svelte:
lucide-svelte/dist/icons/arrow-down-from-line.svelte:
lucide-svelte/dist/icons/arrow-down-left.svelte:
lucide-svelte/dist/icons/arrow-down-narrow-wide.svelte:
lucide-svelte/dist/icons/arrow-down-right.svelte:
lucide-svelte/dist/icons/arrow-down-to-dot.svelte:
lucide-svelte/dist/icons/arrow-down-to-line.svelte:
lucide-svelte/dist/icons/arrow-down-up.svelte:
lucide-svelte/dist/icons/arrow-down-wide-narrow.svelte:
lucide-svelte/dist/icons/arrow-down-z-a.svelte:
lucide-svelte/dist/icons/arrow-down.svelte:
lucide-svelte/dist/icons/arrow-left-from-line.svelte:
lucide-svelte/dist/icons/arrow-left-right.svelte:
lucide-svelte/dist/icons/arrow-left-to-line.svelte:
lucide-svelte/dist/icons/arrow-left.svelte:
lucide-svelte/dist/icons/arrow-right-from-line.svelte:
lucide-svelte/dist/icons/arrow-right-left.svelte:
lucide-svelte/dist/icons/arrow-right-to-line.svelte:
lucide-svelte/dist/icons/arrow-right.svelte:
lucide-svelte/dist/icons/arrow-up-0-1.svelte:
lucide-svelte/dist/icons/arrow-up-1-0.svelte:
lucide-svelte/dist/icons/arrow-up-a-z.svelte:
lucide-svelte/dist/icons/arrow-up-down.svelte:
lucide-svelte/dist/icons/arrow-up-from-dot.svelte:
lucide-svelte/dist/icons/arrow-up-from-line.svelte:
lucide-svelte/dist/icons/arrow-up-left.svelte:
lucide-svelte/dist/icons/arrow-up-narrow-wide.svelte:
lucide-svelte/dist/icons/arrow-up-right.svelte:
lucide-svelte/dist/icons/arrow-up-to-line.svelte:
lucide-svelte/dist/icons/arrow-up-wide-narrow.svelte:
lucide-svelte/dist/icons/arrow-up-z-a.svelte:
lucide-svelte/dist/icons/arrow-up.svelte:
lucide-svelte/dist/icons/arrows-up-from-line.svelte:
lucide-svelte/dist/icons/asterisk.svelte:
lucide-svelte/dist/icons/at-sign.svelte:
lucide-svelte/dist/icons/atom.svelte:
lucide-svelte/dist/icons/audio-lines.svelte:
lucide-svelte/dist/icons/audio-waveform.svelte:
lucide-svelte/dist/icons/award.svelte:
lucide-svelte/dist/icons/axe.svelte:
lucide-svelte/dist/icons/axis-3d.svelte:
lucide-svelte/dist/icons/backpack.svelte:
lucide-svelte/dist/icons/baby.svelte:
lucide-svelte/dist/icons/badge-alert.svelte:
lucide-svelte/dist/icons/badge-cent.svelte:
lucide-svelte/dist/icons/badge-check.svelte:
lucide-svelte/dist/icons/badge-dollar-sign.svelte:
lucide-svelte/dist/icons/badge-euro.svelte:
lucide-svelte/dist/icons/badge-indian-rupee.svelte:
lucide-svelte/dist/icons/badge-info.svelte:
lucide-svelte/dist/icons/badge-japanese-yen.svelte:
lucide-svelte/dist/icons/badge-minus.svelte:
lucide-svelte/dist/icons/badge-percent.svelte:
lucide-svelte/dist/icons/badge-plus.svelte:
lucide-svelte/dist/icons/badge-pound-sterling.svelte:
lucide-svelte/dist/icons/badge-question-mark.svelte:
lucide-svelte/dist/icons/badge-russian-ruble.svelte:
lucide-svelte/dist/icons/badge-swiss-franc.svelte:
lucide-svelte/dist/icons/badge-turkish-lira.svelte:
lucide-svelte/dist/icons/badge-x.svelte:
lucide-svelte/dist/icons/badge.svelte:
lucide-svelte/dist/icons/baggage-claim.svelte:
lucide-svelte/dist/icons/ban.svelte:
lucide-svelte/dist/icons/banana.svelte:
lucide-svelte/dist/icons/bandage.svelte:
lucide-svelte/dist/icons/banknote-arrow-down.svelte:
lucide-svelte/dist/icons/banknote-arrow-up.svelte:
lucide-svelte/dist/icons/banknote.svelte:
lucide-svelte/dist/icons/banknote-x.svelte:
lucide-svelte/dist/icons/barcode.svelte:
lucide-svelte/dist/icons/barrel.svelte:
lucide-svelte/dist/icons/baseline.svelte:
lucide-svelte/dist/icons/bath.svelte:
lucide-svelte/dist/icons/battery-charging.svelte:
lucide-svelte/dist/icons/battery-full.svelte:
lucide-svelte/dist/icons/battery-low.svelte:
lucide-svelte/dist/icons/battery-medium.svelte:
lucide-svelte/dist/icons/battery-plus.svelte:
lucide-svelte/dist/icons/battery-warning.svelte:
lucide-svelte/dist/icons/battery.svelte:
lucide-svelte/dist/icons/beaker.svelte:
lucide-svelte/dist/icons/bean-off.svelte:
lucide-svelte/dist/icons/bean.svelte:
lucide-svelte/dist/icons/bed-double.svelte:
lucide-svelte/dist/icons/bed-single.svelte:
lucide-svelte/dist/icons/bed.svelte:
lucide-svelte/dist/icons/beef.svelte:
lucide-svelte/dist/icons/beer-off.svelte:
lucide-svelte/dist/icons/beer.svelte:
lucide-svelte/dist/icons/bell-dot.svelte:
lucide-svelte/dist/icons/bell-electric.svelte:
lucide-svelte/dist/icons/bell-minus.svelte:
lucide-svelte/dist/icons/bell-off.svelte:
lucide-svelte/dist/icons/bell-plus.svelte:
lucide-svelte/dist/icons/bell-ring.svelte:
lucide-svelte/dist/icons/bell.svelte:
lucide-svelte/dist/icons/between-horizontal-end.svelte:
lucide-svelte/dist/icons/between-horizontal-start.svelte:
lucide-svelte/dist/icons/between-vertical-start.svelte:
lucide-svelte/dist/icons/between-vertical-end.svelte:
lucide-svelte/dist/icons/biceps-flexed.svelte:
lucide-svelte/dist/icons/bike.svelte:
lucide-svelte/dist/icons/binary.svelte:
lucide-svelte/dist/icons/binoculars.svelte:
lucide-svelte/dist/icons/biohazard.svelte:
lucide-svelte/dist/icons/bird.svelte:
lucide-svelte/dist/icons/bitcoin.svelte:
lucide-svelte/dist/icons/blend.svelte:
lucide-svelte/dist/icons/blinds.svelte:
lucide-svelte/dist/icons/blocks.svelte:
lucide-svelte/dist/icons/bluetooth-connected.svelte:
lucide-svelte/dist/icons/bluetooth-off.svelte:
lucide-svelte/dist/icons/bluetooth-searching.svelte:
lucide-svelte/dist/icons/bluetooth.svelte:
lucide-svelte/dist/icons/bold.svelte:
lucide-svelte/dist/icons/bolt.svelte:
lucide-svelte/dist/icons/bomb.svelte:
lucide-svelte/dist/icons/bone.svelte:
lucide-svelte/dist/icons/book-a.svelte:
lucide-svelte/dist/icons/book-alert.svelte:
lucide-svelte/dist/icons/book-audio.svelte:
lucide-svelte/dist/icons/book-check.svelte:
lucide-svelte/dist/icons/book-copy.svelte:
lucide-svelte/dist/icons/book-dashed.svelte:
lucide-svelte/dist/icons/book-down.svelte:
lucide-svelte/dist/icons/book-headphones.svelte:
lucide-svelte/dist/icons/book-heart.svelte:
lucide-svelte/dist/icons/book-image.svelte:
lucide-svelte/dist/icons/book-lock.svelte:
lucide-svelte/dist/icons/book-key.svelte:
lucide-svelte/dist/icons/book-marked.svelte:
lucide-svelte/dist/icons/book-minus.svelte:
lucide-svelte/dist/icons/book-open-check.svelte:
lucide-svelte/dist/icons/book-open-text.svelte:
lucide-svelte/dist/icons/book-open.svelte:
lucide-svelte/dist/icons/book-text.svelte:
lucide-svelte/dist/icons/book-plus.svelte:
lucide-svelte/dist/icons/book-type.svelte:
lucide-svelte/dist/icons/book-up-2.svelte:
lucide-svelte/dist/icons/book-up.svelte:
lucide-svelte/dist/icons/book-user.svelte:
lucide-svelte/dist/icons/book.svelte:
lucide-svelte/dist/icons/book-x.svelte:
lucide-svelte/dist/icons/bookmark-check.svelte:
lucide-svelte/dist/icons/bookmark-minus.svelte:
lucide-svelte/dist/icons/bookmark-x.svelte:
lucide-svelte/dist/icons/bookmark-plus.svelte:
lucide-svelte/dist/icons/boom-box.svelte:
lucide-svelte/dist/icons/bookmark.svelte:
lucide-svelte/dist/icons/bot-message-square.svelte:
lucide-svelte/dist/icons/bot-off.svelte:
lucide-svelte/dist/icons/bot.svelte:
lucide-svelte/dist/icons/bottle-wine.svelte:
lucide-svelte/dist/icons/bow-arrow.svelte:
lucide-svelte/dist/icons/box.svelte:
lucide-svelte/dist/icons/boxes.svelte:
lucide-svelte/dist/icons/braces.svelte:
lucide-svelte/dist/icons/brackets.svelte:
lucide-svelte/dist/icons/brain-circuit.svelte:
lucide-svelte/dist/icons/brain-cog.svelte:
lucide-svelte/dist/icons/brain.svelte:
lucide-svelte/dist/icons/brick-wall-fire.svelte:
lucide-svelte/dist/icons/brick-wall.svelte:
lucide-svelte/dist/icons/briefcase-business.svelte:
lucide-svelte/dist/icons/briefcase-conveyor-belt.svelte:
lucide-svelte/dist/icons/briefcase-medical.svelte:
lucide-svelte/dist/icons/briefcase.svelte:
lucide-svelte/dist/icons/bring-to-front.svelte:
lucide-svelte/dist/icons/brush-cleaning.svelte:
lucide-svelte/dist/icons/brush.svelte:
lucide-svelte/dist/icons/bubbles.svelte:
lucide-svelte/dist/icons/bug-off.svelte:
lucide-svelte/dist/icons/bug-play.svelte:
lucide-svelte/dist/icons/bug.svelte:
lucide-svelte/dist/icons/building-2.svelte:
lucide-svelte/dist/icons/building.svelte:
lucide-svelte/dist/icons/bus-front.svelte:
lucide-svelte/dist/icons/bus.svelte:
lucide-svelte/dist/icons/cable-car.svelte:
lucide-svelte/dist/icons/cable.svelte:
lucide-svelte/dist/icons/cake-slice.svelte:
lucide-svelte/dist/icons/cake.svelte:
lucide-svelte/dist/icons/calculator.svelte:
lucide-svelte/dist/icons/calendar-1.svelte:
lucide-svelte/dist/icons/calendar-arrow-down.svelte:
lucide-svelte/dist/icons/calendar-arrow-up.svelte:
lucide-svelte/dist/icons/calendar-check-2.svelte:
lucide-svelte/dist/icons/calendar-check.svelte:
lucide-svelte/dist/icons/calendar-clock.svelte:
lucide-svelte/dist/icons/calendar-cog.svelte:
lucide-svelte/dist/icons/calendar-days.svelte:
lucide-svelte/dist/icons/calendar-fold.svelte:
lucide-svelte/dist/icons/calendar-heart.svelte:
lucide-svelte/dist/icons/calendar-minus-2.svelte:
lucide-svelte/dist/icons/calendar-minus.svelte:
lucide-svelte/dist/icons/calendar-off.svelte:
lucide-svelte/dist/icons/calendar-plus-2.svelte:
lucide-svelte/dist/icons/calendar-plus.svelte:
lucide-svelte/dist/icons/calendar-range.svelte:
lucide-svelte/dist/icons/calendar-sync.svelte:
lucide-svelte/dist/icons/calendar-search.svelte:
lucide-svelte/dist/icons/calendar-x-2.svelte:
lucide-svelte/dist/icons/calendar-x.svelte:
lucide-svelte/dist/icons/calendar.svelte:
lucide-svelte/dist/icons/camera-off.svelte:
lucide-svelte/dist/icons/camera.svelte:
lucide-svelte/dist/icons/candy-cane.svelte:
lucide-svelte/dist/icons/candy-off.svelte:
lucide-svelte/dist/icons/candy.svelte:
lucide-svelte/dist/icons/cannabis.svelte:
lucide-svelte/dist/icons/captions-off.svelte:
lucide-svelte/dist/icons/captions.svelte:
lucide-svelte/dist/icons/car-front.svelte:
lucide-svelte/dist/icons/car-taxi-front.svelte:
lucide-svelte/dist/icons/car.svelte:
lucide-svelte/dist/icons/caravan.svelte:
lucide-svelte/dist/icons/card-sim.svelte:
lucide-svelte/dist/icons/carrot.svelte:
lucide-svelte/dist/icons/case-lower.svelte:
lucide-svelte/dist/icons/case-sensitive.svelte:
lucide-svelte/dist/icons/case-upper.svelte:
lucide-svelte/dist/icons/cassette-tape.svelte:
lucide-svelte/dist/icons/cast.svelte:
lucide-svelte/dist/icons/castle.svelte:
lucide-svelte/dist/icons/cat.svelte:
lucide-svelte/dist/icons/cctv.svelte:
lucide-svelte/dist/icons/chart-area.svelte:
lucide-svelte/dist/icons/chart-bar-big.svelte:
lucide-svelte/dist/icons/chart-bar-decreasing.svelte:
lucide-svelte/dist/icons/chart-bar-increasing.svelte:
lucide-svelte/dist/icons/chart-bar-stacked.svelte:
lucide-svelte/dist/icons/chart-bar.svelte:
lucide-svelte/dist/icons/chart-candlestick.svelte:
lucide-svelte/dist/icons/chart-column-big.svelte:
lucide-svelte/dist/icons/chart-column-decreasing.svelte:
lucide-svelte/dist/icons/chart-column-increasing.svelte:
lucide-svelte/dist/icons/chart-column-stacked.svelte:
lucide-svelte/dist/icons/chart-column.svelte:
lucide-svelte/dist/icons/chart-gantt.svelte:
lucide-svelte/dist/icons/chart-network.svelte:
lucide-svelte/dist/icons/chart-line.svelte:
lucide-svelte/dist/icons/chart-no-axes-column-decreasing.svelte:
lucide-svelte/dist/icons/chart-no-axes-column-increasing.svelte:
lucide-svelte/dist/icons/chart-no-axes-column.svelte:
lucide-svelte/dist/icons/chart-no-axes-combined.svelte:
lucide-svelte/dist/icons/chart-no-axes-gantt.svelte:
lucide-svelte/dist/icons/chart-pie.svelte:
lucide-svelte/dist/icons/chart-scatter.svelte:
lucide-svelte/dist/icons/chart-spline.svelte:
lucide-svelte/dist/icons/check-check.svelte:
lucide-svelte/dist/icons/check-line.svelte:
lucide-svelte/dist/icons/check.svelte:
lucide-svelte/dist/icons/chef-hat.svelte:
lucide-svelte/dist/icons/cherry.svelte:
lucide-svelte/dist/icons/chevron-down.svelte:
lucide-svelte/dist/icons/chevron-first.svelte:
lucide-svelte/dist/icons/chevron-last.svelte:
lucide-svelte/dist/icons/chevron-left.svelte:
lucide-svelte/dist/icons/chevron-right.svelte:
lucide-svelte/dist/icons/chevron-up.svelte:
lucide-svelte/dist/icons/chevrons-down-up.svelte:
lucide-svelte/dist/icons/chevrons-down.svelte:
lucide-svelte/dist/icons/chevrons-left-right-ellipsis.svelte:
lucide-svelte/dist/icons/chevrons-left-right.svelte:
lucide-svelte/dist/icons/chevrons-left.svelte:
lucide-svelte/dist/icons/chevrons-right-left.svelte:
lucide-svelte/dist/icons/chevrons-right.svelte:
lucide-svelte/dist/icons/chevrons-up-down.svelte:
lucide-svelte/dist/icons/chevrons-up.svelte:
lucide-svelte/dist/icons/chrome.svelte:
lucide-svelte/dist/icons/church.svelte:
lucide-svelte/dist/icons/cigarette-off.svelte:
lucide-svelte/dist/icons/cigarette.svelte:
lucide-svelte/dist/icons/circle-alert.svelte:
lucide-svelte/dist/icons/circle-arrow-down.svelte:
lucide-svelte/dist/icons/circle-arrow-left.svelte:
lucide-svelte/dist/icons/circle-arrow-out-down-left.svelte:
lucide-svelte/dist/icons/circle-arrow-out-down-right.svelte:
lucide-svelte/dist/icons/circle-arrow-out-up-right.svelte:
lucide-svelte/dist/icons/circle-arrow-out-up-left.svelte:
lucide-svelte/dist/icons/circle-arrow-right.svelte:
lucide-svelte/dist/icons/circle-arrow-up.svelte:
lucide-svelte/dist/icons/circle-check-big.svelte:
lucide-svelte/dist/icons/circle-check.svelte:
lucide-svelte/dist/icons/circle-chevron-down.svelte:
lucide-svelte/dist/icons/circle-chevron-left.svelte:
lucide-svelte/dist/icons/circle-chevron-right.svelte:
lucide-svelte/dist/icons/circle-chevron-up.svelte:
lucide-svelte/dist/icons/circle-dashed.svelte:
lucide-svelte/dist/icons/circle-divide.svelte:
lucide-svelte/dist/icons/circle-dollar-sign.svelte:
lucide-svelte/dist/icons/circle-dot-dashed.svelte:
lucide-svelte/dist/icons/circle-dot.svelte:
lucide-svelte/dist/icons/circle-ellipsis.svelte:
lucide-svelte/dist/icons/circle-equal.svelte:
lucide-svelte/dist/icons/circle-fading-arrow-up.svelte:
lucide-svelte/dist/icons/circle-fading-plus.svelte:
lucide-svelte/dist/icons/circle-gauge.svelte:
lucide-svelte/dist/icons/circle-minus.svelte:
lucide-svelte/dist/icons/circle-off.svelte:
lucide-svelte/dist/icons/circle-parking-off.svelte:
lucide-svelte/dist/icons/circle-parking.svelte:
lucide-svelte/dist/icons/circle-pause.svelte:
lucide-svelte/dist/icons/circle-percent.svelte:
lucide-svelte/dist/icons/circle-plus.svelte:
lucide-svelte/dist/icons/circle-play.svelte:
lucide-svelte/dist/icons/circle-pound-sterling.svelte:
lucide-svelte/dist/icons/circle-power.svelte:
lucide-svelte/dist/icons/circle-question-mark.svelte:
lucide-svelte/dist/icons/circle-slash-2.svelte:
lucide-svelte/dist/icons/circle-small.svelte:
lucide-svelte/dist/icons/circle-slash.svelte:
lucide-svelte/dist/icons/circle-stop.svelte:
lucide-svelte/dist/icons/circle-user-round.svelte:
lucide-svelte/dist/icons/circle-user.svelte:
lucide-svelte/dist/icons/circle-x.svelte:
lucide-svelte/dist/icons/circle.svelte:
lucide-svelte/dist/icons/circuit-board.svelte:
lucide-svelte/dist/icons/citrus.svelte:
lucide-svelte/dist/icons/clapperboard.svelte:
lucide-svelte/dist/icons/clipboard-check.svelte:
lucide-svelte/dist/icons/clipboard-clock.svelte:
lucide-svelte/dist/icons/clipboard-copy.svelte:
lucide-svelte/dist/icons/clipboard-list.svelte:
lucide-svelte/dist/icons/clipboard-minus.svelte:
lucide-svelte/dist/icons/clipboard-paste.svelte:
lucide-svelte/dist/icons/clipboard-pen-line.svelte:
lucide-svelte/dist/icons/clipboard-pen.svelte:
lucide-svelte/dist/icons/clipboard-plus.svelte:
lucide-svelte/dist/icons/clipboard-type.svelte:
lucide-svelte/dist/icons/clipboard-x.svelte:
lucide-svelte/dist/icons/clipboard.svelte:
lucide-svelte/dist/icons/clock-1.svelte:
lucide-svelte/dist/icons/clock-10.svelte:
lucide-svelte/dist/icons/clock-11.svelte:
lucide-svelte/dist/icons/clock-12.svelte:
lucide-svelte/dist/icons/clock-2.svelte:
lucide-svelte/dist/icons/clock-3.svelte:
lucide-svelte/dist/icons/clock-4.svelte:
lucide-svelte/dist/icons/clock-5.svelte:
lucide-svelte/dist/icons/clock-6.svelte:
lucide-svelte/dist/icons/clock-7.svelte:
lucide-svelte/dist/icons/clock-8.svelte:
lucide-svelte/dist/icons/clock-9.svelte:
lucide-svelte/dist/icons/clock-alert.svelte:
lucide-svelte/dist/icons/clock-arrow-down.svelte:
lucide-svelte/dist/icons/clock-arrow-up.svelte:
lucide-svelte/dist/icons/clock-fading.svelte:
lucide-svelte/dist/icons/clock-plus.svelte:
lucide-svelte/dist/icons/clock.svelte:
lucide-svelte/dist/icons/closed-caption.svelte:
lucide-svelte/dist/icons/cloud-alert.svelte:
lucide-svelte/dist/icons/cloud-check.svelte:
lucide-svelte/dist/icons/cloud-cog.svelte:
lucide-svelte/dist/icons/cloud-download.svelte:
lucide-svelte/dist/icons/cloud-drizzle.svelte:
lucide-svelte/dist/icons/cloud-fog.svelte:
lucide-svelte/dist/icons/cloud-hail.svelte:
lucide-svelte/dist/icons/cloud-lightning.svelte:
lucide-svelte/dist/icons/cloud-moon-rain.svelte:
lucide-svelte/dist/icons/cloud-moon.svelte:
lucide-svelte/dist/icons/cloud-off.svelte:
lucide-svelte/dist/icons/cloud-rain-wind.svelte:
lucide-svelte/dist/icons/cloud-rain.svelte:
lucide-svelte/dist/icons/cloud-snow.svelte:
lucide-svelte/dist/icons/cloud-sun-rain.svelte:
lucide-svelte/dist/icons/cloud-sun.svelte:
lucide-svelte/dist/icons/cloud-upload.svelte:
lucide-svelte/dist/icons/cloud.svelte:
lucide-svelte/dist/icons/cloudy.svelte:
lucide-svelte/dist/icons/clover.svelte:
lucide-svelte/dist/icons/club.svelte:
lucide-svelte/dist/icons/code-xml.svelte:
lucide-svelte/dist/icons/code.svelte:
lucide-svelte/dist/icons/codepen.svelte:
lucide-svelte/dist/icons/codesandbox.svelte:
lucide-svelte/dist/icons/coffee.svelte:
lucide-svelte/dist/icons/cog.svelte:
lucide-svelte/dist/icons/coins.svelte:
lucide-svelte/dist/icons/columns-2.svelte:
lucide-svelte/dist/icons/columns-3-cog.svelte:
lucide-svelte/dist/icons/columns-3.svelte:
lucide-svelte/dist/icons/columns-4.svelte:
lucide-svelte/dist/icons/command.svelte:
lucide-svelte/dist/icons/combine.svelte:
lucide-svelte/dist/icons/component.svelte:
lucide-svelte/dist/icons/compass.svelte:
lucide-svelte/dist/icons/computer.svelte:
lucide-svelte/dist/icons/concierge-bell.svelte:
lucide-svelte/dist/icons/cone.svelte:
lucide-svelte/dist/icons/construction.svelte:
lucide-svelte/dist/icons/contact-round.svelte:
lucide-svelte/dist/icons/contact.svelte:
lucide-svelte/dist/icons/container.svelte:
lucide-svelte/dist/icons/contrast.svelte:
lucide-svelte/dist/icons/cookie.svelte:
lucide-svelte/dist/icons/cooking-pot.svelte:
lucide-svelte/dist/icons/copy-check.svelte:
lucide-svelte/dist/icons/copy-minus.svelte:
lucide-svelte/dist/icons/copy-plus.svelte:
lucide-svelte/dist/icons/copy-slash.svelte:
lucide-svelte/dist/icons/copy-x.svelte:
lucide-svelte/dist/icons/copy.svelte:
lucide-svelte/dist/icons/copyleft.svelte:
lucide-svelte/dist/icons/copyright.svelte:
lucide-svelte/dist/icons/corner-down-left.svelte:
lucide-svelte/dist/icons/corner-down-right.svelte:
lucide-svelte/dist/icons/corner-left-down.svelte:
lucide-svelte/dist/icons/corner-left-up.svelte:
lucide-svelte/dist/icons/corner-right-down.svelte:
lucide-svelte/dist/icons/corner-right-up.svelte:
lucide-svelte/dist/icons/corner-up-left.svelte:
lucide-svelte/dist/icons/corner-up-right.svelte:
lucide-svelte/dist/icons/cpu.svelte:
lucide-svelte/dist/icons/creative-commons.svelte:
lucide-svelte/dist/icons/credit-card.svelte:
lucide-svelte/dist/icons/croissant.svelte:
lucide-svelte/dist/icons/crop.svelte:
lucide-svelte/dist/icons/cross.svelte:
lucide-svelte/dist/icons/crosshair.svelte:
lucide-svelte/dist/icons/crown.svelte:
lucide-svelte/dist/icons/cuboid.svelte:
lucide-svelte/dist/icons/cup-soda.svelte:
lucide-svelte/dist/icons/currency.svelte:
lucide-svelte/dist/icons/cylinder.svelte:
lucide-svelte/dist/icons/dam.svelte:
lucide-svelte/dist/icons/database-backup.svelte:
lucide-svelte/dist/icons/database-zap.svelte:
lucide-svelte/dist/icons/database.svelte:
lucide-svelte/dist/icons/decimals-arrow-left.svelte:
lucide-svelte/dist/icons/decimals-arrow-right.svelte:
lucide-svelte/dist/icons/delete.svelte:
lucide-svelte/dist/icons/dessert.svelte:
lucide-svelte/dist/icons/diameter.svelte:
lucide-svelte/dist/icons/diamond-minus.svelte:
lucide-svelte/dist/icons/diamond-percent.svelte:
lucide-svelte/dist/icons/diamond-plus.svelte:
lucide-svelte/dist/icons/diamond.svelte:
lucide-svelte/dist/icons/dice-1.svelte:
lucide-svelte/dist/icons/dice-2.svelte:
lucide-svelte/dist/icons/dice-3.svelte:
lucide-svelte/dist/icons/dice-4.svelte:
lucide-svelte/dist/icons/dice-5.svelte:
lucide-svelte/dist/icons/dice-6.svelte:
lucide-svelte/dist/icons/dices.svelte:
lucide-svelte/dist/icons/diff.svelte:
lucide-svelte/dist/icons/disc-2.svelte:
lucide-svelte/dist/icons/disc-3.svelte:
lucide-svelte/dist/icons/disc-album.svelte:
lucide-svelte/dist/icons/disc.svelte:
lucide-svelte/dist/icons/divide.svelte:
lucide-svelte/dist/icons/dna-off.svelte:
lucide-svelte/dist/icons/dna.svelte:
lucide-svelte/dist/icons/dock.svelte:
lucide-svelte/dist/icons/dog.svelte:
lucide-svelte/dist/icons/dollar-sign.svelte:
lucide-svelte/dist/icons/donut.svelte:
lucide-svelte/dist/icons/door-closed-locked.svelte:
lucide-svelte/dist/icons/door-closed.svelte:
lucide-svelte/dist/icons/door-open.svelte:
lucide-svelte/dist/icons/dot.svelte:
lucide-svelte/dist/icons/download.svelte:
lucide-svelte/dist/icons/drafting-compass.svelte:
lucide-svelte/dist/icons/drama.svelte:
lucide-svelte/dist/icons/dribbble.svelte:
lucide-svelte/dist/icons/drill.svelte:
lucide-svelte/dist/icons/drone.svelte:
lucide-svelte/dist/icons/droplet-off.svelte:
lucide-svelte/dist/icons/droplet.svelte:
lucide-svelte/dist/icons/droplets.svelte:
lucide-svelte/dist/icons/drum.svelte:
lucide-svelte/dist/icons/drumstick.svelte:
lucide-svelte/dist/icons/dumbbell.svelte:
lucide-svelte/dist/icons/ear-off.svelte:
lucide-svelte/dist/icons/ear.svelte:
lucide-svelte/dist/icons/earth-lock.svelte:
lucide-svelte/dist/icons/earth.svelte:
lucide-svelte/dist/icons/eclipse.svelte:
lucide-svelte/dist/icons/egg-fried.svelte:
lucide-svelte/dist/icons/egg-off.svelte:
lucide-svelte/dist/icons/egg.svelte:
lucide-svelte/dist/icons/ellipsis-vertical.svelte:
lucide-svelte/dist/icons/ellipsis.svelte:
lucide-svelte/dist/icons/equal-approximately.svelte:
lucide-svelte/dist/icons/equal-not.svelte:
lucide-svelte/dist/icons/equal.svelte:
lucide-svelte/dist/icons/eraser.svelte:
lucide-svelte/dist/icons/ethernet-port.svelte:
lucide-svelte/dist/icons/expand.svelte:
lucide-svelte/dist/icons/euro.svelte:
lucide-svelte/dist/icons/external-link.svelte:
lucide-svelte/dist/icons/eye-closed.svelte:
lucide-svelte/dist/icons/eye-off.svelte:
lucide-svelte/dist/icons/eye.svelte:
lucide-svelte/dist/icons/facebook.svelte:
lucide-svelte/dist/icons/factory.svelte:
lucide-svelte/dist/icons/fan.svelte:
lucide-svelte/dist/icons/fast-forward.svelte:
lucide-svelte/dist/icons/feather.svelte:
lucide-svelte/dist/icons/fence.svelte:
lucide-svelte/dist/icons/ferris-wheel.svelte:
lucide-svelte/dist/icons/figma.svelte:
lucide-svelte/dist/icons/file-archive.svelte:
lucide-svelte/dist/icons/file-audio-2.svelte:
lucide-svelte/dist/icons/file-audio.svelte:
lucide-svelte/dist/icons/file-axis-3d.svelte:
lucide-svelte/dist/icons/file-badge-2.svelte:
lucide-svelte/dist/icons/file-badge.svelte:
lucide-svelte/dist/icons/file-box.svelte:
lucide-svelte/dist/icons/file-chart-column-increasing.svelte:
lucide-svelte/dist/icons/file-chart-column.svelte:
lucide-svelte/dist/icons/file-chart-line.svelte:
lucide-svelte/dist/icons/file-chart-pie.svelte:
lucide-svelte/dist/icons/file-check-2.svelte:
lucide-svelte/dist/icons/file-check.svelte:
lucide-svelte/dist/icons/file-clock.svelte:
lucide-svelte/dist/icons/file-code-2.svelte:
lucide-svelte/dist/icons/file-code.svelte:
lucide-svelte/dist/icons/file-cog.svelte:
lucide-svelte/dist/icons/file-diff.svelte:
lucide-svelte/dist/icons/file-digit.svelte:
lucide-svelte/dist/icons/file-down.svelte:
lucide-svelte/dist/icons/file-heart.svelte:
lucide-svelte/dist/icons/file-image.svelte:
lucide-svelte/dist/icons/file-input.svelte:
lucide-svelte/dist/icons/file-json-2.svelte:
lucide-svelte/dist/icons/file-json.svelte:
lucide-svelte/dist/icons/file-key-2.svelte:
lucide-svelte/dist/icons/file-key.svelte:
lucide-svelte/dist/icons/file-lock-2.svelte:
lucide-svelte/dist/icons/file-lock.svelte:
lucide-svelte/dist/icons/file-minus-2.svelte:
lucide-svelte/dist/icons/file-minus.svelte:
lucide-svelte/dist/icons/file-music.svelte:
lucide-svelte/dist/icons/file-output.svelte:
lucide-svelte/dist/icons/file-pen-line.svelte:
lucide-svelte/dist/icons/file-pen.svelte:
lucide-svelte/dist/icons/file-play.svelte:
lucide-svelte/dist/icons/file-plus-2.svelte:
lucide-svelte/dist/icons/file-plus.svelte:
lucide-svelte/dist/icons/file-question-mark.svelte:
lucide-svelte/dist/icons/file-scan.svelte:
lucide-svelte/dist/icons/file-search-2.svelte:
lucide-svelte/dist/icons/file-search.svelte:
lucide-svelte/dist/icons/file-sliders.svelte:
lucide-svelte/dist/icons/file-spreadsheet.svelte:
lucide-svelte/dist/icons/file-stack.svelte:
lucide-svelte/dist/icons/file-symlink.svelte:
lucide-svelte/dist/icons/file-terminal.svelte:
lucide-svelte/dist/icons/file-text.svelte:
lucide-svelte/dist/icons/file-type-2.svelte:
lucide-svelte/dist/icons/file-type.svelte:
lucide-svelte/dist/icons/file-user.svelte:
lucide-svelte/dist/icons/file-up.svelte:
lucide-svelte/dist/icons/file-video-camera.svelte:
lucide-svelte/dist/icons/file-volume-2.svelte:
lucide-svelte/dist/icons/file-volume.svelte:
lucide-svelte/dist/icons/file-warning.svelte:
lucide-svelte/dist/icons/file-x.svelte:
lucide-svelte/dist/icons/file-x-2.svelte:
lucide-svelte/dist/icons/file.svelte:
lucide-svelte/dist/icons/files.svelte:
lucide-svelte/dist/icons/film.svelte:
lucide-svelte/dist/icons/fingerprint.svelte:
lucide-svelte/dist/icons/fire-extinguisher.svelte:
lucide-svelte/dist/icons/fish-off.svelte:
lucide-svelte/dist/icons/fish-symbol.svelte:
lucide-svelte/dist/icons/fish.svelte:
lucide-svelte/dist/icons/flag-off.svelte:
lucide-svelte/dist/icons/flag-triangle-left.svelte:
lucide-svelte/dist/icons/flag-triangle-right.svelte:
lucide-svelte/dist/icons/flame-kindling.svelte:
lucide-svelte/dist/icons/flag.svelte:
lucide-svelte/dist/icons/flame.svelte:
lucide-svelte/dist/icons/flashlight-off.svelte:
lucide-svelte/dist/icons/flashlight.svelte:
lucide-svelte/dist/icons/flask-conical-off.svelte:
lucide-svelte/dist/icons/flask-round.svelte:
lucide-svelte/dist/icons/flask-conical.svelte:
lucide-svelte/dist/icons/flip-horizontal-2.svelte:
lucide-svelte/dist/icons/flip-horizontal.svelte:
lucide-svelte/dist/icons/flip-vertical-2.svelte:
lucide-svelte/dist/icons/flip-vertical.svelte:
lucide-svelte/dist/icons/flower-2.svelte:
lucide-svelte/dist/icons/flower.svelte:
lucide-svelte/dist/icons/focus.svelte:
lucide-svelte/dist/icons/fold-horizontal.svelte:
lucide-svelte/dist/icons/fold-vertical.svelte:
lucide-svelte/dist/icons/folder-archive.svelte:
lucide-svelte/dist/icons/folder-check.svelte:
lucide-svelte/dist/icons/folder-clock.svelte:
lucide-svelte/dist/icons/folder-closed.svelte:
lucide-svelte/dist/icons/folder-code.svelte:
lucide-svelte/dist/icons/folder-cog.svelte:
lucide-svelte/dist/icons/folder-dot.svelte:
lucide-svelte/dist/icons/folder-down.svelte:
lucide-svelte/dist/icons/folder-git-2.svelte:
lucide-svelte/dist/icons/folder-heart.svelte:
lucide-svelte/dist/icons/folder-git.svelte:
lucide-svelte/dist/icons/folder-input.svelte:
lucide-svelte/dist/icons/folder-kanban.svelte:
lucide-svelte/dist/icons/folder-key.svelte:
lucide-svelte/dist/icons/folder-lock.svelte:
lucide-svelte/dist/icons/folder-minus.svelte:
lucide-svelte/dist/icons/folder-open-dot.svelte:
lucide-svelte/dist/icons/folder-open.svelte:
lucide-svelte/dist/icons/folder-output.svelte:
lucide-svelte/dist/icons/folder-pen.svelte:
lucide-svelte/dist/icons/folder-plus.svelte:
lucide-svelte/dist/icons/folder-root.svelte:
lucide-svelte/dist/icons/folder-search-2.svelte:
lucide-svelte/dist/icons/folder-search.svelte:
lucide-svelte/dist/icons/folder-symlink.svelte:
lucide-svelte/dist/icons/folder-sync.svelte:
lucide-svelte/dist/icons/folder-tree.svelte:
lucide-svelte/dist/icons/folder-up.svelte:
lucide-svelte/dist/icons/folder-x.svelte:
lucide-svelte/dist/icons/folder.svelte:
lucide-svelte/dist/icons/folders.svelte:
lucide-svelte/dist/icons/footprints.svelte:
lucide-svelte/dist/icons/forklift.svelte:
lucide-svelte/dist/icons/forward.svelte:
lucide-svelte/dist/icons/frame.svelte:
lucide-svelte/dist/icons/framer.svelte:
lucide-svelte/dist/icons/frown.svelte:
lucide-svelte/dist/icons/fuel.svelte:
lucide-svelte/dist/icons/fullscreen.svelte:
lucide-svelte/dist/icons/funnel-plus.svelte:
lucide-svelte/dist/icons/funnel-x.svelte:
lucide-svelte/dist/icons/funnel.svelte:
lucide-svelte/dist/icons/gallery-horizontal-end.svelte:
lucide-svelte/dist/icons/gallery-horizontal.svelte:
lucide-svelte/dist/icons/gallery-thumbnails.svelte:
lucide-svelte/dist/icons/gallery-vertical-end.svelte:
lucide-svelte/dist/icons/gallery-vertical.svelte:
lucide-svelte/dist/icons/gamepad-2.svelte:
lucide-svelte/dist/icons/gamepad.svelte:
lucide-svelte/dist/icons/gauge.svelte:
lucide-svelte/dist/icons/gavel.svelte:
lucide-svelte/dist/icons/gem.svelte:
lucide-svelte/dist/icons/georgian-lari.svelte:
lucide-svelte/dist/icons/ghost.svelte:
lucide-svelte/dist/icons/gift.svelte:
lucide-svelte/dist/icons/git-branch.svelte:
lucide-svelte/dist/icons/git-branch-plus.svelte:
lucide-svelte/dist/icons/git-commit-horizontal.svelte:
lucide-svelte/dist/icons/git-commit-vertical.svelte:
lucide-svelte/dist/icons/git-compare-arrows.svelte:
lucide-svelte/dist/icons/git-compare.svelte:
lucide-svelte/dist/icons/git-fork.svelte:
lucide-svelte/dist/icons/git-graph.svelte:
lucide-svelte/dist/icons/git-merge.svelte:
lucide-svelte/dist/icons/git-pull-request-arrow.svelte:
lucide-svelte/dist/icons/git-pull-request-closed.svelte:
lucide-svelte/dist/icons/git-pull-request-create.svelte:
lucide-svelte/dist/icons/git-pull-request-create-arrow.svelte:
lucide-svelte/dist/icons/git-pull-request-draft.svelte:
lucide-svelte/dist/icons/git-pull-request.svelte:
lucide-svelte/dist/icons/github.svelte:
lucide-svelte/dist/icons/gitlab.svelte:
lucide-svelte/dist/icons/glass-water.svelte:
lucide-svelte/dist/icons/glasses.svelte:
lucide-svelte/dist/icons/globe-lock.svelte:
lucide-svelte/dist/icons/globe.svelte:
lucide-svelte/dist/icons/goal.svelte:
lucide-svelte/dist/icons/gpu.svelte:
lucide-svelte/dist/icons/graduation-cap.svelte:
lucide-svelte/dist/icons/grape.svelte:
lucide-svelte/dist/icons/grid-2x2-check.svelte:
lucide-svelte/dist/icons/grid-2x2-plus.svelte:
lucide-svelte/dist/icons/grid-2x2-x.svelte:
lucide-svelte/dist/icons/grid-2x2.svelte:
lucide-svelte/dist/icons/grid-3x2.svelte:
lucide-svelte/dist/icons/grid-3x3.svelte:
lucide-svelte/dist/icons/grip-horizontal.svelte:
lucide-svelte/dist/icons/grip-vertical.svelte:
lucide-svelte/dist/icons/grip.svelte:
lucide-svelte/dist/icons/group.svelte:
lucide-svelte/dist/icons/guitar.svelte:
lucide-svelte/dist/icons/ham.svelte:
lucide-svelte/dist/icons/hamburger.svelte:
lucide-svelte/dist/icons/hammer.svelte:
lucide-svelte/dist/icons/hand-coins.svelte:
lucide-svelte/dist/icons/hand-fist.svelte:
lucide-svelte/dist/icons/hand-grab.svelte:
lucide-svelte/dist/icons/hand-heart.svelte:
lucide-svelte/dist/icons/hand-helping.svelte:
lucide-svelte/dist/icons/hand-metal.svelte:
lucide-svelte/dist/icons/hand-platter.svelte:
lucide-svelte/dist/icons/hand.svelte:
lucide-svelte/dist/icons/handbag.svelte:
lucide-svelte/dist/icons/handshake.svelte:
lucide-svelte/dist/icons/hard-drive-download.svelte:
lucide-svelte/dist/icons/hard-drive-upload.svelte:
lucide-svelte/dist/icons/hard-drive.svelte:
lucide-svelte/dist/icons/hard-hat.svelte:
lucide-svelte/dist/icons/hash.svelte:
lucide-svelte/dist/icons/hat-glasses.svelte:
lucide-svelte/dist/icons/haze.svelte:
lucide-svelte/dist/icons/hdmi-port.svelte:
lucide-svelte/dist/icons/heading-1.svelte:
lucide-svelte/dist/icons/heading-2.svelte:
lucide-svelte/dist/icons/heading-3.svelte:
lucide-svelte/dist/icons/heading-4.svelte:
lucide-svelte/dist/icons/heading-5.svelte:
lucide-svelte/dist/icons/heading-6.svelte:
lucide-svelte/dist/icons/heading.svelte:
lucide-svelte/dist/icons/headphone-off.svelte:
lucide-svelte/dist/icons/headphones.svelte:
lucide-svelte/dist/icons/headset.svelte:
lucide-svelte/dist/icons/heart-crack.svelte:
lucide-svelte/dist/icons/heart-handshake.svelte:
lucide-svelte/dist/icons/heart-minus.svelte:
lucide-svelte/dist/icons/heart-off.svelte:
lucide-svelte/dist/icons/heart-plus.svelte:
lucide-svelte/dist/icons/heart-pulse.svelte:
lucide-svelte/dist/icons/heart.svelte:
lucide-svelte/dist/icons/heater.svelte:
lucide-svelte/dist/icons/hexagon.svelte:
lucide-svelte/dist/icons/highlighter.svelte:
lucide-svelte/dist/icons/history.svelte:
lucide-svelte/dist/icons/hop-off.svelte:
lucide-svelte/dist/icons/hop.svelte:
lucide-svelte/dist/icons/hospital.svelte:
lucide-svelte/dist/icons/hotel.svelte:
lucide-svelte/dist/icons/hourglass.svelte:
lucide-svelte/dist/icons/house-plug.svelte:
lucide-svelte/dist/icons/house-plus.svelte:
lucide-svelte/dist/icons/house.svelte:
lucide-svelte/dist/icons/house-wifi.svelte:
lucide-svelte/dist/icons/ice-cream-bowl.svelte:
lucide-svelte/dist/icons/ice-cream-cone.svelte:
lucide-svelte/dist/icons/id-card-lanyard.svelte:
lucide-svelte/dist/icons/id-card.svelte:
lucide-svelte/dist/icons/image-down.svelte:
lucide-svelte/dist/icons/image-minus.svelte:
lucide-svelte/dist/icons/image-off.svelte:
lucide-svelte/dist/icons/image-play.svelte:
lucide-svelte/dist/icons/image-plus.svelte:
lucide-svelte/dist/icons/image-up.svelte:
lucide-svelte/dist/icons/image-upscale.svelte:
lucide-svelte/dist/icons/image.svelte:
lucide-svelte/dist/icons/images.svelte:
lucide-svelte/dist/icons/import.svelte:
lucide-svelte/dist/icons/inbox.svelte:
lucide-svelte/dist/icons/indent-decrease.svelte:
lucide-svelte/dist/icons/indent-increase.svelte:
lucide-svelte/dist/icons/indian-rupee.svelte:
lucide-svelte/dist/icons/info.svelte:
lucide-svelte/dist/icons/infinity.svelte:
lucide-svelte/dist/icons/inspection-panel.svelte:
lucide-svelte/dist/icons/instagram.svelte:
lucide-svelte/dist/icons/italic.svelte:
lucide-svelte/dist/icons/iteration-ccw.svelte:
lucide-svelte/dist/icons/iteration-cw.svelte:
lucide-svelte/dist/icons/japanese-yen.svelte:
lucide-svelte/dist/icons/joystick.svelte:
lucide-svelte/dist/icons/kanban.svelte:
lucide-svelte/dist/icons/key-round.svelte:
lucide-svelte/dist/icons/key-square.svelte:
lucide-svelte/dist/icons/key.svelte:
lucide-svelte/dist/icons/keyboard-music.svelte:
lucide-svelte/dist/icons/keyboard-off.svelte:
lucide-svelte/dist/icons/keyboard.svelte:
lucide-svelte/dist/icons/lamp-ceiling.svelte:
lucide-svelte/dist/icons/lamp-desk.svelte:
lucide-svelte/dist/icons/lamp-floor.svelte:
lucide-svelte/dist/icons/lamp-wall-down.svelte:
lucide-svelte/dist/icons/lamp-wall-up.svelte:
lucide-svelte/dist/icons/lamp.svelte:
lucide-svelte/dist/icons/land-plot.svelte:
lucide-svelte/dist/icons/landmark.svelte:
lucide-svelte/dist/icons/languages.svelte:
lucide-svelte/dist/icons/laptop-minimal-check.svelte:
lucide-svelte/dist/icons/laptop-minimal.svelte:
lucide-svelte/dist/icons/laptop.svelte:
lucide-svelte/dist/icons/lasso-select.svelte:
lucide-svelte/dist/icons/lasso.svelte:
lucide-svelte/dist/icons/laugh.svelte:
lucide-svelte/dist/icons/layers-2.svelte:
lucide-svelte/dist/icons/layers.svelte:
lucide-svelte/dist/icons/layout-dashboard.svelte:
lucide-svelte/dist/icons/layout-grid.svelte:
lucide-svelte/dist/icons/layout-list.svelte:
lucide-svelte/dist/icons/layout-panel-left.svelte:
lucide-svelte/dist/icons/layout-panel-top.svelte:
lucide-svelte/dist/icons/leaf.svelte:
lucide-svelte/dist/icons/layout-template.svelte:
lucide-svelte/dist/icons/leafy-green.svelte:
lucide-svelte/dist/icons/lectern.svelte:
lucide-svelte/dist/icons/letter-text.svelte:
lucide-svelte/dist/icons/library-big.svelte:
lucide-svelte/dist/icons/library.svelte:
lucide-svelte/dist/icons/life-buoy.svelte:
lucide-svelte/dist/icons/ligature.svelte:
lucide-svelte/dist/icons/lightbulb-off.svelte:
lucide-svelte/dist/icons/lightbulb.svelte:
lucide-svelte/dist/icons/line-squiggle.svelte:
lucide-svelte/dist/icons/link-2-off.svelte:
lucide-svelte/dist/icons/link-2.svelte:
lucide-svelte/dist/icons/link.svelte:
lucide-svelte/dist/icons/list-check.svelte:
lucide-svelte/dist/icons/linkedin.svelte:
lucide-svelte/dist/icons/list-checks.svelte:
lucide-svelte/dist/icons/list-collapse.svelte:
lucide-svelte/dist/icons/list-end.svelte:
lucide-svelte/dist/icons/list-filter-plus.svelte:
lucide-svelte/dist/icons/list-filter.svelte:
lucide-svelte/dist/icons/list-minus.svelte:
lucide-svelte/dist/icons/list-music.svelte:
lucide-svelte/dist/icons/list-ordered.svelte:
lucide-svelte/dist/icons/list-plus.svelte:
lucide-svelte/dist/icons/list-restart.svelte:
lucide-svelte/dist/icons/list-start.svelte:
lucide-svelte/dist/icons/list-tree.svelte:
lucide-svelte/dist/icons/list-todo.svelte:
lucide-svelte/dist/icons/list-video.svelte:
lucide-svelte/dist/icons/list-x.svelte:
lucide-svelte/dist/icons/list.svelte:
lucide-svelte/dist/icons/loader-circle.svelte:
lucide-svelte/dist/icons/loader-pinwheel.svelte:
lucide-svelte/dist/icons/loader.svelte:
lucide-svelte/dist/icons/locate-fixed.svelte:
lucide-svelte/dist/icons/locate-off.svelte:
lucide-svelte/dist/icons/locate.svelte:
lucide-svelte/dist/icons/lock-keyhole-open.svelte:
lucide-svelte/dist/icons/lock-keyhole.svelte:
lucide-svelte/dist/icons/lock-open.svelte:
lucide-svelte/dist/icons/lock.svelte:
lucide-svelte/dist/icons/log-in.svelte:
lucide-svelte/dist/icons/log-out.svelte:
lucide-svelte/dist/icons/logs.svelte:
lucide-svelte/dist/icons/lollipop.svelte:
lucide-svelte/dist/icons/luggage.svelte:
lucide-svelte/dist/icons/magnet.svelte:
lucide-svelte/dist/icons/mail-check.svelte:
lucide-svelte/dist/icons/mail-minus.svelte:
lucide-svelte/dist/icons/mail-plus.svelte:
lucide-svelte/dist/icons/mail-open.svelte:
lucide-svelte/dist/icons/mail-question-mark.svelte:
lucide-svelte/dist/icons/mail-search.svelte:
lucide-svelte/dist/icons/mail-x.svelte:
lucide-svelte/dist/icons/mail-warning.svelte:
lucide-svelte/dist/icons/mail.svelte:
lucide-svelte/dist/icons/mailbox.svelte:
lucide-svelte/dist/icons/mails.svelte:
lucide-svelte/dist/icons/map-minus.svelte:
lucide-svelte/dist/icons/map-pin-check-inside.svelte:
lucide-svelte/dist/icons/map-pin-check.svelte:
lucide-svelte/dist/icons/map-pin-house.svelte:
lucide-svelte/dist/icons/map-pin-minus-inside.svelte:
lucide-svelte/dist/icons/map-pin-minus.svelte:
lucide-svelte/dist/icons/map-pin-off.svelte:
lucide-svelte/dist/icons/map-pin-pen.svelte:
lucide-svelte/dist/icons/map-pin-plus-inside.svelte:
lucide-svelte/dist/icons/map-pin-plus.svelte:
lucide-svelte/dist/icons/map-pin-x-inside.svelte:
lucide-svelte/dist/icons/map-pin-x.svelte:
lucide-svelte/dist/icons/map-pin.svelte:
lucide-svelte/dist/icons/map-pinned.svelte:
lucide-svelte/dist/icons/map-plus.svelte:
lucide-svelte/dist/icons/map.svelte:
lucide-svelte/dist/icons/mars-stroke.svelte:
lucide-svelte/dist/icons/mars.svelte:
lucide-svelte/dist/icons/martini.svelte:
lucide-svelte/dist/icons/maximize-2.svelte:
lucide-svelte/dist/icons/maximize.svelte:
lucide-svelte/dist/icons/medal.svelte:
lucide-svelte/dist/icons/megaphone-off.svelte:
lucide-svelte/dist/icons/megaphone.svelte:
lucide-svelte/dist/icons/meh.svelte:
lucide-svelte/dist/icons/memory-stick.svelte:
lucide-svelte/dist/icons/menu.svelte:
lucide-svelte/dist/icons/merge.svelte:
lucide-svelte/dist/icons/message-circle-code.svelte:
lucide-svelte/dist/icons/message-circle-dashed.svelte:
lucide-svelte/dist/icons/message-circle-heart.svelte:
lucide-svelte/dist/icons/message-circle-more.svelte:
lucide-svelte/dist/icons/message-circle-off.svelte:
lucide-svelte/dist/icons/message-circle-plus.svelte:
lucide-svelte/dist/icons/message-circle-question-mark.svelte:
lucide-svelte/dist/icons/message-circle-reply.svelte:
lucide-svelte/dist/icons/message-circle-warning.svelte:
lucide-svelte/dist/icons/message-circle-x.svelte:
lucide-svelte/dist/icons/message-circle.svelte:
lucide-svelte/dist/icons/message-square-dashed.svelte:
lucide-svelte/dist/icons/message-square-code.svelte:
lucide-svelte/dist/icons/message-square-diff.svelte:
lucide-svelte/dist/icons/message-square-dot.svelte:
lucide-svelte/dist/icons/message-square-heart.svelte:
lucide-svelte/dist/icons/message-square-lock.svelte:
lucide-svelte/dist/icons/message-square-more.svelte:
lucide-svelte/dist/icons/message-square-off.svelte:
lucide-svelte/dist/icons/message-square-plus.svelte:
lucide-svelte/dist/icons/message-square-quote.svelte:
lucide-svelte/dist/icons/message-square-reply.svelte:
lucide-svelte/dist/icons/message-square-share.svelte:
lucide-svelte/dist/icons/message-square-text.svelte:
lucide-svelte/dist/icons/message-square-warning.svelte:
lucide-svelte/dist/icons/message-square-x.svelte:
lucide-svelte/dist/icons/message-square.svelte:
lucide-svelte/dist/icons/messages-square.svelte:
lucide-svelte/dist/icons/mic-off.svelte:
lucide-svelte/dist/icons/mic.svelte:
lucide-svelte/dist/icons/mic-vocal.svelte:
lucide-svelte/dist/icons/microchip.svelte:
lucide-svelte/dist/icons/microscope.svelte:
lucide-svelte/dist/icons/microwave.svelte:
lucide-svelte/dist/icons/milestone.svelte:
lucide-svelte/dist/icons/milk-off.svelte:
lucide-svelte/dist/icons/milk.svelte:
lucide-svelte/dist/icons/minimize-2.svelte:
lucide-svelte/dist/icons/minus.svelte:
lucide-svelte/dist/icons/minimize.svelte:
lucide-svelte/dist/icons/monitor-check.svelte:
lucide-svelte/dist/icons/monitor-cog.svelte:
lucide-svelte/dist/icons/monitor-dot.svelte:
lucide-svelte/dist/icons/monitor-down.svelte:
lucide-svelte/dist/icons/monitor-off.svelte:
lucide-svelte/dist/icons/monitor-pause.svelte:
lucide-svelte/dist/icons/monitor-play.svelte:
lucide-svelte/dist/icons/monitor-smartphone.svelte:
lucide-svelte/dist/icons/monitor-speaker.svelte:
lucide-svelte/dist/icons/monitor-stop.svelte:
lucide-svelte/dist/icons/monitor-up.svelte:
lucide-svelte/dist/icons/monitor-x.svelte:
lucide-svelte/dist/icons/monitor.svelte:
lucide-svelte/dist/icons/moon-star.svelte:
lucide-svelte/dist/icons/moon.svelte:
lucide-svelte/dist/icons/mountain-snow.svelte:
lucide-svelte/dist/icons/mouse-off.svelte:
lucide-svelte/dist/icons/mountain.svelte:
lucide-svelte/dist/icons/mouse-pointer-2.svelte:
lucide-svelte/dist/icons/mouse-pointer-ban.svelte:
lucide-svelte/dist/icons/mouse-pointer-click.svelte:
lucide-svelte/dist/icons/mouse-pointer.svelte:
lucide-svelte/dist/icons/mouse.svelte:
lucide-svelte/dist/icons/move-3d.svelte:
lucide-svelte/dist/icons/move-diagonal-2.svelte:
lucide-svelte/dist/icons/move-down-left.svelte:
lucide-svelte/dist/icons/move-diagonal.svelte:
lucide-svelte/dist/icons/move-down-right.svelte:
lucide-svelte/dist/icons/move-down.svelte:
lucide-svelte/dist/icons/move-horizontal.svelte:
lucide-svelte/dist/icons/move-left.svelte:
lucide-svelte/dist/icons/move-right.svelte:
lucide-svelte/dist/icons/move-up-left.svelte:
lucide-svelte/dist/icons/move-up-right.svelte:
lucide-svelte/dist/icons/move-up.svelte:
lucide-svelte/dist/icons/move-vertical.svelte:
lucide-svelte/dist/icons/move.svelte:
lucide-svelte/dist/icons/music-2.svelte:
lucide-svelte/dist/icons/music-3.svelte:
lucide-svelte/dist/icons/music-4.svelte:
lucide-svelte/dist/icons/music.svelte:
lucide-svelte/dist/icons/navigation-2-off.svelte:
lucide-svelte/dist/icons/navigation-2.svelte:
lucide-svelte/dist/icons/navigation-off.svelte:
lucide-svelte/dist/icons/navigation.svelte:
lucide-svelte/dist/icons/network.svelte:
lucide-svelte/dist/icons/newspaper.svelte:
lucide-svelte/dist/icons/nfc.svelte:
lucide-svelte/dist/icons/non-binary.svelte:
lucide-svelte/dist/icons/notebook-pen.svelte:
lucide-svelte/dist/icons/notebook-tabs.svelte:
lucide-svelte/dist/icons/notebook-text.svelte:
lucide-svelte/dist/icons/notebook.svelte:
lucide-svelte/dist/icons/notepad-text-dashed.svelte:
lucide-svelte/dist/icons/notepad-text.svelte:
lucide-svelte/dist/icons/nut-off.svelte:
lucide-svelte/dist/icons/nut.svelte:
lucide-svelte/dist/icons/octagon-alert.svelte:
lucide-svelte/dist/icons/octagon-minus.svelte:
lucide-svelte/dist/icons/octagon-pause.svelte:
lucide-svelte/dist/icons/octagon.svelte:
lucide-svelte/dist/icons/omega.svelte:
lucide-svelte/dist/icons/octagon-x.svelte:
lucide-svelte/dist/icons/option.svelte:
lucide-svelte/dist/icons/orbit.svelte:
lucide-svelte/dist/icons/origami.svelte:
lucide-svelte/dist/icons/package-2.svelte:
lucide-svelte/dist/icons/package-check.svelte:
lucide-svelte/dist/icons/package-minus.svelte:
lucide-svelte/dist/icons/package-open.svelte:
lucide-svelte/dist/icons/package-plus.svelte:
lucide-svelte/dist/icons/package-search.svelte:
lucide-svelte/dist/icons/package-x.svelte:
lucide-svelte/dist/icons/package.svelte:
lucide-svelte/dist/icons/paint-bucket.svelte:
lucide-svelte/dist/icons/paint-roller.svelte:
lucide-svelte/dist/icons/paintbrush-vertical.svelte:
lucide-svelte/dist/icons/paintbrush.svelte:
lucide-svelte/dist/icons/palette.svelte:
lucide-svelte/dist/icons/panda.svelte:
lucide-svelte/dist/icons/panel-bottom-close.svelte:
lucide-svelte/dist/icons/panel-bottom-dashed.svelte:
lucide-svelte/dist/icons/panel-bottom-open.svelte:
lucide-svelte/dist/icons/panel-left-close.svelte:
lucide-svelte/dist/icons/panel-bottom.svelte:
lucide-svelte/dist/icons/panel-left-dashed.svelte:
lucide-svelte/dist/icons/panel-left-open.svelte:
lucide-svelte/dist/icons/panel-left.svelte:
lucide-svelte/dist/icons/panel-right-close.svelte:
lucide-svelte/dist/icons/panel-right-dashed.svelte:
lucide-svelte/dist/icons/panel-right-open.svelte:
lucide-svelte/dist/icons/panel-right.svelte:
lucide-svelte/dist/icons/panel-top-close.svelte:
lucide-svelte/dist/icons/panel-top-dashed.svelte:
lucide-svelte/dist/icons/panel-top-open.svelte:
lucide-svelte/dist/icons/panel-top.svelte:
lucide-svelte/dist/icons/panels-left-bottom.svelte:
lucide-svelte/dist/icons/panels-right-bottom.svelte:
lucide-svelte/dist/icons/panels-top-left.svelte:
lucide-svelte/dist/icons/paperclip.svelte:
lucide-svelte/dist/icons/parking-meter.svelte:
lucide-svelte/dist/icons/parentheses.svelte:
lucide-svelte/dist/icons/party-popper.svelte:
lucide-svelte/dist/icons/pause.svelte:
lucide-svelte/dist/icons/paw-print.svelte:
lucide-svelte/dist/icons/pc-case.svelte:
lucide-svelte/dist/icons/pen-line.svelte:
lucide-svelte/dist/icons/pen-off.svelte:
lucide-svelte/dist/icons/pen-tool.svelte:
lucide-svelte/dist/icons/pen.svelte:
lucide-svelte/dist/icons/pencil-line.svelte:
lucide-svelte/dist/icons/pencil-off.svelte:
lucide-svelte/dist/icons/pencil-ruler.svelte:
lucide-svelte/dist/icons/pentagon.svelte:
lucide-svelte/dist/icons/pencil.svelte:
lucide-svelte/dist/icons/percent.svelte:
lucide-svelte/dist/icons/person-standing.svelte:
lucide-svelte/dist/icons/philippine-peso.svelte:
lucide-svelte/dist/icons/phone-call.svelte:
lucide-svelte/dist/icons/phone-forwarded.svelte:
lucide-svelte/dist/icons/phone-incoming.svelte:
lucide-svelte/dist/icons/phone-missed.svelte:
lucide-svelte/dist/icons/phone-off.svelte:
lucide-svelte/dist/icons/phone-outgoing.svelte:
lucide-svelte/dist/icons/phone.svelte:
lucide-svelte/dist/icons/pi.svelte:
lucide-svelte/dist/icons/piano.svelte:
lucide-svelte/dist/icons/pickaxe.svelte:
lucide-svelte/dist/icons/picture-in-picture-2.svelte:
lucide-svelte/dist/icons/picture-in-picture.svelte:
lucide-svelte/dist/icons/piggy-bank.svelte:
lucide-svelte/dist/icons/pilcrow-left.svelte:
lucide-svelte/dist/icons/pilcrow-right.svelte:
lucide-svelte/dist/icons/pilcrow.svelte:
lucide-svelte/dist/icons/pill-bottle.svelte:
lucide-svelte/dist/icons/pin-off.svelte:
lucide-svelte/dist/icons/pill.svelte:
lucide-svelte/dist/icons/pin.svelte:
lucide-svelte/dist/icons/pipette.svelte:
lucide-svelte/dist/icons/plane-landing.svelte:
lucide-svelte/dist/icons/pizza.svelte:
lucide-svelte/dist/icons/plane-takeoff.svelte:
lucide-svelte/dist/icons/plane.svelte:
lucide-svelte/dist/icons/play.svelte:
lucide-svelte/dist/icons/plug-2.svelte:
lucide-svelte/dist/icons/plug-zap.svelte:
lucide-svelte/dist/icons/plug.svelte:
lucide-svelte/dist/icons/plus.svelte:
lucide-svelte/dist/icons/pocket-knife.svelte:
lucide-svelte/dist/icons/pocket.svelte:
lucide-svelte/dist/icons/podcast.svelte:
lucide-svelte/dist/icons/pointer-off.svelte:
lucide-svelte/dist/icons/pointer.svelte:
lucide-svelte/dist/icons/popcorn.svelte:
lucide-svelte/dist/icons/popsicle.svelte:
lucide-svelte/dist/icons/pound-sterling.svelte:
lucide-svelte/dist/icons/power-off.svelte:
lucide-svelte/dist/icons/power.svelte:
lucide-svelte/dist/icons/presentation.svelte:
lucide-svelte/dist/icons/printer-check.svelte:
lucide-svelte/dist/icons/printer.svelte:
lucide-svelte/dist/icons/projector.svelte:
lucide-svelte/dist/icons/proportions.svelte:
lucide-svelte/dist/icons/puzzle.svelte:
lucide-svelte/dist/icons/pyramid.svelte:
lucide-svelte/dist/icons/quote.svelte:
lucide-svelte/dist/icons/qr-code.svelte:
lucide-svelte/dist/icons/rabbit.svelte:
lucide-svelte/dist/icons/radar.svelte:
lucide-svelte/dist/icons/radiation.svelte:
lucide-svelte/dist/icons/radical.svelte:
lucide-svelte/dist/icons/radio-receiver.svelte:
lucide-svelte/dist/icons/radio-tower.svelte:
lucide-svelte/dist/icons/radio.svelte:
lucide-svelte/dist/icons/radius.svelte:
lucide-svelte/dist/icons/rail-symbol.svelte:
lucide-svelte/dist/icons/rainbow.svelte:
lucide-svelte/dist/icons/rat.svelte:
lucide-svelte/dist/icons/ratio.svelte:
lucide-svelte/dist/icons/receipt-cent.svelte:
lucide-svelte/dist/icons/receipt-euro.svelte:
lucide-svelte/dist/icons/receipt-indian-rupee.svelte:
lucide-svelte/dist/icons/receipt-japanese-yen.svelte:
lucide-svelte/dist/icons/receipt-pound-sterling.svelte:
lucide-svelte/dist/icons/receipt-russian-ruble.svelte:
lucide-svelte/dist/icons/receipt-swiss-franc.svelte:
lucide-svelte/dist/icons/receipt-text.svelte:
lucide-svelte/dist/icons/receipt-turkish-lira.svelte:
lucide-svelte/dist/icons/receipt.svelte:
lucide-svelte/dist/icons/rectangle-circle.svelte:
lucide-svelte/dist/icons/rectangle-ellipsis.svelte:
lucide-svelte/dist/icons/rectangle-goggles.svelte:
lucide-svelte/dist/icons/rectangle-horizontal.svelte:
lucide-svelte/dist/icons/rectangle-vertical.svelte:
lucide-svelte/dist/icons/recycle.svelte:
lucide-svelte/dist/icons/redo-2.svelte:
lucide-svelte/dist/icons/redo.svelte:
lucide-svelte/dist/icons/redo-dot.svelte:
lucide-svelte/dist/icons/refresh-ccw-dot.svelte:
lucide-svelte/dist/icons/refresh-ccw.svelte:
lucide-svelte/dist/icons/refresh-cw-off.svelte:
lucide-svelte/dist/icons/refresh-cw.svelte:
lucide-svelte/dist/icons/refrigerator.svelte:
lucide-svelte/dist/icons/regex.svelte:
lucide-svelte/dist/icons/remove-formatting.svelte:
lucide-svelte/dist/icons/repeat-1.svelte:
lucide-svelte/dist/icons/repeat-2.svelte:
lucide-svelte/dist/icons/repeat.svelte:
lucide-svelte/dist/icons/replace-all.svelte:
lucide-svelte/dist/icons/replace.svelte:
lucide-svelte/dist/icons/reply-all.svelte:
lucide-svelte/dist/icons/reply.svelte:
lucide-svelte/dist/icons/rewind.svelte:
lucide-svelte/dist/icons/ribbon.svelte:
lucide-svelte/dist/icons/rocket.svelte:
lucide-svelte/dist/icons/rocking-chair.svelte:
lucide-svelte/dist/icons/roller-coaster.svelte:
lucide-svelte/dist/icons/rotate-3d.svelte:
lucide-svelte/dist/icons/rotate-ccw-key.svelte:
lucide-svelte/dist/icons/rotate-ccw-square.svelte:
lucide-svelte/dist/icons/rotate-ccw.svelte:
lucide-svelte/dist/icons/rotate-cw-square.svelte:
lucide-svelte/dist/icons/rotate-cw.svelte:
lucide-svelte/dist/icons/route-off.svelte:
lucide-svelte/dist/icons/route.svelte:
lucide-svelte/dist/icons/router.svelte:
lucide-svelte/dist/icons/rows-2.svelte:
lucide-svelte/dist/icons/rows-3.svelte:
lucide-svelte/dist/icons/rows-4.svelte:
lucide-svelte/dist/icons/rss.svelte:
lucide-svelte/dist/icons/ruler-dimension-line.svelte:
lucide-svelte/dist/icons/ruler.svelte:
lucide-svelte/dist/icons/russian-ruble.svelte:
lucide-svelte/dist/icons/sailboat.svelte:
lucide-svelte/dist/icons/salad.svelte:
lucide-svelte/dist/icons/sandwich.svelte:
lucide-svelte/dist/icons/satellite-dish.svelte:
lucide-svelte/dist/icons/satellite.svelte:
lucide-svelte/dist/icons/saudi-riyal.svelte:
lucide-svelte/dist/icons/save-all.svelte:
lucide-svelte/dist/icons/save-off.svelte:
lucide-svelte/dist/icons/save.svelte:
lucide-svelte/dist/icons/scale-3d.svelte:
lucide-svelte/dist/icons/scale.svelte:
lucide-svelte/dist/icons/scaling.svelte:
lucide-svelte/dist/icons/scan-barcode.svelte:
lucide-svelte/dist/icons/scan-eye.svelte:
lucide-svelte/dist/icons/scan-face.svelte:
lucide-svelte/dist/icons/scan-heart.svelte:
lucide-svelte/dist/icons/scan-line.svelte:
lucide-svelte/dist/icons/scan-qr-code.svelte:
lucide-svelte/dist/icons/scan-search.svelte:
lucide-svelte/dist/icons/scan-text.svelte:
lucide-svelte/dist/icons/scan.svelte:
lucide-svelte/dist/icons/school.svelte:
lucide-svelte/dist/icons/scissors-line-dashed.svelte:
lucide-svelte/dist/icons/scissors.svelte:
lucide-svelte/dist/icons/screen-share-off.svelte:
lucide-svelte/dist/icons/screen-share.svelte:
lucide-svelte/dist/icons/scroll-text.svelte:
lucide-svelte/dist/icons/scroll.svelte:
lucide-svelte/dist/icons/search-check.svelte:
lucide-svelte/dist/icons/search-code.svelte:
lucide-svelte/dist/icons/search-slash.svelte:
lucide-svelte/dist/icons/search-x.svelte:
lucide-svelte/dist/icons/search.svelte:
lucide-svelte/dist/icons/section.svelte:
lucide-svelte/dist/icons/send-horizontal.svelte:
lucide-svelte/dist/icons/send-to-back.svelte:
lucide-svelte/dist/icons/send.svelte:
lucide-svelte/dist/icons/separator-horizontal.svelte:
lucide-svelte/dist/icons/separator-vertical.svelte:
lucide-svelte/dist/icons/server-cog.svelte:
lucide-svelte/dist/icons/server-crash.svelte:
lucide-svelte/dist/icons/server-off.svelte:
lucide-svelte/dist/icons/server.svelte:
lucide-svelte/dist/icons/settings-2.svelte:
lucide-svelte/dist/icons/settings.svelte:
lucide-svelte/dist/icons/shapes.svelte:
lucide-svelte/dist/icons/share-2.svelte:
lucide-svelte/dist/icons/share.svelte:
lucide-svelte/dist/icons/sheet.svelte:
lucide-svelte/dist/icons/shell.svelte:
lucide-svelte/dist/icons/shield-alert.svelte:
lucide-svelte/dist/icons/shield-ban.svelte:
lucide-svelte/dist/icons/shield-check.svelte:
lucide-svelte/dist/icons/shield-ellipsis.svelte:
lucide-svelte/dist/icons/shield-half.svelte:
lucide-svelte/dist/icons/shield-minus.svelte:
lucide-svelte/dist/icons/shield-off.svelte:
lucide-svelte/dist/icons/shield-plus.svelte:
lucide-svelte/dist/icons/shield-question-mark.svelte:
lucide-svelte/dist/icons/shield-x.svelte:
lucide-svelte/dist/icons/shield-user.svelte:
lucide-svelte/dist/icons/shield.svelte:
lucide-svelte/dist/icons/ship-wheel.svelte:
lucide-svelte/dist/icons/ship.svelte:
lucide-svelte/dist/icons/shirt.svelte:
lucide-svelte/dist/icons/shopping-bag.svelte:
lucide-svelte/dist/icons/shopping-basket.svelte:
lucide-svelte/dist/icons/shopping-cart.svelte:
lucide-svelte/dist/icons/shovel.svelte:
lucide-svelte/dist/icons/shower-head.svelte:
lucide-svelte/dist/icons/shredder.svelte:
lucide-svelte/dist/icons/shrimp.svelte:
lucide-svelte/dist/icons/shrink.svelte:
lucide-svelte/dist/icons/shrub.svelte:
lucide-svelte/dist/icons/shuffle.svelte:
lucide-svelte/dist/icons/sigma.svelte:
lucide-svelte/dist/icons/signal-high.svelte:
lucide-svelte/dist/icons/signal-low.svelte:
lucide-svelte/dist/icons/signal-medium.svelte:
lucide-svelte/dist/icons/signal-zero.svelte:
lucide-svelte/dist/icons/signal.svelte:
lucide-svelte/dist/icons/signature.svelte:
lucide-svelte/dist/icons/signpost-big.svelte:
lucide-svelte/dist/icons/signpost.svelte:
lucide-svelte/dist/icons/siren.svelte:
lucide-svelte/dist/icons/skip-back.svelte:
lucide-svelte/dist/icons/skip-forward.svelte:
lucide-svelte/dist/icons/skull.svelte:
lucide-svelte/dist/icons/slack.svelte:
lucide-svelte/dist/icons/slash.svelte:
lucide-svelte/dist/icons/slice.svelte:
lucide-svelte/dist/icons/sliders-horizontal.svelte:
lucide-svelte/dist/icons/sliders-vertical.svelte:
lucide-svelte/dist/icons/smartphone-charging.svelte:
lucide-svelte/dist/icons/smartphone-nfc.svelte:
lucide-svelte/dist/icons/smartphone.svelte:
lucide-svelte/dist/icons/smile-plus.svelte:
lucide-svelte/dist/icons/smile.svelte:
lucide-svelte/dist/icons/snail.svelte:
lucide-svelte/dist/icons/snowflake.svelte:
lucide-svelte/dist/icons/soap-dispenser-droplet.svelte:
lucide-svelte/dist/icons/sofa.svelte:
lucide-svelte/dist/icons/soup.svelte:
lucide-svelte/dist/icons/space.svelte:
lucide-svelte/dist/icons/spade.svelte:
lucide-svelte/dist/icons/sparkle.svelte:
lucide-svelte/dist/icons/sparkles.svelte:
lucide-svelte/dist/icons/speaker.svelte:
lucide-svelte/dist/icons/speech.svelte:
lucide-svelte/dist/icons/spell-check-2.svelte:
lucide-svelte/dist/icons/spell-check.svelte:
lucide-svelte/dist/icons/spline-pointer.svelte:
lucide-svelte/dist/icons/spline.svelte:
lucide-svelte/dist/icons/split.svelte:
lucide-svelte/dist/icons/spool.svelte:
lucide-svelte/dist/icons/spotlight.svelte:
lucide-svelte/dist/icons/spray-can.svelte:
lucide-svelte/dist/icons/sprout.svelte:
lucide-svelte/dist/icons/square-activity.svelte:
lucide-svelte/dist/icons/square-arrow-down-left.svelte:
lucide-svelte/dist/icons/square-arrow-down-right.svelte:
lucide-svelte/dist/icons/square-arrow-down.svelte:
lucide-svelte/dist/icons/square-arrow-left.svelte:
lucide-svelte/dist/icons/square-arrow-out-down-left.svelte:
lucide-svelte/dist/icons/square-arrow-out-down-right.svelte:
lucide-svelte/dist/icons/square-arrow-out-up-left.svelte:
lucide-svelte/dist/icons/square-arrow-out-up-right.svelte:
lucide-svelte/dist/icons/square-arrow-right.svelte:
lucide-svelte/dist/icons/square-arrow-up-left.svelte:
lucide-svelte/dist/icons/square-arrow-up-right.svelte:
lucide-svelte/dist/icons/square-arrow-up.svelte:
lucide-svelte/dist/icons/square-asterisk.svelte:
lucide-svelte/dist/icons/square-bottom-dashed-scissors.svelte:
lucide-svelte/dist/icons/square-chart-gantt.svelte:
lucide-svelte/dist/icons/square-check-big.svelte:
lucide-svelte/dist/icons/square-check.svelte:
lucide-svelte/dist/icons/square-chevron-down.svelte:
lucide-svelte/dist/icons/square-chevron-left.svelte:
lucide-svelte/dist/icons/square-chevron-right.svelte:
lucide-svelte/dist/icons/square-chevron-up.svelte:
lucide-svelte/dist/icons/square-code.svelte:
lucide-svelte/dist/icons/square-dashed-bottom-code.svelte:
lucide-svelte/dist/icons/square-dashed-bottom.svelte:
lucide-svelte/dist/icons/square-dashed-kanban.svelte:
lucide-svelte/dist/icons/square-dashed-mouse-pointer.svelte:
lucide-svelte/dist/icons/square-dashed-top-solid.svelte:
lucide-svelte/dist/icons/square-dashed.svelte:
lucide-svelte/dist/icons/square-divide.svelte:
lucide-svelte/dist/icons/square-dot.svelte:
lucide-svelte/dist/icons/square-function.svelte:
lucide-svelte/dist/icons/square-equal.svelte:
lucide-svelte/dist/icons/square-kanban.svelte:
lucide-svelte/dist/icons/square-library.svelte:
lucide-svelte/dist/icons/square-m.svelte:
lucide-svelte/dist/icons/square-menu.svelte:
lucide-svelte/dist/icons/square-minus.svelte:
lucide-svelte/dist/icons/square-mouse-pointer.svelte:
lucide-svelte/dist/icons/square-parking-off.svelte:
lucide-svelte/dist/icons/square-parking.svelte:
lucide-svelte/dist/icons/square-pause.svelte:
lucide-svelte/dist/icons/square-percent.svelte:
lucide-svelte/dist/icons/square-pen.svelte:
lucide-svelte/dist/icons/square-pi.svelte:
lucide-svelte/dist/icons/square-pilcrow.svelte:
lucide-svelte/dist/icons/square-play.svelte:
lucide-svelte/dist/icons/square-plus.svelte:
lucide-svelte/dist/icons/square-power.svelte:
lucide-svelte/dist/icons/square-radical.svelte:
lucide-svelte/dist/icons/square-round-corner.svelte:
lucide-svelte/dist/icons/square-scissors.svelte:
lucide-svelte/dist/icons/square-sigma.svelte:
lucide-svelte/dist/icons/square-slash.svelte:
lucide-svelte/dist/icons/square-split-horizontal.svelte:
lucide-svelte/dist/icons/square-split-vertical.svelte:
lucide-svelte/dist/icons/square-square.svelte:
lucide-svelte/dist/icons/square-stack.svelte:
lucide-svelte/dist/icons/square-stop.svelte:
lucide-svelte/dist/icons/square-terminal.svelte:
lucide-svelte/dist/icons/square-user-round.svelte:
lucide-svelte/dist/icons/square-user.svelte:
lucide-svelte/dist/icons/square-x.svelte:
lucide-svelte/dist/icons/square.svelte:
lucide-svelte/dist/icons/squares-exclude.svelte:
lucide-svelte/dist/icons/squares-intersect.svelte:
lucide-svelte/dist/icons/squares-subtract.svelte:
lucide-svelte/dist/icons/squircle-dashed.svelte:
lucide-svelte/dist/icons/squares-unite.svelte:
lucide-svelte/dist/icons/squircle.svelte:
lucide-svelte/dist/icons/squirrel.svelte:
lucide-svelte/dist/icons/stamp.svelte:
lucide-svelte/dist/icons/star-half.svelte:
lucide-svelte/dist/icons/star-off.svelte:
lucide-svelte/dist/icons/step-back.svelte:
lucide-svelte/dist/icons/star.svelte:
lucide-svelte/dist/icons/step-forward.svelte:
lucide-svelte/dist/icons/stethoscope.svelte:
lucide-svelte/dist/icons/sticker.svelte:
lucide-svelte/dist/icons/sticky-note.svelte:
lucide-svelte/dist/icons/store.svelte:
lucide-svelte/dist/icons/stretch-horizontal.svelte:
lucide-svelte/dist/icons/stretch-vertical.svelte:
lucide-svelte/dist/icons/strikethrough.svelte:
lucide-svelte/dist/icons/subscript.svelte:
lucide-svelte/dist/icons/sun-dim.svelte:
lucide-svelte/dist/icons/sun-medium.svelte:
lucide-svelte/dist/icons/sun-moon.svelte:
lucide-svelte/dist/icons/sun-snow.svelte:
lucide-svelte/dist/icons/sun.svelte:
lucide-svelte/dist/icons/sunrise.svelte:
lucide-svelte/dist/icons/sunset.svelte:
lucide-svelte/dist/icons/superscript.svelte:
lucide-svelte/dist/icons/swatch-book.svelte:
lucide-svelte/dist/icons/swiss-franc.svelte:
lucide-svelte/dist/icons/switch-camera.svelte:
lucide-svelte/dist/icons/sword.svelte:
lucide-svelte/dist/icons/swords.svelte:
lucide-svelte/dist/icons/syringe.svelte:
lucide-svelte/dist/icons/table-2.svelte:
lucide-svelte/dist/icons/table-cells-merge.svelte:
lucide-svelte/dist/icons/table-cells-split.svelte:
lucide-svelte/dist/icons/table-columns-split.svelte:
lucide-svelte/dist/icons/table-of-contents.svelte:
lucide-svelte/dist/icons/table-properties.svelte:
lucide-svelte/dist/icons/table-rows-split.svelte:
lucide-svelte/dist/icons/table.svelte:
lucide-svelte/dist/icons/tablet-smartphone.svelte:
lucide-svelte/dist/icons/tablet.svelte:
lucide-svelte/dist/icons/tablets.svelte:
lucide-svelte/dist/icons/tag.svelte:
lucide-svelte/dist/icons/tags.svelte:
lucide-svelte/dist/icons/tally-1.svelte:
lucide-svelte/dist/icons/tally-2.svelte:
lucide-svelte/dist/icons/tally-3.svelte:
lucide-svelte/dist/icons/tally-4.svelte:
lucide-svelte/dist/icons/tally-5.svelte:
lucide-svelte/dist/icons/tangent.svelte:
lucide-svelte/dist/icons/target.svelte:
lucide-svelte/dist/icons/telescope.svelte:
lucide-svelte/dist/icons/tent-tree.svelte:
lucide-svelte/dist/icons/tent.svelte:
lucide-svelte/dist/icons/terminal.svelte:
lucide-svelte/dist/icons/test-tube-diagonal.svelte:
lucide-svelte/dist/icons/test-tube.svelte:
lucide-svelte/dist/icons/test-tubes.svelte:
lucide-svelte/dist/icons/text-cursor-input.svelte:
lucide-svelte/dist/icons/text-cursor.svelte:
lucide-svelte/dist/icons/text-quote.svelte:
lucide-svelte/dist/icons/text-search.svelte:
lucide-svelte/dist/icons/text-select.svelte:
lucide-svelte/dist/icons/text.svelte:
lucide-svelte/dist/icons/theater.svelte:
lucide-svelte/dist/icons/thermometer-sun.svelte:
lucide-svelte/dist/icons/thermometer-snowflake.svelte:
lucide-svelte/dist/icons/thermometer.svelte:
lucide-svelte/dist/icons/thumbs-down.svelte:
lucide-svelte/dist/icons/thumbs-up.svelte:
lucide-svelte/dist/icons/ticket-check.svelte:
lucide-svelte/dist/icons/ticket-minus.svelte:
lucide-svelte/dist/icons/ticket-percent.svelte:
lucide-svelte/dist/icons/ticket-plus.svelte:
lucide-svelte/dist/icons/ticket-slash.svelte:
lucide-svelte/dist/icons/ticket-x.svelte:
lucide-svelte/dist/icons/ticket.svelte:
lucide-svelte/dist/icons/tickets.svelte:
lucide-svelte/dist/icons/tickets-plane.svelte:
lucide-svelte/dist/icons/timer-off.svelte:
lucide-svelte/dist/icons/timer.svelte:
lucide-svelte/dist/icons/timer-reset.svelte:
lucide-svelte/dist/icons/toggle-left.svelte:
lucide-svelte/dist/icons/toggle-right.svelte:
lucide-svelte/dist/icons/toilet.svelte:
lucide-svelte/dist/icons/tool-case.svelte:
lucide-svelte/dist/icons/tornado.svelte:
lucide-svelte/dist/icons/torus.svelte:
lucide-svelte/dist/icons/touchpad-off.svelte:
lucide-svelte/dist/icons/touchpad.svelte:
lucide-svelte/dist/icons/tower-control.svelte:
lucide-svelte/dist/icons/toy-brick.svelte:
lucide-svelte/dist/icons/tractor.svelte:
lucide-svelte/dist/icons/traffic-cone.svelte:
lucide-svelte/dist/icons/train-front-tunnel.svelte:
lucide-svelte/dist/icons/train-front.svelte:
lucide-svelte/dist/icons/train-track.svelte:
lucide-svelte/dist/icons/tram-front.svelte:
lucide-svelte/dist/icons/transgender.svelte:
lucide-svelte/dist/icons/trash-2.svelte:
lucide-svelte/dist/icons/trash.svelte:
lucide-svelte/dist/icons/tree-deciduous.svelte:
lucide-svelte/dist/icons/tree-palm.svelte:
lucide-svelte/dist/icons/tree-pine.svelte:
lucide-svelte/dist/icons/trees.svelte:
lucide-svelte/dist/icons/trello.svelte:
lucide-svelte/dist/icons/trending-down.svelte:
lucide-svelte/dist/icons/trending-up-down.svelte:
lucide-svelte/dist/icons/trending-up.svelte:
lucide-svelte/dist/icons/triangle-alert.svelte:
lucide-svelte/dist/icons/triangle-dashed.svelte:
lucide-svelte/dist/icons/triangle-right.svelte:
lucide-svelte/dist/icons/triangle.svelte:
lucide-svelte/dist/icons/trophy.svelte:
lucide-svelte/dist/icons/truck-electric.svelte:
lucide-svelte/dist/icons/turkish-lira.svelte:
lucide-svelte/dist/icons/truck.svelte:
lucide-svelte/dist/icons/turntable.svelte:
lucide-svelte/dist/icons/turtle.svelte:
lucide-svelte/dist/icons/tv-minimal-play.svelte:
lucide-svelte/dist/icons/tv-minimal.svelte:
lucide-svelte/dist/icons/tv.svelte:
lucide-svelte/dist/icons/twitch.svelte:
lucide-svelte/dist/icons/twitter.svelte:
lucide-svelte/dist/icons/type-outline.svelte:
lucide-svelte/dist/icons/type.svelte:
lucide-svelte/dist/icons/umbrella-off.svelte:
lucide-svelte/dist/icons/umbrella.svelte:
lucide-svelte/dist/icons/underline.svelte:
lucide-svelte/dist/icons/undo-2.svelte:
lucide-svelte/dist/icons/undo-dot.svelte:
lucide-svelte/dist/icons/undo.svelte:
lucide-svelte/dist/icons/unfold-horizontal.svelte:
lucide-svelte/dist/icons/unfold-vertical.svelte:
lucide-svelte/dist/icons/ungroup.svelte:
lucide-svelte/dist/icons/university.svelte:
lucide-svelte/dist/icons/unlink-2.svelte:
lucide-svelte/dist/icons/unlink.svelte:
lucide-svelte/dist/icons/unplug.svelte:
lucide-svelte/dist/icons/upload.svelte:
lucide-svelte/dist/icons/usb.svelte:
lucide-svelte/dist/icons/user-check.svelte:
lucide-svelte/dist/icons/user-cog.svelte:
lucide-svelte/dist/icons/user-lock.svelte:
lucide-svelte/dist/icons/user-minus.svelte:
lucide-svelte/dist/icons/user-pen.svelte:
lucide-svelte/dist/icons/user-plus.svelte:
lucide-svelte/dist/icons/user-round-check.svelte:
lucide-svelte/dist/icons/user-round-cog.svelte:
lucide-svelte/dist/icons/user-round-minus.svelte:
lucide-svelte/dist/icons/user-round-pen.svelte:
lucide-svelte/dist/icons/user-round-search.svelte:
lucide-svelte/dist/icons/user-round-plus.svelte:
lucide-svelte/dist/icons/user-round-x.svelte:
lucide-svelte/dist/icons/user-round.svelte:
lucide-svelte/dist/icons/user-search.svelte:
lucide-svelte/dist/icons/user-star.svelte:
lucide-svelte/dist/icons/user-x.svelte:
lucide-svelte/dist/icons/user.svelte:
lucide-svelte/dist/icons/users-round.svelte:
lucide-svelte/dist/icons/users.svelte:
lucide-svelte/dist/icons/utensils-crossed.svelte:
lucide-svelte/dist/icons/utensils.svelte:
lucide-svelte/dist/icons/utility-pole.svelte:
lucide-svelte/dist/icons/variable.svelte:
lucide-svelte/dist/icons/vault.svelte:
lucide-svelte/dist/icons/vector-square.svelte:
lucide-svelte/dist/icons/vegan.svelte:
lucide-svelte/dist/icons/venetian-mask.svelte:
lucide-svelte/dist/icons/venus-and-mars.svelte:
lucide-svelte/dist/icons/venus.svelte:
lucide-svelte/dist/icons/vibrate-off.svelte:
lucide-svelte/dist/icons/vibrate.svelte:
lucide-svelte/dist/icons/video-off.svelte:
lucide-svelte/dist/icons/video.svelte:
lucide-svelte/dist/icons/videotape.svelte:
lucide-svelte/dist/icons/view.svelte:
lucide-svelte/dist/icons/voicemail.svelte:
lucide-svelte/dist/icons/volleyball.svelte:
lucide-svelte/dist/icons/volume-1.svelte:
lucide-svelte/dist/icons/volume-2.svelte:
lucide-svelte/dist/icons/volume-off.svelte:
lucide-svelte/dist/icons/volume-x.svelte:
lucide-svelte/dist/icons/volume.svelte:
lucide-svelte/dist/icons/vote.svelte:
lucide-svelte/dist/icons/wallet-cards.svelte:
lucide-svelte/dist/icons/wallet-minimal.svelte:
lucide-svelte/dist/icons/wallet.svelte:
lucide-svelte/dist/icons/wallpaper.svelte:
lucide-svelte/dist/icons/wand-sparkles.svelte:
lucide-svelte/dist/icons/wand.svelte:
lucide-svelte/dist/icons/warehouse.svelte:
lucide-svelte/dist/icons/washing-machine.svelte:
lucide-svelte/dist/icons/watch.svelte:
lucide-svelte/dist/icons/waves-ladder.svelte:
lucide-svelte/dist/icons/waves.svelte:
lucide-svelte/dist/icons/waypoints.svelte:
lucide-svelte/dist/icons/webcam.svelte:
lucide-svelte/dist/icons/webhook-off.svelte:
lucide-svelte/dist/icons/webhook.svelte:
lucide-svelte/dist/icons/weight.svelte:
lucide-svelte/dist/icons/wheat-off.svelte:
lucide-svelte/dist/icons/wheat.svelte:
lucide-svelte/dist/icons/whole-word.svelte:
lucide-svelte/dist/icons/wifi-cog.svelte:
lucide-svelte/dist/icons/wifi-high.svelte:
lucide-svelte/dist/icons/wifi-low.svelte:
lucide-svelte/dist/icons/wifi-off.svelte:
lucide-svelte/dist/icons/wifi-pen.svelte:
lucide-svelte/dist/icons/wifi-sync.svelte:
lucide-svelte/dist/icons/wifi-zero.svelte:
lucide-svelte/dist/icons/wifi.svelte:
lucide-svelte/dist/icons/wind-arrow-down.svelte:
lucide-svelte/dist/icons/wind.svelte:
lucide-svelte/dist/icons/wine-off.svelte:
lucide-svelte/dist/icons/wine.svelte:
lucide-svelte/dist/icons/workflow.svelte:
lucide-svelte/dist/icons/worm.svelte:
lucide-svelte/dist/icons/wrap-text.svelte:
lucide-svelte/dist/icons/wrench.svelte:
lucide-svelte/dist/icons/x.svelte:
lucide-svelte/dist/icons/youtube.svelte:
lucide-svelte/dist/icons/zap-off.svelte:
lucide-svelte/dist/icons/zap.svelte:
lucide-svelte/dist/icons/zoom-in.svelte:
lucide-svelte/dist/icons/zoom-out.svelte:
  (**
   * @license lucide-svelte v0.536.0 - ISC
   *
   * ISC License
   *
   * Copyright (c) for portions of Lucide are held by Cole Bemis 2013-2022 as part of Feather (MIT). All other copyright (c) for Lucide are held by Lucide Contributors 2022.
   *
   * Permission to use, copy, modify, and/or distribute this software for any
   * purpose with or without fee is hereby granted, provided that the above
   * copyright notice and this permission notice appear in all copies.
   *
   * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
   * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
   * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
   * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
   * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
   * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
   * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   *)
*/
//# sourceMappingURL=lucide-svelte.js.map
