import { formatDateWithLocale, getPeriodTypeNameWithLocale, getDayOfWeekName, isStringDate, periodTypeMappings, } from './date.js';
import { formatNumberWithLocale } from './number.js';
import { defaultLocale } from './locale.js';
import { PeriodType, } from './date_types.js';
export function format(value, formatOrConfig, options) {
    if (formatOrConfig && typeof formatOrConfig === 'object' && 'type' in formatOrConfig) {
        return formatWithLocale(defaultLocale, value, formatOrConfig.type, formatOrConfig.options);
    }
    return formatWithLocale(defaultLocale, value, formatOrConfig, options);
}
export function formatWithLocale(settings, value, formatOrConfig, options) {
    const format = formatOrConfig && typeof formatOrConfig === 'object' && 'type' in formatOrConfig
        ? formatOrConfig.type
        : formatOrConfig;
    const formatOptions = formatOrConfig &&
        typeof formatOrConfig === 'object' &&
        'type' in formatOrConfig &&
        'options' in formatOrConfig
        ? formatOrConfig.options
        : options;
    if (typeof format === 'function') {
        return format(value);
    }
    else if (value instanceof Date ||
        isStringDate(value) ||
        (format &&
            (format in PeriodType ||
                Object.values(periodTypeMappings).includes(format)))) {
        return formatDateWithLocale(settings, value, format, formatOptions);
    }
    else if (typeof value === 'number') {
        return formatNumberWithLocale(settings, value, format, formatOptions);
    }
    else if (typeof value === 'string') {
        // Keep original value if already string
        return value;
    }
    else if (value == null) {
        return '';
    }
    else {
        // Provide some reasonable fallback for objects/etc (maybe use stringify() instead)
        return `${value}`;
    }
}
export function buildFormatters(settings) {
    const mainFormat = (value, style, options) => formatWithLocale(settings, value, style, options);
    mainFormat.settings = settings;
    mainFormat.getDayOfWeekName = (day) => getDayOfWeekName(day, settings.locale);
    mainFormat.getPeriodTypeName = (period) => getPeriodTypeNameWithLocale(settings, period);
    return mainFormat;
}
