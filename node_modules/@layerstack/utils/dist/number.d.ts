import { type LocaleSettings } from './locale.js';
export type FormatNumberStyle = 'decimal' | 'currency' | 'percent' | 'unit' | 'none' | 'integer' | 'currencyRound' | 'percentRound' | 'metric' | 'default';
export type FormatNumberOptions = Intl.NumberFormatOptions & {
    fractionDigits?: number;
    suffix?: string;
    /**
     * If number is >= 2, then this extraSuffix will be appended
     * @default 's'
     */
    suffixExtraIfMany?: string;
};
export declare function formatNumber(number: number | null | undefined, style?: FormatNumberStyle, options?: FormatNumberOptions): string;
export declare function formatNumberWithLocale(settings: LocaleSettings, number: number | null | undefined, style?: FormatNumberStyle, options?: FormatNumberOptions): string;
/**
 * Clamps value within min and max
 */
export declare function clamp(value: number, min: number, max: number): number;
/**
 * Return the number of decimal positions (ex. 123.45 => 2, 123 => 0)
 */
export declare function decimalCount(value: number): number;
/**
 * Round to the number of decimals (ex. round(123.45, 1) => 123.5)
 */
export declare function round(value: number, decimals: number): number;
/**
 * Step value while rounding to the nearest step precision (work around float issues such as `0.2` + `0.1`)
 */
export declare function step(value: number, step: number): number;
/**
 * Get random number between min and max (inclusive).  See also d3.randomInt()
 */
export declare function randomInteger(min: number, max: number): number;
/**
 * Remainder (n % m) with support for negative numbers
 * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder#description
 */
export declare function modulo(n: number, m: number): number;
//# sourceMappingURL=number.d.ts.map