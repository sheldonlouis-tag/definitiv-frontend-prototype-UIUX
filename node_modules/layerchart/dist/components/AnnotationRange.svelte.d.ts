import type { ComponentProps } from 'svelte';
import type { SVGAttributes } from 'svelte/elements';
import type { CommonStyleProps, Without } from '../utils/types.js';
import { type SingleDomainType } from '../utils/scales.svelte.js';
export type AnnotationRangePropsWithoutHTML = {
    /** x values of the range */
    x?: [SingleDomainType, SingleDomainType] | SingleDomainType[];
    /** y values of the range */
    y?: [SingleDomainType, SingleDomainType] | SingleDomainType[];
    /** Label to display for line*/
    label?: string;
    /** Placement of the label */
    labelPlacement?: Placement;
    /** X offset of the label */
    labelXOffset?: number;
    /** Y offset of the label */
    labelYOffset?: number;
    /** Add Rect with fill */
    fill?: string;
    /** Add Rect with class*/
    class?: string;
    /** Add Rect with gradient */
    gradient?: ComponentProps<typeof LinearGradient>;
    /** Add Rect with pattern */
    pattern?: ComponentProps<typeof Pattern>;
    /** Classes for inner elements */
    props?: {
        label?: Partial<ComponentProps<typeof Text>>;
        rect?: Partial<ComponentProps<typeof Rect>>;
    };
} & CommonStyleProps;
export type AnnotationRangeProps = AnnotationRangePropsWithoutHTML & Without<SVGAttributes<Element>, AnnotationRangePropsWithoutHTML>;
import LinearGradient from './LinearGradient.svelte';
import Pattern from './Pattern.svelte';
import Rect from './Rect.svelte';
import Text from './Text.svelte';
import type { Placement } from './types.js';
declare const AnnotationRange: import("svelte").Component<AnnotationRangeProps, {}, "">;
type AnnotationRange = ReturnType<typeof AnnotationRange>;
export default AnnotationRange;
