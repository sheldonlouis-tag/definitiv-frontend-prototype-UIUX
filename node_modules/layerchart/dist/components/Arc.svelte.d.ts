import type { ComponentProps, Snippet } from 'svelte';
import type { SVGAttributes } from 'svelte/elements';
import Spline, { type SplinePropsWithoutHTML } from './Spline.svelte';
import type { TooltipContextValue } from './tooltip/TooltipContext.svelte';
import { type MotionProp } from '../utils/motion.svelte.js';
import type { CommonStyleProps, Without } from '../utils/types.js';
export type ArcPropsWithoutHTML = {
    value?: number;
    initialValue?: number;
    /**
     * Domain [min,max] in degrees
     *
     * @default [0, 100];
     */
    domain?: [number, number];
    /**
     * Range [min,max] in degrees. See also startAngle/endAngle
     *
     * @default [0, 360]
     */
    range?: [number, number];
    /**
     * Start angle in radians
     */
    startAngle?: number;
    /**
     * End angle in radians
     */
    endAngle?: number;
    /**
     * Define innerRadius. Defaults to yRange min
     *   • value >= 1: discrete value
     *   • value < 1: percent of `outerRadius`
     *   • value < 0: offset of `outerRadius`
     */
    innerRadius?: number;
    /**
     * Define outerRadius. Defaults to smallest width (xRange) or height (yRange) dimension (/2)
     *   • value >= 1: discrete value
     *   • value < 1: percent of chart width or height (smallest) / 2
     *   • value < 0: offset of chart width or height (smallest) / 2
     */
    outerRadius?: number;
    /**
     * Corner radius of the arc
     *
     * @default 0
     */
    cornerRadius?: number;
    /**
     * Angle between the arcs
     *
     * @default 0
     */
    padAngle?: number;
    /**
     * Start angle in radians
     */
    trackStartAngle?: number;
    /**
     * End angle in radians
     */
    trackEndAngle?: number;
    /**
     * Define innerRadius. Defaults to yRange min
     *   • value >= 1: discrete value
     *   • value < 1: percent of `outerRadius`
     *   • value < 0: offset of `outerRadius`
     */
    trackInnerRadius?: number;
    /**
     * Define outerRadius. Defaults to smallest width (xRange) or height (yRange) dimension (/2)
     *   • value >= 1: discrete value
     *   • value < 1: percent of chart width or height (smallest) / 2
     *   • value < 0: offset of chart width or height (smallest) / 2
     */
    trackOuterRadius?: number;
    /**
     * Corner radius of the arc
     *
     * @default 0
     */
    trackCornerRadius?: number;
    /**
     * Angle between the arcs
     *
     * @default 0
     */
    trackPadAngle?: number;
    /**
     * Offset arc from center
     *
     * @default 0
     */
    offset?: number;
    /**
     * Tooltip context to setup pointer events to show tooltip for related data.
     *
     * **Must set `data` prop as well**
     */
    tooltipContext?: TooltipContextValue;
    /**
     * Data to set when showing tooltip
     */
    data?: any;
    /**
     * Pass true to enable the track with default props, or pass an object
     * of props to enable the track.
     */
    track?: boolean | Partial<ComponentProps<typeof Spline>>;
    /**
     * A reference to the track element
     *
     * @bindable
     */
    trackRef?: SVGPathElement;
    /**
     * A reference to the arc element
     *
     * @bindable
     */
    ref?: SVGPathElement;
    children?: Snippet<[
        {
            centroid: [number, number];
            boundingBox: DOMRect;
            value: number;
            getTrackTextProps: GetArcTextProps;
            getArcTextProps: GetArcTextProps;
        }
    ]>;
    motion?: MotionProp;
} & CommonStyleProps;
export type ArcProps = ArcPropsWithoutHTML & Without<SVGAttributes<SVGPathElement>, ArcPropsWithoutHTML & SplinePropsWithoutHTML>;
import { type GetArcTextProps } from '../utils/arcText.svelte.js';
declare const Arc: import("svelte").Component<ArcProps, {}, "ref" | "trackRef">;
type Arc = ReturnType<typeof Arc>;
export default Arc;
