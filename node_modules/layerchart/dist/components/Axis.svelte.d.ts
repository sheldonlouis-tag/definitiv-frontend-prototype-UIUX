import type { Transition, TransitionParams, Without } from '../utils/types.js';
export type AxisPropsWithoutHTML<In extends Transition = Transition> = {
    /**
     * Location of axis
     */
    placement: 'top' | 'bottom' | 'left' | 'right' | 'angle' | 'radius';
    /**
     * The label for the axis.
     *
     * Can either be a string or a snippet to render custom content.
     * The snippet receives spreadable props to apply to the label.
     */
    label?: string | Snippet<[{
        props: ComponentProps<typeof Text>;
    }]>;
    /**
     * Location of axis label
     * @default 'middle'
     */
    labelPlacement?: 'start' | 'middle' | 'end';
    /**
     * Props applied to label Text
     */
    labelProps?: Partial<ComponentProps<typeof Text>>;
    /**
     * Draw a rule line. Use Rule component for greater rendering order control
     * @default false
     */
    rule?: boolean | Partial<ComponentProps<typeof Rule>>;
    /**
     * Draw grid lines
     * @default false
     */
    grid?: boolean | Pick<SVGAttributes<SVGElement>, 'class' | 'style'>;
    /**
     * Control the number of ticks
     */
    ticks?: TicksConfig;
    /**
     * Width or height of each tick in pxiels (responsive reduce)
     */
    tickSpacing?: number;
    /**
     * Whether to render tick labels on multiple lines for additional context
     *
     * @default false
     */
    tickMultiline?: boolean;
    /**
     * Length of the tick line
     * @default 4
     */
    tickLength?: number;
    /**
     * Whether to render tick marks.
     *
     * @default true
     */
    tickMarks?: boolean;
    /**
     * Format tick labels
     */
    format?: FormatType | FormatConfig;
    /**
     * Props to apply to each tick label
     */
    tickLabelProps?: Partial<ComponentProps<typeof Text>>;
    /**
     * A snippet to render your own custom tick label.
     */
    tickLabel?: Snippet<[{
        props: ComponentProps<typeof Text>;
        index: number;
    }]>;
    /**
     * Transition function for entering elements
     * @default defaults to fade if the motion prop is set to tweened
     */
    transitionIn?: In;
    /**
     * Parameters for the transitionIn function
     * @default { easing: cubicIn }
     */
    transitionInParams?: TransitionParams<In>;
    /**
     * Scale for the axis
     */
    scale?: any;
    /**
     * Classes for styling various parts of the axis
     * @default {}
     */
    classes?: {
        root?: string;
        label?: string;
        rule?: string;
        tick?: string;
        tickLabel?: string;
    };
    motion?: MotionProp;
};
export type AxisProps<In extends Transition = Transition> = AxisPropsWithoutHTML<In> & Without<GroupProps, AxisPropsWithoutHTML<In>>;
import { type ComponentProps, type Snippet } from 'svelte';
import type { SVGAttributes } from 'svelte/elements';
import { type FormatType, type FormatConfig } from '@layerstack/utils';
import { type GroupProps } from './Group.svelte';
import Rule from './Rule.svelte';
import Text from './Text.svelte';
import { type MotionProp } from '../utils/motion.svelte.js';
import { type TicksConfig } from '../utils/ticks.js';
declare class __sveltets_Render<T extends Transition = Transition> {
    props(): AxisProps<T>;
    events(): {};
    slots(): {};
    bindings(): "";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <T extends Transition = Transition>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<T>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<T>['props']>, ReturnType<__sveltets_Render<T>['events']>, ReturnType<__sveltets_Render<T>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<T>['bindings']>;
    } & ReturnType<__sveltets_Render<T>['exports']>;
    <T extends Transition = Transition>(internal: unknown, props: ReturnType<__sveltets_Render<T>['props']> & {}): ReturnType<__sveltets_Render<T>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
declare const Axis: $$IsomorphicComponent;
type Axis<T extends Transition = Transition> = InstanceType<typeof Axis<T>>;
export default Axis;
