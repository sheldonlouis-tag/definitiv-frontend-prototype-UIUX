import { type Insets } from '../utils/rect.svelte.js';
export type BarPropsWithoutHTML = {
    /**
     * data to render the bar from
     */
    data: Object;
    /**
     * Override `x` from context. Useful for multiple Bar instances
     *
     * @default ctx.x
     */
    x?: Accessor;
    /**
     * Override `y` from context. Useful for multiple Bar instances
     *
     * @default ctx.y
     */
    y?: Accessor;
    /**
     * Override `x1` from context. Useful for multiple Bar instances
     *
     * @default ctx.x1
     */
    x1?: Accessor;
    /**
     * Override `y1` from context. Useful for multiple Bar instances
     *
     * @default ctx.y1
     */
    y1?: Accessor;
    radius?: number;
    insets?: Insets;
    initialX?: number;
    initialY?: number;
    initialHeight?: number;
    initialWidth?: number;
    /**
     * Control which corners are rounded with radius. Uses <path> instead of <rect> when not set
     * to `all`
     */
    rounded?: 'all' | 'none' | 'edge' | 'top' | 'bottom' | 'left' | 'right' | 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
    motion?: MotionProp<'x' | 'y' | 'width' | 'height'>;
} & CommonStyleProps;
export type BarProps = BarPropsWithoutHTML & Without<Omit<SVGAttributes<SVGElement>, 'width' | 'height' | 'x' | 'y' | 'offset'>, BarPropsWithoutHTML>;
import type { SVGAttributes } from 'svelte/elements';
import { type Accessor } from '../utils/common.js';
import type { CommonStyleProps, Without } from '../utils/types.js';
import { type MotionProp } from '../utils/motion.svelte.js';
declare const Bar: import("svelte").Component<BarProps, {}, "">;
type Bar = ReturnType<typeof Bar>;
export default Bar;
