export type BrushRange = {
    x: number;
    y: number;
    width: number;
    height: number;
};
export type BrushContextValue = {
    xDomain: DomainType;
    yDomain: DomainType;
    isActive: boolean;
    range: BrushRange;
    handleSize: number;
};
export declare function getBrushContext(): BrushContextValue;
export declare function setBrushContext(brush: BrushContextValue): BrushContextValue;
type BrushEventPayload = {
    xDomain: DomainType | null;
    yDomain: DomainType | null;
};
type BrushContextPropsWithoutHTML = {
    /**
     * The axis to apply brushing
     *
     * @default 'x'
     */
    axis?: 'x' | 'y' | 'both';
    /**
     * Size of the draggable handles (width/height)
     *
     * @default 5
     */
    handleSize?: number;
    /**
     * Only show range while actively brushing.
     * Useful with `brushEnd` event
     *
     * @default false
     */
    resetOnEnd?: boolean;
    /**
     * Ignore click to reset.
     * Useful to add click handlers to marks.  Requires external resetting (button, another chart, etc)
     *
     * @default false
     */
    ignoreResetClick?: boolean;
    xDomain?: DomainType;
    yDomain?: DomainType;
    /**
     * Mode of operation
     *  - `integrated`: use with single chart
     *  - `separated`: use with separate (typically smaller) chart and state can be managed
     * externally (sync with other charts, etc).  Show active selection when domain does not equal
     * original
     *
     * @default 'integrated'
     */
    mode?: 'integrated' | 'separated';
    /**
     * Disable brush
     *
     * @default false
     */
    disabled?: boolean;
    /**
     * Attributes passed to the range <div> element
     */
    range?: Partial<HTMLAttributes<HTMLElement>>;
    /**
     * Attributes passed to the handle <div> elements
     */
    handle?: Partial<HTMLAttributes<HTMLElement>>;
    /**
     * Classes to apply to the various elements rendered
     *
     * @default {}
     */
    classes?: {
        root?: string;
        frame?: string;
        range?: string;
        handle?: string;
        labels?: string;
    };
    onChange?: (detail: BrushEventPayload) => void;
    onBrushStart?: (detail: BrushEventPayload) => void;
    onBrushEnd?: (detail: BrushEventPayload) => void;
    onReset?: (detail: BrushEventPayload) => void;
    /**
     * A reference to this brush's context for use in parent
     * components.
     *
     * @bindable
     */
    brushContext?: BrushContextValue;
    children?: Snippet<[{
        brushContext: BrushContextValue;
    }]>;
};
import { type DomainType } from '../utils/scales.svelte.js';
import type { HTMLAttributes } from 'svelte/elements';
import type { Snippet } from 'svelte';
declare const BrushContext: import("svelte").Component<BrushContextPropsWithoutHTML, {}, "brushContext">;
type BrushContext = ReturnType<typeof BrushContext>;
export default BrushContext;
