export type CalendarCell = {
    x: number;
    y: number;
    color: any;
    data: any;
};
export type CalendarPropsWithoutHTML = {
    /**
     * The start date of the calendar.
     */
    start: Date;
    /**
     * The end date of the calendar.
     */
    end: Date;
    /**
     * Size of the cell in the calendar.
     *
     * - `number`: sets width/height as same value (square).
     * - `array`: sets as [width,height].
     * - `undefined/omitted`: is derived from Chart width/height
     */
    cellSize?: number | [number, number];
    /**
     * Enable drawing path around each month.  If object, pass as props to underlying <path>
     *
     * @default false
     */
    monthPath?: boolean | Partial<ComponentProps<typeof MonthPath>>;
    /**
     * Props to pass to the `<text>` element for month labels.
     */
    monthLabel?: boolean | Partial<ComponentProps<typeof Text>>;
    /**
     * Tooltip context to setup mouse events to show tooltip for related data
     */
    tooltipContext?: TooltipContextValue;
    children?: Snippet<[{
        cells: CalendarCell[];
        cellSize: [number, number];
    }]>;
} & Omit<RectPropsWithoutHTML, 'children' | 'x' | 'y' | 'width' | 'height' | 'fill' | 'onpointermove' | 'onpointerleave'>;
export type CalendarProps = CalendarPropsWithoutHTML & Without<SVGAttributes<SVGRectElement>, CalendarPropsWithoutHTML>;
import { type ComponentProps, type Snippet } from 'svelte';
import { type RectPropsWithoutHTML } from './Rect.svelte';
import type { TooltipContextValue } from './tooltip/TooltipContext.svelte';
import MonthPath from './MonthPath.svelte';
import Text from './Text.svelte';
import type { SVGAttributes } from 'svelte/elements';
import type { Without } from '../utils/types.js';
declare const Calendar: import("svelte").Component<CalendarPropsWithoutHTML, {}, "">;
type Calendar = ReturnType<typeof Calendar>;
export default Calendar;
