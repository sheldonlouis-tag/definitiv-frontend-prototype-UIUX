import type { CommonStyleProps, Without } from '../utils/types.js';
import type { Snippet } from 'svelte';
import type { SVGAttributes } from 'svelte/elements';
import type { TooltipContextValue } from './tooltip/TooltipContext.svelte';
import { type CurveFactory, type CurveFactoryLineOnly } from 'd3-shape';
import { type GeoIdentityTransform, type GeoPermissibleObjects, type GeoProjection, type GeoTransformPrototype } from 'd3-geo';
export type GeoPathPropsWithoutHTML = {
    /**
     * GeoJSON data to render
     */
    geojson?: GeoPermissibleObjects | null;
    /**
     * Tooltip context to setup pointer events to show tooltip for related data
     */
    tooltipContext?: TooltipContextValue | undefined;
    /**
     * Click event handler
     */
    onclick?: ((e: MouseEvent, geoPath: ReturnType<typeof geoCurvePath> | undefined) => void) | undefined;
    /**
     * Curve of path drawn. Imported via d3-shape.
     *
     * @example
     * import { curveCatmullRom } from 'd3-shape';
     * <GeoPath curve={curveCatmullRom} />
     *
     * @default curveLinearClosed
     */
    curve?: CurveFactory | CurveFactoryLineOnly;
    /**
     * Apply geo transform to projection.
     * Useful to draw straight lines with `geoMercator` projection.
     *
     * @see https://d3js.org/d3-geo/projection#geoTransform
     * @see https://stackoverflow.com/a/56409480/191902
     **/
    geoTransform?: (projection: GeoProjection | GeoIdentityTransform) => GeoTransformPrototype;
    /**
     * A reference to the underlying `<path>` element
     * @bindable
     */
    ref?: SVGPathElement;
    children?: Snippet<[{
        geoPath: ReturnType<typeof geoCurvePath> | undefined;
    }]>;
} & CommonStyleProps;
export type GeoPathProps = GeoPathPropsWithoutHTML & Without<SVGAttributes<SVGPathElement>, GeoPathPropsWithoutHTML>;
import { geoCurvePath } from '../utils/geo.js';
declare const GeoPath: import("svelte").Component<GeoPathProps, {}, "ref">;
type GeoPath = ReturnType<typeof GeoPath>;
export default GeoPath;
