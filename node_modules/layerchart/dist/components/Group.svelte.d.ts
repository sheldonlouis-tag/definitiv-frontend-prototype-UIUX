import type { Snippet } from 'svelte';
import type { HTMLAttributes } from 'svelte/elements';
import type { Transition, TransitionParams, Without } from '../utils/types.js';
import { type MotionProp } from '../utils/motion.svelte.js';
export type GroupPropsWithoutHTML<In extends Transition = Transition> = {
    /**
     * Translate x
     */
    x?: number;
    /**
     * Initial translate x
     *
     * @default x
     */
    initialX?: number;
    /**
     * Translate y
     */
    y?: number;
    /**
     * Initial translate y
     *
     * @default y
     */
    initialY?: number;
    /**
     * Center within chart
     *
     * @default false
     */
    center?: boolean | 'x' | 'y';
    /**
     * Prevent `touchmove` default, which can interfere with `pointermove` when
     * used with `Tooltip`, for example.
     *
     * @default false
     */
    preventTouchMove?: boolean;
    /**
     * The opacity of the element. (0 to 1)
     */
    opacity?: number;
    children?: Snippet;
    /**
     * A reference to the rendered DOM element, which could be
     * either nothing, a `<g>` element (when using `<Svg>`), or a `<div>` element
     * (when using `<Html>`).
     *
     * @bindable
     */
    ref?: Element;
    motion?: MotionProp;
    /**
     * Transition function for entering elements
     * @default defaults to fade if the motion prop is set to tweened
     */
    transitionIn?: In;
    /**
     * Parameters for the transitionIn function
     * @default { easing: cubicIn }
     */
    transitionInParams?: TransitionParams<In>;
};
export type GroupProps = GroupPropsWithoutHTML & Without<HTMLAttributes<Element>, GroupPropsWithoutHTML>;
declare class __sveltets_Render<T extends Transition = Transition> {
    props(): GroupProps;
    events(): {};
    slots(): {};
    bindings(): "ref";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <T extends Transition = Transition>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<T>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<T>['props']>, ReturnType<__sveltets_Render<T>['events']>, ReturnType<__sveltets_Render<T>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<T>['bindings']>;
    } & ReturnType<__sveltets_Render<T>['exports']>;
    <T extends Transition = Transition>(internal: unknown, props: ReturnType<__sveltets_Render<T>['props']> & {}): ReturnType<__sveltets_Render<T>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
declare const Group: $$IsomorphicComponent;
type Group<T extends Transition = Transition> = InstanceType<typeof Group<T>>;
export default Group;
