import type { ComponentProps, Snippet } from 'svelte';
import Circle from './Circle.svelte';
import Line from './Line.svelte';
import Bar from './Bar.svelte';
import Rect from './Rect.svelte';
import { type Accessor } from '../utils/common.js';
export type HighlightPointData = {
    x: any;
    y: any;
};
export type HighlightPoint = {
    x: number;
    y: number;
    fill: string;
    data: HighlightPointData;
};
export type HighlightPropsWithoutHTML = {
    /**
     * Highlight specific data (annotate), especte uses tooltip data
     */
    data?: any;
    /**
     * Override `x` from context
     */
    x?: Accessor;
    /**
     * Override `y` from context
     */
    y?: Accessor;
    axis?: 'x' | 'y' | 'both' | 'none';
    /**
     * Show points and pass props to Circles
     * @default false
     */
    points?: boolean | Partial<ComponentProps<typeof Circle>> | Snippet<[
        {
            points: {
                x: number;
                y: number;
                fill: string;
                data: HighlightPointData;
            }[];
        }
    ]>;
    /**
     * Show lines and pass props to Lines
     * @default false
     */
    lines?: boolean | Partial<ComponentProps<typeof Line>> | Snippet<[
        {
            lines: {
                x1: number;
                y1: number;
                x2: number;
                y2: number;
            }[];
        }
    ]>;
    /**
     * Show area and pass props to Rect
     * @default false
     */
    area?: boolean | Partial<ComponentProps<typeof Rect>> | Snippet<[
        {
            area: {
                x: number;
                y: number;
                width: number;
                height: number;
            };
        }
    ]>;
    /**
     * Show bar and pass props to Rect
     *
     * @default false
     */
    bar?: boolean | Partial<ComponentProps<typeof Bar>> | Snippet;
    /**
     * Set to false to disable spring transitions
     *
     * @default true
     */
    motion?: MotionProp;
    onAreaClick?: (e: MouseEvent, detail: {
        data: any;
    }) => void;
    onBarClick?: (e: MouseEvent, detail: {
        data: any;
    }) => void;
    onPointClick?: (e: MouseEvent, detail: {
        point: HighlightPoint;
        data: any;
    }) => void;
    onPointEnter?: (e: MouseEvent, detail: {
        point: HighlightPoint;
        data: any;
    }) => void;
    onPointLeave?: (e: MouseEvent, detail: {
        point: HighlightPoint;
        data: any;
    }) => void;
};
import type { MotionProp } from '../utils/motion.svelte.js';
declare const Highlight: import("svelte").Component<HighlightPropsWithoutHTML, {}, "">;
type Highlight = ReturnType<typeof Highlight>;
export default Highlight;
