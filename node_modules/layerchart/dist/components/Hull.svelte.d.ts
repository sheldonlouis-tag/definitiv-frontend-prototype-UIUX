import type { Without } from '../utils/types.js';
import type { ComponentProps } from 'svelte';
export type HullPropsWithoutHTML = {
    /**
     * Override data instead of using context
     */
    data?: any;
    /**
     * The curve factory to use for the hull
     * @default curveLinearClosed
     */
    curve?: ComponentProps<typeof Spline>['curve'];
    /**
     * Classes to apply to the elements.
     */
    classes?: {
        root?: string;
        path?: string;
    };
    onpointermove?: (e: PointerEvent, details: {
        points: [number, number][];
        polygon: Delaunay.Polygon;
    }) => void;
    onclick?: (e: MouseEvent, details: {
        points: [number, number][];
        polygon: Delaunay.Polygon;
    }) => void;
    onpointerleave?: (e: PointerEvent) => void;
    /**
     * A bindable reference to the wrapping `<g>` element.
     *
     * @bindable
     */
    ref?: SVGGElement;
};
export type HullProps = HullPropsWithoutHTML & Without<GroupProps, HullPropsWithoutHTML>;
import { Delaunay } from 'd3-delaunay';
import { type GroupProps } from './Group.svelte';
import Spline from './Spline.svelte';
declare const Hull: import("svelte").Component<HullProps, {}, "ref">;
type Hull = ReturnType<typeof Hull>;
export default Hull;
