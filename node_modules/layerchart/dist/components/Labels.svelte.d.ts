import Text, { type TextProps } from './Text.svelte';
import { type ComponentProps, type Snippet } from 'svelte';
import { type FormatType, type FormatConfig } from '@layerstack/utils';
import type { Without } from '../utils/types.js';
import { type Point } from './Points.svelte';
import { type Accessor } from '../utils/common.js';
export type LabelsPropsWithoutHTML<T = any> = {
    /**
     * Override data instead of using context
     */
    data?: T;
    /**
     * Override display value accessor.  By default, uses `y` unless yScale is band scale
     */
    value?: Accessor<T>;
    /**
     * The fill color of the label, which can either be a string or an accessor function
     * that returns a valid `fill` color value.
     *
     * The accessor is useful for dynamic fill colors based on the data the label represents.
     */
    fill?: string | Accessor<T>;
    /**
     * Override `x` accessor from Chart context
     */
    x?: Accessor<T>;
    /**
     * Override `y` accessor from Chart context
     */
    y?: Accessor<T>;
    /**
     * The placement of the label relative to the point
     * @default 'outside'
     */
    placement?: 'inside' | 'outside' | 'center';
    /**
     * The offset of the label from the point
     *
     * @default placement === 'center' ? 0 : 4
     */
    offset?: number;
    /**
     * The format of the label
     */
    format?: FormatType | FormatConfig;
    /**
     * Define unique value for {#each} `(key)` expressions to improve transitions.
     * `index` position used by default
     *
     * @default (d, index) => index
     */
    key?: (d: T, index: number) => any;
    children?: Snippet<[{
        data: Point;
        textProps: ComponentProps<typeof Text>;
    }]>;
};
export type LabelsProps<T = any> = LabelsPropsWithoutHTML<T> & Without<TextProps, LabelsPropsWithoutHTML<T>>;
declare class __sveltets_Render<TData = any> {
    props(): LabelsProps<TData>;
    events(): {};
    slots(): {};
    bindings(): "";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <TData = any>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<TData>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<TData>['props']>, ReturnType<__sveltets_Render<TData>['events']>, ReturnType<__sveltets_Render<TData>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<TData>['bindings']>;
    } & ReturnType<__sveltets_Render<TData>['exports']>;
    <TData = any>(internal: unknown, props: ReturnType<__sveltets_Render<TData>['props']> & {}): ReturnType<__sveltets_Render<TData>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
declare const Labels: $$IsomorphicComponent;
type Labels<TData = any> = InstanceType<typeof Labels<TData>>;
export default Labels;
