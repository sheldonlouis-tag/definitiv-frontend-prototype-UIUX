import type { MarkerOptions } from './MarkerWrapper.svelte';
import type { Without } from '../utils/types.js';
import type { MotionNoneOption, MotionTweenOption } from '../utils/motion.svelte.js';
import { type CurveFactory } from 'd3-shape';
export type LinkPropsWithoutHTML = {
    data?: any;
    /**
     * Update source and target accessors to be compatible with d3-sankey.  see: https://github.com/d3/d3-sankey#sankeyLinkHorizontal
     *
     * @default false
     */
    sankey?: boolean;
    source?: (d: any) => any;
    target?: (d: any) => any;
    /**
     * Convenient property to swap x/y accessor logic
     */
    orientation?: 'vertical' | 'horizontal';
    x?: (d: any) => any;
    y?: (d: any) => any;
    curve?: CurveFactory;
    /**
     * Marker to attach to both start and end points of the line
     */
    marker?: MarkerOptions;
    /**
     * Marker to attach to the middle point of the line
     */
    markerMid?: MarkerOptions;
    /**
     * Marker to attach to the start point of the line
     */
    markerStart?: MarkerOptions;
    /**
     * Marker to attach to the end point of the line
     */
    markerEnd?: MarkerOptions;
    /**
     * Apply explicit coordinates to the line. Useful when dealing with
     * force simulation links.
     */
    explicitCoords?: {
        x1: number;
        y1: number;
        x2: number;
        y2: number;
    };
    motion?: MotionTweenOption | MotionNoneOption;
};
export type LinkProps = LinkPropsWithoutHTML & Without<ConnectorProps, LinkPropsWithoutHTML>;
import { type ConnectorProps } from './Connector.svelte';
declare const Link: import("svelte").Component<LinkProps, {}, "">;
type Link = ReturnType<typeof Link>;
export default Link;
