import type { Without } from '../utils/types.js';
import type { SVGAttributes } from 'svelte/elements';
export type MarkerPropsWithoutHTML = {
    /**
     * The type of marker to render (e.g., arrow, triangle, etc.)
     *
     * Pass `children` to render a custom element/component inside the marker instead.
     */
    type?: 'arrow' | 'triangle' | 'line' | 'circle' | 'circle-stroke' | 'dot';
    /**
     * Unique identifier for the marker
     */
    id?: string;
    /**
     * Size of the marker
     * (used as default for width and height if not overridden)
     * @default 10
     */
    size?: number;
    /**
     * Width of the marker (can be a string or number)
     * @default size
     */
    markerWidth?: string | number;
    /**
     * Height of the marker (can be a string or number)
     * @default size
     */
    markerHeight?: string | number;
    /**
     * Units for marker dimensions ('userSpaceOnUse' or 'strokeWidth')
     * @default 'userSpaceOnUse'
     */
    markerUnits?: 'userSpaceOnUse' | 'strokeWidth';
    /**
     * Orientation of the marker
     * ('auto', 'auto-start-reverse', or a specific angle in degrees)
     * @default 'auto-start-reverse'
     */
    orient?: 'auto' | 'auto-start-reverse' | number;
    /**
     * X-coordinate offset of the marker's reference point
     * @default 9 if type is 'arrow' or 'triangle', otherwise 5
     */
    refX?: string | number;
    /**
     * Y-coordinate offset of the marker's reference point
     * @default 5
     */
    refY?: string | number;
    /**
     * Viewbox defining the coordinate system for the marker (e.g., '0 0 10 10')
     * @default '0 0 10 10'
     */
    viewBox?: string;
};
export type MarkerProps = MarkerPropsWithoutHTML & Without<SVGAttributes<SVGMarkerElement>, MarkerPropsWithoutHTML>;
declare const Marker: import("svelte").Component<MarkerProps, {}, "">;
type Marker = ReturnType<typeof Marker>;
export default Marker;
