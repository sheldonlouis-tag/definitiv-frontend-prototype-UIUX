import { type HierarchyNode, type HierarchyRectangularNode } from 'd3-hierarchy';
import type { Snippet } from 'svelte';
export type PartitionProps<T> = {
    /**
     * The orientation of the partition layout.
     *
     * @default 'horizontal'
     */
    orientation?: 'vertical' | 'horizontal';
    /**
     * The size of the partition layout.
     */
    size?: [number, number];
    /**
     * The padding between nodes in the partition layout.
     * see: https://github.com/d3/d3-hierarchy#tree_nodeSize
     */
    padding?: number;
    /**
     * The round property of the partition layout.
     * see: https://github.com/d3/d3-hierarchy#tree_nodeSize
     */
    round?: boolean;
    hierarchy: HierarchyNode<T>;
    /**
     * A bindable reference to the descendants of the partition layout.
     *
     * @bindable
     */
    nodes?: HierarchyRectangularNode<T>[];
    children?: Snippet<[{
        nodes: HierarchyRectangularNode<T>[];
    }]>;
};
declare class __sveltets_Render<T> {
    props(): PartitionProps<T>;
    events(): {};
    slots(): {};
    bindings(): "nodes";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <T>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<T>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<T>['props']>, ReturnType<__sveltets_Render<T>['events']>, ReturnType<__sveltets_Render<T>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<T>['bindings']>;
    } & ReturnType<__sveltets_Render<T>['exports']>;
    <T>(internal: unknown, props: ReturnType<__sveltets_Render<T>['props']> & {}): ReturnType<__sveltets_Render<T>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
declare const Partition: $$IsomorphicComponent;
type Partition<T> = InstanceType<typeof Partition<T>>;
export default Partition;
