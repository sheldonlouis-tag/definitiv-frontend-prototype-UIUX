import { type PieArcDatum } from 'd3-shape';
export type PiePropsWithoutHTML = {
    data?: any[];
    /**
     * Range [min,max] in degrees.  See also startAngle/endAngle
     *
     * @default [0, 360]
     */
    range?: [number, number] | number[];
    /**
     * Start angle in radians
     */
    startAngle?: number;
    /**
     * End angle in radians
     */
    endAngle?: number;
    /**
     * Define innerRadius.
     *   value >= 1: discrete value
     *   value >  0: percent of `outerRadius`
     *   value <  0: offset of `outerRadius`
     *   default: yRange min
     */
    innerRadius?: number;
    /**
     * Define outerRadius.  Defaults to yRange max/2 (ie. chart height / 2)
     */
    outerRadius?: number;
    /**
     * Corner radius of the arc
     *
     * @default 0
     */
    cornerRadius?: number;
    /**
     * Angle between the arcs
     *
     * @default 0
     */
    padAngle?: number;
    /**
     * Offset all arcs from center
     *
     * @default 0
     */
    offset?: number;
    /**
     * Tooltip context to setup pointer events to show tooltip for related data
     */
    tooltipContext?: TooltipContextValue;
    /**
     * Sort function to sort the arcs
     */
    sort?: ((a: any, b: any) => number) | null;
    children?: Snippet<[{
        arcs: PieArcDatum<any>[];
    }]>;
    motion?: MotionProp;
};
import { type MotionProp } from '../utils/motion.svelte.js';
import type { TooltipContextValue } from './tooltip/TooltipContext.svelte';
import type { Snippet } from 'svelte';
declare const Pie: import("svelte").Component<PiePropsWithoutHTML, {}, "">;
type Pie = ReturnType<typeof Pie>;
export default Pie;
