import type { CommonStyleProps, Without } from '../utils/types.js';
import type { ComponentProps, Snippet } from 'svelte';
export type Point = {
    x: number;
    y: number;
    r: number;
    xValue: any;
    yValue: any;
    data: any;
};
type Offset = number | ((value: number, context: any) => number) | undefined;
export type PointsPropsWithoutHTML = {
    /**
     * Override data instead of using context
     */
    data?: any;
    /**
     * Override `x` accessor from Chart context
     */
    x?: Accessor;
    /**
     *  Override `y` accessor from Chart context
     */
    y?: Accessor;
    /**
     * Override `r` accessor from Chart context
     *
     * @default 5
     */
    r?: number;
    /**
     * The offset of the point in the x direction
     */
    offsetX?: Offset;
    /**
     * The offset of the point in the y direction
     */
    offsetY?: Offset;
    /**
     * Enable showing links between related points (array x/y accessors)
     *
     * @default false
     */
    links?: boolean | Partial<ComponentProps<typeof Link>>;
    children?: Snippet<[{
        points: Point[];
    }]>;
} & CommonStyleProps;
export type PointsProps = PointsPropsWithoutHTML & Omit<Without<CircleProps, PointsPropsWithoutHTML>, 'ref'>;
import { type CircleProps } from './Circle.svelte';
import Link from './Link.svelte';
import { type Accessor } from '../utils/common.js';
declare const Points: import("svelte").Component<PointsProps, {}, "">;
type Points = ReturnType<typeof Points>;
export default Points;
