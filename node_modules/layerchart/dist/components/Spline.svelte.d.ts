import type { Snippet } from 'svelte';
import type { MarkerOptions } from './MarkerWrapper.svelte';
import type { CommonStyleProps, Without } from '../utils/types.js';
import type { SVGAttributes } from 'svelte/elements';
import type { CurveFactory, CurveFactoryLineOnly, Line } from 'd3-shape';
import { type MotionProp } from '../utils/motion.svelte.js';
import { type Accessor } from '../utils/common.js';
export type SplinePropsWithoutHTML = {
    /**
     * Override data instead of using context
     */
    data?: any;
    /**
     * Pass `<path d={...} />` explicitly instead of calculating
     * from data / context
     */
    pathData?: string | undefined | null;
    /**
     * Override `x` accessor from Chart context
     */
    x?: Accessor;
    /**
     * Override `y` accessor from Chart context
     */
    y?: Accessor;
    /**
     * Whether to animate the drawing of the path over time.
     * Pass either `true` or an object with transition options to
     * enable the transition.
     *
     * Works best with `tweened` disabled.
     */
    draw?: boolean | Parameters<typeof _drawTransition>[1];
    /**
     * Curve of spline drawn. Imported via d3-shape.
     *
     * @example
     * import { curveNatural } from 'd3-shape';
     * <Spline curve={curveNatural} />
     *
     * @type {CurveFactory | CurveFactoryLineOnly | undefined}
     */
    curve?: CurveFactory | CurveFactoryLineOnly;
    /**
     * Function to determine if a point is defined
     *
     * @example
     * <Spline defined={(d) => d.value !== null} />
     */
    defined?: Parameters<Line<any>['defined']>[0];
    /**
     * Marker to attach to both start and end points of the line
     */
    marker?: MarkerOptions;
    /**
     * Marker to attach to the middle point of the line
     */
    markerMid?: MarkerOptions;
    /**
     * Marker to attach to the start point of the line
     */
    markerStart?: MarkerOptions;
    /**
     * Marker to attach to the end point of the line
     */
    markerEnd?: MarkerOptions;
    /**
     * Add additional content at the start of the line.
     *
     * Receives `{ point: DOMPoint; value: { x: number; y: number } }` as a snippet prop.
     */
    startContent?: Snippet<[{
        point: DOMPoint;
        value: {
            x: number;
            y: number;
        };
    }]>;
    /**
     * Add additional content at the end of the line.
     *
     * Receives `{ point: DOMPoint; value: { x: number; y: number } }` as a snippet prop.
     */
    endContent?: Snippet<[{
        point: DOMPoint;
        value: {
            x: number;
            y: number;
        };
    }]>;
    /**
     * A reference to the `<path>` element.
     *
     * @bindable
     */
    pathRef?: SVGPathElement;
    motion?: MotionProp;
} & CommonStyleProps;
export type SplineProps = SplinePropsWithoutHTML & Without<SVGAttributes<SVGPathElement>, SplinePropsWithoutHTML>;
import { draw as _drawTransition } from 'svelte/transition';
declare const Spline: import("svelte").Component<SplineProps, {}, "pathRef">;
type Spline = ReturnType<typeof Spline>;
export default Spline;
