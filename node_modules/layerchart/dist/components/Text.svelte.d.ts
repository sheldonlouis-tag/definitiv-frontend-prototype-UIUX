import type { CommonStyleProps, Without } from '../utils/types.js';
import type { SVGAttributes } from 'svelte/elements';
import { type MotionProp } from '../utils/motion.svelte.js';
export type TextPropsWithoutHTML = {
    /**
     * text value
     * @default 0
     */
    value?: string | number;
    /**
     * The fill color of the text
     */
    fill?: string;
    /**
     * Maximum width to occupy (approximate as words are not split)
     */
    width?: number;
    /**
     * x position of the text
     *
     * @default 0
     */
    x?: string | number;
    /**
     * Initial x position of the text
     *
     * @default x
     */
    initialX?: string | number;
    /**
     * y position of the text
     *
     * @default 0
     */
    y?: string | number;
    /**
     * Initial y position of the text
     *
     * @default y
     */
    initialY?: string | number;
    /**
     * dx offset of the text
     *
     * @default 0
     */
    dx?: string | number;
    /**
     * dy offset of the text
     *
     * @default 0
     */
    dy?: string | number;
    /**
     * Desired "line height" of the text, implemented as y offsets
     *
     * @default "1em"
     */
    lineHeight?: string;
    /**
     * Cap height of the text
     * @default '0.71em'
     */
    capHeight?: string;
    /**
     * Whether to scale the fontSize to accommodate the specified width
     *
     * @default false
     */
    scaleToFit?: boolean;
    /**
     * Horizontal text anchor
     *
     * @default 'start'
     */
    textAnchor?: 'start' | 'middle' | 'end' | 'inherit';
    /**
     * Vertical text anchor
     *
     * @default 'end'
     */
    verticalAnchor?: 'start' | 'middle' | 'end' | 'inherit';
    /**
     * The dominant baseline of the text.  Useful for aligning text to the baseline of the axis.
     *
     * @default 'auto'
     */
    dominantBaseline?: 'auto' | 'text-before-edge' | 'text-after-edge' | 'middle' | 'hanging' | 'ideographic' | 'mathematical';
    /**
     * Rotational angle of the text
     */
    rotate?: number;
    /**
     * A bindable reference to the wrapping `<svg>` element.
     *
     * @bindable
     */
    svgRef?: SVGElement;
    /**
     * Props to pass to the wrapping `<svg>` element.
     */
    svgProps?: Omit<SVGAttributes<SVGElement>, 'children'>;
    /**
     * A bindable reference to the inner `<text>` element
     *
     * @bindable
     */
    ref?: SVGTextElement;
    motion?: MotionProp;
    /**
     * Whether to enable text truncation
     */
    truncate?: boolean | TruncateTextOptions;
    /**
     * A unique identifier for the SVG path element.
     * One is generated by default if not provided.
     *
     */
    pathId?: string;
    /**
     * The path to render the text along.
     */
    path?: string | null;
    /**
     * Specify the offset for the start of the text along the path.
     * Can be a percentage ('50%') or a length value.
     *
     * @default '0%'
     */
    startOffset?: string | number;
} & CommonStyleProps;
export type TextProps = TextPropsWithoutHTML & Without<SVGAttributes<SVGTextElement>, TextPropsWithoutHTML>;
import { type TruncateTextOptions } from '../utils/string.js';
declare const Text: import("svelte").Component<TextProps, {}, "ref" | "svgRef">;
type Text = ReturnType<typeof Text>;
export default Text;
