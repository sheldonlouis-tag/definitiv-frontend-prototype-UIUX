export type TreeProps<T> = {
    /**
     * Sets this tree layout’s node size to the specified two-element array of numbers `[width, height]`.
     * If unset, layout size is used instead.  When a node size is specified, the root node is always
     * positioned at `⟨0, 0⟩`.
     *
     * see: https://github.com/d3/d3-hierarchy#tree_nodeSize
     */
    nodeSize?: [number, number];
    /**
     * see: https://github.com/d3/d3-hierarchy#tree_separation
     */
    separation?: (a: HierarchyPointNode<any>, b: HierarchyPointNode<any>) => number;
    hierarchy?: HierarchyNode<T>;
    /**
     * Orientation of the tree layout.
     *
     * @default 'horizontal'
     */
    orientation?: 'vertical' | 'horizontal';
    children?: Snippet<[{
        nodes: HierarchyPointNode<any>[];
        links: HierarchyPointLink<any>[];
    }]>;
};
import { type HierarchyPointNode, type HierarchyPointLink, type HierarchyNode } from 'd3-hierarchy';
import type { Snippet } from 'svelte';
declare class __sveltets_Render<T> {
    props(): TreeProps<T>;
    events(): {};
    slots(): {};
    bindings(): "";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <T>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<T>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<T>['props']>, ReturnType<__sveltets_Render<T>['events']>, ReturnType<__sveltets_Render<T>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<T>['bindings']>;
    } & ReturnType<__sveltets_Render<T>['exports']>;
    <T>(internal: unknown, props: ReturnType<__sveltets_Render<T>['props']> & {}): ReturnType<__sveltets_Render<T>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
declare const Tree: $$IsomorphicComponent;
type Tree<T> = InstanceType<typeof Tree<T>>;
export default Tree;
