export type ArcChartExtraSnippetProps<TData> = {
    key: Accessor<TData>;
    label: Accessor<TData>;
    value: Accessor<TData>;
    visibleData: TData[];
    getGroupProps: () => ComponentProps<typeof Group>;
    getArcProps: (s: SeriesData<TData, typeof Arc>, i: number) => ComponentProps<typeof Arc>;
};
export type ArcChartPropsObjProp = Pick<SimplifiedChartPropsObject, 'pie' | 'group' | 'arc' | 'legend' | 'canvas' | 'svg' | 'tooltip'>;
export type ArcChartProps<TData> = Pick<SimplifiedChartProps<TData, typeof Arc, ArcChartExtraSnippetProps<TData>>, 'aboveContext' | 'aboveMarks' | 'belowContext' | 'belowMarks' | 'children' | 'data' | 'debug' | 'legend' | 'marks' | 'onTooltipClick' | 'profile' | 'renderContext' | 'series' | 'tooltip' | 'cRange' | 'padding' | 'context'> & Pick<ArcPropsWithoutHTML, 'cornerRadius' | 'trackCornerRadius' | 'padAngle' | 'trackPadAngle' | 'trackStartAngle' | 'trackEndAngle' | 'trackInnerRadius' | 'trackOuterRadius' | 'innerRadius' | 'outerRadius' | 'range'> & {
    /**
     * Key accessor
     *
     * @default 'key'
     */
    key?: Accessor<TData>;
    /**
     * Label accessor
     *
     * @default 'label'
     */
    label?: Accessor<TData>;
    /**
     * Value accessor
     *
     * @default 'value'
     */
    value?: Accessor<TData>;
    /**
     * Color accessor
     *
     * @default key
     */
    c?: Accessor<TData>;
    /**
     * Maximum possible value, useful when `data` is single item
     */
    maxValue?: number;
    props?: ArcChartPropsObjProp;
    /**
     * Placement of the ArcChart
     *
     * @default 'center'
     */
    placement?: 'left' | 'center' | 'right';
    /**
     * Center the chart.
     *
     * Override and use `props.group` for more control.
     *
     * @default placement === 'center'
     */
    center?: boolean;
    /**
     * A callback function triggered when the arc is clicked.
     */
    onArcClick?: (e: MouseEvent, detail: {
        data: any;
        series: SeriesData<TData, typeof Arc>;
    }) => void;
    arc?: SimplifiedChartSnippet<TData, typeof Arc, ArcChartExtraSnippetProps<TData> & {
        props: ComponentProps<typeof Arc>;
        /**
         * The index of the series currently being iterated over.
         */
        seriesIndex: number;
    }>;
};
import { type ComponentProps } from 'svelte';
import Arc, { type ArcPropsWithoutHTML } from '../Arc.svelte';
import Group from '../Group.svelte';
import { type Accessor } from '../../utils/common.js';
import type { SeriesData, SimplifiedChartProps, SimplifiedChartPropsObject, SimplifiedChartSnippet } from './types.js';
declare class __sveltets_Render<TData> {
    props(): ArcChartProps<TData>;
    events(): {};
    slots(): {};
    bindings(): "context";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <TData>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<TData>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<TData>['props']>, ReturnType<__sveltets_Render<TData>['events']>, ReturnType<__sveltets_Render<TData>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<TData>['bindings']>;
    } & ReturnType<__sveltets_Render<TData>['exports']>;
    <TData>(internal: unknown, props: ReturnType<__sveltets_Render<TData>['props']> & {}): ReturnType<__sveltets_Render<TData>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
declare const ArcChart: $$IsomorphicComponent;
type ArcChart<TData> = InstanceType<typeof ArcChart<TData>>;
export default ArcChart;
