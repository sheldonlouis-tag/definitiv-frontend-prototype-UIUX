/**
 * The additional snippet props passed to the various snippets belonging
 * to the `AreaChart` component.
 */
export type AreaChartExtraSnippetProps<TData> = {
    getAreaProps: (s: SeriesData<TData, typeof Area>, i: number) => ComponentProps<typeof Area>;
    getLabelsProps: (s: SeriesData<TData, typeof Area>, i: number) => ComponentProps<typeof Labels<TData>>;
    getPointsProps: (s: SeriesData<TData, typeof Area>, i: number) => ComponentProps<typeof Points>;
    getHighlightProps: (s: SeriesData<TData, typeof Area>, i: number) => ComponentProps<typeof Highlight>;
    getGridProps: () => ComponentProps<typeof Grid>;
    getAxisProps: (axisDirection?: 'x' | 'y') => ComponentProps<typeof Axis>;
    getRuleProps: () => ComponentProps<typeof Rule>;
};
/**
 * The accepted props via the `props` prop of the `AreaChart` component.
 */
export type AreaChartPropsObjProp = Pick<SimplifiedChartPropsObject, 'area' | 'brush' | 'canvas' | 'grid' | 'highlight' | 'labels' | 'legend' | 'line' | 'points' | 'rule' | 'svg' | 'tooltip' | 'xAxis' | 'yAxis'>;
export type AreaChartProps<TData> = SimplifiedChartProps<TData, typeof Area, AreaChartExtraSnippetProps<TData>> & {
    /**
     * A callback function called when a point in the chart is clicked.
     *
     * @param e - the original event that triggered the `onPointClick`
     * @param details - an object containing the highlighted point data and series data
     */
    onPointClick?: (e: MouseEvent, details: {
        data: HighlightPointData;
        series: SeriesData<TData, typeof Area>;
    }) => void;
    /**
     * Additional props to be passed to the components rendered internally by the
     * `AreaChart` component. This is useful for customizing the behavior of the individual
     * components, without having to fully override them via a snippet.
     */
    props?: AreaChartPropsObjProp;
};
import { type ComponentProps } from 'svelte';
import Area from '../Area.svelte';
import Axis from '../Axis.svelte';
import Grid from '../Grid.svelte';
import Highlight, { type HighlightPointData } from '../Highlight.svelte';
import Labels from '../Labels.svelte';
import Points from '../Points.svelte';
import Rule from '../Rule.svelte';
import type { SeriesData, SimplifiedChartProps, SimplifiedChartPropsObject } from './types.js';
declare class __sveltets_Render<TData> {
    props(): AreaChartProps<TData>;
    events(): {};
    slots(): {};
    bindings(): "context";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <TData>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<TData>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<TData>['props']>, ReturnType<__sveltets_Render<TData>['events']>, ReturnType<__sveltets_Render<TData>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<TData>['bindings']>;
    } & ReturnType<__sveltets_Render<TData>['exports']>;
    <TData>(internal: unknown, props: ReturnType<__sveltets_Render<TData>['props']> & {}): ReturnType<__sveltets_Render<TData>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
declare const AreaChart: $$IsomorphicComponent;
type AreaChart<TData> = InstanceType<typeof AreaChart<TData>>;
export default AreaChart;
