export type BarChartExtraSnippetProps<TData> = {
    getBarsProps: (s: SeriesData<TData, typeof Bars>, i: number) => ComponentProps<typeof Bars>;
    getLabelsProps: (s: SeriesData<TData, typeof Bars>, i: number) => ComponentProps<typeof Labels<TData>>;
    getGridProps: () => ComponentProps<typeof Grid>;
    getHighlightProps: () => ComponentProps<typeof Highlight>;
    getAxisProps: (axisDirection: 'x' | 'y') => ComponentProps<typeof Axis>;
    getRuleProps: () => ComponentProps<typeof Rule>;
};
export type BarChartPropsObjProp<TData> = Pick<SimplifiedChartPropsObject<TData>, 'bars' | 'brush' | 'canvas' | 'grid' | 'highlight' | 'labels' | 'legend' | 'rule' | 'svg' | 'tooltip' | 'xAxis' | 'yAxis'>;
export type BarChartProps<TData> = Omit<SimplifiedChartProps<TData, typeof Bars, BarChartExtraSnippetProps<TData>>, 'seriesLayout'> & {
    /**
     * Padding between primary x or y bands/bars, applied to scaleBand().padding()
     *
     * @default 0.4
     */
    bandPadding?: number;
    /**
     * Padding between group/series items when using 'seriesLayout="group"', applied to scaleBand().padding()
     *
     * @default 0
     */
    groupPadding?: number;
    /**
     * Padding between series items within bars when using 'seriesLayout="stack"'
     *
     * @default 0
     */
    stackPadding?: number;
    /**
     * The orientation of the bar chart.
     *
     * @default 'vertical'
     */
    orientation?: 'vertical' | 'horizontal';
    props?: BarChartPropsObjProp<TData>;
    /**
     * A callback function that is called when a bar is clicked.
     * @param e - The original event that triggered the callback
     * @param detail - An object containing the bar's data and series information
     */
    onBarClick?: (event: MouseEvent, detail: {
        data: any;
        series: SeriesData<TData, typeof Bars>;
    }) => void;
    /**
     * The layout of the series.
     *
     * @default 'overlap'
     */
    seriesLayout?: SimplifiedChartProps<TData, typeof Bars, BarChartExtraSnippetProps<TData>>['seriesLayout'] | 'group';
};
import { type ComponentProps } from 'svelte';
import Axis from '../Axis.svelte';
import Bars from '../Bars.svelte';
import Grid from '../Grid.svelte';
import Highlight from '../Highlight.svelte';
import Labels from '../Labels.svelte';
import Rule from '../Rule.svelte';
import type { SeriesData, SimplifiedChartProps, SimplifiedChartPropsObject } from './types.js';
declare class __sveltets_Render<TData> {
    props(): BarChartProps<TData>;
    events(): {};
    slots(): {};
    bindings(): "context";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <TData>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<TData>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<TData>['props']>, ReturnType<__sveltets_Render<TData>['events']>, ReturnType<__sveltets_Render<TData>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<TData>['bindings']>;
    } & ReturnType<__sveltets_Render<TData>['exports']>;
    <TData>(internal: unknown, props: ReturnType<__sveltets_Render<TData>['props']> & {}): ReturnType<__sveltets_Render<TData>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
declare const BarChart: $$IsomorphicComponent;
type BarChart<TData> = InstanceType<typeof BarChart<TData>>;
export default BarChart;
