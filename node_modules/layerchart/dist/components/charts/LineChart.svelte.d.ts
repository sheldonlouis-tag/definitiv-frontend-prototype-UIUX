export type LineChartExtraSnippetProps<TData> = {
    getSplineProps: (s: SeriesData<TData, typeof Spline>, i: number) => ComponentProps<typeof Spline>;
    getLabelsProps: (s: SeriesData<TData, typeof Spline>, i: number) => ComponentProps<typeof Labels<TData>>;
    getPointsProps: (s: SeriesData<TData, typeof Spline>, i: number) => ComponentProps<typeof Points>;
    getHighlightProps: (s: SeriesData<TData, typeof Spline>, i: number) => ComponentProps<typeof Highlight>;
    getGridProps: () => ComponentProps<typeof Grid>;
    getAxisProps: (axisDirection?: 'x' | 'y') => ComponentProps<typeof Axis>;
    getRuleProps: () => ComponentProps<typeof Rule>;
};
export type LineChartPropsObjProp = Pick<SimplifiedChartPropsObject, 'brush' | 'canvas' | 'grid' | 'highlight' | 'labels' | 'legend' | 'points' | 'rule' | 'spline' | 'svg' | 'tooltip' | 'xAxis' | 'yAxis'>;
export type LineChartProps<TData> = SimplifiedChartProps<TData, typeof Spline, LineChartExtraSnippetProps<TData>> & {
    /**
     * The event to be dispatched when the point is clicked.
     */
    onPointClick?: (e: MouseEvent, details: {
        data: HighlightPointData;
        series: SeriesData<TData, typeof Spline>;
    }) => void;
    props?: LineChartPropsObjProp;
    spline?: SimplifiedChartSnippet<TData, typeof Spline, LineChartExtraSnippetProps<TData> & {
        props: ComponentProps<typeof Spline>;
        /**
         * The index of the series currently being iterated over.
         */
        seriesIndex: number;
    }>;
};
import { type ComponentProps } from 'svelte';
import Axis from '../Axis.svelte';
import Grid from '../Grid.svelte';
import Highlight, { type HighlightPointData } from '../Highlight.svelte';
import Labels from '../Labels.svelte';
import Points from '../Points.svelte';
import Rule from '../Rule.svelte';
import Spline from '../Spline.svelte';
import type { SeriesData, SimplifiedChartProps, SimplifiedChartPropsObject, SimplifiedChartSnippet } from './types.js';
declare class __sveltets_Render<TData> {
    props(): LineChartProps<TData>;
    events(): {};
    slots(): {};
    bindings(): "context";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <TData>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<TData>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<TData>['props']>, ReturnType<__sveltets_Render<TData>['events']>, ReturnType<__sveltets_Render<TData>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<TData>['bindings']>;
    } & ReturnType<__sveltets_Render<TData>['exports']>;
    <TData>(internal: unknown, props: ReturnType<__sveltets_Render<TData>['props']> & {}): ReturnType<__sveltets_Render<TData>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
declare const LineChart: $$IsomorphicComponent;
type LineChart<TData> = InstanceType<typeof LineChart<TData>>;
export default LineChart;
