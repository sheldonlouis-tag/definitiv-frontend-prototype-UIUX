export type PieChartExtraSnippetProps<TData> = {
    key: Accessor<TData>;
    label: Accessor<TData>;
    value: Accessor<TData>;
    visibleData: TData[];
    getGroupProps: () => ComponentProps<typeof Group>;
};
export type PieChartPropsObjProp = Pick<SimplifiedChartPropsObject, 'pie' | 'group' | 'arc' | 'legend' | 'canvas' | 'svg' | 'tooltip'>;
export type PieChartProps<TData> = Pick<SimplifiedChartProps<TData, typeof Arc, PieChartExtraSnippetProps<TData>>, 'aboveContext' | 'aboveMarks' | 'belowContext' | 'belowMarks' | 'children' | 'data' | 'debug' | 'legend' | 'marks' | 'onTooltipClick' | 'profile' | 'renderContext' | 'series' | 'tooltip' | 'tooltipContext' | 'cRange' | 'padding' | 'context'> & {
    /**
     * Key accessor
     *
     * @default 'key'
     */
    key?: Accessor<TData>;
    /**
     * Label accessor
     *
     * @default 'label'
     */
    label?: Accessor<TData>;
    /**
     * Value accessor
     *
     * @default 'value'
     */
    value?: Accessor<TData>;
    /**
     * Color accessor
     *
     * @default key
     */
    c?: Accessor<TData>;
    /**
     * Maximum possible value, useful when `data` is single item
     */
    maxValue?: number;
    /**
     * Range [min, max] in degrees.
     *
     * See also `startAngle`/`endAngle`
     *
     * @default [0, 360]
     */
    range?: [number, number];
    props?: PieChartPropsObjProp;
    /**
     * Inner radius of the arc.
     *   value >= 1: discrete value
     *   value >  0: percent of `outerRadius`
     *   value <  0: offset of `outerRadius`
     */
    innerRadius?: number;
    /**
     * Outer radius of the arc.
     */
    outerRadius?: number;
    /**
     * Corner radius of the arc
     *
     * @default 0
     */
    cornerRadius?: number;
    /**
     * Angle between the arcs
     *
     * @default 0
     */
    padAngle?: number;
    /**
     * Placement of the PieChart
     *
     * @default 'center'
     */
    placement?: 'left' | 'center' | 'right';
    /**
     * Center the chart.
     *
     * Override and use `props.group` for more control.
     *
     * @default placement === 'center'
     */
    center?: boolean;
    /**
     * Replace the default rendering of the `<Pie>` component internally with your own.
     *
     * Use the `props` snippet prop to access the default props.
     */
    pie?: SimplifiedChartSnippet<TData, typeof Arc, PieChartExtraSnippetProps<TData> & {
        /**
         * Default props to apply to the Pie component.
         */
        props: ComponentProps<typeof Pie>;
        /**
         * The index of the pie series currently being iterated over.
         */
        index: number;
    }>;
    /**
     * Replace the default rendering of the `<Arc>` component internally with your own.
     *
     * Use the `props` snippet prop to access the default props.
     */
    arc?: SimplifiedChartSnippet<TData, typeof Arc, PieChartExtraSnippetProps<TData> & {
        props: ComponentProps<typeof Arc>;
        /**
         * The index of the arc currently being iterated over
         */
        index: number;
        /**
         * The index of the series currently being iterated over.
         */
        seriesIndex: number;
    }>;
    /**
     * A callback function triggered when the arc is clicked.
     */
    onArcClick?: (e: MouseEvent, detail: {
        data: any;
        series: SeriesData<TData, typeof Arc>;
    }) => void;
};
import { type ComponentProps } from 'svelte';
import Arc from '../Arc.svelte';
import Group from '../Group.svelte';
import Pie from '../Pie.svelte';
import { type Accessor } from '../../utils/common.js';
import type { SeriesData, SimplifiedChartProps, SimplifiedChartPropsObject, SimplifiedChartSnippet } from './types.js';
declare class __sveltets_Render<TData> {
    props(): PieChartProps<TData>;
    events(): {};
    slots(): {};
    bindings(): "context";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <TData>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<TData>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<TData>['props']>, ReturnType<__sveltets_Render<TData>['events']>, ReturnType<__sveltets_Render<TData>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<TData>['bindings']>;
    } & ReturnType<__sveltets_Render<TData>['exports']>;
    <TData>(internal: unknown, props: ReturnType<__sveltets_Render<TData>['props']> & {}): ReturnType<__sveltets_Render<TData>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
declare const PieChart: $$IsomorphicComponent;
type PieChart<TData> = InstanceType<typeof PieChart<TData>>;
export default PieChart;
