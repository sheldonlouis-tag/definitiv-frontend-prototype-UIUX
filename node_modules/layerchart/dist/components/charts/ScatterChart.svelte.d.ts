import type { SeriesData, SimplifiedChartProps, SimplifiedChartPropsObject } from './types.js';
import type { AnyScale } from '../../utils/scales.svelte.js';
import { type ComponentProps } from 'svelte';
export type ScatterChartExtraSnippetProps<TData> = {
    getLabelsProps: (s: SeriesData<TData, typeof Points>, i: number) => ComponentProps<typeof Labels<TData>>;
    getPointsProps: (s: SeriesData<TData, typeof Points>, i: number) => ComponentProps<typeof Points>;
    getHighlightProps: () => ComponentProps<typeof Highlight>;
    getAxisProps: (axisDirection: 'x' | 'y') => ComponentProps<typeof Axis>;
    getRuleProps: () => ComponentProps<typeof Rule>;
};
export type ScatterChartPropsObjProp = Pick<SimplifiedChartPropsObject, 'brush' | 'canvas' | 'grid' | 'highlight' | 'labels' | 'legend' | 'points' | 'rule' | 'svg' | 'tooltip' | 'xAxis' | 'yAxis'>;
export type ScatterChartProps<TData> = Omit<SimplifiedChartProps<TData, typeof Points, ScatterChartExtraSnippetProps<TData>>, 'radial'> & {
    props?: ScatterChartPropsObjProp;
    yDomain?: ComponentProps<typeof BrushContext>['yDomain'];
    yScale?: AnyScale;
};
import Axis from '../Axis.svelte';
import BrushContext from '../BrushContext.svelte';
import Highlight from '../Highlight.svelte';
import Labels from '../Labels.svelte';
import Points from '../Points.svelte';
import Rule from '../Rule.svelte';
declare class __sveltets_Render<TData> {
    props(): ScatterChartProps<TData>;
    events(): {};
    slots(): {};
    bindings(): "context";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <TData>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<TData>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<TData>['props']>, ReturnType<__sveltets_Render<TData>['events']>, ReturnType<__sveltets_Render<TData>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<TData>['bindings']>;
    } & ReturnType<__sveltets_Render<TData>['exports']>;
    <TData>(internal: unknown, props: ReturnType<__sveltets_Render<TData>['props']> & {}): ReturnType<__sveltets_Render<TData>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
declare const ScatterChart: $$IsomorphicComponent;
type ScatterChart<TData> = InstanceType<typeof ScatterChart<TData>>;
export default ScatterChart;
