import type { Component, ComponentProps } from 'svelte';
import { SelectionState } from '@layerstack/svelte-state';
import type { SeriesData } from './types.js';
import type Legend from '../Legend.svelte';
export declare class HighlightKey<TData, SeriesComponent extends Component> {
    current: string | null;
    set: (seriesKey: typeof this.current) => void;
}
export declare class SeriesState<TData, TComponent extends Component> {
    #private;
    selectedSeries: SelectionState<unknown, false>;
    selectedKeys: SelectionState<unknown, false>;
    highlightKey: HighlightKey<TData, TComponent>;
    constructor(getSeries: () => SeriesData<TData, TComponent>[]);
    get series(): SeriesData<TData, TComponent>[];
    get isDefaultSeries(): boolean;
    get allSeriesData(): Array<TData & {
        seriesKey: string;
    }>;
    get visibleSeries(): SeriesData<TData, TComponent>[];
}
type CreateLegendPropsOptions<TData, TComponent extends Component> = {
    seriesState: SeriesState<TData, TComponent>;
    props: Partial<ComponentProps<typeof Legend>>;
};
/**
 * A prop builder for the legend component shared between the simplified charts.
 */
export declare function createLegendProps<TData, TComponent extends Component>(opts: CreateLegendPropsOptions<TData, TComponent>): ComponentProps<typeof Legend>;
export {};
