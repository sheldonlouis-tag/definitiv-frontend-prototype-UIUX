import type { HTMLAttributes } from 'svelte/elements';
import type { Without } from '../../utils/types.js';
import type { Snippet } from 'svelte';
type HTMLPropsWithoutHTML = {
    /**
     * A reference to the layer's outermost `<div>` tag.
     *
     * @bindable
     */
    ref?: HTMLElement;
    /**
     * The layer's z-index.
     */
    zIndex?: number;
    /**
     * Set this to `false` to set `pointer-events: none;` on the entire layer.
     */
    pointerEvents?: boolean;
    /**
     * A string passed to the `aria-role` on the `<div>` tag.
     * This is `undefined` by default but will be set by default to `'figure'`
     * if `label`, `labelledby` or `describedby` is set. That default will be overridden by whatever is passed in.
     */
    role?: string;
    /**
     * Translate children to center (useful for radial layouts)
     */
    center?: boolean | 'x' | 'y';
    /**
     * Ignore TransformContext.  Useful to add static elements such as legends.
     */
    ignoreTransform?: boolean;
    children?: Snippet<[{
        ref: HTMLElement;
    }]>;
};
export type HTMLProps = HTMLPropsWithoutHTML & Without<HTMLAttributes<HTMLElement>, HTMLPropsWithoutHTML>;
declare const Html: import("svelte").Component<HTMLProps, {}, "ref">;
type Html = ReturnType<typeof Html>;
export default Html;
