import type { Snippet } from 'svelte';
import type { Without } from '../../utils/types.js';
import type { SVGAttributes } from 'svelte/elements';
type SVGPropsWithoutHTML = {
    /**
     * A reference to the layer's `<svg>` tag.
     *
     * @bindable
     */
    ref?: SVGSVGElement;
    /**
     * A reference to the layer's `<g>` tag.
     *
     * @bindable
     */
    innerRef?: SVGGElement;
    /**
     * The layer's z-index.
     */
    zIndex?: number;
    /**
     * Set this to `false` to set `pointer-events: none;` on the entire layer.
     */
    pointerEvents?: boolean;
    /**
     * A string passed to the `viewBox` property on the `<svg>` tag.
     */
    viewBox?: string;
    /**
     * Shorthand to set the contents of `<title></title>` for accessibility.
     * You can also set arbitrary HTML via the title snippet but this is a convenient shorthand.
     */
    title?: string | Snippet;
    /**
     * The inner content of the `<defs>` tag.
     */
    defs?: Snippet;
    /**
     * Translate children to center (useful for radial layouts)
     */
    center?: boolean | 'x' | 'y';
    /**
     * Ignore TransformContext.
     * Useful to add static elements such as legends.
     */
    ignoreTransform?: boolean;
    children?: Snippet<[{
        ref: SVGElement;
    }]>;
};
export type SVGProps = SVGPropsWithoutHTML & Without<SVGAttributes<SVGElement>, SVGPropsWithoutHTML>;
declare const Svg: import("svelte").Component<SVGProps, {}, "ref" | "innerRef">;
type Svg = ReturnType<typeof Svg>;
export default Svg;
