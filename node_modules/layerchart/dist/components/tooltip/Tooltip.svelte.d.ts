import type { HTMLAttributes } from 'svelte/elements';
import type { Without } from '../../utils/types.js';
import type { TooltipPayload } from './tooltipMetaContext.js';
import type { Placement } from '../types.js';
export type Align = 'start' | 'center' | 'end';
export type TooltipPropsWithoutHTML<T = any> = {
    /**
     * `x` position of tooltip.  By default uses the pointer/mouse, can also snap to data or an
     * explicit fixed position.
     *
     * @default 'pointer'
     */
    x?: 'pointer' | 'data' | number;
    /**
     * `y` position of tooltip.  By default uses the pointer/mouse, can also snap to data or an
     * explicit fixed position.
     *
     * @default 'pointer'
     */
    y?: 'pointer' | 'data' | number;
    /**
     * Offset added to `x` position
     *
     * @default x === 'pointer' ? 10 : 0
     */
    xOffset?: number;
    /**
     * Offset added to `y` position
     *
     * @default y === 'pointer' ? 10 : 0
     */
    yOffset?: number;
    /**
     * Align based on edge of tooltip
     *
     * @default 'top-left'
     */
    anchor?: Placement;
    /**
     * The default motion state of the tooltip.
     *
     * @default "spring"
     */
    motion?: MotionProp;
    /**
     * Allow pointer events.  Disabled by default to reduce accidental selection, but useful to
     * enable to allow interactive tooltips (using `locked`)
     *
     * @default false
     */
    pointerEvents?: boolean;
    /**
     * Include padding area (ex. axis)
     *
     * @default 'container'
     */
    contained?: 'container' | 'window' | false;
    /**
     * Tooltip variant
     *
     * @default 'default'
     */
    variant?: 'default' | 'invert' | 'none';
    /**
     * Classes to apply to the various elements of the tooltip.
     *
     * @default {}
     */
    classes?: {
        /**
         * Classes to apply to the root tooltip element
         */
        root?: string;
        /**
         * Classes to apply to the tooltip container element
         */
        container?: string;
        /**
         * Classes to apply to the tooltip content element
         */
        content?: string;
        /**
         * Classes to apply to the tooltip header element
         */
        header?: string;
    };
    children?: Snippet<[
        {
            /**
             * The chart data that triggered the tooltip.
             */
            data: T;
            /**
             * An array of tooltip payloads, each containing data for a specific series,
             * along with their own `payload` property that contains the same data as `data`.
             *
             * This is useful when working with the simplified charts, such as `AreaChart`, `BarChart`,
             * `PieChart`, etc., where series construction is handled internally.
             */
            payload: TooltipPayload[];
        }
    ]>;
    /**
     * A reference to the tooltip's outermost `<div>` tag.
     *
     * @bindable
     */
    rootRef?: HTMLElement;
    /**
     * Props to pass to the underlying elements rendered
     * by the Tooltip component
     */
    props?: {
        /**
         * Props to pass to the root tooltip element
         */
        root?: HTMLAttributes<HTMLElement>;
        /**
         * Props to pass to the tooltip container element
         */
        container?: HTMLAttributes<HTMLElement>;
        /**
         * Props to pass to the tooltip content element
         */
        content?: HTMLAttributes<HTMLElement>;
    };
    /**
     * Optionally pass the chart's context to the tooltip to get
     * type inference for the data.
     */
    context?: ChartContextValue<T, any, any>;
};
export type TooltipProps<T = any> = TooltipPropsWithoutHTML<T> & Without<HTMLAttributes<HTMLElement>, TooltipPropsWithoutHTML<T>>;
import { type ChartContextValue } from '../Chart.svelte';
import { type MotionProp } from '../../utils/motion.svelte.js';
import { type Snippet } from 'svelte';
declare class __sveltets_Render<T = any> {
    props(): TooltipProps<T>;
    events(): {};
    slots(): {};
    bindings(): "rootRef";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <T = any>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<T>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<T>['props']>, ReturnType<__sveltets_Render<T>['events']>, ReturnType<__sveltets_Render<T>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<T>['bindings']>;
    } & ReturnType<__sveltets_Render<T>['exports']>;
    <T = any>(internal: unknown, props: ReturnType<__sveltets_Render<T>['props']> & {}): ReturnType<__sveltets_Render<T>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
declare const Tooltip: $$IsomorphicComponent;
type Tooltip<T = any> = InstanceType<typeof Tooltip<T>>;
export default Tooltip;
