import type { HTMLAttributes } from 'svelte/elements';
import type { Without } from '../../utils/types.js';
type TooltipMode = 'bisect-x' | 'bisect-y' | 'band' | 'bisect-band' | 'bounds' | 'voronoi' | 'quadtree' | 'quadtree-x' | 'quadtree-y' | 'manual';
export type TooltipContextValue<T = any> = {
    x: number;
    y: number;
    data: T | null;
    payload: TooltipPayload[];
    show(e: PointerEvent, tooltipData?: any, payload?: TooltipPayload): void;
    hide(e?: PointerEvent): void;
    mode: TooltipMode;
    isHoveringTooltipArea: boolean;
    isHoveringTooltipContent: boolean;
};
export declare function getTooltipContext<T = any>(): TooltipContextValue<T>;
type TooltipContextPropsWithoutHTML<T = any> = {
    /**
     * The tooltip interaction mode
     * @default 'manual'
     */
    mode?: TooltipMode;
    /**
     * Method to find tooltip data
     * @default 'closest'
     */
    findTooltipData?: 'closest' | 'left' | 'right';
    /**
     * Similar to d3-selection's raise, re-insert the e.target as the last child of its parent, so
     * to be the top-most element
     * @default false
     */
    raiseTarget?: boolean;
    /**
     * Lock tooltip (keep open, do not update on mouse movement). Allows for clicking on tooltip
     * @default false
     */
    locked?: boolean;
    /**
     * quadtree search or voronoi clip radius
     * @default Infinity
     */
    radius?: number;
    /**
     * Enable debug view (show hit targets, etc)
     * @default false
     */
    debug?: boolean;
    /**
     * Click handler for the tooltip
     * @default () => {}
     */
    onclick?: (e: MouseEvent, { data }: {
        data: any;
    }) => any;
    /**
     * Exposed to allow binding in Chart
     * @default { x: 0, y: 0, data: null, show: showTooltip, hide: hideTooltip, mode }
     */
    tooltipContext?: TooltipContextValue<T>;
    /**
     * Delay in ms before hiding tooltip
     * @default 0
     */
    hideDelay?: number;
    /**
     * A reference to the tooltip container element.
     *
     * @bindable
     */
    ref?: HTMLElement;
    children?: Snippet<[{
        tooltipContext: TooltipContextValue<T>;
    }]>;
};
export type TooltipContextProps<T = any> = TooltipContextPropsWithoutHTML<T> & Without<HTMLAttributes<HTMLElement>, TooltipContextPropsWithoutHTML<T>>;
import type { Snippet } from 'svelte';
import { type TooltipPayload } from './tooltipMetaContext.js';
declare class __sveltets_Render<TData = any> {
    props(): TooltipContextProps<TData>;
    events(): {};
    slots(): {};
    bindings(): "ref" | "tooltipContext";
    exports(): {};
}
interface $$IsomorphicComponent {
    new <TData = any>(options: import('svelte').ComponentConstructorOptions<ReturnType<__sveltets_Render<TData>['props']>>): import('svelte').SvelteComponent<ReturnType<__sveltets_Render<TData>['props']>, ReturnType<__sveltets_Render<TData>['events']>, ReturnType<__sveltets_Render<TData>['slots']>> & {
        $$bindings?: ReturnType<__sveltets_Render<TData>['bindings']>;
    } & ReturnType<__sveltets_Render<TData>['exports']>;
    <TData = any>(internal: unknown, props: ReturnType<__sveltets_Render<TData>['props']> & {}): ReturnType<__sveltets_Render<TData>['exports']>;
    z_$$bindings?: ReturnType<__sveltets_Render<any>['bindings']>;
}
declare const TooltipContext: $$IsomorphicComponent;
type TooltipContext<TData = any> = InstanceType<typeof TooltipContext<TData>>;
export default TooltipContext;
