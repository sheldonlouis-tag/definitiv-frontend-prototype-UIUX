import { type Accessor } from '../../utils/common.js';
import type { SeriesData } from '../charts/index.js';
import type { ChartContextValue } from '../Chart.svelte';
import { type FormatType, type FormatConfig } from '@layerstack/utils';
export type SimplifiedChartType = 'bar' | 'area' | 'line' | 'pie' | 'scatter';
export type BarTooltipMetaContextValue = {
    type: 'bar';
    orientation: 'horizontal' | 'vertical';
    stackSeries: boolean;
    visibleSeries: SeriesData<any, any>[];
};
export type AreaTooltipMetaContextValue = {
    type: 'area';
    stackSeries: boolean;
    visibleSeries: SeriesData<any, any>[];
};
export type LineTooltipMetaContextValue = {
    type: 'line';
    visibleSeries: SeriesData<any, any>[];
};
export type PieTooltipMetaContextValue = {
    type: 'pie';
    visibleSeries: SeriesData<any, any>[];
    key: Accessor<any>;
    label: Accessor<any>;
    value: Accessor<any>;
    color: Accessor<any>;
};
export type ArcTooltipMetaContextValue = {
    type: 'arc';
    visibleSeries: SeriesData<any, any>[];
    key: Accessor<any>;
    label: Accessor<any>;
    value: Accessor<any>;
    color: Accessor<any>;
};
export type ScatterTooltipMetaContextValue = {
    type: 'scatter';
    visibleSeries: SeriesData<any, any>[];
};
export type TooltipMetaContextValue = BarTooltipMetaContextValue | AreaTooltipMetaContextValue | LineTooltipMetaContextValue | PieTooltipMetaContextValue | ScatterTooltipMetaContextValue | ArcTooltipMetaContextValue;
export type TooltipPayload = {
    color?: string;
    name?: string;
    key: string;
    label?: string;
    value?: any;
    keyAccessor?: Accessor<any>;
    valueAccessor?: Accessor<any>;
    labelAccessor?: Accessor<any>;
    colorAccessor?: Accessor<any>;
    chartType?: SimplifiedChartType;
    payload: any;
    rawSeriesData?: SeriesData<any, any>;
    formatter?: FormatType | FormatConfig;
};
type BasePayloadHandlerProps = {
    ctx: ChartContextValue;
    data: any;
};
export declare function handleScatterTooltipPayload({ ctx, data, metaCtx, }: BasePayloadHandlerProps & {
    metaCtx: ScatterTooltipMetaContextValue;
}): TooltipPayload[];
/**
 * Retrieves the current tooltip meta context value, or null if not set.
 */
export declare function getTooltipMetaContext(): TooltipMetaContextValue | null;
/**
 * Sets the tooltip meta context value, used to provide additional payload data to the tooltip.
 * This is typically set by the various simplified chart components, such as BarChart, AreaChart,
 * etc.
 */
export declare function setTooltipMetaContext(v: TooltipMetaContextValue | null): TooltipMetaContextValue | null;
export declare function getTooltipPayload({ ctx, tooltipData, metaCtx, }: {
    ctx: ChartContextValue;
    tooltipData: any;
    metaCtx: TooltipMetaContextValue | null;
}): TooltipPayload[];
export {};
