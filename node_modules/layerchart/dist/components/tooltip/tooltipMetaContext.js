// Additional meta data that can be set by the various simplified chart components
// to provide additional payload data to the tooltip for ease of composition.
import { accessor, findRelatedData } from '../../utils/common.js';
import { asAny } from '../../utils/types.js';
import { format } from '@layerstack/utils';
import { Context } from 'runed';
function handleBarTooltipPayload({ ctx, data, metaCtx, }) {
    const seriesItems = metaCtx.stackSeries
        ? [...metaCtx.visibleSeries].reverse()
        : metaCtx.visibleSeries;
    const payload = seriesItems.map((s) => {
        const seriesTooltipData = s.data ? findRelatedData(s.data, data, ctx.x) : data;
        const valueAccessor = accessor(s.value ?? (s.data ? ctx.y : s.key));
        const label = metaCtx.orientation === 'vertical' ? ctx.x(data) : ctx.y(data);
        const name = s.label ?? (s.key !== 'default' ? s.key : 'value');
        const value = seriesTooltipData ? valueAccessor(seriesTooltipData) : undefined;
        const color = s.color ?? ctx.cScale?.(ctx.c(data));
        return {
            ...s.data,
            chartType: 'bar',
            color,
            label,
            name,
            value,
            valueAccessor,
            key: s.key,
            payload: data,
            rawSeriesData: s,
            formatter: format,
        };
    });
    return payload;
}
function handleAreaTooltipPayload({ ctx, data, metaCtx, }) {
    const seriesItems = metaCtx.stackSeries
        ? [...metaCtx.visibleSeries].reverse()
        : metaCtx.visibleSeries;
    const payload = seriesItems.map((s) => {
        const seriesTooltipData = s.data ? findRelatedData(s.data, data, ctx.x) : data;
        const valueAccessor = accessor(s.value ?? (s.data ? asAny(ctx.y) : s.key));
        const label = ctx.x(data);
        const name = s.label ?? (s.key !== 'default' ? s.key : 'value');
        const value = seriesTooltipData ? valueAccessor(seriesTooltipData) : undefined;
        const color = s.color ?? ctx.cScale?.(ctx.c(data));
        return {
            ...s.data,
            chartType: 'area',
            color,
            label,
            name,
            value,
            valueAccessor,
            key: s.key,
            payload: data,
            rawSeriesData: s,
            formatter: format,
        };
    });
    return payload;
}
function handleLineTooltipPayload({ ctx, data, metaCtx, }) {
    return metaCtx.visibleSeries.map((s) => {
        const seriesTooltipData = s.data ? findRelatedData(s.data, data, ctx.x) : data;
        const label = ctx.x(data);
        const valueAccessor = accessor(s.value ?? (s.data ? asAny(ctx.y) : s.key));
        const name = s.label ?? (s.key !== 'default' ? s.key : 'value');
        const value = seriesTooltipData ? valueAccessor(seriesTooltipData) : undefined;
        const color = s.color ?? ctx.cScale?.(ctx.c(data));
        return {
            ...s.data,
            chartType: 'line',
            color,
            label,
            name,
            value,
            valueAccessor,
            key: s.key,
            payload: data,
            rawSeriesData: s,
            formatter: format,
        };
    });
}
function handlePieOrArcTooltipPayload({ ctx, data, metaCtx, }) {
    const keyAccessor = accessor(metaCtx.key);
    const labelAccessor = accessor(metaCtx.label);
    const valueAccessor = accessor(metaCtx.value);
    const colorAccessor = accessor(metaCtx.color);
    return [
        {
            key: keyAccessor(data),
            label: labelAccessor(data) || keyAccessor(data),
            value: valueAccessor(data),
            color: colorAccessor(data) ?? ctx.cScale?.(ctx.c(data)),
            payload: data,
            chartType: 'pie',
            labelAccessor,
            keyAccessor,
            valueAccessor,
            colorAccessor,
        },
    ];
}
export function handleScatterTooltipPayload({ ctx, data, metaCtx, }) {
    // TODO: implement scatter tooltip payload handling
    return [{ payload: data, key: '' }];
}
const _TooltipMetaContext = new Context('TooltipMetaContext');
/**
 * Retrieves the current tooltip meta context value, or null if not set.
 */
export function getTooltipMetaContext() {
    return _TooltipMetaContext.getOr(null);
}
/**
 * Sets the tooltip meta context value, used to provide additional payload data to the tooltip.
 * This is typically set by the various simplified chart components, such as BarChart, AreaChart,
 * etc.
 */
export function setTooltipMetaContext(v) {
    return _TooltipMetaContext.set(v);
}
export function getTooltipPayload({ ctx, tooltipData, metaCtx, }) {
    if (!metaCtx)
        return [{ payload: tooltipData, key: '' }];
    switch (metaCtx.type) {
        case 'bar':
            return handleBarTooltipPayload({ ctx, data: tooltipData, metaCtx });
        case 'area':
            return handleAreaTooltipPayload({ ctx, data: tooltipData, metaCtx });
        case 'line':
            return handleLineTooltipPayload({ ctx, data: tooltipData, metaCtx });
        case 'pie':
        case 'arc':
            return handlePieOrArcTooltipPayload({ ctx, data: tooltipData, metaCtx });
        case 'scatter':
            return handleScatterTooltipPayload({ ctx, data: tooltipData, metaCtx });
    }
}
