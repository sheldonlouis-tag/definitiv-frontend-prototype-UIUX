import dagre from '@dagrejs/dagre';
import { type DagreProps } from '../../components/Dagre.svelte';
/**
 * Build `dagre.graphlib.Graph` instance from DagreGraphData (`{ nodes, edges }`)
 */
export declare function dagreGraph(data: DagreProps['data'], { nodes, nodeId, edges, directed, multigraph, compound, ranker, direction, align, rankSeparation, nodeSeparation, edgeSeparation, nodeWidth, nodeHeight, edgeLabelWidth, edgeLabelHeight, edgeLabelPosition, edgeLabelOffset, filterNodes, }?: {
    nodes?: DagreProps['nodes'];
    nodeId?: DagreProps['nodeId'];
    edges?: DagreProps['edges'];
    directed?: DagreProps['directed'];
    multigraph?: DagreProps['multigraph'];
    compound?: DagreProps['compound'];
    ranker?: DagreProps['ranker'];
    direction?: DagreProps['direction'];
    align?: DagreProps['align'];
    rankSeparation?: DagreProps['rankSeparation'];
    nodeSeparation?: DagreProps['nodeSeparation'];
    edgeSeparation?: DagreProps['edgeSeparation'];
    nodeWidth?: DagreProps['nodeWidth'];
    nodeHeight?: DagreProps['nodeHeight'];
    edgeLabelWidth?: DagreProps['edgeLabelWidth'];
    edgeLabelHeight?: DagreProps['edgeLabelHeight'];
    edgeLabelPosition?: DagreProps['edgeLabelPosition'];
    edgeLabelOffset?: DagreProps['edgeLabelOffset'];
    filterNodes?: DagreProps['filterNodes'];
}): dagre.graphlib.Graph<{}>;
/**
 * Get all upstream predecessors for dagre nodeId
 */
export declare function dagreAncestors(graph: dagre.graphlib.Graph, nodeId: string, maxDepth?: number, currentDepth?: number): dagre.Node[];
/**
 * Get all downstream descendants for dagre nodeId
 */
export declare function dagreDescendants(graph: dagre.graphlib.Graph, nodeId: string, maxDepth?: number, currentDepth?: number): dagre.Node[];
