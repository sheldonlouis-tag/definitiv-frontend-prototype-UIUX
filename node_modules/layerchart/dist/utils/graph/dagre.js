import dagre from '@dagrejs/dagre';
import { Align, EdgeLabelPosition, RankDir } from '../../components/Dagre.svelte';
/**
 * Build `dagre.graphlib.Graph` instance from DagreGraphData (`{ nodes, edges }`)
 */
export function dagreGraph(data, { nodes = (d) => d.nodes, nodeId = (d) => d.id, edges = (d) => d.edges, directed = true, multigraph = false, compound = false, ranker = 'network-simplex', direction = 'top-bottom', align, rankSeparation = 50, nodeSeparation = 50, edgeSeparation = 10, nodeWidth = 100, nodeHeight = 50, edgeLabelWidth = 100, edgeLabelHeight = 20, edgeLabelPosition = 'center', edgeLabelOffset = 10, filterNodes = () => true, } = {}) {
    let g = new dagre.graphlib.Graph({ directed, multigraph, compound });
    g.setGraph({
        ranker: ranker,
        rankdir: RankDir[direction],
        align: align ? Align[align] : undefined,
        ranksep: rankSeparation,
        nodesep: nodeSeparation,
        edgesep: edgeSeparation,
    });
    g.setDefaultEdgeLabel(() => ({}));
    const dataNodes = nodes(data);
    for (const n of dataNodes) {
        const id = nodeId(n);
        g.setNode(nodeId(n), {
            id,
            label: typeof n.label === 'string' ? n.label : id,
            width: nodeWidth,
            height: nodeHeight,
            ...(typeof n.label === 'object' ? n.label : null),
        });
        if (n.parent) {
            g.setParent(id, n.parent);
        }
    }
    const nodeEdges = edges(data);
    for (const e of nodeEdges) {
        const { source, target, label, ...rest } = e;
        g.setEdge(e.source, e.target, label
            ? {
                label: label,
                labelpos: EdgeLabelPosition[edgeLabelPosition],
                labeloffset: edgeLabelOffset,
                width: edgeLabelWidth,
                height: edgeLabelHeight,
                ...rest,
            }
            : {});
    }
    if (filterNodes) {
        g = g.filterNodes((nodeId) => filterNodes(nodeId, g));
    }
    dagre.layout(g);
    return g;
}
/**
 * Get all upstream predecessors for dagre nodeId
 */
export function dagreAncestors(graph, nodeId, maxDepth = Infinity, currentDepth = 0) {
    if (currentDepth === maxDepth) {
        return [];
    }
    const predecessors = graph.predecessors(nodeId) ?? [];
    return [
        ...predecessors,
        // @ts-expect-error: Types from dagre appear incorrect
        ...predecessors.flatMap((pId) => dagreAncestors(graph, pId, maxDepth, currentDepth + 1)),
    ];
}
/**
 * Get all downstream descendants for dagre nodeId
 */
export function dagreDescendants(graph, nodeId, maxDepth = Infinity, currentDepth = 0) {
    if (currentDepth === maxDepth) {
        return [];
    }
    const predecessors = graph.successors(nodeId) ?? [];
    return [
        ...predecessors,
        // @ts-expect-error: Types from dagre appear incorrect
        ...predecessors.flatMap((pId) => dagreDescendants(graph, pId, maxDepth, currentDepth + 1)),
    ];
}
