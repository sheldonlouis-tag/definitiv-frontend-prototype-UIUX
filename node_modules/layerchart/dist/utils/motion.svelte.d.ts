import { Spring, Tween } from 'svelte/motion';
/**
 * Spring motion configuration options
 */
export type SpringOptions<T = any> = ConstructorParameters<typeof Spring<T>>[1];
export type SpringSetOptions = Parameters<(typeof Spring)['prototype']['set']>[1];
/**
 * Tween motion configuration options
 */
export type TweenOptions<T = any> = ConstructorParameters<typeof Tween<T>>[1];
export type TweenSetOptions = Parameters<(typeof Tween)['prototype']['set']>[1];
/**
 * MotionNone is a non-animating state container that provides a compatible
 * interface with Spring and Tween, but updates values immediately without animation.
 * This gives us consistent state management whether animations are enabled or not.
 */
export type NoneOptions<T = any> = ConstructorParameters<typeof MotionNone<T>>[1];
export type NoneSetOptions = Parameters<(typeof MotionNone)['prototype']['set']>[1];
/**
 * Configuration object for Spring animations with additional type discriminator
 */
export type MotionSpringOption = ({
    type: 'spring';
} & SpringOptions) | 'spring';
/**
 * Configuration object for Tween animations with additional type discriminator
 */
export type MotionTweenOption = ({
    type: 'tween';
} & TweenOptions) | 'tween';
/**
 * Configuration object for non-animating state with additional type discriminator
 */
export type MotionNoneOption = {
    type: 'none';
} | 'none';
/**
 * Union type of all possible motion configuration options
 */
export type MotionOptions = MotionSpringOption | MotionTweenOption | MotionNoneOption;
type IsDefault<K> = K extends string ? (string extends K ? true : false) : never;
/**
 * Motion config that can be either a direct motion config or
 * a map of property names to motion configs
 */
export type MotionProp<K extends string = string> = IsDefault<K> extends true ? MotionOptions : MotionOptions | {
    [prop in K]?: MotionOptions;
};
/**
 * Extended Spring class that adds a type discriminator to help with
 * type narrowing in our motion system
 */
declare class MotionSpring<T = any> extends Spring<T> {
    type: "spring";
    constructor(value: T, options?: SpringOptions<T>);
}
/**
 * Extended Tween class that adds a type discriminator to help with
 * type narrowing in our motion system
 */
declare class MotionTween<T = any> extends Tween<T> {
    type: "tween";
    constructor(value: T, options?: TweenOptions<T>);
}
/**
 * MotionNone is a state container that provides the same interface as
 * Spring and Tween but without any animation logic. Values update immediately.
 *
 * This allows components to use a consistent API regardless of whether
 * animations are enabled or not.
 */
declare class MotionNone<T = any> {
    #private;
    type: "none";
    constructor(value: T, _options?: any);
    /**
     * Updates the value immediately and returns a resolved promise
     * to maintain API compatibility with animated motion classes
     */
    set(value: T, _options?: any): Promise<void>;
    get current(): T;
    get target(): T;
    set target(v: T);
}
export type ResolvedTween = {
    type: 'tween';
    options: TweenOptions;
};
export type ResolvedSpring = {
    type: 'spring';
    options: SpringOptions;
};
export type ResolvedNone = {
    type: 'none';
    options: {};
};
/**
 * Union type of all possible resolved motion configurations
 */
export type ResolvedMotion = ResolvedSpring | ResolvedTween | ResolvedNone;
/**
 * Internal options for motion state configuration
 */
type InternalMotionOptions = {
    /**
     * When true, the motion state will only update when explicitly set
     * rather than automatically tracking changes to the source value
     */
    controlled?: boolean;
};
export declare function createMotion<T = any>(initialValue: T, getValue: () => T, motionProp: MotionOptions | undefined, options?: InternalMotionOptions): MotionSpring<T> | MotionTween<any> | MotionNone<T>;
/**
 * Creates a controlled motion state that only updates when explicitly set
 * rather than automatically tracking changes to the source value
 */
export declare function createControlledMotion<T = any>(initialValue: T, motionProp: MotionOptions | undefined): MotionTween<any> | MotionSpring<T> | MotionNone<T>;
/**
 * Creates a state tracker for animation completion
 * This helps track whether any motion transitions are currently in progress
 *
 * @returns an object with methods to handle animation promises and check current status
 */
export declare function createMotionTracker(): {
    handle: (promise: Promise<void> | void) => void;
    readonly current: boolean;
};
/**
 * Extracts tween configuration from a motion prop
 * @returns Resolved tween configuration or undefined if not a tween
 */
export declare function extractTweenConfig<T extends string = never>(prop?: MotionProp<T> | undefined): ResolvedTween | undefined;
/**
 * Parses and normalizes a motion configuration into a standard format
 *
 * @param config - The motion configuration to parse
 * @param propertyKey - Optional property key when config is a map of properties
 * @returns A standardized motion configuration object
 */
export declare function parseMotionProp<T extends string = never>(config: MotionProp<T> | undefined | ResolvedMotion, accessor?: string): ResolvedMotion;
export {};
