import type { ChartContextValue } from '../components/Chart.svelte';
import { type Accessor } from './common.js';
/**
 * A set of inset distances, applied to a rectangle to shrink or expand
 * the area  represented by that rectangle.
 */
export type Insets = {
    /** Applies an inset all sides of a rectangle: `left`, `right`, `bottom`, and `top` */
    all?: number;
    /** Applies an inset all horizontal sides of a rectangle: `left`, and `right`, overriding `all` */
    x?: number;
    /** Applies an inset all vertical sides of a rectangle: `top`, and `bottom`, overriding `all` */
    y?: number;
    /** Applies an inset the left side of a rectangle, overriding `x` */
    left?: number;
    /** Applies an inset the right side of a rectangle, overriding `x` */
    right?: number;
    /** Applies an inset the top side of a rectangle, overriding `y` */
    top?: number;
    /** Applies an inset the bottom side of a rectangle, overriding `y` */
    bottom?: number;
};
type DimensionGetterOptions = {
    /** Override `x` accessor from context */
    x?: Accessor;
    /** Override `y` accessor from context */
    y?: Accessor;
    /** Override `x1` accessor from context */
    x1?: Accessor;
    /** Override `y1` accessor from context */
    y1?: Accessor;
    insets?: Insets;
};
export declare function createDimensionGetter<TData>(ctx: ChartContextValue<TData>, getOptions?: () => DimensionGetterOptions): (item: TData) => {
    x: any;
    y: any;
    width: number;
    height: number;
};
/**
 * If value is an array, returns first item, else returns original value
 * Useful when x/y getters for band scale are an array (such as for histograms)
 */
export declare function firstValue(value: number | number[]): number;
export {};
