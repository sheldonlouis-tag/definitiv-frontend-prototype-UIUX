import { type ZodErrorMap, type ZodType, type ZodTypeDef } from 'zod';
import type { JSONSchema7 } from 'json-schema';
import { type AdapterOptions, type ValidationAdapter, type Infer, type InferIn, type ClientValidationAdapter } from './adapters.js';
import { zodToJsonSchema as zodToJson, type Options } from 'zod-to-json-schema';
export declare const zodToJSONSchema: (...params: Parameters<typeof zodToJson>) => JSONSchema7;
export type ZodObjectType = ZodType<Record<string, unknown>, ZodTypeDef, Record<string, unknown> | undefined>;
export type ZodObjectTypes = ZodObjectType;
export type ZodValidation<T extends ZodObjectTypes = ZodObjectTypes> = T;
export declare const zod: <T extends ZodValidation>(schema: T, options?: (AdapterOptions<Infer<T, "zod">> & {
    errorMap?: ZodErrorMap;
    config?: Partial<Options>;
}) | undefined) => ValidationAdapter<Infer<T, "zod">, InferIn<T, "zod">>;
export declare const zodClient: <T extends ZodValidation>(schema: T, options?: {
    errorMap?: ZodErrorMap;
} | undefined) => ClientValidationAdapter<Infer<T, "zod">, InferIn<T, "zod">>;
