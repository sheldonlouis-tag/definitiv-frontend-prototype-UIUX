import { type $ZodObject, type $ZodErrorMap, type $ZodDiscriminatedUnion, toJSONSchema } from 'zod/v4/core';
import type { JSONSchema7 } from 'json-schema';
import { type AdapterOptions, type ValidationAdapter, type Infer, type InferIn, type ClientValidationAdapter } from './adapters.js';
type Options = NonNullable<Parameters<typeof toJSONSchema>[1]>;
export type ZodValidationSchema = $ZodObject | $ZodDiscriminatedUnion<($ZodObject | $ZodDiscriminatedUnion<($ZodObject | $ZodDiscriminatedUnion<($ZodObject | $ZodDiscriminatedUnion<($ZodObject | $ZodDiscriminatedUnion<$ZodObject[]>)[]>)[]>)[]>)[]>;
export declare const zodToJSONSchema: <S extends ZodValidationSchema>(schema: S, options?: Options) => JSONSchema7;
export declare const zod: <T extends ZodValidationSchema>(schema: T, options?: (AdapterOptions<Infer<T, "zod4">> & {
    error?: $ZodErrorMap;
    config?: Options;
}) | undefined) => ValidationAdapter<Infer<T, "zod4">, InferIn<T, "zod4">>;
export declare const zodClient: <T extends ZodValidationSchema>(schema: T, options?: {
    error?: $ZodErrorMap;
} | undefined) => ClientValidationAdapter<Infer<T, "zod4">, InferIn<T, "zod4">>;
export {};
